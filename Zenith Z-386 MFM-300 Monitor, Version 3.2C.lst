seg000:0000 ;
seg000:0000 ; +-------------------------------------------------------------------------+
seg000:0000 ; |	  This file has	been generated by The Interactive Disassembler (IDA)	|
seg000:0000 ; |		  Copyright (c)	2011 Hex-Rays, <support@hex-rays.com>		|
seg000:0000 ; |			     License info: B3-432E-F558-21			|
seg000:0000 ; |				    Ilfak Guilfanov				|
seg000:0000 ; +-------------------------------------------------------------------------+
seg000:0000 ;
seg000:0000 ; Input MD5	  : 6DCDCB56206B27FBE882AFA9F541CC7B
seg000:0000 ; Input CRC32 : 69DEB9BC
seg000:0000
seg000:0000 ; File Name	  : D:\_sciagane\zenith-386sx-bios-v3-2c-65e666030d8b2767085979.bin
seg000:0000 ; Format	  : Binary file
seg000:0000 ; Base Address: 0000h Range: 0000h - 10000h	Loaded length: 10000h
seg000:0000
seg000:0000		    .686p
seg000:0000		    .mmx
seg000:0000		    .model small
seg000:0000
seg000:0000 ; ===========================================================================
seg000:0000
seg000:0000 ; Segment type: Pure code
seg000:0000 seg000	    segment byte public	'CODE' use16
seg000:0000		    assume cs:seg000
seg000:0000		    assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
seg000:0000
seg000:0000 ; =============== S	U B R O	U T I N	E =======================================
seg000:0000
seg000:0000
seg000:0000 sub_0	    proc far		    ; CODE XREF: sub_0+DD7Bj
seg000:0000					    ; DATA XREF: sub_0:ram_test_detectw ...
seg000:0000
seg000:0000 ; FUNCTION CHUNK AT	seg000:DD60 SIZE 00000246 BYTES
seg000:0000
seg000:0000		    mov	    al,	36h
seg000:0002
seg000:0002 loc_2:				    ; DATA XREF: sub_0+164w
seg000:0002					    ; Exec_rom+1Co ...
seg000:0002		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:0004
seg000:0004 loc_4:				    ; DATA XREF: something_Vsynced+CFr
seg000:0004					    ; sub_4651+4r ...
seg000:0004		    out	    0FBh, al	    ; AT 80287 data.
seg000:0004					    ; 286 sends	opcodes	& operands and receives	results.
seg000:0006
seg000:0006 loc_6:				    ; DATA XREF: load_some_table-80r
seg000:0006					    ; sub_4A70+ACr ...
seg000:0006		    mov	    ax,	0FFF0h
seg000:0009
seg000:0009 loc_9:				    ; DATA XREF: sub_4FC6+44w
seg000:0009					    ; sub_4FC6+79r
seg000:0009		    mov	    ds,	ax
seg000:000B		    assume ds:nothing
seg000:000B
seg000:000B loc_B:				    ; DATA XREF: sub_4459+1Br
seg000:000B					    ; something_Vsynced+Br ...
seg000:000B		    mov	    cx,	8
seg000:000E
seg000:000E loc_E:				    ; DATA XREF: set_80x25+1r
seg000:000E					    ; set_80x25+5w ...
seg000:000E		    mov	    al,	ds:0
seg000:0011
seg000:0011 loc_11:				    ; CODE XREF: sub_0:loc_14j
seg000:0011					    ; DATA XREF: ram_cmos_same_size?+7w ...
seg000:0011		    mov	    ds:0, al
seg000:0014
seg000:0014 loc_14:				    ; DATA XREF: sub_7471+1C4r
seg000:0014					    ; ram_cmos_same_size?+1Ew ...
seg000:0014		    loop    loc_11
seg000:0016
seg000:0016 loc_16:				    ; DATA XREF: sub_2253:loc_2271r
seg000:0016					    ; load_something?r	...
seg000:0016		    mov	    al,	ds:1
seg000:0019
seg000:0019 loc_19:				    ; DATA XREF: sub_76DA+85r
seg000:0019					    ; sub_76DA+8Dr ...
seg000:0019		    mov	    ah,	ds:1
seg000:001D
seg000:001D loc_1D:				    ; DATA XREF: sub_5093+3w
seg000:001D		    xor	    al,	ah
seg000:001F		    test    al,	1
seg000:0021		    jnz	    short loc_2E
seg000:0023		    mov	    ax,	0F000h
seg000:0026
seg000:0026 loc_26:
seg000:0026		    mov	    ds,	ax
seg000:0028		    assume ds:nothing
seg000:0028
seg000:0028 loc_28:				    ; DATA XREF: sub_1CA0+Ar
seg000:0028		    mov	    si,	offset aFatalMemoryCon ; "Fatal	Memory Controller Error	+++"
seg000:002B
seg000:002B loc_2B:				    ; DATA XREF: sub_4FC6+87w
seg000:002B					    ; ret_ah0+2Ew
seg000:002B		    jmp	    print_error_nr
seg000:002E ; ---------------------------------------------------------------------------
seg000:002E
seg000:002E loc_2E:				    ; CODE XREF: sub_0+21j
seg000:002E					    ; DATA XREF: sub_4B3E+51r ...
seg000:002E		    mov	    al,	37h
seg000:0030
seg000:0030 loc_30:				    ; DATA XREF: sub_4B3E+3Fr
seg000:0030					    ; sub_4CB1+23r ...
seg000:0030		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:0032		    sub	    al,	al
seg000:0034
seg000:0034 loc_34:				    ; DATA XREF: ColrWarm_Boot+E5w
seg000:0034		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:0034					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:0034					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:0034					    ; 3: 1=read	high switches
seg000:0034					    ; 4: 0=enable RAM parity checking
seg000:0034					    ; 5: 0=enable I/O channel check
seg000:0034					    ; 6: 0=hold	keyboard clock low
seg000:0034					    ; 7: 0=enable kbrd
seg000:0036
seg000:0036 loc_36:
seg000:0036		    mov	    bl,	0
seg000:0038
seg000:0038 loc_38:				    ; DATA XREF: ColrWarm_Boot+3CBw
seg000:0038					    ; sub_55F5+17r ...
seg000:0038		    mov	    si,	offset regs_7273_1
seg000:003B
seg000:003B loc_3B:				    ; DATA XREF: sub_4A70+32r
seg000:003B					    ; sub_4B3E+76r ...
seg000:003B		    mov	    bp,	offset loc_41
seg000:003E
seg000:003E loc_3E:				    ; DATA XREF: FDD_?+16w
seg000:003E					    ; FDD_?_7+Fw ...
seg000:003E		    jmp	    init72h73h
seg000:0041 ; ---------------------------------------------------------------------------
seg000:0041
seg000:0041 loc_41:				    ; DATA XREF: sub_0:loc_3Bo
seg000:0041					    ; store_41h_1+2w ...
seg000:0041		    sub	    bh,	bh
seg000:0043
seg000:0043 loc_43:				    ; DATA XREF: sub_2AF4+52w
seg000:0043					    ; sub_2CA8+1Fw ...
seg000:0043		    mov	    si,	offset init_ram_table
seg000:0046
seg000:0046 loc_46:				    ; DATA XREF: sub_2AF4+69w
seg000:0046					    ; sub_2CA8+2Ew ...
seg000:0046		    lods    word ptr cs:[si]
seg000:0048
seg000:0048 loc_48:				    ; DATA XREF: sub_3030+1r
seg000:0048					    ; ide_?+3w	...
seg000:0048		    mov	    cx,	ax
seg000:004A
seg000:004A init_ram_loop:			    ; CODE XREF: sub_0:loc_52j
seg000:004A					    ; DATA XREF: FPU_error_0:loc_439Er	...
seg000:004A		    lods    byte ptr cs:[si]
seg000:004C
seg000:004C loc_4C:				    ; DATA XREF: fdd_?+2r
seg000:004C					    ; fdd_?+Fr	...
seg000:004C		    mov	    bl,	al
seg000:004E
seg000:004E loc_4E:				    ; DATA XREF: sub_4A70+39r
seg000:004E					    ; sub_4B3E+61w ...
seg000:004E		    lods    byte ptr cs:[si]
seg000:0050
seg000:0050 loc_50:				    ; DATA XREF: init_lpt_ser+8Fr
seg000:0050					    ; sub_4459+Cr ...
seg000:0050		    mov	    [bx], al
seg000:0052
seg000:0052 loc_52:				    ; DATA XREF: FPU_init_?+33r
seg000:0052					    ; FDD_init_detect?+15w ...
seg000:0052		    loop    init_ram_loop
seg000:0054
seg000:0054 loc_54:				    ; DATA XREF: ColrWarm_Boot+4D4r
seg000:0054					    ; ColrWarm_Boot+4E3r ...
seg000:0054		    mov	    byte ptr ds:50h, 0
seg000:0059
seg000:0059 loc_59:				    ; DATA XREF: ColrWarm_Boot+532w
seg000:0059					    ; ColrWarm_Boot:loc_15E1w ...
seg000:0059		    mov	    bl,	4
seg000:005B		    mov	    si,	offset regs_7273_2 ; DATA XREF:	init_lpt_ser+4Dr
seg000:005B					    ; LPT0_out+7r
seg000:005E
seg000:005E loc_5E:				    ; DATA XREF: ColrWarm_Boot+587r
seg000:005E					    ; sub_4F2E+4Aw ...
seg000:005E		    mov	    bp,	offset Timer_init
seg000:0061
seg000:0061 loc_61:				    ; DATA XREF: tab_size_?+4r
seg000:0061					    ; something_Vsyncedr ...
seg000:0061		    jmp	    init72h73h
seg000:0064 ; ---------------------------------------------------------------------------
seg000:0064
seg000:0064 Timer_init:				    ; DATA XREF: sub_0:loc_5Eo
seg000:0064					    ; sub_15ED+8r ...
seg000:0064		    mov	    al,	54h
seg000:0066
seg000:0066 loc_66:				    ; DATA XREF: sub_4F2E+57r
seg000:0066					    ; sub_4FC6+66w ...
seg000:0066		    out	    43h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:0068
seg000:0068 loc_68:				    ; DATA XREF: sub_D3AF+Ar
seg000:0068					    ; sub_D3AF+41r ...
seg000:0068		    mov	    al,	12h
seg000:006A
seg000:006A loc_6A:				    ; DATA XREF: int_ack?+34w
seg000:006A					    ; int_ack?:loc_1C4Cw
seg000:006A		    out	    41h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:006C
seg000:006C loc_6C:				    ; DATA XREF: timer_int_test+4w
seg000:006C					    ; timer_int_test+1Er ...
seg000:006C		    mov	    al,	38h
seg000:006E
seg000:006E loc_6E:				    ; DATA XREF: timer_int_test+Aw
seg000:006E					    ; duble_fault_0+Fw	...
seg000:006E		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:0070
seg000:0070 loc_70:				    ; DATA XREF: timer_int_test+10w
seg000:0070					    ; duble_fault_0+22w ...
seg000:0070		    mov	    bp,	0
seg000:0073
seg000:0073 loc_73:				    ; DATA XREF: sub_2AF4+107r
seg000:0073					    ; sub_2AF4+10Bw ...
seg000:0073		    mov	    cx,	1Eh
seg000:0076
seg000:0076 loc_76:				    ; DATA XREF: sub_2AF4+9Fr
seg000:0076					    ; sub_2AF4+ADw ...
seg000:0076		    sub	    bx,	bx
seg000:0078
seg000:0078 loc_78:				    ; DATA XREF: sub_361C+89w
seg000:0078		    mov	    ah,	90h
seg000:007A
seg000:007A cmos_sum_loop:			    ; CODE XREF: sub_0:loc_89j
seg000:007A					    ; DATA XREF: sub_361C+8Dw
seg000:007A		    mov	    al,	ah
seg000:007C		    out	    70h, al	    ; CMOS Memory:
seg000:007C					    ;
seg000:007E		    jmp	    short $+2
seg000:0080
seg000:0080 loc_80:				    ; DATA XREF: some_compare?+Dr
seg000:0080					    ; sub_7B2D+9r ...
seg000:0080		    in	    al,	71h	    ; CMOS Memory
seg000:0082
seg000:0082 loc_82:				    ; DATA XREF: some_compare?+6r
seg000:0082					    ; sub_7B44+1Ew ...
seg000:0082		    add	    bl,	al
seg000:0084		    adc	    bh,	0
seg000:0087		    inc	    ah
seg000:0089
seg000:0089 loc_89:				    ; DATA XREF: ColrWarm_Boot+52D1w
seg000:0089					    ; cmd_execute+29w ...
seg000:0089		    loop    cmos_sum_loop
seg000:008B
seg000:008B loc_8B:				    ; DATA XREF: ColrWarm_Boot+4A5w
seg000:008B					    ; FDD_?_6+6r ...
seg000:008B		    test    bx,	bx
seg000:008D
seg000:008D loc_8D:				    ; DATA XREF: ide_?_14+39w
seg000:008D					    ; sub_3183:loc_31A7w ...
seg000:008D		    jz	    short cmos_sum_bad ; default LPT port 378h
seg000:008F
seg000:008F loc_8F:				    ; DATA XREF: sub_41C6+7r
seg000:008F					    ; sub_4200+9r ...
seg000:008F		    mov	    al,	ah
seg000:0091
seg000:0091 loc_91:				    ; DATA XREF: cmd_trace-321r
seg000:0091					    ; sub_6BD0+55w ...
seg000:0091		    out	    70h, al	    ; CMOS Memory:
seg000:0091					    ; used by real-time	clock
seg000:0093
seg000:0093 loc_93:				    ; DATA XREF: cmd_trace-31Cr
seg000:0093					    ; sub_6BD0+5Aw ...
seg000:0093		    jmp	    short $+2
seg000:0095
seg000:0095 loc_95:				    ; DATA XREF: cmd_trace-317r
seg000:0095					    ; sub_6BD0+5Fw ...
seg000:0095		    in	    al,	71h	    ; CMOS Memory
seg000:0097
seg000:0097 loc_97:				    ; DATA XREF: Keyboard_data+Dw
seg000:0097					    ; Keyboard_data:loc_7258r ...
seg000:0097		    xchg    al,	ah
seg000:0099
seg000:0099 loc_99:				    ; DATA XREF: cmd_trace-389r
seg000:0099					    ; cmd_trace-34Er ...
seg000:0099		    inc	    al
seg000:009B
seg000:009B loc_9B:				    ; DATA XREF: sub_60E2+23w
seg000:009B					    ; ColrWarm_Boot+52F7w ...
seg000:009B		    out	    70h, al	    ; CMOS Memory:
seg000:009B					    ; used by real-time	clock
seg000:009D
seg000:009D loc_9D:				    ; DATA XREF: sub_60E2+29w
seg000:009D					    ; cmd_trace-2E0r ...
seg000:009D		    jmp	    short $+2
seg000:009F
seg000:009F loc_9F:				    ; DATA XREF: FDD_init_detect?+21w
seg000:009F					    ; FDD_init_detect?+86w ...
seg000:009F		    in	    al,	71h	    ; CMOS Memory
seg000:00A1
seg000:00A1 loc_A1:				    ; DATA XREF: cmd_trace-303r
seg000:00A1					    ; sub_6BD0+69w ...
seg000:00A1		    cmp	    ax,	bx
seg000:00A3
seg000:00A3 loc_A3:				    ; DATA XREF: ColrWarm_Boot+52FCw
seg000:00A3					    ; cmd_execute+21w ...
seg000:00A3		    jnz	    short cmos_sum_bad ; default LPT port 378h
seg000:00A5
seg000:00A5 loc_A5:				    ; DATA XREF: cmd_trace-3C4w
seg000:00A5					    ; cmd_trace-3BBr ...
seg000:00A5		    mov	    bp,	0FFFFh
seg000:00A8
seg000:00A8 cmos_sum_bad:			    ; CODE XREF: sub_0:loc_8Dj
seg000:00A8					    ; sub_0:loc_A3j
seg000:00A8					    ; DATA XREF: ...
seg000:00A8		    mov	    dl,	19h	    ; default LPT port 378h
seg000:00AA
seg000:00AA loc_AA:				    ; DATA XREF: cmd_trace-3CAw
seg000:00AA					    ; cmd_trace-398w ...
seg000:00AA		    cmp	    bp,	0
seg000:00AD
seg000:00AD loc_AD:				    ; DATA XREF: ColrWarm_Boot+52E7w
seg000:00AD					    ; cmd_disp_memory+26w
seg000:00AD		    jz	    short loc_B9
seg000:00AF		    mov	    al,	9Eh	    ; LPT port address index
seg000:00B1		    out	    70h, al	    ; CMOS Memory:
seg000:00B1					    ;
seg000:00B3		    jmp	    short $+2
seg000:00B5		    in	    al,	71h	    ; CMOS Memory
seg000:00B7
seg000:00B7 loc_B7:
seg000:00B7		    mov	    dl,	al
seg000:00B9
seg000:00B9 loc_B9:				    ; CODE XREF: sub_0:loc_ADj
seg000:00B9		    sub	    dh,	dh
seg000:00BB
seg000:00BB loc_BB:				    ; DATA XREF: duble_fault_0+5Cw
seg000:00BB					    ; duble_fault_0+74w ...
seg000:00BB		    mov	    byte ptr ds:9, 1
seg000:00C0		    mov	    si,	dx
seg000:00C2		    and	    si,	30h
seg000:00C5
seg000:00C5 loc_C5:				    ; DATA XREF: load_DSAX_compa+9r
seg000:00C5					    ; ColrWarm_Boot+29Cw ...
seg000:00C5		    jz	    short loc_E5
seg000:00C7
seg000:00C7 loc_C7:				    ; DATA XREF: some_compare?_0+21r
seg000:00C7					    ; get_key?+5r ...
seg000:00C7		    shr	    si,	3
seg000:00CA
seg000:00CA loc_CA:				    ; DATA XREF: sub_7B44+13w
seg000:00CA					    ; sub_7C15+14r ...
seg000:00CA		    mov	    ax,	cs:init_LPT_table[si]
seg000:00CF
seg000:00CF loc_CF:				    ; DATA XREF: ColrWarm_Boot+38Ew
seg000:00CF					    ; sub_5819+Bw ...
seg000:00CF		    mov	    ds:0Ah, ah
seg000:00D3
seg000:00D3 loc_D3:				    ; DATA XREF: sub_5819+1Dw
seg000:00D3					    ; sub_584B+17r
seg000:00D3		    sub	    ah,	ah
seg000:00D5
seg000:00D5 loc_D5:				    ; DATA XREF: sub_5819+18w
seg000:00D5					    ; sub_5819+2Cr ...
seg000:00D5		    shl	    ax,	4
seg000:00D8
seg000:00D8 loc_D8:
seg000:00D8		    shr	    al,	4
seg000:00DB		    mov	    ds:0Bh, ah
seg000:00DF		    mov	    ds:0Ch, al
seg000:00E2		    or	    dh,	1
seg000:00E5
seg000:00E5 loc_E5:				    ; CODE XREF: sub_0:loc_C5j
seg000:00E5		    mov	    byte ptr ds:11h, 2
seg000:00EA		    mov	    si,	dx
seg000:00EC		    and	    si,	3
seg000:00EF		    jz	    short loc_10E
seg000:00F1		    shl	    si,	1
seg000:00F3		    mov	    ax,	cs:init_serial_table[si]
seg000:00F8		    mov	    ds:12h, ah
seg000:00FC		    sub	    ah,	ah
seg000:00FE		    shl	    ax,	4	    ; DATA XREF: sub_2A71+Dr
seg000:00FE					    ; sub_2A71+18r ...
seg000:0101		    shr	    al,	4
seg000:0104
seg000:0104 loc_104:				    ; DATA XREF: seg000:AE39r
seg000:0104					    ; seg000:AE3Er
seg000:0104		    mov	    ds:13h, ah
seg000:0108		    mov	    ds:14h, al
seg000:010B		    or	    dh,	2
seg000:010E
seg000:010E loc_10E:				    ; CODE XREF: sub_0+EFj
seg000:010E		    mov	    byte ptr ds:19h, 2
seg000:0113		    mov	    si,	dx
seg000:0115		    and	    si,	0Ch
seg000:0118		    jz	    short loc_137
seg000:011A		    shr	    si,	1
seg000:011C		    mov	    ax,	cs:init_serial_table[si]
seg000:0121		    mov	    ds:1Ah, ah
seg000:0125		    sub	    ah,	ah
seg000:0127		    shl	    ax,	4	    ; DATA XREF: sub_60E2+1Br
seg000:012A		    shr	    al,	4
seg000:012D		    mov	    ds:1Bh, ah
seg000:0131		    mov	    ds:1Ch, al
seg000:0134		    or	    dh,	4
seg000:0137
seg000:0137 loc_137:				    ; CODE XREF: sub_0+118j
seg000:0137		    mov	    ds:10h, dh
seg000:013B		    mov	    al,	39h
seg000:013D		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:013F		    sub	    bx,	bx
seg000:0141		    sub	    dx,	dx
seg000:0143		    mov	    es,	dx
seg000:0145		    mov	    cx,	4
seg000:0148		    mov	    byte ptr ds:59h, 0
seg000:014D		    mov	    byte ptr ds:57h, 2
seg000:0152		    jmp	    short ram_test_detect
seg000:0154 ; ---------------------------------------------------------------------------
seg000:0154
seg000:0154 ram_test_loop:			    ; CODE XREF: sub_0+1BDj
seg000:0154		    mov	    word ptr [di+2], 0
seg000:0159		    mov	    word ptr [di], 200h
seg000:015D
seg000:015D ram_test_detect:			    ; CODE XREF: sub_0+152j
seg000:015D		    mov	    word ptr es:sub_0, 5555h
seg000:0164		    mov	    word ptr es:loc_2, 0FFFFh
seg000:016B		    cmp	    word ptr es:sub_0, 5555h
seg000:0172		    jnz	    short loc_197
seg000:0174		    inc	    dx
seg000:0175		    add	    bl,	2
seg000:0178		    mov	    word ptr es:stru_3FC.data2,	0AAAAh
seg000:017F		    mov	    word ptr es:stru_3FC.data4,	0FFFFh
seg000:017F					    ; DATA XREF: sub_A346+20r
seg000:017F					    ; sub_A346+24w
seg000:0186		    cmp	    word ptr es:sub_0, 0AAAAh
seg000:018D		    jz	    short loc_197
seg000:018F		    add	    dx,	3
seg000:0192		    add	    bl,	6
seg000:0195		    inc	    bh
seg000:0197
seg000:0197 loc_197:				    ; CODE XREF: sub_0+172j
seg000:0197					    ; sub_0+18Dj
seg000:0197		    cmp	    cx,	4
seg000:019A		    jnz	    short loc_1AB
seg000:019C		    mov	    byte ptr ds:59h, 8
seg000:01A1
seg000:01A1 loc_1A1:
seg000:01A1		    mov	    byte ptr ds:57h, 0
seg000:01A6		    mov	    di,	62h
seg000:01A9		    jmp	    short loc_1B7
seg000:01AB ; ---------------------------------------------------------------------------
seg000:01AB
seg000:01AB loc_1AB:				    ; CODE XREF: sub_0+19Aj
seg000:01AB		    mov	    word ptr [di+2], 0F0Fh
seg000:01B0		    mov	    word ptr [di], 0
seg000:01B4		    add	    di,	4
seg000:01B7
seg000:01B7 loc_1B7:				    ; CODE XREF: sub_0+1A9j
seg000:01B7		    ror	    dx,	4
seg000:01BA		    ror	    bh,	2
seg000:01BD		    loop    ram_test_loop
seg000:01BF		    mov	    al,	0B4h
seg000:01C1		    out	    70h, al	    ; CMOS Memory:
seg000:01C1					    ;
seg000:01C3		    mov	    al,	bl
seg000:01C5		    out	    71h, al	    ; CMOS Memory:
seg000:01C5					    ; used by real-time	clock
seg000:01C7		    mov	    ds:70h, bh
seg000:01CB		    shr	    bh,	4
seg000:01CE		    mov	    ds:71h, bh
seg000:01D2		    mov	    al,	3Ah
seg000:01D4		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:01D6		    mov	    ax,	710h
seg000:01D9		    cmp	    bp,	0
seg000:01DC		    jz	    short loc_1F0
seg000:01DE		    mov	    al,	9Fh
seg000:01E0		    out	    70h, al	    ; CMOS Memory:
seg000:01E0					    ;
seg000:01E2		    jmp	    short $+2
seg000:01E4		    in	    al,	71h	    ; CMOS Memory
seg000:01E6		    mov	    ah,	al
seg000:01E8		    mov	    al,	0A0h
seg000:01EA
seg000:01EA loc_1EA:				    ; CMOS Memory:
seg000:01EA		    out	    70h, al	    ;
seg000:01EC		    jmp	    short $+2
seg000:01EE		    in	    al,	71h	    ; CMOS Memory
seg000:01F0
seg000:01F0 loc_1F0:				    ; CODE XREF: sub_0+1DCj
seg000:01F0		    mov	    bx,	408h
seg000:01F3		    test    ah,	4
seg000:01F6		    jnz	    short loc_203
seg000:01F8		    mov	    bx,	604h
seg000:01FB		    test    ah,	2
seg000:01FE		    jnz	    short loc_203
seg000:0200
seg000:0200 loc_200:				    ; DATA XREF: ColrWarm_Boot+52F0w
seg000:0200					    ; cmd_display_regs+4Fw ...
seg000:0200		    mov	    bx,	0A00h
seg000:0203
seg000:0203 loc_203:				    ; CODE XREF: sub_0+1F6j
seg000:0203					    ; sub_0+1FEj
seg000:0203					    ; DATA XREF: ...
seg000:0203		    test    al,	10h
seg000:0205
seg000:0205 loc_205:				    ; DATA XREF: print_addembler?+Dw
seg000:0205					    ; sub_855B+5r ...
seg000:0205		    jz	    short loc_20A
seg000:0207
seg000:0207 loc_207:				    ; DATA XREF: print_addembler?+12w
seg000:0207					    ; print_addembler?+22r ...
seg000:0207		    or	    bl,	2
seg000:020A
seg000:020A loc_20A:				    ; CODE XREF: sub_0:loc_205j
seg000:020A					    ; DATA XREF: addembler?+34w ...
seg000:020A		    sub	    al,	al
seg000:020C
seg000:020C loc_20C:				    ; DATA XREF: addembler?+6w
seg000:020C					    ; addembler?:loc_8144r ...
seg000:020C		    test    ah,	80h
seg000:020F
seg000:020F loc_20F:				    ; DATA XREF: addembler?+3Cw
seg000:020F					    ; addembler?+85r ...
seg000:020F		    jns	    short loc_21F
seg000:0211
seg000:0211 loc_211:				    ; DATA XREF: addembler?+23w
seg000:0211					    ; registers_?+51r ...
seg000:0211		    mov	    al,	ah
seg000:0213
seg000:0213 loc_213:				    ; DATA XREF: assembler_?_0+18w
seg000:0213					    ; assembler_?+10r ...
seg000:0213		    and	    al,	70h
seg000:0215
seg000:0215 loc_215:				    ; DATA XREF: sub_8174:loc_817Aw
seg000:0215					    ; sub_8174:loc_81AFw ...
seg000:0215		    test    ah,	8
seg000:0218
seg000:0218 loc_218:				    ; DATA XREF: sub_8174+Dw
seg000:0218					    ; sub_8174+7Dw ...
seg000:0218		    jz	    short loc_21F
seg000:021A
seg000:021A loc_21A:
seg000:021A		    add	    al,	bh
seg000:021C		    or	    bl,	2
seg000:021F
seg000:021F loc_21F:				    ; CODE XREF: sub_0:loc_20Fj
seg000:021F					    ; sub_0:loc_218j
seg000:021F		    mov	    cx,	8
seg000:0222		    nop
seg000:0223		    mov	    si,	offset ram_size_table?
seg000:0226
seg000:0226 loc_226:				    ; CODE XREF: sub_0+22Ej
seg000:0226		    cmp	    dx,	cs:[si]
seg000:0229		    jz	    short ram_found
seg000:022B		    add	    si,	9
seg000:022E		    loop    loc_226
seg000:0230		    mov	    si,	offset aFatalRamInstal ; "Fatal	RAM Installation Error +++"
seg000:0233		    jmp	    print_error_nr
seg000:0236 ; ---------------------------------------------------------------------------
seg000:0236
seg000:0236 ram_found:				    ; CODE XREF: sub_0+229j
seg000:0236		    mov	    dl,	cs:[si+8]
seg000:023A		    test    bl,	2
seg000:023D		    jz	    short loc_241
seg000:023F		    add	    dl,	bh
seg000:0241
seg000:0241 loc_241:				    ; CODE XREF: sub_0+23Dj
seg000:0241		    sub	    dl,	al
seg000:0243		    jnb	    short loc_247
seg000:0245		    sub	    dl,	dl
seg000:0247
seg000:0247 loc_247:				    ; CODE XREF: sub_0+243j
seg000:0247		    mov	    cl,	cs:[si+2]
seg000:024B		    mov	    ds:6Fh, cl
seg000:024F		    sub	    bh,	bh
seg000:0251		    mov	    cx,	5
seg000:0254		    add	    si,	3
seg000:0257
seg000:0257 loc_257:				    ; CODE XREF: sub_0+283j
seg000:0257		    lea	    di,	[bx+429h]
seg000:025B		    lods    byte ptr cs:[si]
seg000:025D		    mov	    ah,	0Ch
seg000:025F		    mul	    ah
seg000:0261		    add	    di,	ax
seg000:0263		    mov	    ax,	cs:[di]
seg000:0266		    mov	    di,	5
seg000:0269		    sub	    di,	cx
seg000:026B
seg000:026B loc_26B:				    ; DATA XREF: sub_2429+7w
seg000:026B					    ; sub_2429+19r ...
seg000:026B		    shl	    di,	1
seg000:026D
seg000:026D loc_26D:				    ; DATA XREF: ascii_something+27w
seg000:026D					    ; ascii_something+2Dw ...
seg000:026D		    mov	    di,	cs:word_4C5[di]
seg000:0272		    mov	    [di+3], al
seg000:0275		    shr	    al,	4
seg000:0278		    mov	    [di+2], al
seg000:027B		    mov	    [di+1], ah
seg000:027E		    shr	    ah,	4
seg000:0281		    mov	    [di], ah
seg000:0283		    loop    loc_257
seg000:0285		    mov	    al,	3Bh
seg000:0287		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:0289		    cmp	    bp,	0
seg000:028C		    jz	    short loc_2A3
seg000:028E		    cmp	    dl,	10h
seg000:0291		    jb	    short loc_2A3
seg000:0293		    mov	    ds:77h, dl
seg000:0297		    shr	    dl,	4
seg000:029A		    mov	    ds:76h, dl
seg000:029E		    mov	    byte ptr ds:79h, 0Bh
seg000:02A3
seg000:02A3 loc_2A3:				    ; CODE XREF: sub_0+28Cj
seg000:02A3					    ; sub_0+291j
seg000:02A3		    mov	    al,	3Ch
seg000:02A5		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:02A7		    mov	    al,	ds:0FFh
seg000:02AA		    mov	    al,	ds:1
seg000:02AD		    mov	    ah,	ds:1
seg000:02B1		    xor	    al,	ah
seg000:02B3		    test    al,	1
seg000:02B5		    jz	    short loc_2C2
seg000:02B7		    mov	    ax,	0F000h
seg000:02BA		    mov	    ds,	ax
seg000:02BC		    mov	    si,	offset aFatalMemoryCon ; "Fatal	Memory Controller Error	+++"
seg000:02BF		    jmp	    print_error_nr
seg000:02C2 ; ---------------------------------------------------------------------------
seg000:02C2
seg000:02C2 loc_2C2:				    ; CODE XREF: sub_0+2B5j
seg000:02C2		    mov	    ax,	0F000h
seg000:02C5		    mov	    ds,	ax
seg000:02C7		    mov	    al,	3Dh
seg000:02C9		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:02CB		    jmp	    DMA_PIC_regs
seg000:02CE ; ---------------------------------------------------------------------------
seg000:02CE
seg000:02CE init72h73h:				    ; CODE XREF: sub_0:loc_3Ej
seg000:02CE					    ; sub_0:loc_61j
seg000:02CE		    mov	    al,	bl
seg000:02D0		    out	    63h, al	    ; PC/XT PPI	Command/Mode Register.
seg000:02D0					    ; Selects which PPI	ports are input	or output.
seg000:02D0					    ; BIOS sets	to 99H (Ports A	and C are input, B is output).
seg000:02D2		    jmp	    short $+2
seg000:02D4		    out	    63h, al	    ; PC/XT PPI	Command/Mode Register.
seg000:02D4					    ; Selects which PPI	ports are input	or output.
seg000:02D4					    ; BIOS sets	to 99H (Ports A	and C are input, B is output).
seg000:02D6		    lods    word ptr cs:[si]
seg000:02D8		    mov	    cx,	ax
seg000:02DA
seg000:02DA loc_2DA:				    ; CODE XREF: sub_0+2E2j
seg000:02DA		    lods    word ptr cs:[si]
seg000:02DC		    out	    72h, al
seg000:02DE
seg000:02DE loc_2DE:
seg000:02DE		    xchg    ah,	al
seg000:02E0		    out	    73h, al
seg000:02E2		    loop    loc_2DA
seg000:02E4		    mov	    al,	bl
seg000:02E6		    out	    63h, al	    ; PC/XT PPI	Command/Mode Register.
seg000:02E6					    ; Selects which PPI	ports are input	or output.
seg000:02E6					    ; BIOS sets	to 99H (Ports A	and C are input, B is output).
seg000:02E8		    or	    al,	80h
seg000:02EA		    out	    63h, al	    ; PC/XT PPI	Command/Mode Register.
seg000:02EA					    ; Selects which PPI	ports are input	or output.
seg000:02EA					    ; BIOS sets	to 99H (Ports A	and C are input, B is output).
seg000:02EC		    jmp	    bp
seg000:02EC sub_0	    endp
seg000:02EC
seg000:02EC ; ---------------------------------------------------------------------------
seg000:02EE aFatalMemoryCon db 'Fatal Memory Controller Error +++',0
seg000:02EE					    ; DATA XREF: sub_0:loc_28o
seg000:02EE					    ; sub_0+2BCo
seg000:0310 aFatalRamInstal db 'Fatal RAM Installation Error +++',0 ; DATA XREF: sub_0+230o
seg000:0331 regs_7273_1	    dw 0Bh		    ; [0].len ;	DATA XREF: sub_0:loc_38o
seg000:0331		    db 44h		    ; [0].byte.index
seg000:0331		    db	4		    ; [0].byte.data
seg000:0331		    db 48h		    ; [0].byte.index
seg000:0331		    db	0		    ; [0].byte.data
seg000:0331		    db 4Ch		    ; [0].byte.index
seg000:0331		    db	4		    ; [0].byte.data
seg000:0331		    db 80h		    ; [0].byte.index
seg000:0331		    db	0		    ; [0].byte.data
seg000:0331		    db 84h		    ; [0].byte.index
seg000:0331		    db	0		    ; [0].byte.data
seg000:0331		    db 88h		    ; [0].byte.index
seg000:0331		    db	0		    ; [0].byte.data
seg000:0331		    db 0C0h		    ; [0].byte.index
seg000:0331		    db	4		    ; [0].byte.data
seg000:0331		    db	0		    ; [0].byte.index
seg000:0331		    db	0		    ; [0].byte.data
seg000:0331		    db	4		    ; [0].byte.index
seg000:0331		    db	4		    ; [0].byte.data
seg000:0331		    db 0Ch		    ; [0].byte.index
seg000:0331		    db	4		    ; [0].byte.data
seg000:0331		    db 40h		    ; [0].byte.index
seg000:0331		    db 40h		    ; [0].byte.data
seg000:0349 regs_7273_2	    dw 0Bh		    ; len ; DATA XREF: sub_0+5Bo
seg000:0349		    db 44h		    ; byte.offset
seg000:0349		    db 40h		    ; byte.data
seg000:0349		    db 48h		    ; byte.offset
seg000:0349		    db 0Ch		    ; byte.data
seg000:0349		    db 4Ch		    ; byte.offset
seg000:0349		    db 40h		    ; byte.data
seg000:0349		    db 80h		    ; byte.offset
seg000:0349		    db 8		    ; byte.data
seg000:0349		    db 84h		    ; byte.offset
seg000:0349		    db 0		    ; byte.data
seg000:0349		    db 88h		    ; byte.offset
seg000:0349		    db 0		    ; byte.data
seg000:0349		    db 0C0h		    ; byte.offset
seg000:0349		    db 4		    ; byte.data
seg000:0349		    db 40h		    ; byte.offset
seg000:0349		    db 88h		    ; byte.data
seg000:0349		    db 0Ch		    ; byte.offset
seg000:0349		    db 40h		    ; byte.data
seg000:0349		    db 4		    ; byte.offset
seg000:0349		    db 8		    ; byte.data
seg000:0349		    db 0		    ; byte.offset
seg000:0349		    db 4		    ; byte.data
seg000:0361 init_LPT_table  dw 0		    ; DATA XREF: sub_0:loc_CAr
seg000:0363		    dw 378h
seg000:0365		    dw 278h
seg000:0367		    dw 3BCh
seg000:0369 init_serial_table dw 0		    ; DATA XREF: sub_0+F3r
seg000:0369					    ; sub_0+11Cr
seg000:036B		    dw 3F8h
seg000:036D		    dw 2F8h
seg000:036F		    dw 2E8h
seg000:0371 init_ram_table  dw 37h		    ; [0].len ;	DATA XREF: sub_0:loc_43o
seg000:0371					    ; assembler_?+Aw
seg000:0371		    db	6		    ; [0].byte.offset
seg000:0371		    db 0Eh		    ; [0].byte.data
seg000:0371		    db	8		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db	9		    ; [0].byte.offset
seg000:0371		    db	1		    ; [0].byte.data
seg000:0371		    db 11h		    ; [0].byte.offset
seg000:0371		    db	2		    ; [0].byte.data
seg000:0371		    db 19h		    ; [0].byte.offset
seg000:0371		    db	2		    ; [0].byte.data
seg000:0371		    db 21h		    ; [0].byte.offset
seg000:0371		    db	2		    ; [0].byte.data
seg000:0371		    db 0Ah		    ; [0].byte.offset
seg000:0371		    db	3		    ; [0].byte.data
seg000:0371		    db 0Bh		    ; [0].byte.offset
seg000:0371		    db	7		    ; [0].byte.data
seg000:0371		    db 0Ch		    ; [0].byte.offset
seg000:0371		    db	8		    ; [0].byte.data
seg000:0371		    db 12h		    ; [0].byte.offset
seg000:0371		    db	3		    ; [0].byte.data
seg000:0371		    db 13h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 14h		    ; [0].byte.offset
seg000:0371		    db	8		    ; [0].byte.data
seg000:0371		    db 1Ah		    ; [0].byte.offset
seg000:0371		    db	2		    ; [0].byte.data
seg000:0371		    db 1Bh		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 1Ch		    ; [0].byte.offset
seg000:0371		    db	8		    ; [0].byte.data
seg000:0371		    db 22h		    ; [0].byte.offset
seg000:0371		    db	1		    ; [0].byte.data
seg000:0371		    db 23h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 24h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 10h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 49h		    ; [0].byte.offset
seg000:0371		    db	7		    ; [0].byte.data
seg000:0371		    db 50h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 51h		    ; [0].byte.offset
seg000:0371		    db	1		    ; [0].byte.data
seg000:0371		    db 53h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 55h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 57h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 59h		    ; [0].byte.offset
seg000:0371		    db	7		    ; [0].byte.data
seg000:0371		    db 5Ch		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 5Dh		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 5Ah		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 5Bh		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 5Eh		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 5Fh		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 60h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 61h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 64h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 65h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 62h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 63h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 66h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 67h		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 68h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 69h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 6Ah		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 6Bh		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 6Ch		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 6Dh		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 6Fh		    ; [0].byte.offset
seg000:0371		    db	0		    ; [0].byte.data
seg000:0371		    db 70h		    ; [0].byte.offset
seg000:0371		    db	5		    ; [0].byte.data
seg000:0371		    db 71h		    ; [0].byte.offset
seg000:0371		    db	5		    ; [0].byte.data
seg000:0371		    db 72h		    ; [0].byte.offset
seg000:0371		    db	3		    ; [0].byte.data
seg000:0371		    db 79h		    ; [0].byte.offset
seg000:0371		    db	3		    ; [0].byte.data
seg000:0371		    db 75h		    ; [0].byte.offset
seg000:0371		    db	6		    ; [0].byte.data
seg000:0371		    db 78h		    ; [0].byte.offset
seg000:0371		    db	9		    ; [0].byte.data
seg000:0371		    db 76h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:0371		    db 77h		    ; [0].byte.offset
seg000:0371		    db 0Fh		    ; [0].byte.data
seg000:03E1 ram_size_table? ram_size <11h, 5, 1, 3, 0, 0, 0, 10h> ; DATA XREF: sub_0+223o
seg000:03EA		    ram_size <1111h, 6,	1, 4, 0, 0, 0, 20h>
seg000:03F3 stru_3F3	    ram_size <411h, 0, 2, 7, 8,	9, 0, 30h>
seg000:03F3					    ; DATA XREF: port_EF_in?+16r
seg000:03F3					    ; port_EF_in?+48w
seg000:03FC stru_3FC	    ram_size <4411h, 0,	2, 7, 8, 9, 0Bh, 50h>
seg000:03FC					    ; DATA XREF: port_EF_in?+1Ar
seg000:03FC					    ; port_EF_in?+44w ...
seg000:0405 stru_405	    ram_size <4, 0, 1, 4, 0, 0,	0, 20h>	; DATA XREF: sub_2AF4+5w
seg000:0405					    ; sub_2CA8+2w ...
seg000:040E stru_40E	    ram_size <44h, 5, 1, 5, 0, 0, 0, 40h>
seg000:040E					    ; DATA XREF: ram_cmos_same_size?+3Bw
seg000:040E					    ; ColrWarm_Boot+528Dr ...
seg000:0417 stru_417	    ram_size <444h, 0, 1, 4, 0Ah, 0Ch, 0, 60h>
seg000:0417					    ; DATA XREF: sub_7994+15r
seg000:0417					    ; ColrWarm_Boot+5EECr ...
seg000:0420		    ram_size <4444h, 6,	1, 6, 0, 0, 0, 80h>
seg000:0429		    db 0FFh
seg000:042A		    db	  0
seg000:042B		    db 0FFh
seg000:042C		    db	  0
seg000:042D		    db 0FFh
seg000:042E		    db	  0
seg000:042F		    db 0FFh
seg000:0430		    db	  0
seg000:0431		    db 0FFh
seg000:0432		    db	  0
seg000:0433		    db 0FFh
seg000:0434		    db	  0
seg000:0435		    db	  0
seg000:0436		    db	  3
seg000:0437		    db	  0
seg000:0438		    db	  3
seg000:0439		    db	  0
seg000:043A		    db	  7
seg000:043B		    db	  0
seg000:043C		    db	  7
seg000:043D unk_43D	    db	  0		    ; DATA XREF: sub_8978:loc_89DEr
seg000:043E		    db	  9
seg000:043F		    db	  0
seg000:0440		    db	  9
seg000:0441		    db	  0
seg000:0442		    db	  3
seg000:0443		    db	  0
seg000:0444		    db	  3
seg000:0445		    db 0FFh
seg000:0446		    db	  0
seg000:0447		    db 0FFh
seg000:0448		    db	  0
seg000:0449		    db	  8
seg000:044A		    db	  9
seg000:044B		    db	  8		    ; DATA XREF: ColrWarm_Boot+155w
seg000:044C		    db	  9
seg000:044D		    db	0Eh
seg000:044E		    db	0Fh
seg000:044F		    db	0Eh
seg000:0450		    db	19h
seg000:0451		    db	0Eh
seg000:0452		    db	0Fh
seg000:0453		    db	0Eh
seg000:0454		    db	15h
seg000:0455		    db	0Eh
seg000:0456		    db	0Fh
seg000:0457		    db	0Eh
seg000:0458		    db	13h
seg000:0459		    db	0Eh
seg000:045A		    db	1Fh
seg000:045B		    db	0Eh
seg000:045C		    db	29h ; )
seg000:045D		    db	0Eh
seg000:045E		    db	1Fh
seg000:045F		    db	0Eh
seg000:0460		    db	25h ; %
seg000:0461		    db	0Eh
seg000:0462 word_462	    dw 0E1Fh		    ; DATA XREF: diag_out?+1Cw
seg000:0462					    ; ColrWarm_Boot+5F2Dr
seg000:0464 word_464	    dw 0E23h		    ; DATA XREF: sub_A641+47r
seg000:0464					    ; sub_D3AF+24w ...
seg000:0466 word_466	    dw 0E3Fh		    ; DATA XREF: sub_D3AF+2Cw
seg000:0466					    ; sub_D433+11r
seg000:0468 word_468	    dw 0E49h		    ; DATA XREF: sub_A641+Cr
seg000:0468					    ; sub_D3AF+36w ...
seg000:046A word_46A	    dw 0E3Fh		    ; DATA XREF: sub_A594+56r
seg000:046A					    ; sub_A594:loc_A5FCr ...
seg000:046C word_46C	    dw 0E45h		    ; DATA XREF: sub_A594+60r
seg000:046C					    ; sub_A594+72r ...
seg000:046E word_46E	    dw 0E3Fh		    ; DATA XREF: sub_A594+4Er
seg000:046E					    ; sub_D3AF+7Bw ...
seg000:0470 word_470	    dw 0E43h		    ; DATA XREF: sub_A6AD+35w
seg000:0470					    ; sub_A70B+8r ...
seg000:0472 cmos_a4f2_idx_0 dw offset unk_E7F	    ; DATA XREF: ColrWarm_Boot+243r
seg000:0472					    ; ColrWarm_Boot+354r ...
seg000:0474 cmos_a4f2_idx_1 dw offset unk_E89	    ; DATA XREF: sub_A771+4r
seg000:0474					    ; sub_A771:loc_A796w ...
seg000:0476 cmos_15h	    dw offset unk_E7F	    ; DATA XREF: sub_A6AD+3Br
seg000:0476					    ; sub_A6AD+49w ...
seg000:0478 cmos_17h	    dw offset unk_E85	    ; DATA XREF: sub_A7D9+43r
seg000:0478					    ; sub_A7D9+57r ...
seg000:047A cmos_1Dh	    dw offset unk_E7F	    ; DATA XREF: sub_C169+17Er
seg000:047A					    ; sub_C346+182w
seg000:047C cmos_21h	    dw offset unk_E83	    ; DATA XREF: sub_C169+18Ar
seg000:047C					    ; sub_C346+192w
seg000:047E cmos_?_6	    dw offset unk_E0F	    ; DATA XREF: sub_C169+19Br
seg000:047E					    ; sub_C346:loc_C58Cw
seg000:0480 cmos_?_7	    dw offset unk_E11	    ; DATA XREF: sub_C169+1AAr
seg000:0480					    ; sub_C346:loc_C5A0w
seg000:0482 cmos_?_8	    dw offset unk_E0F	    ; DATA XREF: sub_C169+1BAr
seg000:0482					    ; sub_C346+265w
seg000:0484 cmos_35h	    dw offset unk_E15	    ; DATA XREF: sub_C169+1CAr
seg000:0484					    ; sub_C346+271w
seg000:0486 cmos_14h	    dw offset unk_E0F	    ; DATA XREF: sub_C169+FEr
seg000:0486					    ; sub_C346+166w
seg000:0488 cmos_1Ch	    dw offset off_FF13	    ; DATA XREF: sub_C169+DFr
seg000:0488					    ; sub_C346+175w
seg000:048A cmos_1Ch_0	    dw 1200h		    ; DATA XREF: sub_C169+D9r
seg000:048A					    ; sub_C346+157w
seg000:048C cmos_10h_?	    dw 19h		    ; DATA XREF: sub_C169+BBr
seg000:048C					    ; sub_C169+10Br ...
seg000:048E cmos_10h	    dw 7		    ; DATA XREF: sub_C169+C1r
seg000:048E					    ; sub_C169:loc_C27Er ...
seg000:0490 cmos_19h	    dw 7		    ; DATA XREF: sub_C169+13Br
seg000:0490					    ; sub_C169+145r ...
seg000:0492 cmos_1Ah	    dw 7		    ; DATA XREF: sub_C169:loc_C2C3r
seg000:0492					    ; sub_C169+164r ...
seg000:0494		    db	  7
seg000:0495		    db	10h
seg000:0496		    db	2Fh ; /
seg000:0497		    db	1Ah
seg000:0498		    db	39h ; 9
seg000:0499		    db	10h
seg000:049A		    db	2Fh ; /
seg000:049B		    db	16h
seg000:049C		    db	35h ; 5
seg000:049D		    db	10h
seg000:049E		    db	2Fh ; /
seg000:049F		    db	14h
seg000:04A0		    db	33h ; 3
seg000:04A1		    db	20h
seg000:04A2		    db	3Fh ; ?
seg000:04A3		    db	2Ah ; *
seg000:04A4 byte_4A4	    db 49h		    ; DATA XREF: sub_B4BB+Br
seg000:04A4					    ; sub_B74F+22r ...
seg000:04A5		    db	20h
seg000:04A6		    db	3Fh ; ?
seg000:04A7		    db	26h ; &
seg000:04A8		    db	45h ; E
seg000:04A9		    db	20h
seg000:04AA		    db	3Fh ; ?
seg000:04AB		    db	24h ; $
seg000:04AC		    db	43h ; C
seg000:04AD		    db	30h ; 0
seg000:04AE		    db	4Fh ; O
seg000:04AF		    db	3Ah ; :
seg000:04B0		    db	59h ; Y
seg000:04B1		    db	30h ; 0
seg000:04B2		    db	4Fh ; O
seg000:04B3		    db	36h ; 6
seg000:04B4		    db	55h ; U
seg000:04B5		    db	30h ; 0
seg000:04B6		    db	4Fh ; O
seg000:04B7		    db	34h ; 4
seg000:04B8		    db	53h ; S
seg000:04B9		    db	40h ; @
seg000:04BA		    db	5Fh ; _
seg000:04BB		    db	4Ah ; J
seg000:04BC		    db	69h ; i
seg000:04BD		    db	40h ; @
seg000:04BE		    db	5Fh ; _
seg000:04BF byte_4BF	    db 46h		    ; DATA XREF: ColrWarm_Boot+84w
seg000:04BF					    ; ColrWarm_Boot+89w ...
seg000:04C0		    db	65h ; e
seg000:04C1 RTC_test_timer  dw 5F40h		    ; DATA XREF: ColrWarm_Boot+2A6w
seg000:04C1					    ; ColrWarm_Boot+332w ...
seg000:04C3		    db	44h ; D
seg000:04C4		    db	63h ; c
seg000:04C5 word_4C5	    dw 56h		    ; DATA XREF: sub_0:loc_26Dr
seg000:04C5					    ; ColrWarm_Boot+8Ew ...
seg000:04C7		    db	5Ah ; Z
seg000:04C8 unk_4C8	    db	  0		    ; DATA XREF: sub_7B44+26w
seg000:04C8					    ; sub_7C15+3Fw
seg000:04C9		    db	62h ; b
seg000:04CA byte_4CA	    db 0		    ; DATA XREF: sub_15EDr
seg000:04CA					    ; sub_1840w ...
seg000:04CB unk_4CB	    db	66h ; f		    ; DATA XREF: FDD_init_detect?+Fw
seg000:04CC unk_4CC	    db	  0		    ; DATA XREF: enter_BIOS?:loc_C88Cw
seg000:04CC					    ; enter_BIOS?+136w
seg000:04CD		    db	6Ah ; j
seg000:04CE word_4CE	    dw 0B800h		    ; DATA XREF: ide_?_16:loc_8FDEo
seg000:04CE					    ; ide_?_16+A4o
seg000:04D0		    dw 28h
seg000:04D2		    dw 0C08Eh
seg000:04D4		    dw 0F4BAh
seg000:04D6		    dw 0B00Bh
seg000:04D8		    dw 0EEE0h
seg000:04DA		    dw 0F4BAh
seg000:04DC		    dw 0EC0Eh
seg000:04DE word_4DE	    dw 0F24h		    ; DATA XREF: ide_?_16:loc_9006o
seg000:04DE					    ; ide_?_16+CEo
seg000:04E0		    dw 0D88Ah
seg000:04E2		    dw 0E432h
seg000:04E4		    dw 0C06Bh
seg000:04E6		    dw 0BF0Bh
seg000:04E8		    dw 801h
seg000:04EA		    db 3
seg000:04EB		    db 0F8h ; ø
seg000:04EC		    db 66h
seg000:04ED		    db	33h ; 3
seg000:04EE byte_4EE	    db 0C9h		    ; DATA XREF: ide_?_10r
seg000:04EE					    ; ide_detect_init?:loc_340Fr ...
seg000:04EF byte_4EF	    db 2Eh		    ; DATA XREF: ide_detect_init?+89w
seg000:04EF					    ; ide_?_16+2Fr ...
seg000:04F0 unk_4F0	    db	8Bh ; 		    ; DATA XREF: ide_detect_init?+A2w
seg000:04F0					    ; ide_?_16:loc_8FEBr ...
seg000:04F1 word_4F1	    dw 14Dh		    ; DATA XREF: ColrWarm_Boot+4B5w
seg000:04F1					    ; sub_1AAE+1Bo
seg000:04F3 word_4F3	    dw 2E66h		    ; DATA XREF: ColrWarm_Boot+4B9w
seg000:04F5 word_4F5	    dw 758Bh		    ; DATA XREF: ColrWarm_Boot+4BDw
seg000:04F7		    db	  3
seg000:04F8		    db	2Eh ; .
seg000:04F9		    db	8Ah ; 
seg000:04FA		    db	3Dh ; =
seg000:04FB		    db 0F6h ; ö
seg000:04FC		    db 0C3h ; Ã
seg000:04FD		    db	  8
seg000:04FE		    db	74h ; t
seg000:04FF		    db	  1
seg000:0500 ; ---------------------------------------------------------------------------
seg000:0500 ; START OF FUNCTION	CHUNK FOR sub_7B03
seg000:0500
seg000:0500 loc_500:				    ; CODE XREF: sub_7B03+25J
seg000:0500					    ; DATA XREF: LPT_print+28w	...
seg000:0500		    rep	lods dword ptr es:[esi]
seg000:0500 ; END OF FUNCTION CHUNK FOR	sub_7B03
seg000:0505
seg000:0505 loc_505:				    ; DATA XREF: port_9F4_Out+2Cr
seg000:0505					    ; port_BF4_Out+9w ...
seg000:0505		    mov	    esi, cs:[di+3]
seg000:050A
seg000:050A loc_50A:				    ; DATA XREF: sub_9413+2Fr
seg000:050A					    ; sub_94D5r ...
seg000:050A		    mov	    cx,	cs:[di+1]
seg000:050E
seg000:050E loc_50E:				    ; CODE XREF: seg000:051Fj
seg000:050E					    ; DATA XREF: sub_2A71:loc_2A8Dr ...
seg000:050E		    test    bl,	8
seg000:0511
seg000:0511 loc_511:				    ; DATA XREF: sub_2CA8+10r
seg000:0511					    ; sub_2E85+Ar ...
seg000:0511		    jz	    short near ptr loc_513+1
seg000:0513
seg000:0513 loc_513:				    ; CODE XREF: seg000:loc_511j
seg000:0513		    lods    dword ptr es:[esi]
seg000:0517		    mov	    dx,	0AF4h
seg000:051A		    in	    al,	dx
seg000:051B		    and	    al,	bh
seg000:051D		    cmp	    al,	bh
seg000:051F		    loope   loc_50E
seg000:0521		    jz	    short loc_526
seg000:0523		    jmp	    short loc_565
seg000:0525 ; ---------------------------------------------------------------------------
seg000:0525		    nop
seg000:0526
seg000:0526 loc_526:				    ; CODE XREF: seg000:0521j
seg000:0526		    mov	    esi, cs:[di+7]
seg000:052B		    mov	    cx,	cs:[di+1]
seg000:052F
seg000:052F loc_52F:				    ; CODE XREF: seg000:loc_53Ej
seg000:052F		    test    bl,	8
seg000:0532
seg000:0532 loc_532:				    ; DATA XREF: sub_98A5+44r
seg000:0532					    ; sub_999D+4w ...
seg000:0532		    jz	    short near ptr loc_534+1
seg000:0534
seg000:0534 loc_534:				    ; CODE XREF: seg000:loc_532j
seg000:0534					    ; DATA XREF: sub_999D+10w ...
seg000:0534		    lods    dword ptr es:[esi]
seg000:0538
seg000:0538 loc_538:				    ; DATA XREF: sub_999D+1Cw
seg000:0538					    ; sub_999D+9Er ...
seg000:0538		    mov	    dx,	0AF4h
seg000:053B		    in	    al,	dx
seg000:053C		    and	    al,	bh
seg000:053E
seg000:053E loc_53E:				    ; DATA XREF: sub_999D+69r
seg000:053E					    ; sub_999D+71r ...
seg000:053E		    loope   loc_52F
seg000:0540
seg000:0540 loc_540:				    ; DATA XREF: sub_9255+12w
seg000:0540					    ; sub_9413+39r ...
seg000:0540		    jz	    short loc_547
seg000:0542
seg000:0542 loc_542:				    ; DATA XREF: sub_9255:loc_9261w
seg000:0542					    ; sub_9255+81w ...
seg000:0542		    xor	    bh,	bh
seg000:0544
seg000:0544 loc_544:				    ; DATA XREF: sub_9255+23w
seg000:0544					    ; sub_9413+95r ...
seg000:0544		    jmp	    short loc_565
seg000:0546 ; ---------------------------------------------------------------------------
seg000:0546
seg000:0546 loc_546:				    ; DATA XREF: sub_9255+28w
seg000:0546					    ; sub_973E:loc_977Ar ...
seg000:0546		    nop
seg000:0547
seg000:0547 loc_547:				    ; CODE XREF: seg000:loc_540j
seg000:0547					    ; DATA XREF: sub_9255+17w ...
seg000:0547		    mov	    esi, cs:[di+7]
seg000:054C
seg000:054C loc_54C:				    ; DATA XREF: sub_93ED+Dw
seg000:054C					    ; sub_93ED+1Bw ...
seg000:054C		    mov	    cx,	cs:[di+1]
seg000:0550
seg000:0550 loc_550:				    ; CODE XREF: seg000:0561j
seg000:0550					    ; DATA XREF: sub_A114+16Dw	...
seg000:0550		    test    bl,	8
seg000:0553		    jz	    short near ptr loc_555+1
seg000:0555
seg000:0555 loc_555:				    ; CODE XREF: seg000:0553j
seg000:0555		    lods    dword ptr es:[esi]
seg000:0559		    mov	    dx,	0AF4h
seg000:055C		    in	    al,	dx
seg000:055D		    and	    al,	bh
seg000:055F		    cmp	    al,	bh
seg000:0561		    loope   loc_550
seg000:0563		    jz	    short loc_56E
seg000:0565
seg000:0565 loc_565:				    ; CODE XREF: seg000:0523j
seg000:0565					    ; seg000:loc_544j
seg000:0565		    mov	    ch,	al
seg000:0567		    mov	    cl,	bh
seg000:0569		    mov	    bh,	1
seg000:056B		    jmp	    loc_5EC1
seg000:056E ; ---------------------------------------------------------------------------
seg000:056E
seg000:056E loc_56E:				    ; CODE XREF: seg000:0563j
seg000:056E		    mov	    al,	80h ; ''
seg000:0570		    out	    70h, al	    ; CMOS Memory:
seg000:0570					    ;
seg000:0572		    mov	    al,	68h ; 'h'
seg000:0574		    mov	    dx,	9F4h
seg000:0577		    out	    dx,	al
seg000:0578		    mov	    dx,	0BF4h
seg000:057B		    mov	    al,	1
seg000:057D		    out	    dx,	al
seg000:057E		    mov	    esi, 10000h
seg000:0584		    mov	    di,	2
seg000:0587		    xor	    ebx, ebx
seg000:058A		    cld
seg000:058B		    mov	    cx,	0Fh
seg000:058E		    mov	    dx,	0EF4h
seg000:0591		    in	    al,	dx
seg000:0592		    mov	    ah,	al
seg000:0594		    and	    al,	6
seg000:0596		    shl	    al,	1
seg000:0598		    sub	    cl,	al
seg000:059A		    test    ah,	8
seg000:059D		    jnz	    short loc_5A1
seg000:059F		    dec	    cl
seg000:05A1
seg000:05A1 loc_5A1:				    ; CODE XREF: seg000:059Dj
seg000:05A1					    ; seg000:05B6j
seg000:05A1		    mov	    eax, ebx
seg000:05A4		    xor	    al,	1
seg000:05A6		    mov	    es:[esi], eax
seg000:05AB		    add	    ebx, 11111111h
seg000:05B2		    shl	    di,	1
seg000:05B4		    mov	    si,	di
seg000:05B6		    loop    loc_5A1
seg000:05B8		    in	    al,	8Ch
seg000:05BA		    and	    al,	0BFh
seg000:05BC		    out	    0F2h, al
seg000:05BE		    xor	    esi, esi
seg000:05C1		    mov	    ecx, 4000h
seg000:05C7		    mov	    dx,	0EF4h
seg000:05CA		    in	    al,	dx
seg000:05CB		    and	    al,	6
seg000:05CD		    cmp	    al,	0
seg000:05CF		    jz	    short loc_5DA
seg000:05D1		    shr	    al,	1
seg000:05D3
seg000:05D3 loc_5D3:				    ; CODE XREF: seg000:05D8j
seg000:05D3		    shr	    ecx, 1
seg000:05D6		    dec	    al
seg000:05D8		    jnz	    short loc_5D3
seg000:05DA
seg000:05DA loc_5DA:				    ; CODE XREF: seg000:05CFj
seg000:05DA		    in	    al,	dx
seg000:05DB		    test    al,	8
seg000:05DD		    jnz	    short loc_5E2
seg000:05DF		    shr	    ecx, 1
seg000:05E2
seg000:05E2 loc_5E2:				    ; CODE XREF: seg000:05DDj
seg000:05E2		    rep	lods dword ptr es:[esi]
seg000:05E7		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:05E7					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:05E7					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:05E7					    ; 3: 1=read	high switches
seg000:05E7					    ; 4: 0=enable RAM parity checking
seg000:05E7					    ; 5: 0=enable I/O channel check
seg000:05E7					    ; 6: 0=hold	keyboard clock low
seg000:05E7					    ; 7: 0=enable kbrd
seg000:05E9		    or	    al,	0Ch
seg000:05EB		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:05EB					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:05EB					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:05EB					    ; 3: 1=read	high switches
seg000:05EB					    ; 4: 0=enable RAM parity checking
seg000:05EB					    ; 5: 0=enable I/O channel check
seg000:05EB					    ; 6: 0=hold	keyboard clock low
seg000:05EB					    ; 7: 0=enable kbrd
seg000:05ED		    nop
seg000:05EE		    and	    al,	0F3h
seg000:05F0		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:05F0					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:05F0					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:05F0					    ; 3: 1=read	high switches
seg000:05F0					    ; 4: 0=enable RAM parity checking
seg000:05F0					    ; 5: 0=enable I/O channel check
seg000:05F0					    ; 6: 0=hold	keyboard clock low
seg000:05F0					    ; 7: 0=enable kbrd
seg000:05F2		    mov	    esi, 10000h
seg000:05F8		    mov	    di,	2
seg000:05FB		    xor	    ebx, ebx
seg000:05FE		    cld
seg000:05FF		    mov	    cx,	0Fh
seg000:0602		    in	    al,	dx
seg000:0603		    mov	    ah,	al
seg000:0605		    and	    al,	6
seg000:0607		    shr	    al,	1
seg000:0609		    sub	    cl,	al
seg000:060B		    test    ah,	8
seg000:060E		    jnz	    short loc_612
seg000:0610		    dec	    cl
seg000:0612
seg000:0612 loc_612:				    ; CODE XREF: seg000:060Ej
seg000:0612					    ; seg000:0625j
seg000:0612		    mov	    eax, ebx
seg000:0615		    mov	    es:[esi], eax
seg000:061A		    add	    ebx, 11111111h
seg000:0621		    shl	    di,	1
seg000:0623		    mov	    si,	di
seg000:0625		    loop    loc_612
seg000:0627		    mov	    cx,	0Fh
seg000:062A		    in	    al,	dx
seg000:062B		    mov	    ah,	al
seg000:062D		    and	    al,	6
seg000:062F		    shr	    al,	1
seg000:0631		    sub	    cl,	al
seg000:0633		    test    ah,	8
seg000:0636		    jnz	    short loc_63A
seg000:0638		    dec	    cl
seg000:063A
seg000:063A loc_63A:				    ; CODE XREF: seg000:0636j
seg000:063A		    xor	    ebx, ebx
seg000:063D		    mov	    esi, 10000h
seg000:0643		    mov	    di,	2
seg000:0646
seg000:0646 loc_646:				    ; CODE XREF: seg000:068Ej
seg000:0646		    mov	    eax, es:[esi]
seg000:064B		    mov	    edx, eax
seg000:064E		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:064E					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:064E					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:064E					    ; 3: 1=read	high switches
seg000:064E					    ; 4: 0=enable RAM parity checking
seg000:064E					    ; 5: 0=enable I/O channel check
seg000:064E					    ; 6: 0=hold	keyboard clock low
seg000:064E					    ; 7: 0=enable kbrd
seg000:0650		    test    al,	0C0h
seg000:0652		    jnz	    short loc_657
seg000:0654		    jmp	    loc_7FA
seg000:0657 ; ---------------------------------------------------------------------------
seg000:0657
seg000:0657 loc_657:				    ; CODE XREF: seg000:0652j
seg000:0657		    cmp	    edx, ebx
seg000:065A		    jz	    short loc_65F
seg000:065C		    jmp	    loc_7FA
seg000:065F ; ---------------------------------------------------------------------------
seg000:065F
seg000:065F loc_65F:				    ; CODE XREF: seg000:065Aj
seg000:065F		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:065F					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:065F					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:065F					    ; 3: 1=read	high switches
seg000:065F					    ; 4: 0=enable RAM parity checking
seg000:065F					    ; 5: 0=enable I/O channel check
seg000:065F					    ; 6: 0=hold	keyboard clock low
seg000:065F					    ; 7: 0=enable kbrd
seg000:0661		    or	    al,	0Ch
seg000:0663		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:0663					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:0663					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:0663					    ; 3: 1=read	high switches
seg000:0663					    ; 4: 0=enable RAM parity checking
seg000:0663					    ; 5: 0=enable I/O channel check
seg000:0663					    ; 6: 0=hold	keyboard clock low
seg000:0663					    ; 7: 0=enable kbrd
seg000:0665		    nop
seg000:0666		    and	    al,	0F3h
seg000:0668		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:0668					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:0668					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:0668					    ; 3: 1=read	high switches
seg000:0668					    ; 4: 0=enable RAM parity checking
seg000:0668					    ; 5: 0=enable I/O channel check
seg000:0668					    ; 6: 0=hold	keyboard clock low
seg000:0668					    ; 7: 0=enable kbrd
seg000:066A		    mov	    eax, es:[esi]
seg000:066F		    mov	    edx, eax
seg000:0672		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:0672					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:0672					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:0672					    ; 3: 1=read	high switches
seg000:0672					    ; 4: 0=enable RAM parity checking
seg000:0672					    ; 5: 0=enable I/O channel check
seg000:0672					    ; 6: 0=hold	keyboard clock low
seg000:0672					    ; 7: 0=enable kbrd
seg000:0674		    test    al,	0C0h
seg000:0676		    jz	    short loc_67B
seg000:0678		    jmp	    loc_7FA
seg000:067B ; ---------------------------------------------------------------------------
seg000:067B
seg000:067B loc_67B:				    ; CODE XREF: seg000:0676j
seg000:067B		    cmp	    edx, ebx
seg000:067E		    jz	    short loc_683
seg000:0680		    jmp	    loc_7F3
seg000:0683 ; ---------------------------------------------------------------------------
seg000:0683
seg000:0683 loc_683:				    ; CODE XREF: seg000:067Ej
seg000:0683		    add	    ebx, 11111111h
seg000:068A		    shl	    di,	1
seg000:068C		    mov	    si,	di
seg000:068E		    loop    loc_646
seg000:0690		    mov	    cx,	0Fh
seg000:0693		    mov	    dx,	0EF4h
seg000:0696		    in	    al,	dx
seg000:0697		    mov	    ah,	al
seg000:0699		    and	    al,	6
seg000:069B		    shr	    al,	1
seg000:069D		    sub	    cl,	al
seg000:069F		    test    ah,	8
seg000:06A2		    jnz	    short loc_6A6
seg000:06A4		    dec	    cl
seg000:06A6
seg000:06A6 loc_6A6:				    ; CODE XREF: seg000:06A2j
seg000:06A6		    xor	    ebx, ebx
seg000:06A9		    mov	    esi, 10000h
seg000:06AF		    mov	    di,	2
seg000:06B2
seg000:06B2 loc_6B2:				    ; CODE XREF: seg000:06D6j
seg000:06B2		    mov	    eax, es:[esi]
seg000:06B7		    mov	    edx, eax
seg000:06BA		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:06BA					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:06BA					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:06BA					    ; 3: 1=read	high switches
seg000:06BA					    ; 4: 0=enable RAM parity checking
seg000:06BA					    ; 5: 0=enable I/O channel check
seg000:06BA					    ; 6: 0=hold	keyboard clock low
seg000:06BA					    ; 7: 0=enable kbrd
seg000:06BC		    test    al,	0C0h
seg000:06BE		    jz	    short loc_6C3
seg000:06C0		    jmp	    loc_7FA
seg000:06C3 ; ---------------------------------------------------------------------------
seg000:06C3
seg000:06C3 loc_6C3:				    ; CODE XREF: seg000:06BEj
seg000:06C3		    cmp	    edx, ebx
seg000:06C6		    jz	    short loc_6CB
seg000:06C8		    jmp	    loc_7F3
seg000:06CB ; ---------------------------------------------------------------------------
seg000:06CB
seg000:06CB loc_6CB:				    ; CODE XREF: seg000:06C6j
seg000:06CB					    ; load_GDT+36J
seg000:06CB		    add	    ebx, 11111111h
seg000:06D2		    shl	    di,	1
seg000:06D4		    mov	    si,	di
seg000:06D6		    loop    loc_6B2
seg000:06D8		    mov	    bp,	0Ah
seg000:06DB		    mov	    ebx, 0F47D1F47h
seg000:06E1
seg000:06E1 loc_6E1:				    ; CODE XREF: seg000:07D5j
seg000:06E1		    in	    al,	8Ch
seg000:06E3		    or	    al,	40h
seg000:06E5		    out	    0F2h, al
seg000:06E7		    mov	    edi, 10000h
seg000:06ED		    mov	    ecx, 4000h
seg000:06F3		    mov	    dx,	0EF4h
seg000:06F6		    in	    al,	dx
seg000:06F7		    and	    al,	6
seg000:06F9		    cmp	    al,	0
seg000:06FB		    jz	    short loc_706
seg000:06FD		    shr	    al,	1
seg000:06FF
seg000:06FF loc_6FF:				    ; CODE XREF: seg000:0704j
seg000:06FF		    shr	    ecx, 1
seg000:0702		    dec	    al
seg000:0704		    jnz	    short loc_6FF
seg000:0706
seg000:0706 loc_706:				    ; CODE XREF: seg000:06FBj
seg000:0706		    in	    al,	dx
seg000:0707		    test    al,	8
seg000:0709		    jnz	    short loc_70E
seg000:070B		    shr	    ecx, 1
seg000:070E
seg000:070E loc_70E:				    ; CODE XREF: seg000:0709j
seg000:070E		    mov	    eax, ebx
seg000:0711		    xor	    al,	1
seg000:0713		    rep	stos dword ptr es:[edi]
seg000:0717		    xor	    esi, esi
seg000:071A		    mov	    ecx, 4000h
seg000:0720		    mov	    dx,	0EF4h
seg000:0723		    in	    al,	dx
seg000:0724		    and	    al,	6
seg000:0726		    cmp	    al,	0
seg000:0728		    jz	    short loc_735
seg000:072A		    nop
seg000:072B		    nop
seg000:072C		    shr	    al,	1
seg000:072E
seg000:072E loc_72E:				    ; CODE XREF: seg000:0733j
seg000:072E		    shr	    ecx, 1
seg000:0731		    dec	    al
seg000:0733		    jnz	    short loc_72E
seg000:0735
seg000:0735 loc_735:				    ; CODE XREF: seg000:0728j
seg000:0735		    in	    al,	dx
seg000:0736		    test    al,	8
seg000:0738		    jnz	    short loc_73D
seg000:073A		    shr	    ecx, 1
seg000:073D
seg000:073D loc_73D:				    ; CODE XREF: seg000:0738j
seg000:073D		    rep	lods dword ptr es:[esi]
seg000:0742		    in	    al,	8Ch
seg000:0744		    and	    al,	0BFh
seg000:0746		    out	    0F2h, al
seg000:0748		    mov	    eax, ebx
seg000:074B		    mov	    edi, 10000h
seg000:0751		    mov	    ecx, 4000h
seg000:0757		    mov	    dx,	0EF4h
seg000:075A		    in	    al,	dx
seg000:075B		    and	    al,	6
seg000:075D		    cmp	    al,	0
seg000:075F		    jz	    short loc_76A
seg000:0761		    shr	    al,	1
seg000:0763
seg000:0763 loc_763:				    ; CODE XREF: seg000:0768j
seg000:0763		    shr	    ecx, 1
seg000:0766		    dec	    al
seg000:0768		    jnz	    short loc_763
seg000:076A
seg000:076A loc_76A:				    ; CODE XREF: seg000:075Fj
seg000:076A		    in	    al,	dx
seg000:076B		    test    al,	8
seg000:076D		    jnz	    short loc_772
seg000:076F		    shr	    ecx, 1
seg000:0772
seg000:0772 loc_772:				    ; CODE XREF: seg000:076Dj
seg000:0772		    mov	    eax, ebx
seg000:0775		    rep	stos dword ptr es:[edi]
seg000:0779		    mov	    cx,	4000h
seg000:077C		    mov	    dx,	0EF4h
seg000:077F		    in	    al,	dx
seg000:0780		    and	    al,	6
seg000:0782		    cmp	    al,	0
seg000:0784		    jz	    short loc_78F
seg000:0786		    shr	    al,	1
seg000:0788
seg000:0788 loc_788:				    ; CODE XREF: seg000:078Dj
seg000:0788		    shr	    ecx, 1
seg000:078B		    dec	    al
seg000:078D		    jnz	    short loc_788
seg000:078F
seg000:078F loc_78F:				    ; CODE XREF: seg000:0784j
seg000:078F		    in	    al,	dx
seg000:0790		    test    al,	8
seg000:0792		    jnz	    short loc_797
seg000:0794		    shr	    ecx, 1
seg000:0797
seg000:0797 loc_797:				    ; CODE XREF: seg000:0792j
seg000:0797		    mov	    esi, 10000h
seg000:079D
seg000:079D loc_79D:				    ; CODE XREF: seg000:07CDj
seg000:079D		    mov	    eax, es:[esi]
seg000:07A2		    mov	    edx, eax
seg000:07A5		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:07A5					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:07A5					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:07A5					    ; 3: 1=read	high switches
seg000:07A5					    ; 4: 0=enable RAM parity checking
seg000:07A5					    ; 5: 0=enable I/O channel check
seg000:07A5					    ; 6: 0=hold	keyboard clock low
seg000:07A5					    ; 7: 0=enable kbrd
seg000:07A7		    test    al,	0C0h
seg000:07A9		    jz	    short loc_7FA
seg000:07AB		    cmp	    edx, ebx
seg000:07AE		    jnz	    short loc_7FA
seg000:07B0		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:07B0					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:07B0					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:07B0					    ; 3: 1=read	high switches
seg000:07B0					    ; 4: 0=enable RAM parity checking
seg000:07B0					    ; 5: 0=enable I/O channel check
seg000:07B0					    ; 6: 0=hold	keyboard clock low
seg000:07B0					    ; 7: 0=enable kbrd
seg000:07B2		    or	    al,	0Ch
seg000:07B4		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:07B4					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:07B4					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:07B4					    ; 3: 1=read	high switches
seg000:07B4					    ; 4: 0=enable RAM parity checking
seg000:07B4					    ; 5: 0=enable I/O channel check
seg000:07B4					    ; 6: 0=hold	keyboard clock low
seg000:07B4					    ; 7: 0=enable kbrd
seg000:07B6		    nop
seg000:07B7		    and	    al,	0F3h
seg000:07B9		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:07B9					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:07B9					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:07B9					    ; 3: 1=read	high switches
seg000:07B9					    ; 4: 0=enable RAM parity checking
seg000:07B9					    ; 5: 0=enable I/O channel check
seg000:07B9					    ; 6: 0=hold	keyboard clock low
seg000:07B9					    ; 7: 0=enable kbrd
seg000:07BB
seg000:07BB loc_7BB:
seg000:07BB		    lods    dword ptr es:[esi]
seg000:07BF		    mov	    edx, eax
seg000:07C2		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:07C2					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:07C2					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:07C2					    ; 3: 1=read	high switches
seg000:07C2					    ; 4: 0=enable RAM parity checking
seg000:07C2					    ; 5: 0=enable I/O channel check
seg000:07C2					    ; 6: 0=hold	keyboard clock low
seg000:07C2					    ; 7: 0=enable kbrd
seg000:07C4		    test    al,	0C0h
seg000:07C6		    jnz	    short loc_7FA
seg000:07C8		    cmp	    edx, ebx
seg000:07CB		    jnz	    short loc_7F3
seg000:07CD		    loop    loc_79D
seg000:07CF		    rol	    ebx, 1
seg000:07D2		    dec	    bp
seg000:07D3		    jz	    short loc_7D8
seg000:07D5		    jmp	    loc_6E1
seg000:07D8 ; ---------------------------------------------------------------------------
seg000:07D8
seg000:07D8 loc_7D8:				    ; CODE XREF: seg000:07D3j
seg000:07D8		    xor	    bh,	bh
seg000:07DA
seg000:07DA loc_7DA:				    ; CODE XREF: seg000:07F8j
seg000:07DA					    ; seg000:07FFj
seg000:07DA		    in	    al,	8Ch
seg000:07DC		    or	    al,	40h
seg000:07DE		    out	    0F2h, al
seg000:07E0		    mov	    edi, 10000h
seg000:07E6		    mov	    ecx, 4000h
seg000:07EC		    rep	stos dword ptr es:[edi]
seg000:07F0		    jmp	    loc_5EC1
seg000:07F3 ; ---------------------------------------------------------------------------
seg000:07F3
seg000:07F3 loc_7F3:				    ; CODE XREF: seg000:0680j
seg000:07F3					    ; seg000:06C8j ...
seg000:07F3		    xor	    edx, ebx
seg000:07F6		    mov	    bh,	2
seg000:07F8		    jmp	    short loc_7DA
seg000:07FA ; ---------------------------------------------------------------------------
seg000:07FA
seg000:07FA loc_7FA:				    ; CODE XREF: seg000:0654j
seg000:07FA					    ; seg000:065Cj ...
seg000:07FA		    xor	    edx, ebx
seg000:07FD		    mov	    bh,	3
seg000:07FF		    jmp	    short loc_7DA
seg000:07FF ; ---------------------------------------------------------------------------
seg000:0801		    db	  3
seg000:0802		    db	  0
seg000:0803		    db	40h ; @
seg000:0804		    db	  0
seg000:0805		    db	80h ; 
seg000:0806		    db 0AAh ; ª
seg000:0807		    db	  2
seg000:0808		    db 0
seg000:0809		    db	  0
seg000:080A		    db	55h ; U
seg000:080B		    db	  1
seg000:080C		    db	  3
seg000:080D		    db	  0
seg000:080E		    db	40h ; @
seg000:080F		    db	  0
seg000:0810 word_810	    dw 0AA80h		    ; DATA XREF: sgdt_hlt+21w
seg000:0812 word_812	    dw 2		    ; DATA XREF: sgdt_hlt+26w
seg000:0814		    db	  0
seg000:0815		    db	55h ; U
seg000:0816		    db	  1
seg000:0817		    db	  3
seg000:0818		    db	  0
seg000:0819		    db	20h
seg000:081A		    db	  0
seg000:081B		    db	80h ; 
seg000:081C		    db 0AAh ; ª
seg000:081D		    db	  2
seg000:081E		    db	  0
seg000:081F		    db	40h ; @
seg000:0820		    db	55h ; U
seg000:0821		    db	  1
seg000:0822		    db	  3
seg000:0823		    db	  0
seg000:0824		    db	20h
seg000:0825		    db	  0
seg000:0826		    db	80h ; 
seg000:0827		    db 0AAh ; ª
seg000:0828		    db	  2
seg000:0829		    db	  0
seg000:082A		    db	40h ; @
seg000:082B		    db	55h ; U
seg000:082C		    db	  1
seg000:082D		    db	  3
seg000:082E		    db	  0
seg000:082F		    db	10h
seg000:0830		    db	  0
seg000:0831		    db 0A0h ;  
seg000:0832		    db 0AAh ; ª
seg000:0833		    db	  2
seg000:0834		    db	  0
seg000:0835		    db	40h ; @
seg000:0836		    db	55h ; U
seg000:0837		    db	  1
seg000:0838		    db	  7
seg000:0839		    db	  0
seg000:083A		    db	10h
seg000:083B		    db	  0
seg000:083C		    db 0A0h ;  
seg000:083D		    db 0AAh ; ª
seg000:083E		    db	  2
seg000:083F		    db	  0
seg000:0840		    db	40h ; @
seg000:0841		    db	55h ; U
seg000:0842		    db	  1
seg000:0843		    db	  3
seg000:0844		    db	  0
seg000:0845		    db	  8
seg000:0846		    db	  0
seg000:0847		    db 0A0h ;  
seg000:0848		    db 0AAh ; ª
seg000:0849		    db	  2
seg000:084A		    db	  0
seg000:084B		    db	50h ; P
seg000:084C		    db	55h ; U
seg000:084D		    db	  1
seg000:084E		    db	  3
seg000:084F		    db	  0
seg000:0850		    db	  8
seg000:0851		    db	  0
seg000:0852		    db 0A0h ;  
seg000:0853		    db 0AAh ; ª
seg000:0854		    db	  2
seg000:0855		    db	  0
seg000:0856		    db	50h ; P
seg000:0857		    db	55h ; U
seg000:0858		    db	  1
seg000:0859		    db	  0
seg000:085A		    db	  0
seg000:085B		    db	  0
seg000:085C		    db	  0
seg000:085D		    db	  0
seg000:085E		    db	  0
seg000:085F		    db	  0
seg000:0860		    db	  0
seg000:0861		    db	  0
seg000:0862		    db	  0
seg000:0863		    db	  0
seg000:0864		    db	  0
seg000:0865		    db	  0
seg000:0866		    db	  0
seg000:0867		    db	  0
seg000:0868		    db	  0
seg000:0869		    db	  0
seg000:086A		    db	  0
seg000:086B		    db	  0
seg000:086C		    db	  0
seg000:086D		    db	  0
seg000:086E		    db	  0
seg000:086F		    db	  0
seg000:0870		    db	  0
seg000:0871		    db	  0
seg000:0872		    db	  0
seg000:0873		    db	  0
seg000:0874		    db	  0
seg000:0875		    db	  0
seg000:0876		    db	  0
seg000:0877		    db	  0
seg000:0878		    db	  0
seg000:0879		    db	  0
seg000:087A		    db	  0
seg000:087B		    db	  0
seg000:087C		    db	  0
seg000:087D		    db	  0
seg000:087E		    db	  0
seg000:087F		    db	  0
seg000:0880		    db	  0
seg000:0881		    db	  0
seg000:0882		    db	  0
seg000:0883		    db	  0
seg000:0884		    db	  0
seg000:0885		    db	  0
seg000:0886		    db	  0
seg000:0887		    db	  0
seg000:0888		    db	  0
seg000:0889		    db	  0
seg000:088A		    db	  0
seg000:088B		    db	  0
seg000:088C		    db	  0
seg000:088D		    db	  0
seg000:088E		    db	  0
seg000:088F		    db	  0
seg000:0890		    db	  0
seg000:0891		    db	  0
seg000:0892		    db	  0
seg000:0893		    db	  0
seg000:0894		    db	  0
seg000:0895		    db	  0
seg000:0896		    db	  0
seg000:0897		    db	  0
seg000:0898		    db	  0
seg000:0899		    db	  0
seg000:089A		    db	  0
seg000:089B		    db	  0
seg000:089C		    db	  0
seg000:089D		    db	  0
seg000:089E		    db	  0
seg000:089F		    db	  0
seg000:08A0		    db	  0
seg000:08A1		    db	  0
seg000:08A2		    db	  0
seg000:08A3		    db	  0
seg000:08A4		    db	  0
seg000:08A5		    db	  0
seg000:08A6		    db	  0
seg000:08A7		    db	  0
seg000:08A8		    db	  0
seg000:08A9		    db	  0
seg000:08AA		    db	  0
seg000:08AB		    db	  0
seg000:08AC		    db	  0
seg000:08AD		    db	  0
seg000:08AE		    db	  0
seg000:08AF		    db	  0
seg000:08B0		    db	  0
seg000:08B1		    db	  0
seg000:08B2		    db	  0
seg000:08B3		    db	  0
seg000:08B4		    db	  0
seg000:08B5		    db	  0
seg000:08B6		    db	  0
seg000:08B7		    db	  0
seg000:08B8		    db	  0
seg000:08B9		    db	  0
seg000:08BA		    db	  0
seg000:08BB		    db	  0
seg000:08BC		    db	  0
seg000:08BD		    db	  0
seg000:08BE		    db	  0
seg000:08BF		    db	  0
seg000:08C0		    db	  0
seg000:08C1		    db	  0
seg000:08C2		    db	  0
seg000:08C3		    db	  0
seg000:08C4		    db	  0
seg000:08C5		    db	  0
seg000:08C6		    db	  0
seg000:08C7		    db	  0
seg000:08C8		    db	  0
seg000:08C9		    db	  0
seg000:08CA		    db	  0
seg000:08CB		    db	  0
seg000:08CC		    db	  0
seg000:08CD		    db	  0
seg000:08CE		    db	  0
seg000:08CF		    db	  0
seg000:08D0		    db	  0
seg000:08D1		    db	  0
seg000:08D2		    db	  0
seg000:08D3		    db	  0
seg000:08D4		    db	  0
seg000:08D5		    db	  0
seg000:08D6		    db	  0
seg000:08D7		    db	  0
seg000:08D8		    db	  0
seg000:08D9		    db	  0
seg000:08DA		    db	  0
seg000:08DB		    db	  0
seg000:08DC		    db	  0
seg000:08DD		    db	  0
seg000:08DE		    db	  0
seg000:08DF		    db	  0
seg000:08E0		    db	  0
seg000:08E1		    db	  0
seg000:08E2		    db	  0
seg000:08E3		    db	  0
seg000:08E4		    db	  0
seg000:08E5		    db	  0
seg000:08E6		    db	  0
seg000:08E7		    db	  0
seg000:08E8		    db	  0
seg000:08E9		    db	  0
seg000:08EA		    db	  0
seg000:08EB		    db	  0
seg000:08EC		    db	  0
seg000:08ED		    db	  0
seg000:08EE		    db	  0
seg000:08EF		    db	  0
seg000:08F0		    db	  0
seg000:08F1		    db	  0
seg000:08F2		    db	  0
seg000:08F3		    db	  0
seg000:08F4		    db	  0
seg000:08F5		    db	  0
seg000:08F6		    db	  0
seg000:08F7		    db	  0
seg000:08F8		    db	  0
seg000:08F9		    db	  0
seg000:08FA		    db	  0
seg000:08FB		    db	  0
seg000:08FC		    db	  0
seg000:08FD		    db	  0
seg000:08FE		    db	  0
seg000:08FF		    db	  0
seg000:0900		    db	  0
seg000:0901		    db	  0
seg000:0902		    db	  0
seg000:0903		    db	  0
seg000:0904		    db	  0
seg000:0905		    db	  0
seg000:0906		    db	  0
seg000:0907		    db	  0
seg000:0908		    db	  0
seg000:0909		    db	  0
seg000:090A		    db	  0
seg000:090B		    db	  0
seg000:090C		    db	  0
seg000:090D		    db	  0
seg000:090E		    db	  0
seg000:090F		    db	  0
seg000:0910		    db	  0
seg000:0911		    db	  0
seg000:0912		    db	  0
seg000:0913		    db	  0
seg000:0914		    db	  0
seg000:0915		    db	  0
seg000:0916		    db	  0
seg000:0917		    db	  0
seg000:0918		    db	  0
seg000:0919		    db	  0
seg000:091A		    db	  0
seg000:091B		    db	  0
seg000:091C		    db	  0
seg000:091D		    db	  0
seg000:091E		    db	  0
seg000:091F		    db	  0
seg000:0920		    db	  0
seg000:0921		    db	  0
seg000:0922		    db	  0
seg000:0923		    db	  0
seg000:0924		    db	  0
seg000:0925		    db	  0
seg000:0926		    db	  0
seg000:0927		    db	  0
seg000:0928		    db	  0
seg000:0929		    db	  0
seg000:092A		    db	  0
seg000:092B		    db	  0
seg000:092C		    db	  0
seg000:092D		    db	  0
seg000:092E		    db	  0
seg000:092F		    db	  0
seg000:0930		    db	  0
seg000:0931		    db	  0
seg000:0932		    db	  0
seg000:0933		    db	  0
seg000:0934		    db	  0
seg000:0935		    db	  0
seg000:0936		    db	  0
seg000:0937		    db	  0
seg000:0938		    db	  0
seg000:0939		    db	  0
seg000:093A		    db	  0
seg000:093B		    db	  0
seg000:093C		    db	  0
seg000:093D		    db	  0
seg000:093E		    db	  0
seg000:093F		    db	  0
seg000:0940		    db	  0
seg000:0941		    db	  0
seg000:0942		    db	  0
seg000:0943		    db	  0
seg000:0944		    db	  0
seg000:0945		    db	  0
seg000:0946		    db	  0
seg000:0947		    db	  0
seg000:0948		    db	  0
seg000:0949		    db	  0
seg000:094A		    db	  0
seg000:094B		    db	  0
seg000:094C		    db	  0
seg000:094D		    db	  0
seg000:094E		    db	  0
seg000:094F		    db	  0
seg000:0950		    db	  0
seg000:0951		    db	  0
seg000:0952		    db	  0
seg000:0953		    db	  0
seg000:0954		    db	  0
seg000:0955		    db	  0
seg000:0956		    db	  0
seg000:0957		    db	  0
seg000:0958		    db	  0
seg000:0959		    db	  0
seg000:095A		    db	  0
seg000:095B		    db	  0
seg000:095C		    db	  0
seg000:095D		    db	  0
seg000:095E		    db	  0
seg000:095F		    db	  0
seg000:0960		    db	  0
seg000:0961		    db	  0
seg000:0962		    db	  0
seg000:0963		    db	  0
seg000:0964		    db	  0
seg000:0965		    db	  0
seg000:0966		    db	  0
seg000:0967		    db	  0
seg000:0968		    db	  0
seg000:0969		    db	  0
seg000:096A		    db	  0
seg000:096B		    db	  0
seg000:096C		    db	  0
seg000:096D		    db	  0
seg000:096E		    db	  0
seg000:096F		    db	  0
seg000:0970		    db	  0
seg000:0971		    db	  0
seg000:0972		    db	  0
seg000:0973		    db	  0
seg000:0974		    db	  0
seg000:0975		    db	  0
seg000:0976		    db	  0
seg000:0977		    db	  0
seg000:0978		    db	  0
seg000:0979		    db	  0
seg000:097A		    db	  0
seg000:097B		    db	  0
seg000:097C		    db	  0
seg000:097D		    db	  0
seg000:097E		    db	  0
seg000:097F		    db	  0
seg000:0980		    db	  0
seg000:0981		    db	  0
seg000:0982		    db	  0
seg000:0983		    db	  0
seg000:0984		    db	  0
seg000:0985		    db	  0
seg000:0986		    db	  0
seg000:0987		    db	  0
seg000:0988		    db	  0
seg000:0989		    db	  0
seg000:098A		    db	  0
seg000:098B		    db	  0
seg000:098C		    db	  0
seg000:098D		    db	  0
seg000:098E		    db	  0
seg000:098F		    db	  0
seg000:0990		    db	  0
seg000:0991		    db	  0
seg000:0992		    db	  0
seg000:0993		    db	  0
seg000:0994		    db	  0
seg000:0995		    db	  0
seg000:0996		    db	  0
seg000:0997		    db	  0
seg000:0998		    db	  0
seg000:0999		    db	  0
seg000:099A		    db	  0
seg000:099B		    db	  0
seg000:099C		    db	  0
seg000:099D		    db	  0
seg000:099E		    db	  0
seg000:099F		    db	  0
seg000:09A0		    db	  0
seg000:09A1		    db	  0
seg000:09A2		    db	  0
seg000:09A3		    db	  0
seg000:09A4		    db	  0
seg000:09A5		    db	  0
seg000:09A6		    db	  0
seg000:09A7		    db	  0
seg000:09A8		    db	  0
seg000:09A9		    db	  0
seg000:09AA		    db	  0
seg000:09AB		    db	  0
seg000:09AC		    db	  0
seg000:09AD		    db	  0
seg000:09AE		    db	  0
seg000:09AF		    db	  0
seg000:09B0		    db	  0
seg000:09B1		    db	  0
seg000:09B2		    db	  0
seg000:09B3		    db	  0
seg000:09B4		    db	  0
seg000:09B5		    db	  0
seg000:09B6		    db	  0
seg000:09B7		    db	  0
seg000:09B8		    db	  0
seg000:09B9		    db	  0
seg000:09BA		    db	  0
seg000:09BB		    db	  0
seg000:09BC		    db	  0
seg000:09BD		    db	  0
seg000:09BE		    db	  0
seg000:09BF		    db	  0
seg000:09C0		    db	  0
seg000:09C1		    db	  0
seg000:09C2		    db	  0
seg000:09C3		    db	  0
seg000:09C4		    db	  0
seg000:09C5		    db	  0
seg000:09C6		    db	  0
seg000:09C7		    db	  0
seg000:09C8		    db	  0
seg000:09C9		    db	  0
seg000:09CA		    db	  0
seg000:09CB		    db	  0
seg000:09CC		    db	  0
seg000:09CD		    db	  0
seg000:09CE		    db	  0
seg000:09CF		    db	  0
seg000:09D0		    db	  0
seg000:09D1		    db	  0
seg000:09D2		    db	  0
seg000:09D3		    db	  0
seg000:09D4		    db	  0
seg000:09D5		    db	  0
seg000:09D6		    db	  0
seg000:09D7		    db	  0
seg000:09D8		    db	  0
seg000:09D9		    db	  0
seg000:09DA		    db	  0
seg000:09DB		    db	  0
seg000:09DC		    db	  0
seg000:09DD		    db	  0
seg000:09DE		    db	  0
seg000:09DF		    db	  0
seg000:09E0		    db	  0
seg000:09E1		    db	  0
seg000:09E2		    db	  0
seg000:09E3		    db	  0
seg000:09E4		    db	  0
seg000:09E5		    db	  0
seg000:09E6		    db	  0
seg000:09E7		    db	  0
seg000:09E8		    db	  0
seg000:09E9		    db	  0
seg000:09EA		    db	  0
seg000:09EB		    db	  0
seg000:09EC		    db	  0
seg000:09ED		    db	  0
seg000:09EE		    db	  0
seg000:09EF		    db	  0
seg000:09F0		    db	  0
seg000:09F1		    db	  0
seg000:09F2		    db	  0
seg000:09F3		    db	  0
seg000:09F4		    db	  0
seg000:09F5		    db	  0
seg000:09F6		    db	  0
seg000:09F7		    db	  0
seg000:09F8		    db	  0
seg000:09F9		    db	  0
seg000:09FA		    db	  0
seg000:09FB		    db	  0
seg000:09FC		    db	  0
seg000:09FD		    db	  0
seg000:09FE		    db	  0
seg000:09FF		    db	  0
seg000:0A00		    db	  0
seg000:0A01		    db	  0
seg000:0A02		    db	  0
seg000:0A03		    db	  0
seg000:0A04		    db	  0
seg000:0A05		    db	  0
seg000:0A06		    db	  0
seg000:0A07		    db	  0
seg000:0A08		    db	  0
seg000:0A09		    db	  0
seg000:0A0A		    db	  0
seg000:0A0B		    db	  0
seg000:0A0C		    db	  0
seg000:0A0D		    db	  0
seg000:0A0E		    db	  0
seg000:0A0F		    db	  0
seg000:0A10		    db	  0
seg000:0A11		    db	  0
seg000:0A12		    db	  0
seg000:0A13		    db	  0
seg000:0A14		    db	  0
seg000:0A15		    db	  0
seg000:0A16		    db	  0
seg000:0A17		    db	  0
seg000:0A18		    db	  0
seg000:0A19		    db	  0
seg000:0A1A		    db	  0
seg000:0A1B		    db	  0
seg000:0A1C		    db	  0
seg000:0A1D		    db	  0
seg000:0A1E		    db	  0
seg000:0A1F		    db	  0
seg000:0A20		    db	  0
seg000:0A21		    db	  0
seg000:0A22		    db	  0
seg000:0A23		    db	  0
seg000:0A24		    db	  0
seg000:0A25		    db	  0
seg000:0A26		    db	  0
seg000:0A27		    db	  0
seg000:0A28		    db	  0
seg000:0A29		    db	  0
seg000:0A2A		    db	  0
seg000:0A2B		    db	  0
seg000:0A2C		    db	  0
seg000:0A2D		    db	  0
seg000:0A2E		    db	  0
seg000:0A2F		    db	  0
seg000:0A30		    db	  0
seg000:0A31		    db	  0
seg000:0A32		    db	  0
seg000:0A33		    db	  0
seg000:0A34		    db	  0
seg000:0A35		    db	  0
seg000:0A36		    db	  0
seg000:0A37		    db	  0
seg000:0A38		    db	  0
seg000:0A39		    db	  0
seg000:0A3A		    db	  0
seg000:0A3B		    db	  0
seg000:0A3C		    db	  0
seg000:0A3D		    db	  0
seg000:0A3E		    db	  0
seg000:0A3F		    db	  0
seg000:0A40		    db	  0
seg000:0A41		    db	  0
seg000:0A42		    db	  0
seg000:0A43		    db	  0
seg000:0A44		    db	  0
seg000:0A45		    db	  0
seg000:0A46		    db	  0
seg000:0A47		    db	  0
seg000:0A48		    db	  0
seg000:0A49		    db	  0
seg000:0A4A		    db	  0
seg000:0A4B		    db	  0
seg000:0A4C		    db	  0
seg000:0A4D		    db	  0
seg000:0A4E		    db	  0
seg000:0A4F		    db	  0
seg000:0A50		    db	  0
seg000:0A51		    db	  0
seg000:0A52		    db	  0
seg000:0A53		    db	  0
seg000:0A54		    db	  0
seg000:0A55		    db	  0
seg000:0A56		    db	  0
seg000:0A57		    db	  0
seg000:0A58		    db	  0
seg000:0A59		    db	  0
seg000:0A5A		    db	  0
seg000:0A5B		    db	  0
seg000:0A5C		    db	  0
seg000:0A5D		    db	  0
seg000:0A5E		    db	  0
seg000:0A5F		    db	  0
seg000:0A60		    db	  0
seg000:0A61		    db	  0
seg000:0A62		    db	  0
seg000:0A63		    db	  0
seg000:0A64		    db	  0
seg000:0A65		    db	  0
seg000:0A66		    db	  0
seg000:0A67		    db	  0
seg000:0A68		    db	  0
seg000:0A69		    db	  0
seg000:0A6A		    db	  0
seg000:0A6B		    db	  0
seg000:0A6C		    db	  0
seg000:0A6D		    db	  0
seg000:0A6E		    db	  0
seg000:0A6F		    db	  0
seg000:0A70		    db	  0
seg000:0A71		    db	  0
seg000:0A72		    db	  0
seg000:0A73		    db	  0
seg000:0A74		    db	  0
seg000:0A75		    db	  0
seg000:0A76		    db	  0
seg000:0A77		    db	  0
seg000:0A78		    db	  0
seg000:0A79		    db	  0
seg000:0A7A		    db	  0
seg000:0A7B		    db	  0
seg000:0A7C		    db	  0
seg000:0A7D		    db	  0
seg000:0A7E		    db	  0
seg000:0A7F		    db	  0
seg000:0A80		    db	  0
seg000:0A81		    db	  0
seg000:0A82		    db	  0
seg000:0A83		    db	  0
seg000:0A84		    db	  0
seg000:0A85		    db	  0
seg000:0A86		    db	  0
seg000:0A87		    db	  0
seg000:0A88		    db	  0
seg000:0A89		    db	  0
seg000:0A8A		    db	  0
seg000:0A8B		    db	  0
seg000:0A8C		    db	  0
seg000:0A8D		    db	  0
seg000:0A8E		    db	  0
seg000:0A8F		    db	  0
seg000:0A90		    db	  0
seg000:0A91		    db	  0
seg000:0A92		    db	  0
seg000:0A93		    db	  0
seg000:0A94		    db	  0
seg000:0A95		    db	  0
seg000:0A96		    db	  0
seg000:0A97		    db	  0
seg000:0A98		    db	  0
seg000:0A99		    db	  0
seg000:0A9A		    db	  0
seg000:0A9B		    db	  0
seg000:0A9C		    db	  0
seg000:0A9D		    db	  0
seg000:0A9E		    db	  0
seg000:0A9F		    db	  0
seg000:0AA0		    db	  0
seg000:0AA1		    db	  0
seg000:0AA2		    db	  0
seg000:0AA3		    db	  0
seg000:0AA4		    db	  0
seg000:0AA5		    db	  0
seg000:0AA6		    db	  0
seg000:0AA7		    db	  0
seg000:0AA8		    db	  0
seg000:0AA9		    db	  0
seg000:0AAA		    db	  0
seg000:0AAB		    db	  0
seg000:0AAC		    db	  0
seg000:0AAD		    db	  0
seg000:0AAE		    db	  0
seg000:0AAF		    db	  0
seg000:0AB0		    db	  0
seg000:0AB1		    db	  0
seg000:0AB2		    db	  0
seg000:0AB3		    db	  0
seg000:0AB4		    db	  0
seg000:0AB5		    db	  0
seg000:0AB6		    db	  0
seg000:0AB7		    db	  0
seg000:0AB8		    db	  0
seg000:0AB9		    db	  0
seg000:0ABA		    db	  0
seg000:0ABB		    db	  0
seg000:0ABC		    db	  0
seg000:0ABD		    db	  0
seg000:0ABE		    db	  0
seg000:0ABF		    db	  0
seg000:0AC0		    db	  0
seg000:0AC1		    db	  0
seg000:0AC2		    db	  0
seg000:0AC3		    db	  0
seg000:0AC4		    db	  0
seg000:0AC5		    db	  0
seg000:0AC6		    db	  0
seg000:0AC7		    db	  0
seg000:0AC8		    db	  0
seg000:0AC9		    db	  0
seg000:0ACA		    db	  0
seg000:0ACB		    db	  0
seg000:0ACC		    db	  0
seg000:0ACD		    db	  0
seg000:0ACE		    db	  0
seg000:0ACF		    db	  0
seg000:0AD0		    db	  0
seg000:0AD1		    db	  0
seg000:0AD2		    db	  0
seg000:0AD3		    db	  0
seg000:0AD4		    db	  0
seg000:0AD5		    db	  0
seg000:0AD6		    db	  0
seg000:0AD7		    db	  0
seg000:0AD8		    db	  0
seg000:0AD9		    db	  0
seg000:0ADA		    db	  0
seg000:0ADB		    db	  0
seg000:0ADC		    db	  0
seg000:0ADD		    db	  0
seg000:0ADE		    db	  0
seg000:0ADF		    db	  0
seg000:0AE0		    db	  0
seg000:0AE1		    db	  0
seg000:0AE2		    db	  0
seg000:0AE3		    db	  0
seg000:0AE4		    db	  0
seg000:0AE5		    db	  0
seg000:0AE6		    db	  0
seg000:0AE7		    db	  0
seg000:0AE8		    db	  0
seg000:0AE9		    db	  0
seg000:0AEA		    db	  0
seg000:0AEB		    db	  0
seg000:0AEC		    db	  0
seg000:0AED		    db	  0
seg000:0AEE		    db	  0
seg000:0AEF		    db	  0
seg000:0AF0		    db	  0
seg000:0AF1		    db	  0
seg000:0AF2		    db	  0
seg000:0AF3		    db	  0
seg000:0AF4		    db	  0
seg000:0AF5		    db	  0
seg000:0AF6		    db	  0
seg000:0AF7		    db	  0
seg000:0AF8		    db	  0
seg000:0AF9		    db	  0
seg000:0AFA		    db	  0
seg000:0AFB		    db	  0
seg000:0AFC		    db	  0
seg000:0AFD		    db	  0
seg000:0AFE		    db	  0
seg000:0AFF		    db	  0
seg000:0B00		    db	  0
seg000:0B01		    db	  0
seg000:0B02		    db	  0
seg000:0B03		    db	  0
seg000:0B04		    db	  0
seg000:0B05		    db	  0
seg000:0B06		    db	  0
seg000:0B07		    db	  0
seg000:0B08		    db	  0
seg000:0B09		    db	  0
seg000:0B0A		    db	  0
seg000:0B0B		    db	  0
seg000:0B0C		    db	  0
seg000:0B0D		    db	  0
seg000:0B0E		    db	  0
seg000:0B0F		    db	  0
seg000:0B10		    db	  0
seg000:0B11		    db	  0
seg000:0B12		    db	  0
seg000:0B13		    db	  0
seg000:0B14		    db	  0
seg000:0B15		    db	  0
seg000:0B16		    db	  0
seg000:0B17		    db	  0
seg000:0B18		    db	  0
seg000:0B19		    db	  0
seg000:0B1A		    db	  0
seg000:0B1B		    db	  0
seg000:0B1C		    db	  0
seg000:0B1D		    db	  0
seg000:0B1E		    db	  0
seg000:0B1F		    db	  0
seg000:0B20		    db	  0
seg000:0B21		    db	  0
seg000:0B22		    db	  0
seg000:0B23		    db	  0
seg000:0B24		    db	  0
seg000:0B25		    db	  0
seg000:0B26		    db	  0
seg000:0B27		    db	  0
seg000:0B28		    db	  0
seg000:0B29		    db	  0
seg000:0B2A		    db	  0
seg000:0B2B		    db	  0
seg000:0B2C		    db	  0
seg000:0B2D		    db	  0
seg000:0B2E		    db	  0
seg000:0B2F		    db	  0
seg000:0B30		    db	  0
seg000:0B31		    db	  0
seg000:0B32		    db	  0
seg000:0B33		    db	  0
seg000:0B34		    db	  0
seg000:0B35		    db	  0
seg000:0B36		    db	  0
seg000:0B37		    db	  0
seg000:0B38		    db	  0
seg000:0B39		    db	  0
seg000:0B3A		    db	  0
seg000:0B3B		    db	  0
seg000:0B3C		    db	  0
seg000:0B3D		    db	  0
seg000:0B3E		    db	  0
seg000:0B3F		    db	  0
seg000:0B40		    db	  0
seg000:0B41		    db	  0
seg000:0B42		    db	  0
seg000:0B43		    db	  0
seg000:0B44		    db	  0
seg000:0B45		    db	  0
seg000:0B46		    db	  0
seg000:0B47		    db	  0
seg000:0B48		    db	  0
seg000:0B49		    db	  0
seg000:0B4A		    db	  0
seg000:0B4B		    db	  0
seg000:0B4C		    db	  0
seg000:0B4D		    db	  0
seg000:0B4E		    db	  0
seg000:0B4F		    db	  0
seg000:0B50		    db	  0
seg000:0B51		    db	  0
seg000:0B52		    db	  0
seg000:0B53		    db	  0
seg000:0B54		    db	  0
seg000:0B55		    db	  0
seg000:0B56		    db	  0
seg000:0B57		    db	  0
seg000:0B58		    db	  0
seg000:0B59		    db	  0
seg000:0B5A		    db	  0
seg000:0B5B		    db	  0
seg000:0B5C		    db	  0
seg000:0B5D		    db	  0
seg000:0B5E		    db	  0
seg000:0B5F		    db	  0
seg000:0B60		    db	  0
seg000:0B61		    db	  0
seg000:0B62		    db	  0
seg000:0B63		    db	  0
seg000:0B64		    db	  0
seg000:0B65		    db	  0
seg000:0B66		    db	  0
seg000:0B67		    db	  0
seg000:0B68		    db	  0
seg000:0B69		    db	  0
seg000:0B6A		    db	  0
seg000:0B6B		    db	  0
seg000:0B6C		    db	  0
seg000:0B6D		    db	  0
seg000:0B6E		    db	  0
seg000:0B6F		    db	  0
seg000:0B70		    db	  0
seg000:0B71		    db	  0
seg000:0B72		    db	  0
seg000:0B73		    db	  0
seg000:0B74		    db	  0
seg000:0B75		    db	  0
seg000:0B76		    db	  0
seg000:0B77		    db	  0
seg000:0B78		    db	  0
seg000:0B79		    db	  0
seg000:0B7A		    db	  0
seg000:0B7B		    db	  0
seg000:0B7C		    db	  0
seg000:0B7D		    db	  0
seg000:0B7E		    db	  0
seg000:0B7F		    db	  0
seg000:0B80		    db	  0
seg000:0B81		    db	  0
seg000:0B82		    db	  0
seg000:0B83		    db	  0
seg000:0B84		    db	  0
seg000:0B85		    db	  0
seg000:0B86		    db	  0
seg000:0B87		    db	  0
seg000:0B88		    db	  0
seg000:0B89		    db	  0
seg000:0B8A		    db	  0
seg000:0B8B		    db	  0
seg000:0B8C		    db	  0
seg000:0B8D		    db	  0
seg000:0B8E		    db	  0
seg000:0B8F		    db	  0
seg000:0B90		    db	  0
seg000:0B91		    db	  0
seg000:0B92		    db	  0
seg000:0B93		    db	  0
seg000:0B94		    db	  0
seg000:0B95		    db	  0
seg000:0B96		    db	  0
seg000:0B97		    db	  0
seg000:0B98		    db	  0
seg000:0B99		    db	  0
seg000:0B9A		    db	  0
seg000:0B9B		    db	  0
seg000:0B9C		    db	  0
seg000:0B9D		    db	  0
seg000:0B9E		    db	  0
seg000:0B9F		    db	  0
seg000:0BA0		    db	  0
seg000:0BA1		    db	  0
seg000:0BA2		    db	  0
seg000:0BA3		    db	  0
seg000:0BA4		    db	  0
seg000:0BA5		    db	  0
seg000:0BA6		    db	  0
seg000:0BA7		    db	  0
seg000:0BA8		    db	  0
seg000:0BA9		    db	  0
seg000:0BAA		    db	  0
seg000:0BAB		    db	  0
seg000:0BAC		    db	  0
seg000:0BAD		    db	  0
seg000:0BAE		    db	  0
seg000:0BAF		    db	  0
seg000:0BB0		    db	  0
seg000:0BB1		    db	  0
seg000:0BB2		    db	  0
seg000:0BB3		    db	  0
seg000:0BB4		    db	  0
seg000:0BB5		    db	  0
seg000:0BB6		    db	  0
seg000:0BB7		    db	  0
seg000:0BB8		    db	  0
seg000:0BB9		    db	  0
seg000:0BBA		    db	  0
seg000:0BBB		    db	  0
seg000:0BBC		    db	  0
seg000:0BBD		    db	  0
seg000:0BBE		    db	  0
seg000:0BBF		    db	  0
seg000:0BC0		    db	  0
seg000:0BC1		    db	  0
seg000:0BC2		    db	  0
seg000:0BC3		    db	  0
seg000:0BC4		    db	  0
seg000:0BC5		    db	  0
seg000:0BC6		    db	  0
seg000:0BC7		    db	  0
seg000:0BC8		    db	  0
seg000:0BC9		    db	  0
seg000:0BCA		    db	  0
seg000:0BCB		    db	  0
seg000:0BCC		    db	  0
seg000:0BCD		    db	  0
seg000:0BCE		    db	  0
seg000:0BCF		    db	  0
seg000:0BD0		    db	  0
seg000:0BD1		    db	  0
seg000:0BD2		    db	  0
seg000:0BD3		    db	  0
seg000:0BD4		    db	  0
seg000:0BD5		    db	  0
seg000:0BD6		    db	  0
seg000:0BD7		    db	  0
seg000:0BD8		    db	  0
seg000:0BD9		    db	  0
seg000:0BDA		    db	  0
seg000:0BDB		    db	  0
seg000:0BDC		    db	  0
seg000:0BDD		    db	  0
seg000:0BDE		    db	  0
seg000:0BDF		    db	  0
seg000:0BE0		    db	  0
seg000:0BE1		    db	  0
seg000:0BE2		    db	  0
seg000:0BE3		    db	  0
seg000:0BE4		    db	  0
seg000:0BE5		    db	  0
seg000:0BE6		    db	  0
seg000:0BE7		    db	  0
seg000:0BE8		    db	  0
seg000:0BE9		    db	  0
seg000:0BEA		    db	  0
seg000:0BEB		    db	  0
seg000:0BEC		    db	  0
seg000:0BED		    db	  0
seg000:0BEE		    db	  0
seg000:0BEF		    db	  0
seg000:0BF0		    db	  0
seg000:0BF1		    db	  0
seg000:0BF2		    db	  0
seg000:0BF3		    db	  0
seg000:0BF4		    db	  0
seg000:0BF5		    db	  0
seg000:0BF6		    db	  0
seg000:0BF7		    db	  0
seg000:0BF8		    db	  0
seg000:0BF9		    db	  0
seg000:0BFA		    db	  0
seg000:0BFB		    db	  0
seg000:0BFC		    db	  0
seg000:0BFD		    db	  0
seg000:0BFE		    db	  0
seg000:0BFF		    db	  0
seg000:0C00		    db	  0
seg000:0C01		    db	  0
seg000:0C02		    db	  0
seg000:0C03		    db	  0
seg000:0C04		    db	  0
seg000:0C05		    db	  0
seg000:0C06		    db	  0
seg000:0C07		    db	  0
seg000:0C08		    db	  0
seg000:0C09		    db	  0
seg000:0C0A		    db	  0
seg000:0C0B		    db	  0
seg000:0C0C		    db	  0
seg000:0C0D		    db	  0
seg000:0C0E		    db	  0
seg000:0C0F		    db	  0
seg000:0C10		    db	  0
seg000:0C11		    db	  0
seg000:0C12		    db	  0
seg000:0C13		    db	  0
seg000:0C14		    db	  0
seg000:0C15		    db	  0
seg000:0C16		    db	  0
seg000:0C17		    db	  0
seg000:0C18		    db	  0
seg000:0C19		    db	  0
seg000:0C1A		    db	  0
seg000:0C1B		    db	  0
seg000:0C1C		    db	  0
seg000:0C1D		    db	  0
seg000:0C1E		    db	  0
seg000:0C1F		    db	  0
seg000:0C20		    db	  0
seg000:0C21		    db	  0
seg000:0C22		    db	  0
seg000:0C23		    db	  0
seg000:0C24		    db	  0
seg000:0C25		    db	  0
seg000:0C26		    db	  0
seg000:0C27		    db	  0
seg000:0C28		    db	  0
seg000:0C29		    db	  0
seg000:0C2A		    db	  0
seg000:0C2B		    db	  0
seg000:0C2C		    db	  0
seg000:0C2D		    db	  0
seg000:0C2E		    db	  0
seg000:0C2F		    db	  0
seg000:0C30		    db	  0
seg000:0C31		    db	  0
seg000:0C32		    db	  0
seg000:0C33		    db	  0
seg000:0C34		    db	  0
seg000:0C35		    db	  0
seg000:0C36		    db	  0
seg000:0C37		    db	  0
seg000:0C38		    db	  0
seg000:0C39		    db	  0
seg000:0C3A		    db	  0
seg000:0C3B		    db	  0
seg000:0C3C		    db	  0
seg000:0C3D		    db	  0
seg000:0C3E		    db	  0
seg000:0C3F		    db	  0
seg000:0C40		    db	  0
seg000:0C41		    db	  0
seg000:0C42		    db	  0
seg000:0C43		    db	  0
seg000:0C44		    db	  0
seg000:0C45		    db	  0
seg000:0C46		    db	  0
seg000:0C47		    db	  0
seg000:0C48		    db	  0
seg000:0C49		    db	  0
seg000:0C4A		    db	  0
seg000:0C4B		    db	  0
seg000:0C4C		    db	  0
seg000:0C4D		    db	  0
seg000:0C4E		    db	  0
seg000:0C4F		    db	  0
seg000:0C50		    db	  0
seg000:0C51		    db	  0
seg000:0C52		    db	  0
seg000:0C53		    db	  0
seg000:0C54		    db	  0
seg000:0C55		    db	  0
seg000:0C56		    db	  0
seg000:0C57		    db	  0
seg000:0C58		    db	  0
seg000:0C59		    db	  0
seg000:0C5A		    db	  0
seg000:0C5B		    db	  0
seg000:0C5C		    db	  0
seg000:0C5D		    db	  0
seg000:0C5E		    db	  0
seg000:0C5F		    db	  0
seg000:0C60		    db	  0
seg000:0C61		    db	  0
seg000:0C62		    db	  0
seg000:0C63		    db	  0
seg000:0C64		    db	  0
seg000:0C65		    db	  0
seg000:0C66		    db	  0
seg000:0C67		    db	  0
seg000:0C68		    db	  0
seg000:0C69		    db	  0
seg000:0C6A		    db	  0
seg000:0C6B		    db	  0
seg000:0C6C		    db	  0
seg000:0C6D		    db	  0
seg000:0C6E		    db	  0
seg000:0C6F		    db	  0
seg000:0C70		    db	  0
seg000:0C71		    db	  0
seg000:0C72		    db	  0
seg000:0C73		    db	  0
seg000:0C74		    db	  0
seg000:0C75		    db	  0
seg000:0C76		    db	  0
seg000:0C77		    db	  0
seg000:0C78		    db	  0
seg000:0C79		    db	  0
seg000:0C7A		    db	  0
seg000:0C7B		    db	  0
seg000:0C7C		    db	  0
seg000:0C7D		    db	  0
seg000:0C7E		    db	  0
seg000:0C7F		    db	  0
seg000:0C80		    db	  0
seg000:0C81		    db	  0
seg000:0C82		    db	  0
seg000:0C83		    db	  0
seg000:0C84		    db	  0
seg000:0C85		    db	  0
seg000:0C86		    db	  0
seg000:0C87		    db	  0
seg000:0C88		    db	  0
seg000:0C89		    db	  0
seg000:0C8A		    db	  0
seg000:0C8B		    db	  0
seg000:0C8C		    db	  0
seg000:0C8D		    db	  0
seg000:0C8E		    db	  0
seg000:0C8F		    db	  0
seg000:0C90		    db	  0
seg000:0C91		    db	  0
seg000:0C92		    db	  0
seg000:0C93		    db	  0
seg000:0C94		    db	  0
seg000:0C95		    db	  0
seg000:0C96		    db	  0
seg000:0C97		    db	  0
seg000:0C98		    db	  0
seg000:0C99		    db	  0
seg000:0C9A		    db	  0
seg000:0C9B		    db	  0
seg000:0C9C		    db	  0
seg000:0C9D		    db	  0
seg000:0C9E		    db	  0
seg000:0C9F		    db	  0
seg000:0CA0		    db	  0
seg000:0CA1		    db	  0
seg000:0CA2		    db	  0
seg000:0CA3		    db	  0
seg000:0CA4		    db	  0
seg000:0CA5		    db	  0
seg000:0CA6		    db	  0
seg000:0CA7		    db	  0
seg000:0CA8		    db	  0
seg000:0CA9		    db	  0
seg000:0CAA		    db	  0
seg000:0CAB		    db	  0
seg000:0CAC		    db	  0
seg000:0CAD		    db	  0
seg000:0CAE		    db	  0
seg000:0CAF		    db	  0
seg000:0CB0		    db	  0
seg000:0CB1		    db	  0
seg000:0CB2		    db	  0
seg000:0CB3		    db	  0
seg000:0CB4		    db	  0
seg000:0CB5		    db	  0
seg000:0CB6		    db	  0
seg000:0CB7		    db	  0
seg000:0CB8		    db	  0
seg000:0CB9		    db	  0
seg000:0CBA		    db	  0
seg000:0CBB		    db	  0
seg000:0CBC		    db	  0
seg000:0CBD		    db	  0
seg000:0CBE		    db	  0
seg000:0CBF		    db	  0
seg000:0CC0		    db	  0
seg000:0CC1		    db	  0
seg000:0CC2		    db	  0
seg000:0CC3		    db	  0
seg000:0CC4		    db	  0
seg000:0CC5		    db	  0
seg000:0CC6		    db	  0
seg000:0CC7		    db	  0
seg000:0CC8		    db	  0
seg000:0CC9		    db	  0
seg000:0CCA		    db	  0
seg000:0CCB		    db	  0
seg000:0CCC		    db	  0
seg000:0CCD		    db	  0
seg000:0CCE		    db	  0
seg000:0CCF		    db	  0
seg000:0CD0		    db	  0
seg000:0CD1		    db	  0
seg000:0CD2		    db	  0
seg000:0CD3		    db	  0
seg000:0CD4		    db	  0
seg000:0CD5		    db	  0
seg000:0CD6		    db	  0
seg000:0CD7		    db	  0
seg000:0CD8		    db	  0
seg000:0CD9		    db	  0
seg000:0CDA		    db	  0
seg000:0CDB		    db	  0
seg000:0CDC		    db	  0
seg000:0CDD		    db	  0
seg000:0CDE		    db	  0
seg000:0CDF		    db	  0
seg000:0CE0		    db	  0
seg000:0CE1		    db	  0
seg000:0CE2		    db	  0
seg000:0CE3		    db	  0
seg000:0CE4		    db	  0
seg000:0CE5		    db	  0
seg000:0CE6		    db	  0
seg000:0CE7		    db	  0
seg000:0CE8		    db	  0
seg000:0CE9		    db	  0
seg000:0CEA		    db	  0
seg000:0CEB		    db	  0
seg000:0CEC		    db	  0
seg000:0CED		    db	  0
seg000:0CEE		    db	  0
seg000:0CEF		    db	  0
seg000:0CF0		    db	  0
seg000:0CF1		    db	  0
seg000:0CF2		    db	  0
seg000:0CF3		    db	  0
seg000:0CF4		    db	  0
seg000:0CF5		    db	  0
seg000:0CF6		    db	  0
seg000:0CF7		    db	  0
seg000:0CF8		    db	  0
seg000:0CF9		    db	  0
seg000:0CFA		    db	  0
seg000:0CFB		    db	  0
seg000:0CFC		    db	  0
seg000:0CFD		    db	  0
seg000:0CFE		    db	  0
seg000:0CFF		    db	  0
seg000:0D00		    db	  0
seg000:0D01		    db	  0
seg000:0D02		    db	  0
seg000:0D03		    db	  0
seg000:0D04		    db	  0
seg000:0D05		    db	  0
seg000:0D06		    db	  0
seg000:0D07		    db	  0
seg000:0D08		    db	  0
seg000:0D09		    db	  0
seg000:0D0A		    db	  0
seg000:0D0B		    db	  0
seg000:0D0C		    db	  0
seg000:0D0D		    db	  0
seg000:0D0E		    db	  0
seg000:0D0F		    db	  0
seg000:0D10		    db	  0
seg000:0D11		    db	  0
seg000:0D12		    db	  0
seg000:0D13		    db	  0
seg000:0D14		    db	  0
seg000:0D15		    db	  0
seg000:0D16		    db	  0
seg000:0D17		    db	  0
seg000:0D18		    db	  0
seg000:0D19		    db	  0
seg000:0D1A		    db	  0
seg000:0D1B		    db	  0
seg000:0D1C		    db	  0
seg000:0D1D		    db	  0
seg000:0D1E		    db	  0
seg000:0D1F		    db	  0
seg000:0D20		    db	  0
seg000:0D21		    db	  0
seg000:0D22		    db	  0
seg000:0D23		    db	  0
seg000:0D24		    db	  0
seg000:0D25		    db	  0
seg000:0D26		    db	  0
seg000:0D27		    db	  0
seg000:0D28		    db	  0
seg000:0D29		    db	  0
seg000:0D2A		    db	  0
seg000:0D2B		    db	  0
seg000:0D2C		    db	  0
seg000:0D2D		    db	  0
seg000:0D2E		    db	  0
seg000:0D2F		    db	  0
seg000:0D30		    db	  0
seg000:0D31		    db	  0
seg000:0D32		    db	  0
seg000:0D33		    db	  0
seg000:0D34		    db	  0
seg000:0D35		    db	  0
seg000:0D36		    db	  0
seg000:0D37		    db	  0
seg000:0D38		    db	  0
seg000:0D39		    db	  0
seg000:0D3A		    db	  0
seg000:0D3B		    db	  0
seg000:0D3C		    db	  0
seg000:0D3D		    db	  0
seg000:0D3E		    db	  0
seg000:0D3F		    db	  0
seg000:0D40		    db	  0
seg000:0D41		    db	  0
seg000:0D42		    db	  0
seg000:0D43		    db	  0
seg000:0D44		    db	  0
seg000:0D45		    db	  0
seg000:0D46		    db	  0
seg000:0D47		    db	  0
seg000:0D48		    db	  0
seg000:0D49		    db	  0
seg000:0D4A		    db	  0
seg000:0D4B		    db	  0
seg000:0D4C		    db	  0
seg000:0D4D		    db	  0
seg000:0D4E		    db	  0
seg000:0D4F		    db	  0
seg000:0D50		    db	  0
seg000:0D51		    db	  0
seg000:0D52		    db	  0
seg000:0D53		    db	  0
seg000:0D54		    db	  0
seg000:0D55		    db	  0
seg000:0D56		    db	  0
seg000:0D57		    db	  0
seg000:0D58		    db	  0
seg000:0D59		    db	  0
seg000:0D5A		    db	  0
seg000:0D5B		    db	  0
seg000:0D5C		    db	  0
seg000:0D5D		    db	  0
seg000:0D5E		    db	  0
seg000:0D5F		    db	  0
seg000:0D60		    db	  0
seg000:0D61		    db	  0
seg000:0D62		    db	  0
seg000:0D63		    db	  0
seg000:0D64		    db	  0
seg000:0D65		    db	  0
seg000:0D66		    db	  0
seg000:0D67		    db	  0
seg000:0D68		    db	  0
seg000:0D69		    db	  0
seg000:0D6A		    db	  0
seg000:0D6B		    db	  0
seg000:0D6C		    db	  0
seg000:0D6D		    db	  0
seg000:0D6E		    db	  0
seg000:0D6F		    db	  0
seg000:0D70		    db	  0
seg000:0D71		    db	  0
seg000:0D72		    db	  0
seg000:0D73		    db	  0
seg000:0D74		    db	  0
seg000:0D75		    db	  0
seg000:0D76		    db	  0
seg000:0D77		    db	  0
seg000:0D78		    db	  0
seg000:0D79		    db	  0
seg000:0D7A		    db	  0
seg000:0D7B		    db	  0
seg000:0D7C		    db	  0
seg000:0D7D		    db	  0
seg000:0D7E		    db	  0
seg000:0D7F		    db	  0
seg000:0D80		    db	  0
seg000:0D81		    db	  0
seg000:0D82		    db	  0
seg000:0D83		    db	  0
seg000:0D84		    db	  0
seg000:0D85		    db	  0
seg000:0D86		    db	  0
seg000:0D87		    db	  0
seg000:0D88		    db	  0
seg000:0D89		    db	  0
seg000:0D8A		    db	  0
seg000:0D8B		    db	  0
seg000:0D8C		    db	  0
seg000:0D8D		    db	  0
seg000:0D8E		    db	  0
seg000:0D8F		    db	  0
seg000:0D90		    db	  0
seg000:0D91		    db	  0
seg000:0D92		    db	  0
seg000:0D93		    db	  0
seg000:0D94		    db	  0
seg000:0D95		    db	  0
seg000:0D96		    db	  0
seg000:0D97		    db	  0
seg000:0D98		    db	  0
seg000:0D99		    db	  0
seg000:0D9A		    db	  0
seg000:0D9B		    db	  0
seg000:0D9C		    db	  0
seg000:0D9D		    db	  0
seg000:0D9E		    db	  0
seg000:0D9F		    db	  0
seg000:0DA0		    db	  0
seg000:0DA1		    db	  0
seg000:0DA2		    db	  0
seg000:0DA3		    db	  0
seg000:0DA4		    db	  0
seg000:0DA5		    db	  0
seg000:0DA6		    db	  0
seg000:0DA7		    db	  0
seg000:0DA8		    db	  0
seg000:0DA9		    db	  0
seg000:0DAA		    db	  0
seg000:0DAB		    db	  0
seg000:0DAC		    db	  0
seg000:0DAD		    db	  0
seg000:0DAE		    db	  0
seg000:0DAF		    db	  0
seg000:0DB0		    db	  0
seg000:0DB1		    db	  0
seg000:0DB2		    db	  0
seg000:0DB3		    db	  0
seg000:0DB4		    db	  0
seg000:0DB5		    db	  0
seg000:0DB6		    db	  0
seg000:0DB7		    db	  0
seg000:0DB8		    db	  0
seg000:0DB9		    db	  0
seg000:0DBA		    db	  0
seg000:0DBB		    db	  0
seg000:0DBC		    db	  0
seg000:0DBD		    db	  0
seg000:0DBE		    db	  0
seg000:0DBF		    db	  0
seg000:0DC0		    db	  0
seg000:0DC1		    db	  0
seg000:0DC2		    db	  0
seg000:0DC3		    db	  0
seg000:0DC4		    db	  0
seg000:0DC5		    db	  0
seg000:0DC6		    db	  0
seg000:0DC7		    db	  0
seg000:0DC8		    db	  0
seg000:0DC9		    db	  0
seg000:0DCA		    db	  0
seg000:0DCB		    db	  0
seg000:0DCC		    db	  0
seg000:0DCD		    db	  0
seg000:0DCE		    db	  0
seg000:0DCF		    db	  0
seg000:0DD0		    db	  0
seg000:0DD1		    db	  0
seg000:0DD2		    db	  0
seg000:0DD3		    db	  0
seg000:0DD4		    db	  0
seg000:0DD5		    db	  0
seg000:0DD6		    db	  0
seg000:0DD7		    db	  0
seg000:0DD8		    db	  0
seg000:0DD9		    db	  0
seg000:0DDA		    db	  0
seg000:0DDB		    db	  0
seg000:0DDC		    db	  0
seg000:0DDD		    db	  0
seg000:0DDE		    db	  0
seg000:0DDF		    db	  0
seg000:0DE0		    db	  0
seg000:0DE1		    db	  0
seg000:0DE2		    db	  0
seg000:0DE3		    db	  0
seg000:0DE4		    db	  0
seg000:0DE5		    db	  0
seg000:0DE6		    db	  0
seg000:0DE7		    db	  0
seg000:0DE8		    db	  0
seg000:0DE9		    db	  0
seg000:0DEA		    db	  0
seg000:0DEB		    db	  0
seg000:0DEC		    db	  0
seg000:0DED		    db	  0
seg000:0DEE		    db	  0
seg000:0DEF		    db	  0
seg000:0DF0		    db	  0
seg000:0DF1		    db	  0
seg000:0DF2		    db	  0
seg000:0DF3		    db	  0
seg000:0DF4		    db	  0
seg000:0DF5		    db	  0
seg000:0DF6		    db	  0
seg000:0DF7		    db	  0
seg000:0DF8		    db	  0
seg000:0DF9		    db	  0
seg000:0DFA		    db	  0
seg000:0DFB		    db	  0
seg000:0DFC		    db	  0
seg000:0DFD		    db	  0
seg000:0DFE		    db	  0
seg000:0DFF		    db	  0
seg000:0E00		    db	  0
seg000:0E01		    db	  0
seg000:0E02		    db	  0
seg000:0E03		    db	  0
seg000:0E04		    db	  0
seg000:0E05		    db	  0
seg000:0E06		    db	  0
seg000:0E07		    db	  0
seg000:0E08		    db	  0
seg000:0E09		    db	  0
seg000:0E0A		    db	  0
seg000:0E0B		    db	  0
seg000:0E0C		    db	  0
seg000:0E0D		    db	  0
seg000:0E0E		    db	  0
seg000:0E0F unk_E0F	    db	  0		    ; DATA XREF: seg000:cmos_?_6o
seg000:0E0F					    ; seg000:cmos_?_8o	...
seg000:0E10		    db	  0
seg000:0E11 unk_E11	    db	  0		    ; DATA XREF: seg000:cmos_?_7o
seg000:0E12		    db	  0
seg000:0E13		    db	  0
seg000:0E14		    db	  0
seg000:0E15 unk_E15	    db	  0		    ; DATA XREF: seg000:cmos_35ho
seg000:0E16		    db	  0
seg000:0E17		    db	  0
seg000:0E18		    db	  0
seg000:0E19		    db	  0
seg000:0E1A		    db	  0
seg000:0E1B		    db	  0
seg000:0E1C		    db	  0
seg000:0E1D		    db	  0
seg000:0E1E		    db	  0
seg000:0E1F		    db	  0
seg000:0E20		    db	  0
seg000:0E21		    db	  0
seg000:0E22		    db	  0
seg000:0E23		    db	  0
seg000:0E24		    db	  0
seg000:0E25		    db	  0
seg000:0E26		    db	  0
seg000:0E27		    db	  0
seg000:0E28		    db	  0
seg000:0E29		    db	  0
seg000:0E2A		    db	  0
seg000:0E2B		    db	  0
seg000:0E2C		    db	  0
seg000:0E2D		    db	  0
seg000:0E2E		    db	  0
seg000:0E2F		    db	  0
seg000:0E30		    db	  0
seg000:0E31		    db	  0
seg000:0E32		    db	  0
seg000:0E33		    db	  0
seg000:0E34		    db	  0
seg000:0E35		    db	  0
seg000:0E36		    db	  0
seg000:0E37		    db	  0
seg000:0E38		    db	  0
seg000:0E39		    db	  0
seg000:0E3A		    db	  0
seg000:0E3B		    db	  0
seg000:0E3C		    db	  0
seg000:0E3D		    db	  0
seg000:0E3E		    db	  0
seg000:0E3F		    db	  0
seg000:0E40		    db	  0
seg000:0E41		    db	  0
seg000:0E42		    db	  0
seg000:0E43		    db	  0
seg000:0E44		    db	  0
seg000:0E45		    db	  0
seg000:0E46		    db	  0
seg000:0E47		    db	  0
seg000:0E48		    db	  0
seg000:0E49		    db	  0
seg000:0E4A		    db	  0
seg000:0E4B		    db	  0
seg000:0E4C		    db	  0
seg000:0E4D		    db	  0
seg000:0E4E		    db	  0
seg000:0E4F		    db	  0
seg000:0E50		    db	  0
seg000:0E51		    db	  0
seg000:0E52		    db	  0
seg000:0E53		    db	  0
seg000:0E54		    db	  0
seg000:0E55		    db	  0
seg000:0E56		    db	  0
seg000:0E57		    db	  0
seg000:0E58		    db	  0
seg000:0E59		    db	  0
seg000:0E5A		    db	  0
seg000:0E5B		    db	  0
seg000:0E5C		    db	  0
seg000:0E5D		    db	  0
seg000:0E5E		    db	  0
seg000:0E5F		    db	  0
seg000:0E60		    db	  0
seg000:0E61		    db	  0
seg000:0E62		    db	  0
seg000:0E63		    db	  0
seg000:0E64		    db	  0
seg000:0E65		    db	  0
seg000:0E66		    db	  0
seg000:0E67		    db	  0
seg000:0E68		    db	  0
seg000:0E69		    db	  0
seg000:0E6A		    db	  0
seg000:0E6B		    db	  0
seg000:0E6C		    db	  0
seg000:0E6D		    db	  0
seg000:0E6E		    db	  0
seg000:0E6F		    db	  0
seg000:0E70		    db	  0
seg000:0E71		    db	  0
seg000:0E72		    db	  0
seg000:0E73		    db	  0
seg000:0E74		    db	  0
seg000:0E75		    db	  0
seg000:0E76		    db	  0
seg000:0E77		    db	  0
seg000:0E78		    db	  0
seg000:0E79		    db	  0
seg000:0E7A		    db	  0
seg000:0E7B		    db	  0
seg000:0E7C		    db	  0
seg000:0E7D		    db	  0
seg000:0E7E		    db	  0
seg000:0E7F unk_E7F	    db	  0		    ; DATA XREF: seg000:cmos_a4f2_idx_0o
seg000:0E7F					    ; seg000:cmos_15ho	...
seg000:0E80		    db	  0
seg000:0E81		    db	  0
seg000:0E82		    db	  0
seg000:0E83 unk_E83	    db	  0		    ; DATA XREF: seg000:cmos_21ho
seg000:0E84		    db	  0
seg000:0E85 unk_E85	    db	  0		    ; DATA XREF: seg000:cmos_17ho
seg000:0E86		    db	  0
seg000:0E87		    db	  0
seg000:0E88		    db	  0
seg000:0E89 unk_E89	    db	  0		    ; DATA XREF: seg000:cmos_a4f2_idx_1o
seg000:0E8A		    db	  0
seg000:0E8B		    db	  0
seg000:0E8C		    db	  0
seg000:0E8D		    db	  0
seg000:0E8E		    db	  0
seg000:0E8F		    db	  0
seg000:0E90		    db	  0
seg000:0E91		    db	  0
seg000:0E92		    db	  0
seg000:0E93		    db	  0
seg000:0E94		    db	  0
seg000:0E95		    db	  0
seg000:0E96		    db	  0
seg000:0E97		    db	  0
seg000:0E98		    db	  0
seg000:0E99		    db	  0
seg000:0E9A		    db	  0
seg000:0E9B		    db	  0
seg000:0E9C		    db	  0
seg000:0E9D		    db	  0
seg000:0E9E		    db	  0
seg000:0E9F		    db	  0
seg000:0EA0		    db	  0
seg000:0EA1		    db	  0
seg000:0EA2		    db	  0
seg000:0EA3		    db	  0
seg000:0EA4		    db	  0
seg000:0EA5		    db	  0
seg000:0EA6		    db	  0
seg000:0EA7		    db	  0
seg000:0EA8		    db	  0
seg000:0EA9		    db	  0
seg000:0EAA		    db	  0
seg000:0EAB		    db	  0
seg000:0EAC		    db	  0
seg000:0EAD		    db	  0
seg000:0EAE		    db	  0
seg000:0EAF		    db	  0
seg000:0EB0		    db	  0
seg000:0EB1		    db	  0
seg000:0EB2		    db	  0
seg000:0EB3		    db	  0
seg000:0EB4		    db	  0
seg000:0EB5		    db	  0
seg000:0EB6		    db	  0
seg000:0EB7		    db	  0
seg000:0EB8		    db	  0
seg000:0EB9		    db	  0
seg000:0EBA		    db	  0
seg000:0EBB		    db	  0
seg000:0EBC		    db	  0
seg000:0EBD		    db	  0
seg000:0EBE		    db	  0
seg000:0EBF		    db	  0
seg000:0EC0		    db	  0
seg000:0EC1		    db	  0
seg000:0EC2		    db	  0
seg000:0EC3		    db	  0
seg000:0EC4		    db	  0
seg000:0EC5		    db	  0
seg000:0EC6		    db	  0
seg000:0EC7		    db	  0
seg000:0EC8		    db	  0
seg000:0EC9		    db	  0
seg000:0ECA		    db	  0
seg000:0ECB		    db	  0
seg000:0ECC		    db	  0
seg000:0ECD		    db	  0
seg000:0ECE		    db	  0
seg000:0ECF		    db	  0
seg000:0ED0		    db	  0
seg000:0ED1		    db	  0
seg000:0ED2		    db	  0
seg000:0ED3		    db	  0
seg000:0ED4		    db	  0
seg000:0ED5		    db	  0
seg000:0ED6		    db	  0
seg000:0ED7		    db	  0
seg000:0ED8		    db	  0
seg000:0ED9		    db	  0
seg000:0EDA		    db	  0
seg000:0EDB		    db	  0
seg000:0EDC		    db	  0
seg000:0EDD		    db	  0
seg000:0EDE		    db	  0
seg000:0EDF		    db	  0
seg000:0EE0		    db	  0
seg000:0EE1		    db	  0
seg000:0EE2		    db	  0
seg000:0EE3		    db	  0
seg000:0EE4		    db	  0
seg000:0EE5		    db	  0
seg000:0EE6		    db	  0
seg000:0EE7		    db	  0
seg000:0EE8		    db	  0
seg000:0EE9		    db	  0
seg000:0EEA		    db	  0
seg000:0EEB		    db	  0
seg000:0EEC		    db	  0
seg000:0EED		    db	  0
seg000:0EEE		    db	  0
seg000:0EEF		    db	  0
seg000:0EF0		    db	  0
seg000:0EF1		    db	  0
seg000:0EF2		    db	  0
seg000:0EF3		    db	  0
seg000:0EF4		    db	  0
seg000:0EF5		    db	  0
seg000:0EF6		    db	  0
seg000:0EF7		    db	  0
seg000:0EF8		    db	  0
seg000:0EF9		    db	  0
seg000:0EFA		    db	  0
seg000:0EFB		    db	  0
seg000:0EFC		    db	  0
seg000:0EFD		    db	  0
seg000:0EFE		    db	  0
seg000:0EFF		    db	  0
seg000:0F00		    db	  0
seg000:0F01		    db	  0
seg000:0F02		    db	  0
seg000:0F03		    db	  0
seg000:0F04		    db	  0
seg000:0F05		    db	  0
seg000:0F06		    db	  0
seg000:0F07		    db	  0
seg000:0F08		    db	  0
seg000:0F09		    db	  0
seg000:0F0A		    db	  0
seg000:0F0B		    db	  0
seg000:0F0C		    db	  0
seg000:0F0D		    db	  0
seg000:0F0E		    db	  0
seg000:0F0F		    db	  0
seg000:0F10		    db	  0
seg000:0F11		    db	  0
seg000:0F12		    db	  0
seg000:0F13		    db	  0
seg000:0F14		    db	  0
seg000:0F15		    db	  0
seg000:0F16		    db	  0
seg000:0F17		    db	  0
seg000:0F18		    db	  0
seg000:0F19		    db	  0
seg000:0F1A		    db	  0
seg000:0F1B		    db	  0
seg000:0F1C		    db	  0
seg000:0F1D		    db	  0
seg000:0F1E		    db	  0
seg000:0F1F		    db	  0
seg000:0F20		    db	  0
seg000:0F21		    db	  0
seg000:0F22		    db	  0
seg000:0F23		    db	  0
seg000:0F24		    db	  0
seg000:0F25		    db	  0
seg000:0F26		    db	  0
seg000:0F27		    db	  0
seg000:0F28		    db	  0
seg000:0F29		    db	  0
seg000:0F2A		    db	  0
seg000:0F2B		    db	  0
seg000:0F2C		    db	  0
seg000:0F2D		    db	  0
seg000:0F2E		    db	  0
seg000:0F2F		    db	  0
seg000:0F30		    db	  0
seg000:0F31		    db	  0
seg000:0F32		    db	  0
seg000:0F33		    db	  0
seg000:0F34		    db	  0
seg000:0F35		    db	  0
seg000:0F36		    db	  0
seg000:0F37		    db	  0
seg000:0F38		    db	  0
seg000:0F39		    db	  0
seg000:0F3A		    db	  0
seg000:0F3B		    db	  0
seg000:0F3C		    db	  0
seg000:0F3D		    db	  0
seg000:0F3E		    db	  0
seg000:0F3F		    db	  0
seg000:0F40		    db	  0
seg000:0F41		    db	  0
seg000:0F42		    db	  0
seg000:0F43		    db	  0
seg000:0F44		    db	  0
seg000:0F45		    db	  0
seg000:0F46		    db	  0
seg000:0F47		    db	  0
seg000:0F48		    db	  0
seg000:0F49		    db	  0
seg000:0F4A		    db	  0
seg000:0F4B		    db	  0
seg000:0F4C		    db	  0
seg000:0F4D		    db	  0
seg000:0F4E		    db	  0
seg000:0F4F		    db	  0
seg000:0F50		    db	  0
seg000:0F51		    db	  0
seg000:0F52		    db	  0
seg000:0F53		    db	  0
seg000:0F54		    db	  0
seg000:0F55		    db	  0
seg000:0F56		    db	  0
seg000:0F57		    db	  0
seg000:0F58		    db	  0
seg000:0F59		    db	  0
seg000:0F5A		    db	  0
seg000:0F5B		    db	  0
seg000:0F5C		    db	  0
seg000:0F5D		    db	  0
seg000:0F5E		    db	  0
seg000:0F5F		    db	  0
seg000:0F60		    db	  0
seg000:0F61		    db	  0
seg000:0F62		    db	  0
seg000:0F63		    db	  0
seg000:0F64		    db	  0
seg000:0F65		    db	  0
seg000:0F66		    db	  0
seg000:0F67		    db	  0
seg000:0F68		    db	  0
seg000:0F69		    db	  0
seg000:0F6A		    db	  0
seg000:0F6B		    db	  0
seg000:0F6C		    db	  0
seg000:0F6D		    db	  0
seg000:0F6E		    db	  0
seg000:0F6F		    db	  0
seg000:0F70		    db	  0
seg000:0F71		    db	  0
seg000:0F72		    db	  0
seg000:0F73		    db	  0
seg000:0F74		    db	  0
seg000:0F75		    db	  0
seg000:0F76		    db	  0
seg000:0F77		    db	  0
seg000:0F78		    db	  0
seg000:0F79		    db	  0
seg000:0F7A		    db	  0
seg000:0F7B		    db	  0
seg000:0F7C		    db	  0
seg000:0F7D		    db	  0
seg000:0F7E		    db	  0
seg000:0F7F		    db	  0
seg000:0F80		    db	  0
seg000:0F81		    db	  0
seg000:0F82		    db	  0
seg000:0F83		    db	  0
seg000:0F84		    db	  0
seg000:0F85		    db	  0
seg000:0F86		    db	  0
seg000:0F87		    db	  0
seg000:0F88		    db	  0
seg000:0F89		    db	  0
seg000:0F8A		    db	  0
seg000:0F8B		    db	  0
seg000:0F8C		    db	  0
seg000:0F8D		    db	  0
seg000:0F8E		    db	  0
seg000:0F8F		    db	  0
seg000:0F90		    db	  0
seg000:0F91		    db	  0
seg000:0F92		    db	  0
seg000:0F93		    db	  0
seg000:0F94		    db	  0
seg000:0F95		    db	  0
seg000:0F96		    db	  0
seg000:0F97		    db	  0
seg000:0F98		    db	  0
seg000:0F99		    db	  0
seg000:0F9A		    db	  0
seg000:0F9B		    db	  0
seg000:0F9C		    db	  0
seg000:0F9D		    db	  0
seg000:0F9E		    db	  0
seg000:0F9F		    db	  0
seg000:0FA0		    db	  0
seg000:0FA1		    db	  0
seg000:0FA2		    db	  0
seg000:0FA3		    db	  0
seg000:0FA4		    db	  0
seg000:0FA5		    db	  0
seg000:0FA6		    db	  0
seg000:0FA7		    db	  0
seg000:0FA8		    db	  0
seg000:0FA9		    db	  0
seg000:0FAA		    db	  0
seg000:0FAB		    db	  0
seg000:0FAC		    db	  0
seg000:0FAD		    db	  0
seg000:0FAE		    db	  0
seg000:0FAF		    db	  0
seg000:0FB0		    db	  0
seg000:0FB1		    db	  0
seg000:0FB2		    db	  0
seg000:0FB3		    db	  0
seg000:0FB4		    db	  0
seg000:0FB5		    db	  0
seg000:0FB6		    db	  0
seg000:0FB7		    db	  0
seg000:0FB8		    db	  0
seg000:0FB9		    db	  0
seg000:0FBA		    db	  0
seg000:0FBB		    db	  0
seg000:0FBC		    db	  0
seg000:0FBD		    db	  0
seg000:0FBE		    db	  0
seg000:0FBF		    db	  0
seg000:0FC0		    db	  0
seg000:0FC1		    db	  0
seg000:0FC2		    db	  0
seg000:0FC3		    db	  0
seg000:0FC4		    db	  0
seg000:0FC5		    db	  0
seg000:0FC6		    db	  0
seg000:0FC7		    db	  0
seg000:0FC8		    db	  0
seg000:0FC9		    db	  0
seg000:0FCA		    db	  0
seg000:0FCB		    db	  0
seg000:0FCC		    db	  0
seg000:0FCD		    db	  0
seg000:0FCE		    db	  0
seg000:0FCF		    db	  0
seg000:0FD0		    db	  0
seg000:0FD1		    db	  0
seg000:0FD2		    db	  0
seg000:0FD3		    db	  0
seg000:0FD4		    db	  0
seg000:0FD5		    db	  0
seg000:0FD6		    db	  0
seg000:0FD7		    db	  0
seg000:0FD8		    db	  0
seg000:0FD9		    db	  0
seg000:0FDA		    db	  0
seg000:0FDB		    db	  0
seg000:0FDC		    db	  0
seg000:0FDD		    db	  0
seg000:0FDE		    db	  0
seg000:0FDF		    db	  0
seg000:0FE0		    db	  0
seg000:0FE1		    db	  0
seg000:0FE2		    db	  0
seg000:0FE3		    db	  0
seg000:0FE4		    db	  0
seg000:0FE5		    db	  0
seg000:0FE6		    db	  0
seg000:0FE7		    db	  0
seg000:0FE8		    db	  0
seg000:0FE9		    db	  0
seg000:0FEA		    db	  0
seg000:0FEB		    db	  0
seg000:0FEC		    db	  0
seg000:0FED		    db	  0
seg000:0FEE		    db	  0
seg000:0FEF		    db	  0
seg000:0FF0		    db	  0
seg000:0FF1		    db	  0
seg000:0FF2		    db	  0
seg000:0FF3		    db	  0
seg000:0FF4		    db	  0
seg000:0FF5		    db	  0
seg000:0FF6		    db	  0
seg000:0FF7		    db	  0
seg000:0FF8		    db	  0
seg000:0FF9		    db	  0
seg000:0FFA		    db	  0
seg000:0FFB		    db	  0
seg000:0FFC		    db	  0
seg000:0FFD		    db	  0
seg000:0FFE		    db	  0
seg000:0FFF		    db	  0
seg000:1000 aCopyrightC1989By db 'Copyright (C) 1989, by Zenith Data Systems Corporation',0
seg000:1037		    db	  0
seg000:1038		    db	  0
seg000:1039		    db	  0
seg000:103A		    db	  0
seg000:103B		    db	  0
seg000:103C		    db	  0
seg000:103D		    db	  0
seg000:103E		    db	  0
seg000:103F		    db	  0
seg000:1040		    db	  0
seg000:1041		    db	  0
seg000:1042		    db	  0
seg000:1043		    db	  0
seg000:1044		    db	  0
seg000:1045		    db	  0
seg000:1046		    db	  0
seg000:1047		    db	  0
seg000:1048		    db	  0
seg000:1049		    db	  0
seg000:104A		    db	  0
seg000:104B		    db	  0
seg000:104C		    db	  0
seg000:104D		    db	  0
seg000:104E		    db	  0
seg000:104F		    db	  0
seg000:1050
seg000:1050 ; =============== S	U B R O	U T I N	E =======================================
seg000:1050
seg000:1050
seg000:1050 ColrWarm_Boot   proc far		    ; CODE XREF: cmd_trace+4Ej
seg000:1050					    ; sub_785E+3Cj ...
seg000:1050
seg000:1050 ; FUNCTION CHUNK AT	seg000:15FC SIZE 0000009A BYTES
seg000:1050 ; FUNCTION CHUNK AT	seg000:182B SIZE 00000015 BYTES
seg000:1050 ; FUNCTION CHUNK AT	seg000:62B0 SIZE 0000011A BYTES
seg000:1050 ; FUNCTION CHUNK AT	seg000:6F38 SIZE 0000006A BYTES
seg000:1050 ; FUNCTION CHUNK AT	seg000:A2CF SIZE 0000003C BYTES
seg000:1050
seg000:1050		    cli
seg000:1051		    cld
seg000:1052		    mov	    ax,	40h ; '@'
seg000:1055		    mov	    ds,	ax
seg000:1057		    assume es:nothing, ds:nothing
seg000:1057		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:1057					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1057					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1057					    ; 3: 1=read	high switches
seg000:1057					    ; 4: 0=enable RAM parity checking
seg000:1057					    ; 5: 0=enable I/O channel check
seg000:1057					    ; 6: 0=hold	keyboard clock low
seg000:1057					    ; 7: 0=enable kbrd
seg000:1059		    and	    al,	7Fh
seg000:105B		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:105B					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:105B					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:105B					    ; 3: 1=read	high switches
seg000:105B					    ; 4: 0=enable RAM parity checking
seg000:105B					    ; 5: 0=enable I/O channel check
seg000:105B					    ; 6: 0=hold	keyboard clock low
seg000:105B					    ; 7: 0=enable kbrd
seg000:105D		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:105D					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:105D					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:105D					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:105D					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:105D					    ;	 +------------------------------+-----------------------------------+
seg000:105D					    ; 4:  INH	  0=keyboard communications inhibited
seg000:105D					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:105D					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:105D					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:105D					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:105F		    and	    al,	4
seg000:1061		    jnz	    short Warm_Boot
seg000:1063		    mov	    al,	0Dh
seg000:1065		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1067		    jmp	    short Cold_Boot
seg000:1069 ; ---------------------------------------------------------------------------
seg000:1069
seg000:1069 Warm_Boot:				    ; CODE XREF: ColrWarm_Boot+11j
seg000:1069		    mov	    ax,	30h
seg000:106C		    mov	    ss,	ax
seg000:106E		    assume ss:nothing
seg000:106E		    mov	    sp,	100h
seg000:1071		    mov	    al,	8Fh
seg000:1073		    out	    70h, al	    ; CMOS Memory:
seg000:1073					    ;
seg000:1075		    jmp	    short $+2
seg000:1077		    in	    al,	71h	    ; CMOS Memory
seg000:1079		    mov	    ah,	al
seg000:107B		    mov	    al,	8Fh
seg000:107D		    out	    70h, al	    ; CMOS Memory:
seg000:107D					    ;
seg000:107F		    jmp	    short $+2
seg000:1081		    mov	    al,	0
seg000:1083		    out	    71h, al	    ; CMOS Memory:
seg000:1083					    ; used by real-time	clock
seg000:1085		    cmp	    ah,	9
seg000:1088		    jnb	    short loc_1093
seg000:108A		    mov	    si,	offset PIC_reg_ini
seg000:108D		    mov	    bx,	offset loc_1093
seg000:1090
seg000:1090 loc_1090:				    ; DATA XREF: seg000:3976o
seg000:1090		    jmp	    load_reg_table
seg000:1093 ; ---------------------------------------------------------------------------
seg000:1093
seg000:1093 loc_1093:				    ; CODE XREF: ColrWarm_Boot+38j
seg000:1093					    ; DATA XREF: ColrWarm_Boot+3Do
seg000:1093		    cmp	    ah,	12h
seg000:1096		    nop
seg000:1097		    jnb	    short Cold_Boot
seg000:1099		    mov	    al,	ah
seg000:109B		    xor	    ah,	ah
seg000:109D		    mov	    si,	ax
seg000:109F		    shl	    si,	1
seg000:10A1		    jmp	    word ptr cs:jump_table[si]
seg000:10A1 ; ---------------------------------------------------------------------------
seg000:10A6 jump_table:				    ; DATA XREF: ColrWarm_Boot+51r
seg000:10A6		    dw offset Cold_Boot	    ; 0
seg000:10A6		    dw offset Cold_Boot	    ; 1
seg000:10A6		    dw offset loc_1374	    ; 2
seg000:10A6		    dw offset loc_1374	    ; 3
seg000:10A6		    dw offset loc_154E	    ; 4
seg000:10A6		    dw offset loc_15FC	    ; 5
seg000:10A6		    dw offset loc_1374	    ; 6
seg000:10A6		    dw offset Cold_Boot	    ; 7
seg000:10A6		    dw offset Cold_Boot	    ; 8
seg000:10A6		    dw offset loc_A2CF	    ; 9
seg000:10A6		    dw offset loc_15FC	    ; 0Ah
seg000:10A6		    dw offset Cold_Boot	    ; 0Bh
seg000:10A6		    dw offset Cold_Boot	    ; 0Ch
seg000:10A6		    dw offset Cold_Boot	    ; 0Dh
seg000:10A6		    dw offset Cold_Boot	    ; 0Eh
seg000:10A6		    dw offset Cold_Boot	    ; 0Fh
seg000:10A6		    dw offset loc_6F38	    ; 10h
seg000:10A6		    dw offset error?	    ; 11h
seg000:10CA ; ---------------------------------------------------------------------------
seg000:10CA
seg000:10CA Cold_Boot:				    ; CODE XREF: ColrWarm_Boot+17j
seg000:10CA					    ; ColrWarm_Boot+47j ...
seg000:10CA		    mov	    ax,	cs
seg000:10CC		    mov	    ss,	ax
seg000:10CE		    assume ss:nothing
seg000:10CE		    mov	    sp,	338h
seg000:10D1		    out	    0FBh, al	    ; AT 80287 data.
seg000:10D1					    ; 286 sends	opcodes	& operands and receives	results.
seg000:10D3		    pushf
seg000:10D4		    inc	    byte ptr ds:0BFh
seg000:10D8		    popf
seg000:10D9		    mov	    byte ptr ds:0BFh, 1
seg000:10DE		    mov	    byte ptr cs:word_4C5, 0
seg000:10E4		    out	    0F5h, al
seg000:10E6		    mov	    al,	0Eh
seg000:10E8		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:10EA		    mov	    dx,	81h
seg000:10ED		    mov	    cx,	0Fh
seg000:10F0		    xor	    al,	al
seg000:10F2
seg000:10F2 DMA_init_loop:			    ; CODE XREF: ColrWarm_Boot+A4j
seg000:10F2		    out	    dx,	al	    ; DMA page register	74LS612:
seg000:10F2					    ; Channel 2	(diskette DMA)	(address bits 16-23)
seg000:10F3		    inc	    dx
seg000:10F4		    loop    DMA_init_loop
seg000:10F6		    mov	    al,	0Fh
seg000:10F8		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:10FA		    mov	    si,	offset DMA_PIC_reg_ini
seg000:10FD		    mov	    bx,	offset loc_1103
seg000:1100		    jmp	    load_reg_table
seg000:1103 ; ---------------------------------------------------------------------------
seg000:1103
seg000:1103 loc_1103:				    ; DATA XREF: ColrWarm_Boot+ADo
seg000:1103		    mov	    al,	10h
seg000:1105		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1107		    mov	    si,	offset PIC_reg_ini
seg000:110A		    mov	    bx,	offset init_FPUerr_Int
seg000:110D		    jmp	    load_reg_table
seg000:1110 ; ---------------------------------------------------------------------------
seg000:1110
seg000:1110 init_FPUerr_Int:			    ; DATA XREF: ColrWarm_Boot+BAo
seg000:1110		    mov	    al,	11h
seg000:1112		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1114		    mov	    ax,	0
seg000:1117		    mov	    es,	ax
seg000:1119		    assume es:nothing
seg000:1119		    mov	    bx,	40h
seg000:111C		    mov	    word ptr es:[bx], offset FPU_error_0 ; Interrupt Vector Table (IVT)
seg000:1121		    mov	    word ptr es:[bx+2],	cs
seg000:1125		    mov	    al,	40h
seg000:1127		    out	    0F2h, al
seg000:1129		    or	    al,	80h
seg000:112B		    out	    0F2h, al
seg000:112D		    out	    8Ch, al
seg000:112F		    mov	    dx,	3B8h
seg000:1132		    mov	    al,	1
seg000:1134		    out	    dx,	al
seg000:1135		    mov	    byte ptr cs:loc_34,	7Fh
seg000:113B		    mov	    ax,	0C000h
seg000:113E		    mov	    es,	ax
seg000:1140		    assume es:nothing
seg000:1140		    mov	    ax,	es:0
seg000:1144		    cmp	    ax,	0AA55h
seg000:1147		    jz	    short video_bios_detected
seg000:1149		    mov	    al,	12h
seg000:114B		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:114D		    mov	    dx,	3D8h
seg000:1150		    mov	    al,	29h
seg000:1152		    out	    dx,	al
seg000:1153		    mov	    dx,	3D9h
seg000:1156		    mov	    al,	30h
seg000:1158		    out	    dx,	al
seg000:1159		    mov	    si,	offset init_CGA_table
seg000:115C		    mov	    cx,	10h
seg000:115F		    mov	    bl,	0
seg000:1161		    mov	    dx,	3D4h
seg000:1164
seg000:1164 CGA_init_loop:			    ; CODE XREF: ColrWarm_Boot+120j
seg000:1164		    mov	    al,	bl
seg000:1166		    out	    dx,	al	    ; Video: CRT cntrlr	addr
seg000:1166					    ; horizontal total
seg000:1167		    inc	    dx
seg000:1168		    mov	    al,	cs:[si]
seg000:116B		    out	    dx,	al	    ; Video: CRT controller internal registers
seg000:116C		    dec	    dx
seg000:116D		    inc	    si
seg000:116E		    inc	    bl
seg000:1170		    loop    CGA_init_loop
seg000:1172		    mov	    dx,	3B8h
seg000:1175		    mov	    al,	29h ; ')'
seg000:1177		    out	    dx,	al
seg000:1178		    mov	    si,	offset init_MDA_table
seg000:117B		    mov	    cx,	10h
seg000:117E		    mov	    bl,	0
seg000:1180		    mov	    dx,	3B4h
seg000:1183
seg000:1183 MDA_init_loop:			    ; CODE XREF: ColrWarm_Boot+13Fj
seg000:1183		    mov	    al,	bl
seg000:1185		    out	    dx,	al	    ; Video: CRT cntrlr	addr
seg000:1185					    ; horizontal total
seg000:1186		    inc	    dx
seg000:1187		    mov	    al,	cs:[si]
seg000:118A		    out	    dx,	al	    ; Video: CRT controller internal registers
seg000:118B		    dec	    dx
seg000:118C		    inc	    si
seg000:118D		    inc	    bl
seg000:118F		    loop    MDA_init_loop
seg000:1191
seg000:1191 video_bios_detected:		    ; CODE XREF: ColrWarm_Boot+F7j
seg000:1191		    mov	    al,	13h
seg000:1193		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1195		    mov	    ax,	0B000h
seg000:1198		    mov	    es,	ax
seg000:119A		    assume es:nothing
seg000:119A		    mov	    di,	0
seg000:119D		    mov	    ax,	720h
seg000:11A0		    mov	    cx,	8000h
seg000:11A3		    rep	stosw
seg000:11A5		    mov	    byte ptr cs:4Bh, 0
seg000:11AB		    mov	    al,	8Bh
seg000:11AD		    mov	    ah,	al
seg000:11AF		    out	    70h, al	    ; CMOS Memory:
seg000:11AF					    ;
seg000:11B1		    jmp	    short $+2
seg000:11B3		    in	    al,	71h	    ; CMOS Memory
seg000:11B5		    jmp	    short $+2
seg000:11B7		    mov	    al,	8Bh
seg000:11B9		    mov	    ah,	al
seg000:11BB		    out	    70h, al	    ; CMOS Memory:
seg000:11BB					    ;
seg000:11BD		    jmp	    short $+2
seg000:11BF		    in	    al,	71h	    ; CMOS Memory
seg000:11C1		    and	    al,	3
seg000:11C3		    xchg    ah,	al
seg000:11C5		    jmp	    short $+2
seg000:11C7		    out	    70h, al	    ; CMOS Memory:
seg000:11C7					    ; used by real-time	clock
seg000:11C9		    mov	    al,	ah
seg000:11CB		    jmp	    short $+2
seg000:11CD		    out	    71h, al	    ; CMOS Memory:
seg000:11CD					    ; used by real-time	clock
seg000:11CF		    mov	    al,	8Ch
seg000:11D1		    jmp	    short $+2
seg000:11D3		    out	    70h, al	    ; CMOS Memory:
seg000:11D3					    ;
seg000:11D5		    jmp	    short $+2
seg000:11D7		    in	    al,	71h	    ; CMOS Memory
seg000:11D9		    mov	    al,	15h
seg000:11DB		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:11DD		    stc
seg000:11DE		    jnb	    short CPU_test
seg000:11E0		    clc
seg000:11E1		    jb	    short CPU_test
seg000:11E3		    xor	    ax,	ax
seg000:11E5		    jnz	    short CPU_test
seg000:11E7
seg000:11E7 loc_11E7:				    ; CODE XREF: ColrWarm_Boot+1B0j
seg000:11E7		    mov	    ds,	ax
seg000:11E9		    assume ds:nothing
seg000:11E9		    mov	    bx,	ds
seg000:11EB		    mov	    ss,	bx
seg000:11ED		    mov	    cx,	ss
seg000:11EF		    mov	    es,	cx
seg000:11F1		    assume es:nothing
seg000:11F1		    mov	    dx,	es
seg000:11F3		    mov	    bp,	dx
seg000:11F5		    mov	    sp,	bp
seg000:11F7		    mov	    si,	sp
seg000:11F9		    mov	    di,	si
seg000:11FB		    cmp	    ax,	di
seg000:11FD		    jnz	    short CPU_test
seg000:11FF		    dec	    ax
seg000:1200		    jb	    short loc_11E7
seg000:1202		    test    ax,	ax
seg000:1204		    jns	    short CPU_test
seg000:1206		    jz	    short CPU_test
seg000:1208		    neg	    ax
seg000:120A		    js	    short CPU_test
seg000:120C		    in	    al,	8Ch
seg000:120E		    or	    al,	1
seg000:1210		    out	    8Ch, al
seg000:1212		    out	    0F2h, al
seg000:1214		    jmp	    short CPU_ok
seg000:1216 ; ---------------------------------------------------------------------------
seg000:1216
seg000:1216 CPU_test:				    ; CODE XREF: ColrWarm_Boot+18Ej
seg000:1216					    ; ColrWarm_Boot+191j ...
seg000:1216		    mov	    ax,	40h ; '@'
seg000:1219		    mov	    ds,	ax
seg000:121B		    assume ds:nothing
seg000:121B		    mov	    ax,	cs
seg000:121D		    mov	    ss,	ax
seg000:121F		    mov	    sp,	338h
seg000:1222		    mov	    si,	offset aCpuFailure ; "CPU failure! +++"
seg000:1225		    call    print_?
seg000:1228
seg000:1228 CPU_ok:				    ; CODE XREF: ColrWarm_Boot+1C4j
seg000:1228		    mov	    al,	16h
seg000:122A		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:122C		    mov	    ax,	40h
seg000:122F		    mov	    ds,	ax
seg000:1231		    mov	    ax,	cs
seg000:1233		    mov	    ss,	ax
seg000:1235		    mov	    sp,	338h
seg000:1238		    mov	    ax,	0
seg000:123B		    mov	    bx,	1000h
seg000:123E		    mov	    cx,	7800h
seg000:1241
seg000:1241 loc_1241:				    ; CODE XREF: ColrWarm_Boot+1FAj
seg000:1241		    add	    ax,	cs:[bx]
seg000:1244		    adc	    ax,	0
seg000:1247		    add	    bx,	2
seg000:124A		    loop    loc_1241
seg000:124C		    cmp	    ax,	1
seg000:124F		    jnz	    short loc_125F
seg000:1251		    in	    al,	8Ch
seg000:1253		    or	    al,	2
seg000:1255		    out	    8Ch, al
seg000:1257		    out	    0F2h, al
seg000:1259		    mov	    al,	17h
seg000:125B		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:125D		    jmp	    short loc_1265
seg000:125F ; ---------------------------------------------------------------------------
seg000:125F
seg000:125F loc_125F:				    ; CODE XREF: ColrWarm_Boot+1FFj
seg000:125F					    ; sub_8C7B+23p
seg000:125F		    mov	    si,	offset aRomChecksumFai ; "ROM checksum failure!	+++"
seg000:1262		    call    print_?
seg000:1265
seg000:1265 loc_1265:				    ; CODE XREF: ColrWarm_Boot+20Dj
seg000:1265		    mov	    al,	8Fh
seg000:1267		    out	    70h, al	    ; CMOS Memory:
seg000:1267					    ;
seg000:1269		    jmp	    short $+2
seg000:126B		    mov	    al,	11h
seg000:126D		    out	    71h, al	    ; CMOS Memory:
seg000:126D					    ;
seg000:126F		    mov	    ah,	60h
seg000:1271		    call    Keyboard_command
seg000:1274		    call    Keyboard_readyWait
seg000:1277		    mov	    al,	5Dh
seg000:1279		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:127B		    mov	    ah,	0FEh
seg000:127D		    call    Keyboard_command
seg000:1280		    mov	    cx,	64h
seg000:1283		    call    delay_doubleCX
seg000:1286		    mov	    si,	offset aSystemControlP ; "System Control Processor failure! +++"
seg000:1289		    call    print_?
seg000:128C
seg000:128C error?:				    ; CODE XREF: ColrWarm_Boot+51j
seg000:128C					    ; DATA XREF: ColrWarm_Boot:jump_tableo
seg000:128C		    call    test_print_error?
seg000:128F		    mov	    al,	18h
seg000:1291		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1293		    mov	    bx,	ds:72h
seg000:1297		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:1297					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1297					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1297					    ; 3: 1=read	high switches
seg000:1297					    ; 4: 0=enable RAM parity checking
seg000:1297					    ; 5: 0=enable I/O channel check
seg000:1297					    ; 6: 0=hold	keyboard clock low
seg000:1297					    ; 7: 0=enable kbrd
seg000:1299		    or	    al,	0Ch
seg000:129B		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:129B					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:129B					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:129B					    ; 3: 1=read	high switches
seg000:129B					    ; 4: 0=enable RAM parity checking
seg000:129B					    ; 5: 0=enable I/O channel check
seg000:129B					    ; 6: 0=hold	keyboard clock low
seg000:129B					    ; 7: 0=enable kbrd
seg000:129D		    and	    al,	0F3h
seg000:129F		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:129F					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:129F					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:129F					    ; 3: 1=read	high switches
seg000:129F					    ; 4: 0=enable RAM parity checking
seg000:129F					    ; 5: 0=enable I/O channel check
seg000:129F					    ; 6: 0=hold	keyboard clock low
seg000:129F					    ; 7: 0=enable kbrd
seg000:12A1		    cmp	    word ptr cs:loc_43+1, 1234h
seg000:12A8		    jnz	    short loc_12BD
seg000:12AA		    cmp	    bx,	1234h
seg000:12AE		    jnz	    short loc_12BD
seg000:12B0		    mov	    ax,	cs
seg000:12B2		    mov	    ss,	ax
seg000:12B4		    mov	    sp,	338h
seg000:12B7		    call    sgdt_hlt?
seg000:12BA ; ---------------------------------------------------------------------------
seg000:12BA		    jmp	    loc_1374
seg000:12BD ; ---------------------------------------------------------------------------
seg000:12BD
seg000:12BD loc_12BD:				    ; CODE XREF: ColrWarm_Boot+258j
seg000:12BD					    ; ColrWarm_Boot+25Ej
seg000:12BD		    mov	    al,	19h
seg000:12BF		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:12C1		    push    dx
seg000:12C2		    push    ax
seg000:12C3		    mov	    dx,	9F4h
seg000:12C6		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:12C6					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:12C6					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:12C6					    ; 3: 1=read	high switches
seg000:12C6					    ; 4: 0=enable RAM parity checking
seg000:12C6					    ; 5: 0=enable I/O channel check
seg000:12C6					    ; 6: 0=hold	keyboard clock low
seg000:12C6					    ; 7: 0=enable kbrd
seg000:12C8		    mov	    al,	8
seg000:12CA		    out	    dx,	al
seg000:12CB		    pop	    ax
seg000:12CC		    pop	    dx
seg000:12CD		    mov	    ax,	ds
seg000:12CF		    mov	    ss,	ax
seg000:12D1		    assume ss:nothing
seg000:12D1		    mov	    ax,	cs
seg000:12D3		    mov	    es,	ax
seg000:12D5		    mov	    di,	0
seg000:12D8		    mov	    bp,	offset loc_12E1
seg000:12DB		    mov	    si,	400h
seg000:12DE		    jmp	    ram_test
seg000:12E1 ; ---------------------------------------------------------------------------
seg000:12E1
seg000:12E1 loc_12E1:				    ; DATA XREF: ColrWarm_Boot+288o
seg000:12E1		    mov	    al,	1Ah
seg000:12E3		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:12E5		    mov	    ax,	cs
seg000:12E7		    mov	    ss,	ax
seg000:12E9		    assume ss:nothing
seg000:12E9		    mov	    sp,	338h
seg000:12EC		    mov	    word ptr cs:loc_C5+1, ds
seg000:12F1		    mov	    byte ptr ds:0BFh, 1
seg000:12F6		    mov	    cs:RTC_test_timer, 600h ; RTC_test_timer
seg000:12FD		    mov	    byte ptr cs:word_4C5, 0
seg000:1303		    mov	    al,	5Dh
seg000:1305		    call    test_PS2_ctrl
seg000:1308		    out	    82h, al	    ; DMA page register	74LS612:
seg000:1308					    ; Channel 3	(hard disk DMA)	(address bits 16-23)
seg000:130A		    jnb	    short loc_1312
seg000:130C		    mov	    si,	offset aSystemControlP ; "System Control Processor failure! +++"
seg000:130F		    call    print_?
seg000:1312
seg000:1312 loc_1312:				    ; CODE XREF: ColrWarm_Boot+2BAj
seg000:1312		    mov	    al,	1Bh
seg000:1314		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1316		    call    sgdt_hlt?
seg000:1319 ; ---------------------------------------------------------------------------
seg000:1319		    mov	    bx,	ax
seg000:131B		    mov	    al,	1Ch
seg000:131D		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:131F		    mov	    al,	0B0h
seg000:1321		    call    write_cmos_word
seg000:1324		    call    ram_size?
seg000:1327		    push    ax
seg000:1328		    mov	    al,	1Dh
seg000:132A		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:132C		    mov	    di,	0
seg000:132F		    mov	    es,	di
seg000:1331		    mov	    si,	8000h
seg000:1334		    mov	    bp,	offset loc_133A
seg000:1337		    jmp	    ram_test
seg000:133A ; ---------------------------------------------------------------------------
seg000:133A
seg000:133A loc_133A:				    ; DATA XREF: ColrWarm_Boot+2E4o
seg000:133A		    mov	    al,	1Eh
seg000:133C		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:133E		    pop	    ax
seg000:133F		    sub	    ax,	40h
seg000:1342		    mov	    cl,	6
seg000:1344		    shl	    ax,	cl
seg000:1346		    mov	    es,	ax
seg000:1348		    test    ax,	ax
seg000:134A		    jz	    short loc_1363
seg000:134C
seg000:134C loc_134C:				    ; CODE XREF: ColrWarm_Boot+311j
seg000:134C		    mov	    di,	0
seg000:134F		    mov	    bp,	offset loc_1355
seg000:1352		    jmp	    ram_test
seg000:1355 ; ---------------------------------------------------------------------------
seg000:1355
seg000:1355 loc_1355:				    ; DATA XREF: ColrWarm_Boot+2FFo
seg000:1355		    mov	    ax,	es
seg000:1357		    sub	    ax,	1000h
seg000:135A		    cmp	    ax,	1000h
seg000:135D		    jb	    short loc_1363
seg000:135F		    mov	    es,	ax
seg000:1361		    assume es:nothing
seg000:1361		    jmp	    short loc_134C
seg000:1363 ; ---------------------------------------------------------------------------
seg000:1363
seg000:1363 loc_1363:				    ; CODE XREF: ColrWarm_Boot+2FAj
seg000:1363					    ; ColrWarm_Boot+30Dj
seg000:1363		    mov	    al,	1Fh
seg000:1365		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1367		    mov	    ax,	40h
seg000:136A		    mov	    ds,	ax
seg000:136C		    mov	    byte ptr ds:0BFh, 1
seg000:1371		    call    GDT_init
seg000:1374
seg000:1374 loc_1374:				    ; CODE XREF: ColrWarm_Boot+51j
seg000:1374					    ; ColrWarm_Boot+26Aj
seg000:1374					    ; DATA XREF: ...
seg000:1374		    mov	    al,	20h
seg000:1376		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1378		    mov	    ax,	40h
seg000:137B		    mov	    ds,	ax
seg000:137D		    mov	    byte ptr ds:0BFh, 1
seg000:1382		    mov	    cs:RTC_test_timer, 600h
seg000:1389		    mov	    word ptr cs:loc_43+1, 1234h
seg000:1390		    mov	    ax,	cs
seg000:1392		    mov	    ss,	ax
seg000:1394		    mov	    sp,	338h
seg000:1397		    in	    al,	8Ch
seg000:1399		    xor	    al,	4
seg000:139B		    out	    8Ch, al
seg000:139D		    out	    0F2h, al
seg000:139F		    mov	    ax,	40h
seg000:13A2		    mov	    ds,	ax
seg000:13A4		    mov	    dx,	ds:72h
seg000:13A8		    mov	    bx,	ds:10h
seg000:13AC		    mov	    di,	0
seg000:13AF		    mov	    es,	di
seg000:13B1		    assume es:nothing
seg000:13B1		    mov	    cx,	2000h
seg000:13B4		    xor	    ax,	ax
seg000:13B6		    rep	stosw
seg000:13B8		    mov	    byte ptr ds:0BFh, 1
seg000:13BD		    mov	    byte ptr cs:loc_505+3, 0FEh
seg000:13C3		    mov	    ds:72h, dx
seg000:13C7		    mov	    ds:10h, bx
seg000:13CB		    mov	    ax,	ds
seg000:13CD		    mov	    es,	ax
seg000:13CF		    assume es:nothing
seg000:13CF		    mov	    word ptr cs:loc_C5+1, ax
seg000:13D3		    mov	    word ptr cs:sub_0+1, ax
seg000:13D7		    mov	    word ptr cs:loc_48+1, 40h
seg000:13DE		    mov	    byte ptr cs:loc_CF+2, 0
seg000:13E4		    mov	    al,	21h
seg000:13E6		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:13E8		    cmp	    word ptr ds:72h, 1234h
seg000:13EE		    jnz	    short loc_1403
seg000:13F0		    mov	    al,	5Dh
seg000:13F2		    call    test_PS2_ctrl
seg000:13F5		    out	    82h, al	    ; DMA page register	74LS612:
seg000:13F5					    ; Channel 3	(hard disk DMA)	(address bits 16-23)
seg000:13F7		    mov	    al,	22h
seg000:13F9		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:13FB		    jnb	    short loc_1403
seg000:13FD		    mov	    si,	offset aSystemControlP ; "System Control Processor failure! +++"
seg000:1400		    call    print_?
seg000:1403
seg000:1403 loc_1403:				    ; CODE XREF: ColrWarm_Boot+39Ej
seg000:1403					    ; ColrWarm_Boot+3ABj
seg000:1403		    call    sub_1840
seg000:1406		    mov	    al,	23h
seg000:1408		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:140A		    call    test_cmos
seg000:140D		    mov	    al,	24h
seg000:140F		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1411		    call    near ptr hw_init
seg000:1414		    mov	    al,	25h
seg000:1416		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1418		    call    test_print_error?
seg000:141B		    mov	    byte ptr cs:loc_38+1, 1
seg000:1421		    call    Video_init_?
seg000:1424		    mov	    al,	26h
seg000:1426		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1428		    call    test_print_error?
seg000:142B		    mov	    al,	41h
seg000:142D		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:142D					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:142D					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:142D					    ; 3: 1=read	high switches
seg000:142D					    ; 4: 0=enable RAM parity checking
seg000:142D					    ; 5: 0=enable I/O channel check
seg000:142D					    ; 6: 0=hold	keyboard clock low
seg000:142D					    ; 7: 0=enable kbrd
seg000:142F		    call    ram_cmos_same_size?
seg000:1432		    mov	    al,	27h
seg000:1434		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1436		    call    Keyboard_init
seg000:1439		    mov	    al,	28h
seg000:143B		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:143D		    jnb	    short loc_1445
seg000:143F		    mov	    si,	offset aKeyboardNotRes ; "Keyboard not responding or not connecte"...
seg000:1442		    call    print_?
seg000:1445
seg000:1445 loc_1445:				    ; CODE XREF: ColrWarm_Boot+3EDj
seg000:1445		    mov	    ah,	0AEh	    ; Enable keyboard. Same operation as clearing bit four of the command register.
seg000:1447		    call    Keyboard_command
seg000:144A		    call    password_check
seg000:144D		    call    init_78h7Ch
seg000:1450		    mov	    al,	29h
seg000:1452		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1454		    mov	    al,	0B6h
seg000:1456		    out	    43h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:1458		    call    timer_int_test
seg000:145B		    jb	    short loc_146B
seg000:145D		    mov	    al,	2Ah
seg000:145F		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1461		    in	    al,	8Ch
seg000:1463		    or	    al,	8
seg000:1465		    out	    8Ch, al
seg000:1467		    out	    0F2h, al
seg000:1469		    jmp	    short loc_1471
seg000:146B ; ---------------------------------------------------------------------------
seg000:146B
seg000:146B loc_146B:				    ; CODE XREF: ColrWarm_Boot+40Bj
seg000:146B		    mov	    si,	offset aTimerInterrupt ; "Timer	interrupt failure! +++"
seg000:146E		    call    print_?
seg000:1471
seg000:1471 loc_1471:				    ; CODE XREF: ColrWarm_Boot+419j
seg000:1471		    mov	    al,	8Eh
seg000:1473		    call    read_cmos
seg000:1476		    test    al,	20h
seg000:1478		    jnz	    short loc_1483
seg000:147A		    mov	    al,	94h
seg000:147C		    call    read_cmos
seg000:147F		    test    al,	1
seg000:1481		    jz	    short loc_1491
seg000:1483
seg000:1483 loc_1483:				    ; CODE XREF: ColrWarm_Boot+428j
seg000:1483		    mov	    al,	2Bh
seg000:1485		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:1487		    call    FDD_init_detect?
seg000:148A		    jnb	    short loc_1491
seg000:148C		    call    print_DiskError
seg000:148F		    jmp	    short loc_1499
seg000:1491 ; ---------------------------------------------------------------------------
seg000:1491
seg000:1491 loc_1491:				    ; CODE XREF: ColrWarm_Boot+431j
seg000:1491					    ; ColrWarm_Boot+43Aj
seg000:1491		    in	    al,	8Ch
seg000:1493		    or	    al,	10h
seg000:1495		    out	    8Ch, al
seg000:1497		    out	    0F2h, al
seg000:1499
seg000:1499 loc_1499:				    ; CODE XREF: ColrWarm_Boot+43Fj
seg000:1499		    mov	    al,	2Ch
seg000:149B		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:149D		    call    ide_detect_init?
seg000:14A0		    call    sub_98A5
seg000:14A3		    mov	    al,	2Dh
seg000:14A5		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:14A7		    call    FPU_init_?
seg000:14AA		    mov	    al,	2Eh
seg000:14AC		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:14AE		    call    init_lpt_ser
seg000:14B1		    mov	    al,	30h
seg000:14B3		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:14B5		    mov	    bx,	0C800h
seg000:14B8		    mov	    cx,	30h
seg000:14BB		    mov	    ah,	0
seg000:14BD		    call    Exec_Option_roms
seg000:14C0		    mov	    al,	31h
seg000:14C2		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:14C4		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:14C6		    and	    al,	0FEh
seg000:14C8		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:14CA
seg000:14CA loc_14CA:
seg000:14CA		    call    RTC_date_?
seg000:14CD		    mov	    al,	32h
seg000:14CF		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:14D1		    mov	    byte ptr ds:72h, 0
seg000:14D6		    call    sub_71D9
seg000:14D9		    call    sub_71F8
seg000:14DC		    mov	    al,	33h
seg000:14DE		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:14E0		    mov	    bx,	0E000h
seg000:14E3		    mov	    ch,	80h
seg000:14E5		    mov	    ah,	0FFh
seg000:14E7		    call    Exec_Option_roms
seg000:14EA		    mov	    al,	34h
seg000:14EC		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:14EE		    cmp	    byte ptr ds:73h, 12h
seg000:14F3		    jz	    short loc_14FB
seg000:14F5		    mov	    byte ptr cs:loc_8B,	3
seg000:14FB
seg000:14FB loc_14FB:				    ; CODE XREF: ColrWarm_Boot+4A3j
seg000:14FB		    mov	    al,	2Dh
seg000:14FD		    call    read_cmos
seg000:1500		    call    test_print_error?
seg000:1503		    xor	    ax,	ax
seg000:1505		    mov	    cs:word_4F1, ax
seg000:1509		    mov	    cs:word_4F3, ax
seg000:150D		    mov	    cs:word_4F5, ax
seg000:1511		    mov	    al,	0Eh
seg000:1513		    call    read_cmos
seg000:1516		    test    al,	20h
seg000:1518		    pushf
seg000:1519		    jnz	    short loc_1526
seg000:151B		    mov	    al,	1Dh
seg000:151D		    call    cmos_readALcond
seg000:1520		    and	    al,	3
seg000:1522		    mov	    ah,	0E3h
seg000:1524		    int	    15h
seg000:1526
seg000:1526 loc_1526:				    ; CODE XREF: ColrWarm_Boot+4C9j
seg000:1526		    mov	    al,	35h
seg000:1528		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:152A		    popf
seg000:152B		    pushf
seg000:152C		    call    port_BF4_Out
seg000:152F		    mov	    ah,	0E5h
seg000:1531		    mov	    al,	2
seg000:1533		    int	    15h
seg000:1535		    popf
seg000:1536		    pushf
seg000:1537		    in	    al,	0A1h	    ; Interrupt	Controller #2, 8259A
seg000:1539		    and	    al,	0FEh
seg000:153B		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:153D		    popf
seg000:153E		    jz	    short loc_154E
seg000:1540		    call    Keyboard_?
seg000:1543		    jb	    short loc_1595
seg000:1545		    call    password_?_1
seg000:1548		    call    enter_BIOS?
seg000:154B		    jmp	    Monitor
seg000:154E ; ---------------------------------------------------------------------------
seg000:154E
seg000:154E loc_154E:				    ; CODE XREF: ColrWarm_Boot+51j
seg000:154E					    ; ColrWarm_Boot+4EEj
seg000:154E					    ; DATA XREF: ...
seg000:154E		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:154E					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:154E					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:154E					    ; 3: 1=read	high switches
seg000:154E					    ; 4: 0=enable RAM parity checking
seg000:154E					    ; 5: 0=enable I/O channel check
seg000:154E					    ; 6: 0=hold	keyboard clock low
seg000:154E					    ; 7: 0=enable kbrd
seg000:1550		    and	    al,	0F3h
seg000:1552		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:1552					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1552					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1552					    ; 3: 1=read	high switches
seg000:1552					    ; 4: 0=enable RAM parity checking
seg000:1552					    ; 5: 0=enable I/O channel check
seg000:1552					    ; 6: 0=hold	keyboard clock low
seg000:1552					    ; 7: 0=enable kbrd
seg000:1554		    mov	    ax,	2Dh
seg000:1557		    out	    70h, al	    ; CMOS Memory:
seg000:1557					    ; NMI mask:	enable NMI
seg000:1559		    mov	    ah,	0C0h
seg000:155B		    call    Keyboard_command
seg000:155E		    call    Keyboard_read
seg000:1561		    test    al,	80h
seg000:1563		    jnz	    short loc_156B
seg000:1565		    mov	    si,	offset aKeyboardLockAc ; "[Keyboard lock active: the keyboard is "...
seg000:1568		    call    print_null_terminated
seg000:156B
seg000:156B loc_156B:				    ; CODE XREF: ColrWarm_Boot+513j
seg000:156B		    cmp	    byte ptr cs:loc_26B+1, 0FFh
seg000:1571		    mov	    byte ptr cs:loc_26B+1, 0
seg000:1577		    jz	    short loc_15E1
seg000:1579		    mov	    al,	0Eh
seg000:157B		    call    read_cmos
seg000:157E		    test    al,	20h
seg000:1580		    jnz	    short loc_15E1
seg000:1582		    mov	    byte ptr cs:loc_59,	0FFh
seg000:1588		    call    sub_28F5
seg000:158B		    mov	    bx,	ax
seg000:158D		    xor	    ah,	ah
seg000:158F		    and	    al,	60h
seg000:1591		    test    al,	20h
seg000:1593		    jz	    short loc_15A9
seg000:1595
seg000:1595 loc_1595:				    ; CODE XREF: ColrWarm_Boot+4F3j
seg000:1595		    and	    byte ptr cs:loc_54+3, 7Fh
seg000:159B		    mov	    byte ptr cs:loc_4C+1, 0FFh
seg000:15A1		    call    sub_15ED
seg000:15A4		    cmp	    ah,	80h
seg000:15A7		    jnz	    short loc_15DA
seg000:15A9
seg000:15A9 loc_15A9:				    ; CODE XREF: ColrWarm_Boot+543j
seg000:15A9		    and	    bl,	60h
seg000:15AC		    test    bl,	40h
seg000:15AF		    jz	    short loc_15C5
seg000:15B1		    or	    byte ptr cs:loc_54+3, 80h
seg000:15B7		    mov	    byte ptr cs:loc_4C+1, 0FFh
seg000:15BD		    call    sub_15ED
seg000:15C0		    cmp	    ah,	80h
seg000:15C3		    jnz	    short loc_15DA
seg000:15C5
seg000:15C5 loc_15C5:				    ; CODE XREF: ColrWarm_Boot+55Fj
seg000:15C5		    push    ax
seg000:15C6		    push    ds
seg000:15C7		    mov	    al,	18h
seg000:15C9		    call    table_lookup_ptr
seg000:15CC		    mov	    si,	ds
seg000:15CE		    pop	    ds
seg000:15CF		    assume ds:nothing
seg000:15CF		    pop	    ax
seg000:15D0		    cmp	    si,	0F000h
seg000:15D4		    jz	    short loc_15DA
seg000:15D6		    push    ax
seg000:15D7		    int	    18h		    ; TRANSFER TO ROM BASIC
seg000:15D7					    ; causes transfer to ROM-based BASIC (IBM-PC)
seg000:15D7					    ; often reboots a compatible; often	has no effect at all
seg000:15D9		    pop	    ax
seg000:15DA
seg000:15DA loc_15DA:				    ; CODE XREF: ColrWarm_Boot+557j
seg000:15DA					    ; ColrWarm_Boot+573j ...
seg000:15DA		    test    ah,	ah
seg000:15DC		    jz	    short loc_15E1
seg000:15DE		    call    disk_erro_print
seg000:15E1
seg000:15E1 loc_15E1:				    ; CODE XREF: ColrWarm_Boot+527j
seg000:15E1					    ; ColrWarm_Boot+530j ...
seg000:15E1		    mov	    byte ptr cs:loc_59,	0
seg000:15E7		    call    password_?_1
seg000:15EA		    jmp	    Monitor
seg000:15EA ColrWarm_Boot   endp
seg000:15EA
seg000:15ED
seg000:15ED ; =============== S	U B R O	U T I N	E =======================================
seg000:15ED
seg000:15ED
seg000:15ED sub_15ED	    proc near		    ; CODE XREF: ColrWarm_Boot+551p
seg000:15ED					    ; ColrWarm_Boot+56Dp
seg000:15ED		    cmp	    cs:byte_4CA, 0FFh
seg000:15F3		    jz	    short loc_15F8
seg000:15F5		    int	    19h		    ; DISK BOOT
seg000:15F5					    ; causes reboot of disk system
seg000:15F7		    retn
seg000:15F8 ; ---------------------------------------------------------------------------
seg000:15F8
seg000:15F8 loc_15F8:				    ; CODE XREF: sub_15ED+6j
seg000:15F8		    call    near ptr sub_350D
seg000:15FB		    retn
seg000:15FB sub_15ED	    endp ; sp-analysis failed
seg000:15FB
seg000:15FC ; ---------------------------------------------------------------------------
seg000:15FC ; START OF FUNCTION	CHUNK FOR ColrWarm_Boot
seg000:15FC
seg000:15FC loc_15FC:				    ; CODE XREF: ColrWarm_Boot+51j
seg000:15FC					    ; DATA XREF: ColrWarm_Boot:jump_tableo
seg000:15FC		    cmp	    al,	0Ah
seg000:15FE		    jz	    short loc_160C
seg000:1600		    mov	    al,	20h
seg000:1602		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:1604		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:1604					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:1604					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:1604					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:1604					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:1604					    ;	 +------------------------------+-----------------------------------+
seg000:1604					    ; 4:  INH	  0=keyboard communications inhibited
seg000:1604					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:1604					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:1604					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:1604					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:1606		    and	    al,	1
seg000:1608		    jz	    short loc_160C
seg000:160A		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:160C
seg000:160C loc_160C:				    ; CODE XREF: ColrWarm_Boot+5AEj
seg000:160C					    ; ColrWarm_Boot+5B8j
seg000:160C		    jmp	    dword ptr ds:loc_66+1
seg000:1610 ; ---------------------------------------------------------------------------
seg000:1610
seg000:1610 ram_test:				    ; CODE XREF: ColrWarm_Boot+28Ej
seg000:1610					    ; ColrWarm_Boot+2E7j ...
seg000:1610		    out	    0F7h, al
seg000:1612		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:1612					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1612					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1612					    ; 3: 1=read	high switches
seg000:1612					    ; 4: 0=enable RAM parity checking
seg000:1612					    ; 5: 0=enable I/O channel check
seg000:1612					    ; 6: 0=hold	keyboard clock low
seg000:1612					    ; 7: 0=enable kbrd
seg000:1614		    or	    al,	0Ch
seg000:1616		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:1616					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1616					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1616					    ; 3: 1=read	high switches
seg000:1616					    ; 4: 0=enable RAM parity checking
seg000:1616					    ; 5: 0=enable I/O channel check
seg000:1616					    ; 6: 0=hold	keyboard clock low
seg000:1616					    ; 7: 0=enable kbrd
seg000:1618		    and	    al,	0F3h
seg000:161A		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:161A					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:161A					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:161A					    ; 3: 1=read	high switches
seg000:161A					    ; 4: 0=enable RAM parity checking
seg000:161A					    ; 5: 0=enable I/O channel check
seg000:161A					    ; 6: 0=hold	keyboard clock low
seg000:161A					    ; 7: 0=enable kbrd
seg000:161C		    mov	    ax,	1FEh
seg000:161F		    mov	    cx,	si
seg000:1621		    rep	stosw
seg000:1623		    mov	    dx,	ax
seg000:1625		    not	    ax
seg000:1627		    sub	    di,	si
seg000:1629		    sub	    di,	si
seg000:162B		    mov	    cx,	si
seg000:162D
seg000:162D loc_162D:				    ; CODE XREF: ColrWarm_Boot+5E5j
seg000:162D		    mov	    bx,	es:[di]
seg000:1630		    cmp	    dx,	bx
seg000:1632		    jnz	    short loc_166E
seg000:1634		    stosw
seg000:1635		    loop    loc_162D
seg000:1637		    mov	    dx,	ax
seg000:1639		    mov	    ax,	es
seg000:163B		    cmp	    ax,	0E000h
seg000:163E		    jnb	    short loc_1646
seg000:1640		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:1640					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1640					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1640					    ; 3: 1=read	high switches
seg000:1640					    ; 4: 0=enable RAM parity checking
seg000:1640					    ; 5: 0=enable I/O channel check
seg000:1640					    ; 6: 0=hold	keyboard clock low
seg000:1640					    ; 7: 0=enable kbrd
seg000:1642		    and	    al,	40h
seg000:1644		    jnz	    short loc_1667
seg000:1646
seg000:1646 loc_1646:				    ; CODE XREF: ColrWarm_Boot+5EEj
seg000:1646		    std
seg000:1647		    sub	    di,	2
seg000:164A		    xor	    ax,	ax
seg000:164C		    mov	    cx,	si
seg000:164E
seg000:164E loc_164E:				    ; CODE XREF: ColrWarm_Boot+606j
seg000:164E		    mov	    bx,	es:[di]
seg000:1651		    cmp	    dx,	bx
seg000:1653		    jnz	    short loc_166E
seg000:1655		    stosw
seg000:1656		    loop    loc_164E
seg000:1658		    mov	    dx,	ax
seg000:165A		    mov	    ax,	es
seg000:165C		    cmp	    ax,	0E000h
seg000:165F		    jnb	    short loc_1686
seg000:1661		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:1661					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1661					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1661					    ; 3: 1=read	high switches
seg000:1661					    ; 4: 0=enable RAM parity checking
seg000:1661					    ; 5: 0=enable I/O channel check
seg000:1661					    ; 6: 0=hold	keyboard clock low
seg000:1661					    ; 7: 0=enable kbrd
seg000:1663		    and	    al,	40h
seg000:1665		    jz	    short loc_1686
seg000:1667
seg000:1667 loc_1667:				    ; CODE XREF: ColrWarm_Boot+5F4j
seg000:1667		    xor	    cl,	cl
seg000:1669		    call    print_bad_parity
seg000:166C		    jmp	    short loc_1680
seg000:166E ; ---------------------------------------------------------------------------
seg000:166E
seg000:166E loc_166E:				    ; CODE XREF: ColrWarm_Boot+5E2j
seg000:166E					    ; ColrWarm_Boot+603j
seg000:166E		    mov	    ax,	es
seg000:1670		    cmp	    ax,	0E000h
seg000:1673		    jb	    short loc_1679
seg000:1675		    cld
seg000:1676		    stc
seg000:1677		    jmp	    bp
seg000:1679 ; ---------------------------------------------------------------------------
seg000:1679
seg000:1679 loc_1679:				    ; CODE XREF: ColrWarm_Boot+623j
seg000:1679		    mov	    ax,	bx
seg000:167B		    xor	    cl,	cl
seg000:167D		    call    print_bad_ram
seg000:1680
seg000:1680 loc_1680:				    ; CODE XREF: ColrWarm_Boot+61Cj
seg000:1680		    in	    al,	8Ch
seg000:1682		    or	    al,	4
seg000:1684		    out	    8Ch, al
seg000:1686
seg000:1686 loc_1686:				    ; CODE XREF: ColrWarm_Boot+60Fj
seg000:1686					    ; ColrWarm_Boot+615j
seg000:1686		    out	    0F7h, al
seg000:1688		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:1688					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1688					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1688					    ; 3: 1=read	high switches
seg000:1688					    ; 4: 0=enable RAM parity checking
seg000:1688					    ; 5: 0=enable I/O channel check
seg000:1688					    ; 6: 0=hold	keyboard clock low
seg000:1688					    ; 7: 0=enable kbrd
seg000:168A		    or	    al,	0Ch
seg000:168C
seg000:168C loc_168C:				    ; PC/XT PPI	port B bits:
seg000:168C		    out	    61h, al	    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:168C					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:168C					    ; 3: 1=read	high switches
seg000:168C					    ; 4: 0=enable RAM parity checking
seg000:168C					    ; 5: 0=enable I/O channel check
seg000:168C					    ; 6: 0=hold	keyboard clock low
seg000:168C					    ; 7: 0=enable kbrd
seg000:168E		    and	    al,	0F3h
seg000:1690		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:1690					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1690					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1690					    ; 3: 1=read	high switches
seg000:1690					    ; 4: 0=enable RAM parity checking
seg000:1690					    ; 5: 0=enable I/O channel check
seg000:1690					    ; 6: 0=hold	keyboard clock low
seg000:1690					    ; 7: 0=enable kbrd
seg000:1692		    cld
seg000:1693		    clc
seg000:1694		    jmp	    bp
seg000:1694 ; END OF FUNCTION CHUNK FOR	ColrWarm_Boot
seg000:1696
seg000:1696 ; =============== S	U B R O	U T I N	E =======================================
seg000:1696
seg000:1696
seg000:1696 hw_init	    proc far		    ; CODE XREF: ColrWarm_Boot+3C1p
seg000:1696					    ; sub_877A+A6p
seg000:1696		    push    ax
seg000:1697		    push    bx
seg000:1698		    push    cx
seg000:1699		    push    si
seg000:169A		    push    ds
seg000:169B		    mov	    ax,	0
seg000:169E		    mov	    bx,	offset IVT_table?
seg000:16A1		    mov	    cx,	20h
seg000:16A4		    call    dw_table_copy
seg000:16A7		    mov	    ax,	70h
seg000:16AA		    mov	    bx,	offset dw_table_3
seg000:16AD		    mov	    cx,	8
seg000:16B0		    call    dw_table_copy
seg000:16B3		    mov	    ax,	cs
seg000:16B5		    mov	    ds,	ax
seg000:16B7		    mov	    si,	offset int_ack?jump
seg000:16BA		    mov	    ax,	20h
seg000:16BD		    mov	    cx,	40h
seg000:16C0
seg000:16C0 init_IVT_loop:			    ; CODE XREF: hw_init+2Ej
seg000:16C0		    call    table_store
seg000:16C3		    inc	    ax
seg000:16C4		    loop    init_IVT_loop
seg000:16C6		    mov	    ax,	67h
seg000:16C9		    mov	    cx,	9
seg000:16CC
seg000:16CC init_IVT_loop_2:			    ; CODE XREF: hw_init+3Aj
seg000:16CC		    call    table_store
seg000:16CF		    inc	    ax
seg000:16D0		    loop    init_IVT_loop_2
seg000:16D2		    mov	    al,	8Eh
seg000:16D4		    call    read_cmos
seg000:16D7		    test    al,	20h
seg000:16D9		    jnz	    short PIC_init
seg000:16DB		    mov	    al,	9Ch
seg000:16DD		    call    read_cmos
seg000:16E0		    and	    al,	80h
seg000:16E2		    jz	    short PIC_init
seg000:16E4		    mov	    si,	offset word_F0E4
seg000:16E7		    mov	    al,	1Dh
seg000:16E9		    call    table_store
seg000:16EC
seg000:16EC PIC_init:				    ; CODE XREF: hw_init+43j
seg000:16EC					    ; hw_init+4Cj
seg000:16EC		    mov	    si,	offset PIC_reg_ini
seg000:16EF		    mov	    bx,	offset loc_16F5
seg000:16F2		    jmp	    load_reg_table
seg000:16F5 ; ---------------------------------------------------------------------------
seg000:16F5
seg000:16F5 loc_16F5:				    ; DATA XREF: hw_init+59o
seg000:16F5		    mov	    al,	0B8h
seg000:16F7		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:16F9		    mov	    al,	0FDh
seg000:16FB		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:16FD		    pop	    ds
seg000:16FE		    pop	    si
seg000:16FF		    pop	    cx
seg000:1700		    pop	    bx
seg000:1701		    pop	    ax
seg000:1702		    retn
seg000:1702 hw_init	    endp
seg000:1702
seg000:1703
seg000:1703 ; =============== S	U B R O	U T I N	E =======================================
seg000:1703
seg000:1703
seg000:1703 dw_table_copy   proc near		    ; CODE XREF: hw_init+Ep
seg000:1703					    ; hw_init+1Ap ...
seg000:1703		    push    ax
seg000:1704		    push    bx
seg000:1705		    push    cx
seg000:1706		    push    si
seg000:1707		    push    ds
seg000:1708
seg000:1708 loc_1708:				    ; CODE XREF: dw_table_copy+17j
seg000:1708		    push    cs
seg000:1709		    pop	    ds
seg000:170A		    mov	    si,	cs:[bx]
seg000:170D		    test    si,	si
seg000:170F		    jnz	    short loc_1713
seg000:1711		    mov	    ds,	si
seg000:1713
seg000:1713 loc_1713:				    ; CODE XREF: dw_table_copy+Cj
seg000:1713		    call    table_store
seg000:1716		    add	    bx,	2
seg000:1719		    inc	    ax
seg000:171A		    loop    loc_1708
seg000:171C		    pop	    ds
seg000:171D		    pop	    si
seg000:171E		    pop	    cx
seg000:171F		    pop	    bx
seg000:1720		    pop	    ax
seg000:1721		    retn
seg000:1721 dw_table_copy   endp
seg000:1721
seg000:1722
seg000:1722 ; =============== S	U B R O	U T I N	E =======================================
seg000:1722
seg000:1722
seg000:1722 timer_int_test  proc near		    ; CODE XREF: ColrWarm_Boot+408p
seg000:1722					    ; test_powerUp+18p
seg000:1722		    push    ax
seg000:1723		    push    bx
seg000:1724		    push    cx
seg000:1725		    sti
seg000:1726		    mov	    word ptr ds:loc_6C,	0
seg000:172C		    mov	    word ptr ds:loc_6E,	0
seg000:1732		    mov	    byte ptr ds:loc_70,	0
seg000:1737		    mov	    bx,	96h
seg000:173A
seg000:173A loc_173A:				    ; CODE XREF: timer_int_test+26j
seg000:173A		    mov	    cx,	1
seg000:173D		    call    delay_doubleCX
seg000:1740		    cmp	    word ptr ds:loc_6C,	2
seg000:1745		    jz	    short loc_174C
seg000:1747		    dec	    bx
seg000:1748		    jnz	    short loc_173A
seg000:174A		    jmp	    short loc_176B
seg000:174C ; ---------------------------------------------------------------------------
seg000:174C
seg000:174C loc_174C:				    ; CODE XREF: timer_int_test+23j
seg000:174C		    mov	    bx,	64h
seg000:174F
seg000:174F loc_174F:				    ; CODE XREF: timer_int_test+3Bj
seg000:174F		    mov	    cx,	1
seg000:1752		    call    delay_doubleCX
seg000:1755		    cmp	    word ptr ds:loc_6C,	3
seg000:175A		    jz	    short loc_1761
seg000:175C		    dec	    bx
seg000:175D		    jnz	    short loc_174F
seg000:175F		    jmp	    short loc_176B
seg000:1761 ; ---------------------------------------------------------------------------
seg000:1761
seg000:1761 loc_1761:				    ; CODE XREF: timer_int_test+38j
seg000:1761		    cmp	    bx,	5Ah ; 'Z'
seg000:1764		    ja	    short loc_176B
seg000:1766		    cmp	    bx,	5
seg000:1769		    jnb	    short loc_176E
seg000:176B
seg000:176B loc_176B:				    ; CODE XREF: timer_int_test+28j
seg000:176B					    ; timer_int_test+3Dj ...
seg000:176B		    stc
seg000:176C		    jmp	    short loc_176F
seg000:176E ; ---------------------------------------------------------------------------
seg000:176E
seg000:176E loc_176E:				    ; CODE XREF: timer_int_test+47j
seg000:176E		    clc
seg000:176F
seg000:176F loc_176F:				    ; CODE XREF: timer_int_test+4Aj
seg000:176F		    pop	    cx
seg000:1770		    pop	    bx
seg000:1771		    pop	    ax
seg000:1772		    retn
seg000:1772 timer_int_test  endp
seg000:1772
seg000:1773
seg000:1773 ; =============== S	U B R O	U T I N	E =======================================
seg000:1773
seg000:1773
seg000:1773 VGA_bios_init   proc near		    ; CODE XREF: Video_init_?+3p
seg000:1773					    ; Video_init_?+55p	...
seg000:1773		    push    ax
seg000:1774		    push    bx
seg000:1775		    push    cx
seg000:1776		    push    si
seg000:1777		    push    ds
seg000:1778		    mov	    al,	10h
seg000:177A		    call    table_lookup_ptr
seg000:177D		    test    si,	si
seg000:177F		    mov	    si,	ds
seg000:1781		    pop	    ds
seg000:1782		    jnz	    short loc_1795
seg000:1784		    test    si,	si
seg000:1786		    jnz	    short loc_1795
seg000:1788		    xor	    ah,	ah
seg000:178A		    mov	    bx,	offset dw_table_2
seg000:178D		    mov	    cx,	1
seg000:1790		    call    dw_table_copy
seg000:1793		    jmp	    short VGA_bios_found?
seg000:1795 ; ---------------------------------------------------------------------------
seg000:1795
seg000:1795 loc_1795:				    ; CODE XREF: VGA_bios_init+Fj
seg000:1795					    ; VGA_bios_init+13j
seg000:1795		    cmp	    si,	0C000h
seg000:1799		    jb	    short VGA_bios_found?
seg000:179B		    cmp	    si,	0C800h
seg000:179F		    jb	    short loc_17B2
seg000:17A1
seg000:17A1 VGA_bios_found?:			    ; CODE XREF: VGA_bios_init+20j
seg000:17A1					    ; VGA_bios_init+26j
seg000:17A1		    call    keyb_commands1
seg000:17A4		    mov	    bx,	0C000h
seg000:17A7		    mov	    cx,	10h
seg000:17AA		    mov	    ah,	0
seg000:17AC		    call    Exec_Option_roms
seg000:17AF		    call    keyb_commands2
seg000:17B2
seg000:17B2 loc_17B2:				    ; CODE XREF: VGA_bios_init+2Cj
seg000:17B2		    pop	    si
seg000:17B3		    pop	    cx
seg000:17B4		    pop	    bx
seg000:17B5		    pop	    ax
seg000:17B6		    retn
seg000:17B6 VGA_bios_init   endp
seg000:17B6
seg000:17B7
seg000:17B7 ; =============== S	U B R O	U T I N	E =======================================
seg000:17B7
seg000:17B7
seg000:17B7 Exec_Option_roms proc near		    ; CODE XREF: ColrWarm_Boot+46Dp
seg000:17B7					    ; ColrWarm_Boot+497p ...
seg000:17B7		    push    ax
seg000:17B8		    push    bx
seg000:17B9		    push    cx
seg000:17BA		    push    dx
seg000:17BB		    push    si
seg000:17BC		    push    es
seg000:17BD
seg000:17BD loc_17BD:				    ; CODE XREF: Exec_Option_roms+3Cj
seg000:17BD		    mov	    si,	0
seg000:17C0		    mov	    es,	bx
seg000:17C2		    assume es:nothing
seg000:17C2		    mov	    dx,	1
seg000:17C5		    cmp	    word ptr es:[si], 0AA55h
seg000:17CA		    jnz	    short not_signature
seg000:17CC		    test    ah,	ah
seg000:17CE		    jnz	    short loc_17D9
seg000:17D0		    mov	    dl,	es:[si+2]
seg000:17D4		    dec	    dx
seg000:17D5		    shr	    dx,	2
seg000:17D8		    inc	    dx
seg000:17D9
seg000:17D9 loc_17D9:				    ; CODE XREF: Exec_Option_roms+17j
seg000:17D9		    call    Exec_rom
seg000:17DC		    jnb	    short not_signature
seg000:17DE		    mov	    dx,	1
seg000:17E1
seg000:17E1 not_signature:			    ; CODE XREF: Exec_Option_roms+13j
seg000:17E1					    ; Exec_Option_roms+25j
seg000:17E1		    test    ah,	ah
seg000:17E3		    jnz	    short loc_17F5
seg000:17E5		    sub	    cx,	dx
seg000:17E7		    mov	    ax,	80h ; ''
seg000:17EA		    mul	    dx
seg000:17EC		    add	    bx,	ax
seg000:17EE		    xor	    ah,	ah
seg000:17F0		    cmp	    cx,	0
seg000:17F3		    ja	    short loc_17BD
seg000:17F5
seg000:17F5 loc_17F5:				    ; CODE XREF: Exec_Option_roms+2Cj
seg000:17F5		    pop	    es
seg000:17F6		    pop	    si
seg000:17F7		    pop	    dx
seg000:17F8		    pop	    cx
seg000:17F9		    pop	    bx
seg000:17FA		    pop	    ax
seg000:17FB		    retn
seg000:17FB Exec_Option_roms endp
seg000:17FB
seg000:17FC
seg000:17FC ; =============== S	U B R O	U T I N	E =======================================
seg000:17FC
seg000:17FC
seg000:17FC Exec_rom	    proc near		    ; CODE XREF: Exec_Option_roms:loc_17D9p
seg000:17FC		    pusha
seg000:17FD		    push    ds
seg000:17FE		    push    es
seg000:17FF		    test    ah,	ah
seg000:1801		    jnz	    short loc_1807
seg000:1803		    mov	    ch,	es:[si+2]
seg000:1807
seg000:1807 loc_1807:				    ; CODE XREF: Exec_rom+5j
seg000:1807		    mov	    cl,	0
seg000:1809		    shl	    cx,	1
seg000:180B		    mov	    al,	0
seg000:180D
seg000:180D loc_180D:				    ; CODE XREF: Exec_rom+15j
seg000:180D		    add	    al,	es:[si]
seg000:1810		    inc	    si
seg000:1811		    loop    loc_180D
seg000:1813		    test    al,	al
seg000:1815		    stc
seg000:1816		    jnz	    short bad_rom_crc
seg000:1818		    mov	    word ptr ds:loc_66+1, (offset loc_2+1)
seg000:181E		    mov	    word ptr ds:loc_68+1, es
seg000:1822		    call    dword ptr ds:loc_66+1
seg000:1826		    clc
seg000:1827
seg000:1827 bad_rom_crc:			    ; CODE XREF: Exec_rom+1Aj
seg000:1827		    pop	    es
seg000:1828		    pop	    ds
seg000:1829		    popa
seg000:182A		    retn
seg000:182A Exec_rom	    endp
seg000:182A
seg000:182B ; ---------------------------------------------------------------------------
seg000:182B ; START OF FUNCTION	CHUNK FOR ColrWarm_Boot
seg000:182B
seg000:182B load_reg_table:			    ; CODE XREF: ColrWarm_Boot:loc_1090j
seg000:182B					    ; ColrWarm_Boot+B0j ...
seg000:182B		    push    ax
seg000:182C		    push    cx
seg000:182D		    push    dx
seg000:182E		    lods    word ptr cs:[si]
seg000:1830		    mov	    cx,	ax
seg000:1832
seg000:1832 loc_1832:				    ; CODE XREF: ColrWarm_Boot+7E9j
seg000:1832		    lods    word ptr cs:[si]
seg000:1834		    mov	    dx,	ax
seg000:1836		    lods    byte ptr cs:[si]
seg000:1838		    out	    dx,	al
seg000:1839		    loop    loc_1832
seg000:183B		    pop	    dx
seg000:183C		    pop	    cx
seg000:183D		    pop	    ax
seg000:183E		    jmp	    bx
seg000:183E ; END OF FUNCTION CHUNK FOR	ColrWarm_Boot
seg000:1840
seg000:1840 ; =============== S	U B R O	U T I N	E =======================================
seg000:1840
seg000:1840
seg000:1840 sub_1840	    proc near		    ; CODE XREF: ColrWarm_Boot:loc_1403p
seg000:1840		    mov	    cs:byte_4CA, 0
seg000:1846		    push    ds
seg000:1847		    push    ax
seg000:1848		    mov	    ax,	0C800h
seg000:184B		    mov	    ds,	ax
seg000:184D		    assume ds:nothing
seg000:184D		    cmp	    word ptr ds:1Bh, 445Ah
seg000:1853		    jnz	    short loc_185B
seg000:1855		    mov	    cs:byte_4CA, 0FFh
seg000:185B
seg000:185B loc_185B:				    ; CODE XREF: sub_1840+13j
seg000:185B		    pop	    ax
seg000:185C		    pop	    ds
seg000:185D		    assume ds:nothing
seg000:185D		    retn
seg000:185D sub_1840	    endp
seg000:185D
seg000:185D ; ---------------------------------------------------------------------------
seg000:185E PIC_reg_ini	    dw 0Bh		    ; DATA XREF: ColrWarm_Boot+3Ao
seg000:185E					    ; ColrWarm_Boot+B7o ...
seg000:1860		    port_init <0F1h,  0>    ; 0	; secondary diag/debug port
seg000:1860		    port_init <20h, 11h>    ; 1	; PIC
seg000:1860		    port_init <21h,  8>	    ; 2	;
seg000:1860		    port_init <21h,  4>	    ; 3	;
seg000:1860		    port_init <21h,  1>	    ; 4	;
seg000:1860		    port_init <21h, 0FFh>   ; 5	;
seg000:1860		    port_init <0A0h, 11h>   ; 6	; PIC2
seg000:1860		    port_init <0A1h, 70h>   ; 7
seg000:1860		    port_init <0A1h,  2>    ; 8
seg000:1860		    port_init <0A1h,  1>    ; 9
seg000:1860		    port_init <0A1h, 0FFh>  ; 0Ah
seg000:1881		    db	  0
seg000:1882		    db	57h ; W
seg000:1883		    db	44h ; D
seg000:1884		    db	4Ch ; L
seg000:1885		    db	4Ch ; L
seg000:1886		    db	41h ; A
seg000:1887		    db	4Dh ; M
seg000:1888		    db	41h ; A
seg000:1889 debugger_table? dw offset port_EE_InOut ; DATA XREF: debugger?+11r
seg000:188B		    dw offset port_EF_in?
seg000:188D		    dw offset keyb_reset_PC
seg000:188F		    dw offset stc_ret
seg000:1891		    dw offset stc_ret
seg000:1893		    dw offset port_9F4F4F5_Out
seg000:1895		    dw offset port_9F4_Out
seg000:1897		    dw offset stc_ret
seg000:1899		    dw offset AX7_clc_ret
seg000:189B		    dw offset sub_19CA
seg000:189D		    dw offset sub_19DF
seg000:189F		    dw offset stc_ret
seg000:18A1		    dw offset sub_1A87
seg000:18A3		    dw offset sub_1AAE
seg000:18A5		    dw offset sub_1B32
seg000:18A7		    dw offset sub_1B43
seg000:18A9		    dw offset port_9F4BF4_In
seg000:18AB		    dw offset stc_ret
seg000:18AD
seg000:18AD ; =============== S	U B R O	U T I N	E =======================================
seg000:18AD
seg000:18AD
seg000:18AD debugger?	    proc far		    ; DATA XREF: seg000:FFE8o
seg000:18AD		    push    si
seg000:18AE		    cmp	    ah,	12h
seg000:18B1		    jnb	    short loc_18C7
seg000:18B3		    push    ax
seg000:18B4		    mov	    al,	ah
seg000:18B6		    cbw
seg000:18B7		    shl	    ax,	1
seg000:18B9		    mov	    si,	ax
seg000:18BB		    pop	    ax
seg000:18BC		    out	    0FBh, al	    ; AT 80287 data.
seg000:18BC					    ; 286 sends	opcodes	& operands and receives	results.
seg000:18BE		    call    cs:debugger_table?[si]
seg000:18C3		    out	    0F9h, al	    ; AT 80287 data.
seg000:18C3					    ; 286 sends	opcodes	& operands and receives	results.
seg000:18C5		    pop	    si
seg000:18C6		    retf
seg000:18C7 ; ---------------------------------------------------------------------------
seg000:18C7
seg000:18C7 loc_18C7:				    ; CODE XREF: debugger?+4j
seg000:18C7		    pop	    si
seg000:18C8		    stc
seg000:18C9		    retf
seg000:18C9 debugger?	    endp
seg000:18C9
seg000:18CA
seg000:18CA ; =============== S	U B R O	U T I N	E =======================================
seg000:18CA
seg000:18CA
seg000:18CA stc_ret	    proc near		    ; CODE XREF: debugger?+11p
seg000:18CA					    ; port_EF_in?+8j ...
seg000:18CA		    stc
seg000:18CB		    retn
seg000:18CB stc_ret	    endp
seg000:18CB
seg000:18CC ; ---------------------------------------------------------------------------
seg000:18CC ; START OF FUNCTION	CHUNK FOR port_EE_InOut
seg000:18CC
seg000:18CC clc_ret:				    ; CODE XREF: port_EF_in?+50j
seg000:18CC					    ; port_EF_in?+54j ...
seg000:18CC		    clc
seg000:18CD		    retn
seg000:18CD ; END OF FUNCTION CHUNK FOR	port_EE_InOut
seg000:18CE
seg000:18CE ; =============== S	U B R O	U T I N	E =======================================
seg000:18CE
seg000:18CE
seg000:18CE keyb_in_buff_wait proc near		    ; CODE XREF: keyb_reset_PC+63p
seg000:18CE		    sub	    cx,	cx
seg000:18D0
seg000:18D0 loc_18D0:				    ; CODE XREF: keyb_in_buff_wait+6j
seg000:18D0		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:18D0					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:18D0					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:18D0					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:18D0					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:18D0					    ;	 +------------------------------+-----------------------------------+
seg000:18D0					    ; 4:  INH	  0=keyboard communications inhibited
seg000:18D0					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:18D0					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:18D0					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:18D0					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:18D2		    and	    al,	2
seg000:18D4		    loopne  loc_18D0
seg000:18D6		    retn
seg000:18D6 keyb_in_buff_wait endp
seg000:18D6
seg000:18D7
seg000:18D7 ; =============== S	U B R O	U T I N	E =======================================
seg000:18D7
seg000:18D7
seg000:18D7 keyb_out_buff_wait proc near
seg000:18D7		    sub	    cx,	cx
seg000:18D9
seg000:18D9 loc_18D9:				    ; CODE XREF: keyb_out_buff_wait+6j
seg000:18D9		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:18D9					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:18D9					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:18D9					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:18D9					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:18D9					    ;	 +------------------------------+-----------------------------------+
seg000:18D9					    ; 4:  INH	  0=keyboard communications inhibited
seg000:18D9					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:18D9					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:18D9					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:18D9					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:18DB		    and	    al,	1
seg000:18DD		    loope   loc_18D9
seg000:18DF		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:18E1		    retn
seg000:18E1 keyb_out_buff_wait endp
seg000:18E1
seg000:18E2
seg000:18E2 ; =============== S	U B R O	U T I N	E =======================================
seg000:18E2
seg000:18E2
seg000:18E2 port_EF_in?	    proc near		    ; CODE XREF: debugger?+11p
seg000:18E2					    ; DATA XREF: seg000:188Bo
seg000:18E2		    cmp	    al,	0
seg000:18E4		    jz	    short loc_18EC
seg000:18E6		    cmp	    al,	0FFh
seg000:18E8		    jz	    short loc_1934
seg000:18EA		    jmp	    short stc_ret
seg000:18EC ; ---------------------------------------------------------------------------
seg000:18EC
seg000:18EC loc_18EC:				    ; CODE XREF: port_EF_in?+2j
seg000:18EC		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:18EE		    push    ax
seg000:18EF		    mov	    al,	0FFh
seg000:18F1		    jmp	    short $+2
seg000:18F3		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:18F5		    push    ds
seg000:18F6		    mov	    ds,	bx
seg000:18F8		    push    word ptr ds:stru_3F3.data5
seg000:18FC		    push    ds:stru_3FC.check
seg000:1900		    push    word ptr ds:stru_3FC.data0
seg000:1904		    pushf
seg000:1905		    push    0F000h
seg000:1908		    push    offset loc_1921
seg000:190B		    pusha
seg000:190C		    push    es
seg000:190D		    push    offset sub_0
seg000:190F		    mov	    word ptr es:loc_68+1, cx
seg000:1914		    mov	    word ptr es:loc_66+1, sp
seg000:1919		    mov	    ax,	98Fh
seg000:191C		    call    cmos_write
seg000:191F		    in	    al,	0EFh
seg000:1921
seg000:1921 loc_1921:				    ; DATA XREF: port_EF_in?+26o
seg000:1921		    cli
seg000:1922		    pop	    word ptr ds:stru_3FC.data0
seg000:1926		    pop	    ds:stru_3FC.check
seg000:192A		    pop	    word ptr ds:stru_3F3.data5
seg000:192E		    pop	    ds
seg000:192F		    pop	    ax
seg000:1930		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:1932		    jmp	    short clc_ret
seg000:1934 ; ---------------------------------------------------------------------------
seg000:1934
seg000:1934 loc_1934:				    ; CODE XREF: port_EF_in?+6j
seg000:1934		    mov	    al,	1
seg000:1936		    jmp	    short clc_ret
seg000:1936 port_EF_in?	    endp
seg000:1936
seg000:1938
seg000:1938 ; =============== S	U B R O	U T I N	E =======================================
seg000:1938
seg000:1938
seg000:1938 keyb_reset_PC   proc near		    ; CODE XREF: debugger?+11p
seg000:1938					    ; sub_1A87+1Fp
seg000:1938					    ; DATA XREF: ...
seg000:1938		    cmp	    al,	2
seg000:193A		    jz	    short loc_194A
seg000:193C		    cmp	    al,	0
seg000:193E		    jz	    short loc_196F
seg000:1940		    cmp	    al,	1
seg000:1942		    jz	    short loc_195C
seg000:1944		    cmp	    al,	0FFh
seg000:1946		    jz	    short loc_19A5
seg000:1948		    jmp	    short stc_ret
seg000:194A ; ---------------------------------------------------------------------------
seg000:194A
seg000:194A loc_194A:				    ; CODE XREF: keyb_reset_PC+2j
seg000:194A		    push    es
seg000:194B		    mov	    es,	dx
seg000:194D		    mov	    byte ptr es:loc_26B+1, 0FFh
seg000:1953		    pop	    es
seg000:1954		    out	    0F9h, al	    ; AT 80287 data.
seg000:1954					    ; 286 sends	opcodes	& operands and receives	results.
seg000:1956		    mov	    dx,	1234h
seg000:1959		    jmp	    short loc_1972
seg000:195B ; ---------------------------------------------------------------------------
seg000:195B		    nop
seg000:195C
seg000:195C loc_195C:				    ; CODE XREF: keyb_reset_PC+Aj
seg000:195C		    mov	    ah,	60h ; '`'
seg000:195E		    call    Keyboard_command
seg000:1961		    mov	    ah,	59h ; 'Y'
seg000:1963		    call    Keyboard_data_OutIn
seg000:1966		    call    keyb_commands1
seg000:1969		    mov	    dx,	1200h
seg000:196C		    jmp	    short loc_1972
seg000:196E ; ---------------------------------------------------------------------------
seg000:196E		    nop
seg000:196F
seg000:196F loc_196F:				    ; CODE XREF: keyb_reset_PC+6j
seg000:196F		    mov	    dx,	1234h
seg000:1972
seg000:1972 loc_1972:				    ; CODE XREF: keyb_reset_PC+21j
seg000:1972					    ; keyb_reset_PC+34j
seg000:1972		    cli
seg000:1973		    mov	    al,	0Bh
seg000:1975		    call    cmos_read
seg000:1978		    and	    ah,	0BFh	    ; disable RTC periodic interrupt
seg000:197B		    call    cmos_write
seg000:197E		    mov	    al,	0Ah
seg000:1980		    call    cmos_read
seg000:1983		    and	    ah,	0F0h
seg000:1986		    or	    ah,	6	    ; default 1024 Hz RTC interrupt rate
seg000:1989		    call    cmos_write
seg000:198C		    mov	    al,	0Fh
seg000:198E		    call    cmos_read
seg000:1991		    mov	    al,	1
seg000:1993		    call    port_EE_InOut
seg000:1996		    mov	    word ptr es:loc_70+2, dx
seg000:199B		    call    keyb_in_buff_wait
seg000:199E		    mov	    al,	0FEh ; 'þ'  ;  this is asking Keyboard controller for CPU RESET
seg000:19A0		    out	    64h, al	    ; 8042 keyboard controller command register.
seg000:19A0					    ; Pulse output port.
seg000:19A0					    ; Bits 0-3 indicate	ports to pulse.
seg000:19A2
seg000:19A2 keyb_reset:				    ; CODE XREF: keyb_reset_PC+6Bj
seg000:19A2		    hlt
seg000:19A3 ; ---------------------------------------------------------------------------
seg000:19A3		    jmp	    short keyb_reset
seg000:19A5 ; ---------------------------------------------------------------------------
seg000:19A5
seg000:19A5 loc_19A5:				    ; CODE XREF: keyb_reset_PC+Ej
seg000:19A5		    jmp	    clc_ret
seg000:19A5 keyb_reset_PC   endp
seg000:19A5
seg000:19A8
seg000:19A8 ; =============== S	U B R O	U T I N	E =======================================
seg000:19A8
seg000:19A8
seg000:19A8 cmos_write	    proc near		    ; CODE XREF: port_EF_in?+3Ap
seg000:19A8					    ; keyb_reset_PC+43p ...
seg000:19A8		    out	    70h, al	    ; CMOS Memory:
seg000:19A8					    ;
seg000:19AA		    jmp	    short $+2
seg000:19AC		    xchg    al,	ah
seg000:19AE		    out	    71h, al	    ; CMOS Memory:
seg000:19AE					    ; used by real-time	clock
seg000:19B0		    jmp	    short $+2
seg000:19B2		    xchg    al,	ah
seg000:19B4		    retn
seg000:19B4 cmos_write	    endp
seg000:19B4
seg000:19B5
seg000:19B5 ; =============== S	U B R O	U T I N	E =======================================
seg000:19B5
seg000:19B5
seg000:19B5 cmos_read	    proc near		    ; CODE XREF: keyb_reset_PC+3Dp
seg000:19B5					    ; keyb_reset_PC+48p ...
seg000:19B5		    out	    70h, al	    ; CMOS Memory:
seg000:19B5					    ; used by real-time	clock
seg000:19B7		    jmp	    short $+2
seg000:19B9		    xchg    al,	ah
seg000:19BB		    in	    al,	71h	    ; CMOS Memory
seg000:19BD		    jmp	    short $+2
seg000:19BF		    xchg    al,	ah
seg000:19C1		    retn
seg000:19C1 cmos_read	    endp
seg000:19C1
seg000:19C2
seg000:19C2 ; =============== S	U B R O	U T I N	E =======================================
seg000:19C2
seg000:19C2
seg000:19C2 AX7_clc_ret	    proc near		    ; CODE XREF: debugger?+11p
seg000:19C2					    ; DATA XREF: seg000:1899o
seg000:19C2		    mov	    ax,	7
seg000:19C5		    or	    sp,	sp
seg000:19C7		    jmp	    clc_ret
seg000:19C7 AX7_clc_ret	    endp
seg000:19C7
seg000:19CA
seg000:19CA ; =============== S	U B R O	U T I N	E =======================================
seg000:19CA
seg000:19CA
seg000:19CA sub_19CA	    proc near		    ; CODE XREF: debugger?+11p
seg000:19CA					    ; DATA XREF: seg000:189Bo
seg000:19CA		    cmp	    al,	0FFh
seg000:19CC		    jz	    short loc_19D1
seg000:19CE		    jmp	    stc_ret
seg000:19D1 ; ---------------------------------------------------------------------------
seg000:19D1
seg000:19D1 loc_19D1:				    ; CODE XREF: sub_19CA+2j
seg000:19D1		    mov	    ax,	0Fh
seg000:19D4		    mov	    bx,	1882h
seg000:19D7		    mov	    cx,	7
seg000:19DA		    or	    sp,	sp
seg000:19DC		    jmp	    clc_ret
seg000:19DC sub_19CA	    endp
seg000:19DC
seg000:19DF
seg000:19DF ; =============== S	U B R O	U T I N	E =======================================
seg000:19DF
seg000:19DF
seg000:19DF sub_19DF	    proc near		    ; CODE XREF: debugger?+11p
seg000:19DF					    ; DATA XREF: seg000:189Do
seg000:19DF		    cmp	    al,	0FFh
seg000:19E1		    jz	    short loc_19E6
seg000:19E3		    jmp	    stc_ret
seg000:19E6 ; ---------------------------------------------------------------------------
seg000:19E6
seg000:19E6 loc_19E6:				    ; CODE XREF: sub_19DF+2j
seg000:19E6		    mov	    ax,	0Fh
seg000:19E9		    mov	    bx,	8016h
seg000:19EC		    mov	    cx,	3
seg000:19EF		    or	    sp,	sp
seg000:19F1		    jmp	    clc_ret
seg000:19F1 sub_19DF	    endp
seg000:19F1
seg000:19F4
seg000:19F4 ; =============== S	U B R O	U T I N	E =======================================
seg000:19F4
seg000:19F4
seg000:19F4 port_EE_InOut   proc near		    ; CODE XREF: debugger?+11p
seg000:19F4					    ; keyb_reset_PC+5Bp
seg000:19F4					    ; DATA XREF: ...
seg000:19F4
seg000:19F4 ; FUNCTION CHUNK AT	seg000:18CC SIZE 00000002 BYTES
seg000:19F4
seg000:19F4		    cmp	    al,	0
seg000:19F6		    jz	    short loc_1A08
seg000:19F8		    cmp	    al,	1
seg000:19FA		    jz	    short loc_1A03
seg000:19FC		    cmp	    al,	0FFh
seg000:19FE		    jz	    short loc_1A0D
seg000:1A00		    jmp	    stc_ret
seg000:1A03 ; ---------------------------------------------------------------------------
seg000:1A03
seg000:1A03 loc_1A03:				    ; CODE XREF: port_EE_InOut+6j
seg000:1A03		    out	    0EEh, al
seg000:1A05		    jmp	    clc_ret
seg000:1A08 ; ---------------------------------------------------------------------------
seg000:1A08
seg000:1A08 loc_1A08:				    ; CODE XREF: port_EE_InOut+2j
seg000:1A08		    in	    al,	0EEh
seg000:1A0A		    jmp	    clc_ret
seg000:1A0D ; ---------------------------------------------------------------------------
seg000:1A0D
seg000:1A0D loc_1A0D:				    ; CODE XREF: port_EE_InOut+Aj
seg000:1A0D		    mov	    al,	1
seg000:1A0F		    jmp	    clc_ret
seg000:1A0F port_EE_InOut   endp
seg000:1A0F
seg000:1A12
seg000:1A12 ; =============== S	U B R O	U T I N	E =======================================
seg000:1A12
seg000:1A12
seg000:1A12 port_9F4F4F5_Out proc near		    ; CODE XREF: debugger?+11p
seg000:1A12					    ; DATA XREF: seg000:1893o
seg000:1A12		    push    ds
seg000:1A13		    push    bx
seg000:1A14		    mov	    ds,	dx
seg000:1A16		    mov	    bx,	4C5h
seg000:1A19		    cmp	    al,	1
seg000:1A1B		    jz	    short loc_1A2E
seg000:1A1D		    cmp	    al,	0
seg000:1A1F		    jz	    short loc_1A3E
seg000:1A21		    cmp	    al,	2
seg000:1A23		    jz	    short loc_1A55
seg000:1A25		    cmp	    al,	0FFh
seg000:1A27		    jz	    short loc_1A6C
seg000:1A29		    pop	    bx
seg000:1A2A		    pop	    ds
seg000:1A2B		    jmp	    stc_ret
seg000:1A2E ; ---------------------------------------------------------------------------
seg000:1A2E
seg000:1A2E loc_1A2E:				    ; CODE XREF: port_9F4F4F5_Out+9j
seg000:1A2E		    out	    0F4h, al
seg000:1A30		    mov	    ds:RTC_test_timer, 1B8h
seg000:1A36		    mov	    byte ptr [bx], 0FFh
seg000:1A39		    call    out_9F4_sync
seg000:1A3C		    jmp	    short loc_1A80
seg000:1A3E ; ---------------------------------------------------------------------------
seg000:1A3E
seg000:1A3E loc_1A3E:				    ; CODE XREF: port_9F4F4F5_Out+Dj
seg000:1A3E		    out	    0F5h, al
seg000:1A40		    mov	    ds:RTC_test_timer, 600h
seg000:1A46		    mov	    byte ptr [bx], 0
seg000:1A49		    test    byte ptr ds:loc_CA+4, 2
seg000:1A4E		    jz	    short loc_1A80
seg000:1A50		    call    port_9F4_Out_0
seg000:1A53		    jmp	    short loc_1A80
seg000:1A55 ; ---------------------------------------------------------------------------
seg000:1A55
seg000:1A55 loc_1A55:				    ; CODE XREF: port_9F4F4F5_Out+11j
seg000:1A55		    out	    0F5h, al
seg000:1A57		    mov	    ds:RTC_test_timer, 600h
seg000:1A5D		    mov	    byte ptr [bx], 1
seg000:1A60		    test    byte ptr ds:loc_CA+4, 2
seg000:1A65		    jz	    short loc_1A80
seg000:1A67		    call    port_9F4_Out_0
seg000:1A6A		    jmp	    short loc_1A80
seg000:1A6C ; ---------------------------------------------------------------------------
seg000:1A6C
seg000:1A6C loc_1A6C:				    ; CODE XREF: port_9F4F4F5_Out+15j
seg000:1A6C		    cmp	    byte ptr [bx], 0FFh
seg000:1A6F		    jnz	    short loc_1A75
seg000:1A71		    mov	    al,	1
seg000:1A73		    jmp	    short loc_1A7E
seg000:1A75 ; ---------------------------------------------------------------------------
seg000:1A75
seg000:1A75 loc_1A75:				    ; CODE XREF: port_9F4F4F5_Out+5Dj
seg000:1A75		    mov	    al,	2
seg000:1A77		    cmp	    byte ptr [bx], 1
seg000:1A7A		    jnb	    short loc_1A7E
seg000:1A7C		    mov	    al,	0
seg000:1A7E
seg000:1A7E loc_1A7E:				    ; CODE XREF: port_9F4F4F5_Out+61j
seg000:1A7E					    ; port_9F4F4F5_Out+68j
seg000:1A7E		    mov	    ah,	4
seg000:1A80
seg000:1A80 loc_1A80:				    ; CODE XREF: port_9F4F4F5_Out+2Aj
seg000:1A80					    ; port_9F4F4F5_Out+3Cj ...
seg000:1A80		    pop	    bx
seg000:1A81		    pop	    ds
seg000:1A82		    or	    sp,	sp
seg000:1A84		    jmp	    clc_ret
seg000:1A84 port_9F4F4F5_Out endp
seg000:1A84
seg000:1A87
seg000:1A87 ; =============== S	U B R O	U T I N	E =======================================
seg000:1A87
seg000:1A87
seg000:1A87 sub_1A87	    proc near		    ; CODE XREF: debugger?+11p
seg000:1A87					    ; DATA XREF: seg000:18A1o
seg000:1A87		    cmp	    al,	0
seg000:1A89		    jz	    short loc_1A95
seg000:1A8B		    cmp	    al,	0FFh
seg000:1A8D		    jz	    short loc_1A92
seg000:1A8F		    jmp	    stc_ret
seg000:1A92 ; ---------------------------------------------------------------------------
seg000:1A92
seg000:1A92 loc_1A92:				    ; CODE XREF: sub_1A87+6j
seg000:1A92		    jmp	    clc_ret
seg000:1A95 ; ---------------------------------------------------------------------------
seg000:1A95
seg000:1A95 loc_1A95:				    ; CODE XREF: sub_1A87+2j
seg000:1A95		    test    cl,	4
seg000:1A98		    jz	    short loc_1AAB
seg000:1A9A		    test    cl,	8
seg000:1A9D		    jz	    short loc_1AAB
seg000:1A9F		    cmp	    bl,	52h ; 'R'
seg000:1AA2		    jnz	    short loc_1AAB
seg000:1AA4		    mov	    al,	2
seg000:1AA6		    call    keyb_reset_PC
seg000:1AA9		    int	    3		    ; Trap to Debugger
seg000:1AAA		    hlt
seg000:1AAB ; ---------------------------------------------------------------------------
seg000:1AAB
seg000:1AAB loc_1AAB:				    ; CODE XREF: sub_1A87+11j
seg000:1AAB					    ; sub_1A87+16j ...
seg000:1AAB		    jmp	    clc_ret
seg000:1AAB sub_1A87	    endp
seg000:1AAB
seg000:1AAE
seg000:1AAE ; =============== S	U B R O	U T I N	E =======================================
seg000:1AAE
seg000:1AAE
seg000:1AAE sub_1AAE	    proc near		    ; CODE XREF: debugger?+11p
seg000:1AAE					    ; DATA XREF: seg000:18A3o
seg000:1AAE		    cmp	    al,	0
seg000:1AB0		    jz	    short loc_1ABE
seg000:1AB2		    cmp	    al,	0FFh
seg000:1AB4		    jz	    short loc_1AB9
seg000:1AB6		    jmp	    stc_ret
seg000:1AB9 ; ---------------------------------------------------------------------------
seg000:1AB9
seg000:1AB9 loc_1AB9:				    ; CODE XREF: sub_1AAE+6j
seg000:1AB9					    ; sub_1AAE+13j
seg000:1AB9		    xor	    ax,	ax
seg000:1ABB		    jmp	    clc_ret
seg000:1ABE ; ---------------------------------------------------------------------------
seg000:1ABE
seg000:1ABE loc_1ABE:				    ; CODE XREF: sub_1AAE+2j
seg000:1ABE		    cmp	    cx,	6
seg000:1AC1		    jb	    short loc_1AB9
seg000:1AC3		    pusha
seg000:1AC4		    push    es
seg000:1AC5		    mov	    si,	bx
seg000:1AC7		    mov	    es,	dx
seg000:1AC9		    mov	    di,	offset word_4F1
seg000:1ACC		    mov	    cx,	6
seg000:1ACF		    rep	movsb
seg000:1AD1		    pop	    es
seg000:1AD2		    popa
seg000:1AD3		    jmp	    clc_ret
seg000:1AD3 sub_1AAE	    endp
seg000:1AD3
seg000:1AD6
seg000:1AD6 ; =============== S	U B R O	U T I N	E =======================================
seg000:1AD6
seg000:1AD6
seg000:1AD6 port_9F4_Out    proc near		    ; CODE XREF: debugger?+11p
seg000:1AD6					    ; DATA XREF: seg000:1895o
seg000:1AD6		    push    bx
seg000:1AD7		    push    dx
seg000:1AD8		    push    ds
seg000:1AD9		    mov	    ds,	dx
seg000:1ADB		    mov	    bl,	byte ptr ds:loc_CA+4
seg000:1ADF		    cmp	    al,	1
seg000:1AE1		    jz	    short loc_1AF1
seg000:1AE3		    cmp	    al,	0
seg000:1AE5		    jz	    short loc_1AF1
seg000:1AE7		    cmp	    al,	0FFh
seg000:1AE9		    jz	    short loc_1B23
seg000:1AEB		    pop	    ds
seg000:1AEC		    pop	    dx
seg000:1AED		    pop	    bx
seg000:1AEE		    jmp	    stc_ret
seg000:1AF1 ; ---------------------------------------------------------------------------
seg000:1AF1
seg000:1AF1 loc_1AF1:				    ; CODE XREF: port_9F4_Out+Bj
seg000:1AF1					    ; port_9F4_Out+Fj
seg000:1AF1		    test    bl,	4
seg000:1AF4		    jz	    short loc_1B23
seg000:1AF6		    test    bl,	8
seg000:1AF9		    jnz	    short loc_1B23
seg000:1AFB		    and	    al,	al
seg000:1AFD		    jz	    short loc_1B19
seg000:1AFF		    and	    bl,	0FDh
seg000:1B02		    test    byte ptr ds:loc_505+2, 40h
seg000:1B07		    jz	    short loc_1B1F
seg000:1B09		    test    byte ptr ds:word_4C5, 0FEh
seg000:1B0E		    jnz	    short loc_1B13
seg000:1B10		    call    port_9F4_Out_0
seg000:1B13
seg000:1B13 loc_1B13:				    ; CODE XREF: port_9F4_Out+38j
seg000:1B13		    or	    bl,	2
seg000:1B16		    jmp	    short loc_1B1F
seg000:1B16 ; ---------------------------------------------------------------------------
seg000:1B18		    db	90h ; 
seg000:1B19 ; ---------------------------------------------------------------------------
seg000:1B19
seg000:1B19 loc_1B19:				    ; CODE XREF: port_9F4_Out+27j
seg000:1B19		    call    out_9F4_sync
seg000:1B1C		    and	    bl,	0FDh
seg000:1B1F
seg000:1B1F loc_1B1F:				    ; CODE XREF: port_9F4_Out+31j
seg000:1B1F					    ; port_9F4_Out+40j
seg000:1B1F		    mov	    byte ptr ds:loc_CA+4, bl
seg000:1B23
seg000:1B23 loc_1B23:				    ; CODE XREF: port_9F4_Out+13j
seg000:1B23					    ; port_9F4_Out+1Ej	...
seg000:1B23		    shr	    bl,	1
seg000:1B25		    and	    bl,	7
seg000:1B28		    mov	    al,	bl
seg000:1B2A		    pop	    ds
seg000:1B2B		    pop	    dx
seg000:1B2C		    pop	    bx
seg000:1B2D		    or	    sp,	sp
seg000:1B2F		    jmp	    clc_ret
seg000:1B2F port_9F4_Out    endp
seg000:1B2F
seg000:1B32
seg000:1B32 ; =============== S	U B R O	U T I N	E =======================================
seg000:1B32
seg000:1B32
seg000:1B32 sub_1B32	    proc near		    ; CODE XREF: debugger?+11p
seg000:1B32					    ; DATA XREF: seg000:18A5o
seg000:1B32		    cmp	    al,	0FFh
seg000:1B34		    jz	    short loc_1B39
seg000:1B36		    jmp	    stc_ret
seg000:1B39 ; ---------------------------------------------------------------------------
seg000:1B39
seg000:1B39 loc_1B39:				    ; CODE XREF: sub_1B32+2j
seg000:1B39		    mov	    ax,	cs
seg000:1B3B		    mov	    bx,	offset reg_333_?
seg000:1B3E		    or	    sp,	sp
seg000:1B40		    jmp	    clc_ret
seg000:1B40 sub_1B32	    endp
seg000:1B40
seg000:1B43
seg000:1B43 ; =============== S	U B R O	U T I N	E =======================================
seg000:1B43
seg000:1B43
seg000:1B43 sub_1B43	    proc near		    ; CODE XREF: debugger?+11p
seg000:1B43					    ; DATA XREF: seg000:18A7o
seg000:1B43		    cmp	    al,	0FFh
seg000:1B45		    jz	    short loc_1B4A
seg000:1B47		    jmp	    stc_ret
seg000:1B4A ; ---------------------------------------------------------------------------
seg000:1B4A
seg000:1B4A loc_1B4A:				    ; CODE XREF: sub_1B43+2j
seg000:1B4A		    mov	    bx,	offset unk_1B59
seg000:1B4D		    mov	    cx,	0
seg000:1B50		    nop
seg000:1B51		    mov	    ax,	0Fh
seg000:1B54		    or	    sp,	sp
seg000:1B56		    jmp	    clc_ret
seg000:1B56 sub_1B43	    endp
seg000:1B56
seg000:1B56 ; ---------------------------------------------------------------------------
seg000:1B59 unk_1B59	    db	  3		    ; DATA XREF: sub_1B43:loc_1B4Ao
seg000:1B5A
seg000:1B5A ; =============== S	U B R O	U T I N	E =======================================
seg000:1B5A
seg000:1B5A
seg000:1B5A port_9F4BF4_In  proc near		    ; CODE XREF: debugger?+11p
seg000:1B5A					    ; DATA XREF: seg000:18A9o
seg000:1B5A		    cmp	    al,	0FEh ; 'þ'
seg000:1B5C		    ja	    short loc_1BD4
seg000:1B5E		    push    ax
seg000:1B5F		    push    dx
seg000:1B60		    push    si
seg000:1B61		    push    ds
seg000:1B62		    mov	    si,	1
seg000:1B65		    cmp	    al,	1
seg000:1B67		    ja	    short loc_1BCC
seg000:1B69		    cmp	    bx,	0FFh
seg000:1B6D		    ja	    short loc_1BCC
seg000:1B6F		    pushf
seg000:1B70		    cli
seg000:1B71		    mov	    ds,	dx
seg000:1B73		    mov	    si,	ax
seg000:1B75		    shl	    si,	8
seg000:1B78		    mov	    dx,	9F4h
seg000:1B7B		    in	    al,	dx
seg000:1B7C		    mov	    ah,	al
seg000:1B7E		    mov	    al,	8
seg000:1B80		    out	    dx,	al
seg000:1B81		    mov	    dx,	0BF4h
seg000:1B84		    in	    al,	dx
seg000:1B85		    xchg    ax,	si
seg000:1B86		    out	    dx,	al
seg000:1B87		    call    keyb_commands1
seg000:1B8A		    mov	    dx,	cx
seg000:1B8C		    mov	    cx,	0Ah
seg000:1B8F		    mov	    al,	byte ptr ds:off_FEFF+1
seg000:1B92
seg000:1B92 loc_1B92:				    ; CODE XREF: port_9F4BF4_In+3Bj
seg000:1B92		    mov	    byte ptr ds:off_FEFF+1, al
seg000:1B95		    loop    loc_1B92
seg000:1B97		    mov	    cx,	dx
seg000:1B99		    mov	    al,	byte ptr ds:off_FF01
seg000:1B9C		    xor	    al,	byte ptr ds:off_FF01
seg000:1BA0		    jz	    short loc_1BBD
seg000:1BA2		    test    ah,	1
seg000:1BA5		    jnz	    short loc_1BAD
seg000:1BA7		    mov	    cl,	[bx-100h]
seg000:1BAB		    jmp	    short loc_1BB1
seg000:1BAD ; ---------------------------------------------------------------------------
seg000:1BAD
seg000:1BAD loc_1BAD:				    ; CODE XREF: port_9F4BF4_In+4Bj
seg000:1BAD		    mov	    [bx-100h], cl
seg000:1BB1
seg000:1BB1 loc_1BB1:				    ; CODE XREF: port_9F4BF4_In+51j
seg000:1BB1		    mov	    al,	ds:byte_FFFF
seg000:1BB4		    mov	    al,	byte ptr ds:off_FF01
seg000:1BB7		    xor	    al,	byte ptr ds:off_FF01
seg000:1BBB		    not	    al
seg000:1BBD
seg000:1BBD loc_1BBD:				    ; CODE XREF: port_9F4BF4_In+46j
seg000:1BBD		    call    keyb_commands2
seg000:1BC0		    xchg    ax,	si
seg000:1BC1		    mov	    dx,	0BF4h
seg000:1BC4		    out	    dx,	al
seg000:1BC5		    mov	    al,	ah
seg000:1BC7		    mov	    dx,	9F4h
seg000:1BCA		    out	    dx,	al
seg000:1BCB		    popf
seg000:1BCC
seg000:1BCC loc_1BCC:				    ; CODE XREF: port_9F4BF4_In+Dj
seg000:1BCC					    ; port_9F4BF4_In+13j
seg000:1BCC		    test    si,	1
seg000:1BD0		    pop	    ds
seg000:1BD1		    pop	    si
seg000:1BD2		    pop	    dx
seg000:1BD3		    pop	    ax
seg000:1BD4
seg000:1BD4 loc_1BD4:				    ; CODE XREF: port_9F4BF4_In+2j
seg000:1BD4		    jmp	    clc_ret
seg000:1BD4 port_9F4BF4_In  endp
seg000:1BD4
seg000:1BD7
seg000:1BD7 ; =============== S	U B R O	U T I N	E =======================================
seg000:1BD7
seg000:1BD7 ; Attributes: noreturn
seg000:1BD7
seg000:1BD7 div_by_zero	    proc near		    ; DATA XREF: seg000:IVT_table?o
seg000:1BD7		    push    si
seg000:1BD8		    push    ds
seg000:1BD9		    mov	    ds,	word ptr cs:loc_C5+1
seg000:1BDE		    mov	    si,	offset aDivideByZero ; "\r\n+++	Divide by zero!	+++\r\n"
seg000:1BE1		    call    print_null_terminated
seg000:1BE4		    pop	    ds
seg000:1BE5		    pop	    si
seg000:1BE6		    jmp	    far	ptr 0F000h:6BF9h
seg000:1BE6 div_by_zero	    endp
seg000:1BE6
seg000:1BEB
seg000:1BEB ; =============== S	U B R O	U T I N	E =======================================
seg000:1BEB
seg000:1BEB
seg000:1BEB overflow	    proc far		    ; DATA XREF: seg000:FEEBo
seg000:1BEB		    push    si
seg000:1BEC		    push    ds
seg000:1BED		    mov	    ds,	word ptr cs:loc_C5+1
seg000:1BF2		    mov	    si,	offset aOverflow ; "\r\n+++ Overflow! +++\r\n"
seg000:1BF5		    call    print_null_terminated
seg000:1BF8		    pop	    ds
seg000:1BF9		    pop	    si
seg000:1BFA		    iret
seg000:1BFA overflow	    endp
seg000:1BFA
seg000:1BFB
seg000:1BFB ; =============== S	U B R O	U T I N	E =======================================
seg000:1BFB
seg000:1BFB ; Attributes: noreturn
seg000:1BFB
seg000:1BFB sub_1BFB	    proc near
seg000:1BFB		    push    si
seg000:1BFC		    push    ds
seg000:1BFD		    mov	    ds,	word ptr cs:loc_C5+1
seg000:1C02		    mov	    si,	offset aWildInterrupt ;	"\r\n+++ Wild interrupt! +++\r\n"
seg000:1C05		    call    print_null_terminated
seg000:1C08		    pop	    ds
seg000:1C09		    pop	    si
seg000:1C0A		    jmp	    far	ptr 0F000h:6BF9h
seg000:1C0A sub_1BFB	    endp
seg000:1C0A
seg000:1C0F
seg000:1C0F ; =============== S	U B R O	U T I N	E =======================================
seg000:1C0F
seg000:1C0F
seg000:1C0F int_ack?jump    proc far		    ; DATA XREF: hw_init+21o
seg000:1C0F					    ; seg000:FEE5o ...
seg000:1C0F		    jmp	    short near ptr int_ack?
seg000:1C0F int_ack?jump    endp
seg000:1C0F
seg000:1C11 ; ---------------------------------------------------------------------------
seg000:1C11		    nop
seg000:1C12
seg000:1C12 ; =============== S	U B R O	U T I N	E =======================================
seg000:1C12
seg000:1C12
seg000:1C12 int_ack?	    proc far		    ; CODE XREF: int_ack?jumpj
seg000:1C12		    push    ax
seg000:1C13		    push    cx
seg000:1C14		    push    ds
seg000:1C15		    mov	    ds,	word ptr cs:loc_C5+1
seg000:1C1A		    mov	    al,	0Bh
seg000:1C1C		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:1C1E		    out	    0A0h, al	    ; PIC 2  same as 0020 for PIC 1
seg000:1C20		    in	    al,	20h	    ; Interrupt	controller, 8259A.
seg000:1C22		    mov	    ch,	al
seg000:1C24		    in	    al,	0A0h	    ; PIC 2  same as 0020 for PIC 1
seg000:1C26		    mov	    cl,	al
seg000:1C28		    test    cx,	cx
seg000:1C2A		    jz	    short loc_1C4C
seg000:1C2C		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:1C2E		    mov	    ah,	al
seg000:1C30		    in	    al,	0A1h	    ; Interrupt	Controller #2, 8259A
seg000:1C32		    or	    ax,	cx
seg000:1C34		    test    cl,	cl
seg000:1C36		    jz	    short loc_1C3E
seg000:1C38		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:1C3A		    mov	    al,	20h ; ' '
seg000:1C3C		    out	    0A0h, al	    ; PIC 2  same as 0020 for PIC 1
seg000:1C3E
seg000:1C3E loc_1C3E:				    ; CODE XREF: int_ack?+24j
seg000:1C3E		    mov	    al,	ah
seg000:1C40		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:1C42		    mov	    al,	20h ; ' '
seg000:1C44		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:1C46		    mov	    byte ptr ds:loc_6A+1, ch
seg000:1C4A		    jmp	    short loc_1C51
seg000:1C4C ; ---------------------------------------------------------------------------
seg000:1C4C
seg000:1C4C loc_1C4C:				    ; CODE XREF: int_ack?+18j
seg000:1C4C		    mov	    byte ptr ds:loc_6A+1, 0FFh
seg000:1C51
seg000:1C51 loc_1C51:				    ; CODE XREF: int_ack?+38j
seg000:1C51		    pop	    ds
seg000:1C52		    pop	    cx
seg000:1C53		    pop	    ax
seg000:1C54		    iret
seg000:1C54 int_ack?	    endp
seg000:1C54
seg000:1C55
seg000:1C55 ; =============== S	U B R O	U T I N	E =======================================
seg000:1C55
seg000:1C55
seg000:1C55 NMI_handler	    proc far		    ; DATA XREF: seg000:FEE7o
seg000:1C55		    push    ax
seg000:1C56		    push    ds
seg000:1C57		    mov	    ds,	word ptr cs:loc_C5+1
seg000:1C5C		    mov	    al,	8Eh ; ''
seg000:1C5E		    out	    70h, al	    ; CMOS Memory:
seg000:1C5E					    ;
seg000:1C60		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:1C60					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1C60					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1C60					    ; 3: 1=read	high switches
seg000:1C60					    ; 4: 0=enable RAM parity checking
seg000:1C60					    ; 5: 0=enable I/O channel check
seg000:1C60					    ; 6: 0=hold	keyboard clock low
seg000:1C60					    ; 7: 0=enable kbrd
seg000:1C62		    and	    al,	0C0h
seg000:1C64		    in	    al,	71h	    ; CMOS Memory
seg000:1C66		    jz	    short loc_1C8C
seg000:1C68		    out	    0F7h, al
seg000:1C6A		    mov	    al,	byte ptr ds:sub_0
seg000:1C6D		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:1C6D					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1C6D					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1C6D					    ; 3: 1=read	high switches
seg000:1C6D					    ; 4: 0=enable RAM parity checking
seg000:1C6D					    ; 5: 0=enable I/O channel check
seg000:1C6D					    ; 6: 0=hold	keyboard clock low
seg000:1C6D					    ; 7: 0=enable kbrd
seg000:1C6F		    or	    al,	0Ch
seg000:1C71		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:1C71					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1C71					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1C71					    ; 3: 1=read	high switches
seg000:1C71					    ; 4: 0=enable RAM parity checking
seg000:1C71					    ; 5: 0=enable I/O channel check
seg000:1C71					    ; 6: 0=hold	keyboard clock low
seg000:1C71					    ; 7: 0=enable kbrd
seg000:1C73		    and	    al,	0F3h
seg000:1C75		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:1C75					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:1C75					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:1C75					    ; 3: 1=read	high switches
seg000:1C75					    ; 4: 0=enable RAM parity checking
seg000:1C75					    ; 5: 0=enable I/O channel check
seg000:1C75					    ; 6: 0=hold	keyboard clock low
seg000:1C75					    ; 7: 0=enable kbrd
seg000:1C77		    push    si
seg000:1C78		    mov	    si,	offset aErrorMemoryParit ; "\r\n+++ ERROR:  Memory parity failure! ++"...
seg000:1C7B		    call    print_null_terminated
seg000:1C7E		    mov	    al,	0Eh
seg000:1C80		    out	    70h, al	    ; CMOS Memory:
seg000:1C80					    ; POST diagnostics status byte
seg000:1C82		    pop	    si
seg000:1C83		    pop	    ds
seg000:1C84		    in	    al,	71h	    ; CMOS Memory
seg000:1C86		    pop	    ax
seg000:1C87		    jmp	    far	ptr 0F000h:6BF9h
seg000:1C8C ; ---------------------------------------------------------------------------
seg000:1C8C
seg000:1C8C loc_1C8C:				    ; CODE XREF: NMI_handler+11j
seg000:1C8C		    push    si
seg000:1C8D		    mov	    si,	offset aNonMaskableInt ; "\r\n+++ Non-maskable interrupt! +++\r\n"
seg000:1C90		    call    print_null_terminated
seg000:1C93		    mov	    al,	0Eh
seg000:1C95		    out	    70h, al	    ; CMOS Memory:
seg000:1C95					    ; POST diagnostics status byte
seg000:1C97		    pop	    si
seg000:1C98		    pop	    ds
seg000:1C99		    in	    al,	71h	    ; CMOS Memory
seg000:1C9B		    pop	    ax
seg000:1C9C		    iret
seg000:1C9C NMI_handler	    endp
seg000:1C9C
seg000:1C9D
seg000:1C9D ; =============== S	U B R O	U T I N	E =======================================
seg000:1C9D
seg000:1C9D
seg000:1C9D sub_1C9D	    proc far		    ; DATA XREF: seg000:FF25o
seg000:1C9D		    jmp	    short near ptr sub_1CA0
seg000:1C9D sub_1C9D	    endp
seg000:1C9D
seg000:1C9F ; ---------------------------------------------------------------------------
seg000:1C9F		    nop
seg000:1CA0
seg000:1CA0 ; =============== S	U B R O	U T I N	E =======================================
seg000:1CA0
seg000:1CA0
seg000:1CA0 sub_1CA0	    proc far		    ; CODE XREF: sub_1C9Dj
seg000:1CA0		    push    ax
seg000:1CA1		    push    dx
seg000:1CA2		    mov	    dx,	0A0h ; ' '
seg000:1CA5		    mov	    al,	20h ; ' '
seg000:1CA7		    out	    dx,	al	    ; PIC 2  same as 0020 for PIC 1
seg000:1CA8		    pop	    dx
seg000:1CA9		    pop	    ax
seg000:1CAA		    int	    0Ah		    ;  - IRQ2 -	EGA VERTICAL RETRACE
seg000:1CAC		    iret
seg000:1CAC sub_1CA0	    endp
seg000:1CAC
seg000:1CAD
seg000:1CAD ; =============== S	U B R O	U T I N	E =======================================
seg000:1CAD
seg000:1CAD
seg000:1CAD sub_1CAD	    proc far		    ; DATA XREF: seg000:off_FEF7o
seg000:1CAD		    push    ax
seg000:1CAE		    push    dx
seg000:1CAF		    mov	    dx,	20h ; ' '
seg000:1CB2		    mov	    al,	20h ; ' '
seg000:1CB4		    out	    dx,	al	    ; Interrupt	controller, 8259A.
seg000:1CB5		    pop	    dx
seg000:1CB6		    pop	    ax
seg000:1CB7		    iret
seg000:1CB7 sub_1CAD	    endp
seg000:1CB7
seg000:1CB8
seg000:1CB8 ; =============== S	U B R O	U T I N	E =======================================
seg000:1CB8
seg000:1CB8
seg000:1CB8 nullsub_4	    proc far
seg000:1CB8		    iret
seg000:1CB8 nullsub_4	    endp
seg000:1CB8
seg000:1CB9
seg000:1CB9 ; =============== S	U B R O	U T I N	E =======================================
seg000:1CB9
seg000:1CB9
seg000:1CB9 sub_1CB9	    proc far		    ; DATA XREF: seg000:FF2Do
seg000:1CB9		    jmp	    short near ptr sub_1CBC
seg000:1CB9 sub_1CB9	    endp
seg000:1CB9
seg000:1CBB ; ---------------------------------------------------------------------------
seg000:1CBB		    nop
seg000:1CBC
seg000:1CBC ; =============== S	U B R O	U T I N	E =======================================
seg000:1CBC
seg000:1CBC
seg000:1CBC sub_1CBC	    proc far		    ; CODE XREF: sub_1CB9j
seg000:1CBC		    push    ax
seg000:1CBD		    push    dx
seg000:1CBE		    mov	    al,	0
seg000:1CC0		    out	    0F0h, al	    ; AT 80287 latch clear.
seg000:1CC0					    ; 'Busy' gets latched upon an unmasked 287 error.
seg000:1CC2		    mov	    al,	20h ; ' '
seg000:1CC4		    mov	    dx,	0A0h ; ' '
seg000:1CC7		    out	    dx,	al	    ; PIC 2  same as 0020 for PIC 1
seg000:1CC8		    mov	    dx,	20h ; ' '
seg000:1CCB		    out	    dx,	al	    ; Interrupt	controller, 8259A.
seg000:1CCC		    int	    2		    ; -	external hardware - NMI	(NON-MASKABLE INTERRUPT)
seg000:1CCC					    ; Generated	by NMI signal in hardware.
seg000:1CCE		    pop	    dx
seg000:1CCF		    pop	    ax
seg000:1CD0		    iret
seg000:1CD0 sub_1CBC	    endp
seg000:1CD0
seg000:1CD0 ; ---------------------------------------------------------------------------
seg000:1CD1 text_help	    db 9,9,'- MFM-300 Command Summary -',0Dh,0Ah
seg000:1CD1					    ; DATA XREF: cmd_help+1o
seg000:1CD1		    db 0Dh,0Ah
seg000:1CD1		    db 'CMD:',9,'Explanation',9,9,'Syntax',0Dh,0Ah
seg000:1CD1		    db '----',9,'-----------',9,9,'------',0Dh,0Ah
seg000:1CD1		    db '?:',9,'Help',9,9,9,'?',0Dh,0Ah
seg000:1CD1		    db 'B:',9,'Boot from disk',9,9,'B [{F|W}][{0|1|2|3}][:<partition>]',0Dh,0Ah
seg000:1CD1		    db 'C:',9,'Color bar',9,9,'C',0Dh,0Ah
seg000:1CD1		    db 'D:',9,'Display memory',9,9,'D [<range>]',0Dh,0Ah
seg000:1CD1		    db 'E:',9,'Examine memory',9,9,'E <addr>',0Dh,0Ah
seg000:1CD1		    db 'F:',9,'Fill memory',9,9,'F <range>,{<byte>|"<string>"}...',0Dh,0Ah
seg000:1CD1		    db 'G:',9,'Execute (Go)',9,9,'G [=<addr>][,<breakpoint>]...',0Dh,0Ah
seg000:1CD1		    db 'H:',9,'Hex math',9,9,'H <number1>,<number2>',0Dh,0Ah
seg000:1CD1		    db 'I:',9,'Input from port',9,9,'I <port>',0Dh,0Ah
seg000:1CD1		    db 'M:',9,'Move memory block',9,'M <range>,<dest>',0Dh,0Ah
seg000:1CD1		    db 'O:',9,'Output to port',9,9,'O <port>,<value>',0Dh,0Ah
seg000:1CD1		    db 'R:',9,'Examine Registers',9,'R [<register>]',0Dh,0Ah
seg000:1CD1		    db 'S:',9,'Search memory',9,9,'S <range>,{<byte>|"<string>"}...',0Dh,0Ah
seg000:1CD1		    db 'T:',9,'Trace program',9,9,'T [<count>]',0Dh,0Ah
seg000:1CD1		    db 'U:',9,'Unassemble program',9,'U [<range>]',0Dh,0Ah
seg000:1CD1		    db 'V:',9,'Set Video/Scroll',9,'V [M<mode>][S<scroll>]',0Dh,0Ah
seg000:1CD1		    db 9,'Where <range> is:',9,'<addr>{,<addr>|L<length>}',0Dh,0Ah
seg000:1CD1		    db 'TEST:',9,'Extended diagnostics',9,'TEST',0Dh,0Ah
seg000:1CD1		    db 'SETUP:',9,'Define hardware Setup',9,'SETUP',0Dh,0Ah
seg000:1CD1		    db 0Dh,0Ah,0
seg000:1FE5		    db	  0
seg000:1FE6
seg000:1FE6 ; =============== S	U B R O	U T I N	E =======================================
seg000:1FE6
seg000:1FE6
seg000:1FE6 keyb_wait_press? proc near		    ; CODE XREF: test_ram_base+26p
seg000:1FE6					    ; sub_877A+D3p ...
seg000:1FE6		    push    ax
seg000:1FE7		    call    Option_ROM_sig?
seg000:1FEA		    jnb	    short loc_2008
seg000:1FEC		    cli
seg000:1FED		    call    Keyboard_init
seg000:1FF0		    jb	    short loc_1FF7
seg000:1FF2		    call    Keyboard_?
seg000:1FF5		    jb	    short loc_2008
seg000:1FF7
seg000:1FF7 loc_1FF7:				    ; CODE XREF: keyb_wait_press?+Aj
seg000:1FF7					    ; keyb_wait_press?+1Bj
seg000:1FF7		    call    Keyb_statusRead
seg000:1FFA		    jnb	    short loc_2003
seg000:1FFC		    mov	    al,	0
seg000:1FFE		    call    Keyboard_waitChar
seg000:2001		    jmp	    short loc_1FF7
seg000:2003 ; ---------------------------------------------------------------------------
seg000:2003
seg000:2003 loc_2003:				    ; CODE XREF: keyb_wait_press?+14j
seg000:2003					    ; keyb_wait_press?+20j
seg000:2003		    call    keyb_??
seg000:2006		    jnb	    short loc_2003
seg000:2008
seg000:2008 loc_2008:				    ; CODE XREF: keyb_wait_press?+4j
seg000:2008					    ; keyb_wait_press?+Fj
seg000:2008		    pop	    ax
seg000:2009		    retn
seg000:2009 keyb_wait_press? endp
seg000:2009
seg000:200A
seg000:200A ; =============== S	U B R O	U T I N	E =======================================
seg000:200A
seg000:200A
seg000:200A Option_ROM_sig? proc near		    ; CODE XREF: keyb_wait_press?+1p
seg000:200A					    ; ide_detect_init?+13p
seg000:200A		    push    es
seg000:200B		    mov	    ax,	0D000h
seg000:200E		    mov	    es,	ax
seg000:2010		    assume es:nothing
seg000:2010		    cmp	    word ptr es:6, 445Ah
seg000:2017		    jnz	    short loc_2021
seg000:2019		    cmp	    byte ptr es:8, 53h ; 'S'
seg000:201F		    jz	    short loc_2022
seg000:2021
seg000:2021 loc_2021:				    ; CODE XREF: Option_ROM_sig?+Dj
seg000:2021		    stc
seg000:2022
seg000:2022 loc_2022:				    ; CODE XREF: Option_ROM_sig?+15j
seg000:2022		    pop	    es
seg000:2023		    assume es:nothing
seg000:2023		    retn
seg000:2023 Option_ROM_sig? endp
seg000:2023
seg000:2024
seg000:2024 ; =============== S	U B R O	U T I N	E =======================================
seg000:2024
seg000:2024
seg000:2024 keyb_??	    proc near		    ; CODE XREF: keyb_wait_press?:loc_2003p
seg000:2024					    ; test_ram_ext+30p	...
seg000:2024		    push    bx
seg000:2025		    push    dx
seg000:2026		    push    ds
seg000:2027		    push    es
seg000:2028		    push    ax
seg000:2029
seg000:2029 loc_2029:				    ; CODE XREF: keyb_??+50j
seg000:2029		    call    Keyb_statusRead
seg000:202C		    jnb	    short loc_2087
seg000:202E		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:2030		    mov	    ah,	al
seg000:2032		    smsw    dx
seg000:2035		    and	    dx,	1
seg000:2038		    jnz	    short loc_204A
seg000:203A		    mov	    ds,	word ptr cs:loc_C5+1
seg000:203F		    mov	    es,	word ptr cs:loc_48+1
seg000:2044		    call    Keyb_??
seg000:2047		    cmc
seg000:2048		    jnb	    short loc_2087
seg000:204A
seg000:204A loc_204A:				    ; CODE XREF: keyb_??+14j
seg000:204A		    cmp	    al,	46h ; 'F'
seg000:204C		    stc
seg000:204D		    jz	    short loc_2087
seg000:204F		    cmp	    al,	1
seg000:2051		    stc
seg000:2052		    jz	    short loc_2087
seg000:2054		    cmp	    al,	53h ; 'S'
seg000:2056		    jnz	    short loc_2071
seg000:2058		    smsw    dx
seg000:205B		    and	    dx,	1
seg000:205E		    stc
seg000:205F		    jnz	    short loc_2087
seg000:2061
seg000:2061 loc_2061:				    ; CODE XREF: keyb_??+61j
seg000:2061		    mov	    ax,	40h ; '@'
seg000:2064		    mov	    ds,	ax
seg000:2066		    assume ds:nothing
seg000:2066		    mov	    word ptr ds:72h, 1234h
seg000:206C		    jmp	    far	ptr 0F000h:1050h
seg000:2071 ; ---------------------------------------------------------------------------
seg000:2071
seg000:2071 loc_2071:				    ; CODE XREF: keyb_??+32j
seg000:2071		    cmp	    al,	52h ; 'R'
seg000:2073		    clc
seg000:2074		    jnz	    short loc_2029
seg000:2076		    smsw    dx
seg000:2079		    and	    dx,	1
seg000:207C		    stc
seg000:207D		    jnz	    short loc_2087
seg000:207F		    mov	    byte ptr cs:loc_26B+1, 0FFh
seg000:2085		    jmp	    short loc_2061
seg000:2087 ; ---------------------------------------------------------------------------
seg000:2087
seg000:2087 loc_2087:				    ; CODE XREF: keyb_??+8j
seg000:2087					    ; keyb_??+24j ...
seg000:2087		    mov	    dl,	al
seg000:2089		    pop	    ax
seg000:208A		    mov	    al,	dl
seg000:208C		    pop	    es
seg000:208D		    pop	    ds
seg000:208E		    assume ds:nothing
seg000:208E		    pop	    dx
seg000:208F		    pop	    bx
seg000:2090		    retn
seg000:2090 keyb_??	    endp
seg000:2090
seg000:2091
seg000:2091 ; =============== S	U B R O	U T I N	E =======================================
seg000:2091
seg000:2091
seg000:2091 Keyb_statusRead proc near		    ; CODE XREF: keyb_wait_press?:loc_1FF7p
seg000:2091					    ; keyb_??:loc_2029p
seg000:2091		    push    ax
seg000:2092		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:2092					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:2092					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:2092					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:2092					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:2092					    ;	 +------------------------------+-----------------------------------+
seg000:2092					    ; 4:  INH	  0=keyboard communications inhibited
seg000:2092					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:2092					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:2092					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:2092					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:2094		    and	    al,	1
seg000:2096		    add	    al,	0FFh
seg000:2098		    pop	    ax
seg000:2099		    retn
seg000:2099 Keyb_statusRead endp
seg000:2099
seg000:209A
seg000:209A ; =============== S	U B R O	U T I N	E =======================================
seg000:209A
seg000:209A
seg000:209A erase_screen    proc near		    ; CODE XREF: ColrWarm_Boot+5279p
seg000:209A					    ; tests_menu+39p ...
seg000:209A		    push    ax
seg000:209B		    push    cx
seg000:209C		    push    di
seg000:209D		    push    es
seg000:209E		    cld
seg000:209F		    mov	    es,	cs:colorText
seg000:20A4		    assume es:nothing
seg000:20A4		    xor	    di,	di
seg000:20A6		    mov	    cx,	2000h
seg000:20A9		    mov	    ax,	720h	    ; dot space	dot space
seg000:20AC		    rep	stosw
seg000:20AE		    mov	    es,	cs:monoText
seg000:20B3		    assume es:nothing
seg000:20B3		    xor	    di,	di
seg000:20B5		    mov	    cx,	2000h
seg000:20B8		    mov	    ax,	720h	    ; dot space	dot space
seg000:20BB		    rep	stosw
seg000:20BD		    xor	    dx,	dx
seg000:20BF		    pop	    es
seg000:20C0		    assume es:nothing
seg000:20C0		    pop	    di
seg000:20C1		    pop	    cx
seg000:20C2		    pop	    ax
seg000:20C3		    retn
seg000:20C3 erase_screen    endp
seg000:20C3
seg000:20C4
seg000:20C4 ; =============== S	U B R O	U T I N	E =======================================
seg000:20C4
seg000:20C4
seg000:20C4 print_hex?	    proc near		    ; CODE XREF: print_hex?+12p
seg000:20C4					    ; sub_8712+Ap ...
seg000:20C4		    push    ax
seg000:20C5		    push    cx
seg000:20C6		    push    dx
seg000:20C7		    mov	    dx,	0
seg000:20CA		    mov	    cx,	0Ah
seg000:20CD		    div	    cx
seg000:20CF		    mov	    cx,	dx
seg000:20D1		    pop	    dx
seg000:20D2		    test    ax,	ax
seg000:20D4		    jz	    short loc_20D9
seg000:20D6		    call    print_hex?
seg000:20D9
seg000:20D9 loc_20D9:				    ; CODE XREF: print_hex?+10j
seg000:20D9		    mov	    ax,	cx
seg000:20DB		    add	    al,	30h ; '0'
seg000:20DD		    call    print_CL_LF_TAB
seg000:20E0		    pop	    cx
seg000:20E1		    pop	    ax
seg000:20E2		    retn
seg000:20E2 print_hex?	    endp
seg000:20E2
seg000:20E3
seg000:20E3 ; =============== S	U B R O	U T I N	E =======================================
seg000:20E3
seg000:20E3
seg000:20E3 sub_20E3	    proc near		    ; CODE XREF: test_keyb+39p
seg000:20E3					    ; ram_bank_print+14p ...
seg000:20E3		    push    ax
seg000:20E4		    mov	    al,	ah
seg000:20E6		    call    sub_20EA
seg000:20E9		    pop	    ax
seg000:20E9 sub_20E3	    endp ; sp-analysis failed
seg000:20E9
seg000:20EA
seg000:20EA ; =============== S	U B R O	U T I N	E =======================================
seg000:20EA
seg000:20EA
seg000:20EA sub_20EA	    proc near		    ; CODE XREF: sub_20E3+3p
seg000:20EA		    push    ax
seg000:20EB		    push    cx
seg000:20EC		    mov	    cl,	4
seg000:20EE		    shr	    al,	cl
seg000:20F0		    pop	    cx
seg000:20F1		    call    sub_20F5
seg000:20F4		    pop	    ax
seg000:20F4 sub_20EA	    endp ; sp-analysis failed
seg000:20F4
seg000:20F5
seg000:20F5 ; =============== S	U B R O	U T I N	E =======================================
seg000:20F5
seg000:20F5
seg000:20F5 sub_20F5	    proc near		    ; CODE XREF: sub_20EA+7p
seg000:20F5					    ; ram_bank_print+10p ...
seg000:20F5		    and	    al,	0Fh
seg000:20F7		    add	    al,	30h ; '0'
seg000:20F9		    cmp	    al,	39h ; '9'
seg000:20FB		    jbe	    short loc_20FF
seg000:20FD		    add	    al,	7
seg000:20FF
seg000:20FF loc_20FF:				    ; CODE XREF: sub_20F5+6j
seg000:20FF		    call    print_CL_LF_TAB
seg000:2102		    retn
seg000:2102 sub_20F5	    endp
seg000:2102
seg000:2103
seg000:2103 ; =============== S	U B R O	U T I N	E =======================================
seg000:2103
seg000:2103
seg000:2103 Print_extended  proc near		    ; CODE XREF: cache_bad+14p
seg000:2103					    ; cache_bad+1Ap ...
seg000:2103		    push    ax
seg000:2104		    push    si
seg000:2105
seg000:2105 loc_2105:				    ; CODE XREF: Print_extended+Dj
seg000:2105		    mov	    al,	cs:[si]
seg000:2108		    inc	    si
seg000:2109		    test    al,	al
seg000:210B		    jz	    short loc_2112
seg000:210D		    call    print_CL_LF_TAB
seg000:2110		    jmp	    short loc_2105
seg000:2112 ; ---------------------------------------------------------------------------
seg000:2112
seg000:2112 loc_2112:				    ; CODE XREF: Print_extended+8j
seg000:2112		    pop	    si
seg000:2113		    pop	    ax
seg000:2114		    retn
seg000:2114 Print_extended  endp
seg000:2114
seg000:2115
seg000:2115 ; =============== S	U B R O	U T I N	E =======================================
seg000:2115
seg000:2115
seg000:2115 print_CL_LF_TAB proc near		    ; CODE XREF: print_hex?+19p
seg000:2115					    ; sub_20F5:loc_20FFp ...
seg000:2115		    cmp	    al,	0Dh	    ; CR  (carriage return)
seg000:2117		    jnz	    short check_linefeed
seg000:2119		    mov	    dl,	0
seg000:211B		    jmp	    short locret_217B
seg000:211D ; ---------------------------------------------------------------------------
seg000:211D
seg000:211D check_linefeed:			    ; CODE XREF: print_CL_LF_TAB+2j
seg000:211D		    cmp	    al,	0Ah	    ; LF  (NL line feed, new line)
seg000:211F		    jz	    short loc_2172
seg000:2121		    cmp	    al,	9	    ; TAB (horizontal tab)
seg000:2123		    jnz	    short PutChar_cursor
seg000:2125		    push    ax
seg000:2126		    mov	    ah,	dl
seg000:2128		    and	    ah,	0F8h
seg000:212B		    add	    ah,	8
seg000:212E		    sub	    ah,	dl
seg000:2130
seg000:2130 loc_2130:				    ; CODE XREF: print_CL_LF_TAB+22j
seg000:2130		    mov	    al,	20h ; ' '
seg000:2132		    call    PutChar_cursor
seg000:2135		    dec	    ah
seg000:2137		    jnz	    short loc_2130
seg000:2139		    pop	    ax
seg000:213A		    jmp	    short locret_217B
seg000:213A print_CL_LF_TAB endp
seg000:213A
seg000:213C
seg000:213C ; =============== S	U B R O	U T I N	E =======================================
seg000:213C
seg000:213C
seg000:213C PutChar_cursor  proc near		    ; CODE XREF: print_CL_LF_TAB+Ej
seg000:213C					    ; print_CL_LF_TAB+1Dp ...
seg000:213C		    push    ax
seg000:213D		    push    bx
seg000:213E		    push    es
seg000:213F		    mov	    bl,	dh
seg000:2141		    mov	    bh,	0
seg000:2143		    shl	    bx,	1
seg000:2145		    mov	    bx,	cs:word_ECD5[bx]
seg000:214A		    add	    bl,	dl
seg000:214C		    adc	    bh,	0
seg000:214F		    add	    bl,	dl
seg000:2151		    adc	    bh,	0
seg000:2154		    mov	    ah,	7
seg000:2156		    mov	    es,	cs:colorText
seg000:215B		    assume es:nothing
seg000:215B		    mov	    es:[bx], ax
seg000:215E		    mov	    es,	cs:monoText
seg000:2163		    assume es:nothing
seg000:2163		    mov	    es:[bx], ax
seg000:2166		    pop	    es
seg000:2167		    assume es:nothing
seg000:2167		    pop	    bx
seg000:2168		    pop	    ax
seg000:2169		    inc	    dl
seg000:216B		    cmp	    dl,	50h ; 'P'   ; 50h = 80, sscreen width
seg000:216E		    jb	    short locret_217B
seg000:2170		    mov	    dl,	0
seg000:2172
seg000:2172 loc_2172:				    ; CODE XREF: print_CL_LF_TAB+Aj
seg000:2172		    inc	    dh
seg000:2174		    cmp	    dh,	19h	    ; 19h = 25,	Screen lines limit
seg000:2177		    jb	    short locret_217B
seg000:2179		    mov	    dh,	0
seg000:217B
seg000:217B locret_217B:			    ; CODE XREF: print_CL_LF_TAB+6j
seg000:217B					    ; print_CL_LF_TAB+25j ...
seg000:217B		    retn
seg000:217B PutChar_cursor  endp
seg000:217B
seg000:217C
seg000:217C ; =============== S	U B R O	U T I N	E =======================================
seg000:217C
seg000:217C
seg000:217C set_80x25	    proc near		    ; CODE XREF: tests_menu+1Fp
seg000:217C		    push    ax
seg000:217D		    push    word ptr ds:loc_E+2
seg000:2181		    or	    word ptr ds:loc_E+2, 30h
seg000:2186		    mov	    ax,	7
seg000:2189		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:2189					    ; AL = mode
seg000:218B		    and	    word ptr ds:loc_E+2, 0FFEFh
seg000:2190		    mov	    ax,	3
seg000:2193		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:2193					    ; AL = mode
seg000:2195		    pop	    word ptr ds:loc_E+2
seg000:2199		    mov	    ax,	3
seg000:219C		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:219C					    ; AL = mode
seg000:219E		    pop	    ax
seg000:219F		    retn
seg000:219F set_80x25	    endp
seg000:219F
seg000:21A0
seg000:21A0 ; =============== S	U B R O	U T I N	E =======================================
seg000:21A0
seg000:21A0
seg000:21A0 print_number    proc near		    ; CODE XREF: print_number+Fp
seg000:21A0					    ; ColrWarm_Boot+528Ap ...
seg000:21A0		    push    ax
seg000:21A1		    push    cx
seg000:21A2		    push    dx
seg000:21A3		    mov	    dx,	0
seg000:21A6		    mov	    cx,	0Ah
seg000:21A9		    div	    cx
seg000:21AB		    test    ax,	ax
seg000:21AD		    jz	    short loc_21B2
seg000:21AF		    call    print_number
seg000:21B2
seg000:21B2 loc_21B2:				    ; CODE XREF: print_number+Dj
seg000:21B2		    mov	    ax,	dx
seg000:21B4		    add	    al,	30h ; '0'
seg000:21B6		    call    printChar_VGABIOS
seg000:21B9		    pop	    dx
seg000:21BA		    pop	    cx
seg000:21BB		    pop	    ax
seg000:21BC		    retn
seg000:21BC print_number    endp
seg000:21BC
seg000:21BD
seg000:21BD ; =============== S	U B R O	U T I N	E =======================================
seg000:21BD
seg000:21BD
seg000:21BD sub_21BD	    proc near
seg000:21BD		    push    ax
seg000:21BE		    push    cx
seg000:21BF		    push    dx
seg000:21C0		    push    si
seg000:21C1		    push    di
seg000:21C2
seg000:21C2 loc_21C2:				    ; CODE XREF: sub_21BD+1Cj
seg000:21C2		    mov	    si,	cx
seg000:21C4		    shl	    si,	1
seg000:21C6		    cmp	    ax,	cs:divider?[si]
seg000:21CB		    jnb	    short loc_21DB
seg000:21CD		    cmp	    cx,	1
seg000:21D0		    jz	    short loc_21DB
seg000:21D2		    push    ax
seg000:21D3		    mov	    al,	20h ; ' '
seg000:21D5		    call    VGA_char@position
seg000:21D8		    pop	    ax
seg000:21D9		    loop    loc_21C2
seg000:21DB
seg000:21DB loc_21DB:				    ; CODE XREF: sub_21BD+Ej
seg000:21DB					    ; sub_21BD+13j ...
seg000:21DB		    push    dx
seg000:21DC		    xor	    dx,	dx
seg000:21DE		    div	    cs:divider?[si]
seg000:21E3		    mov	    di,	dx
seg000:21E5		    pop	    dx
seg000:21E6		    add	    al,	30h ; '0'
seg000:21E8		    call    VGA_char@position
seg000:21EB		    mov	    ax,	di
seg000:21ED		    sub	    si,	2
seg000:21F0		    loop    loc_21DB
seg000:21F2		    pop	    di
seg000:21F3		    pop	    si
seg000:21F4		    pop	    dx
seg000:21F5		    pop	    cx
seg000:21F6		    pop	    ax
seg000:21F7		    retn
seg000:21F7 sub_21BD	    endp
seg000:21F7
seg000:21F7 ; ---------------------------------------------------------------------------
seg000:21F8 divider?	    dw 0		    ; DATA XREF: sub_21BD+9r
seg000:21F8					    ; sub_21BD+21r
seg000:21FA		    dw 1
seg000:21FC		    dw 0Ah
seg000:21FE		    dw 64h
seg000:2200		    dw 3E8h
seg000:2202		    dw 2710h
seg000:2204
seg000:2204 ; =============== S	U B R O	U T I N	E =======================================
seg000:2204
seg000:2204
seg000:2204 VGA_char@position proc near		    ; CODE XREF: sub_21BD+18p
seg000:2204					    ; sub_21BD+2Bp
seg000:2204		    push    ax
seg000:2205		    push    cx
seg000:2206		    push    ax
seg000:2207		    mov	    ah,	2
seg000:2209		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:2209					    ; DH,DL = row, column (0,0 = upper left)
seg000:2209					    ; BH = page	number
seg000:220B		    pop	    ax
seg000:220C		    mov	    cx,	1
seg000:220F		    mov	    ah,	9
seg000:2211		    int	    10h		    ; -	VIDEO -	WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION
seg000:2211					    ; AL = character, BH = display page
seg000:2211					    ; BL = attributes of character (alpha modes) or color (graphics modes)
seg000:2211					    ; CX = number of times to write character
seg000:2213		    inc	    dl
seg000:2215		    pop	    cx
seg000:2216		    pop	    ax
seg000:2217		    retn
seg000:2217 VGA_char@position endp
seg000:2217
seg000:2218
seg000:2218 ; =============== S	U B R O	U T I N	E =======================================
seg000:2218
seg000:2218
seg000:2218 print_HEX_ESDI  proc near		    ; CODE XREF: cmd_disp_memory+2Dp
seg000:2218					    ; cmd_examine_mem:loc_6524p ...
seg000:2218		    push    ax
seg000:2219		    mov	    ax,	es
seg000:221B		    call    print_HEX
seg000:221E		    mov	    al,	3Ah ; ':'
seg000:2220		    call    printChar_VGABIOS
seg000:2223		    mov	    ax,	di
seg000:2225		    call    print_HEX
seg000:2228		    pop	    ax
seg000:2229		    retn
seg000:2229 print_HEX_ESDI  endp
seg000:2229
seg000:222A
seg000:222A ; =============== S	U B R O	U T I N	E =======================================
seg000:222A
seg000:222A
seg000:222A print_HEX	    proc near		    ; CODE XREF: print_HEX_ESDI+3p
seg000:222A					    ; print_HEX_ESDI+Dp ...
seg000:222A		    push    ax
seg000:222B		    mov	    al,	ah
seg000:222D		    call    print_HEX_upper
seg000:2230		    pop	    ax
seg000:2231
seg000:2231 print_HEX_upper:			    ; CODE XREF: print_HEX+3p
seg000:2231					    ; cmd_disp_memory+38p ...
seg000:2231		    push    ax
seg000:2232		    push    cx
seg000:2233		    mov	    cl,	4
seg000:2235		    shr	    al,	cl
seg000:2237		    pop	    cx
seg000:2238		    call    print_HEX_AL
seg000:223B		    pop	    ax
seg000:223C
seg000:223C print_HEX_AL:			    ; CODE XREF: print_HEX+Ep
seg000:223C		    and	    al,	0Fh
seg000:223E		    add	    al,	30h ; '0'
seg000:2240		    cmp	    al,	39h ; '9'
seg000:2242		    jbe	    short loc_2246
seg000:2244		    add	    al,	7
seg000:2246
seg000:2246 loc_2246:				    ; CODE XREF: print_HEX+18j
seg000:2246		    call    printChar_VGABIOS
seg000:2249		    retn
seg000:2249 print_HEX	    endp
seg000:2249
seg000:224A
seg000:224A ; =============== S	U B R O	U T I N	E =======================================
seg000:224A
seg000:224A
seg000:224A sub_224A	    proc near		    ; CODE XREF: sub_2429+20p
seg000:224A					    ; cmd_examine_mem+73p ...
seg000:224A		    push    si
seg000:224B		    mov	    si,	offset asc_22F9	; "\b \b"
seg000:224E		    call    print_null_terminated
seg000:2251		    pop	    si
seg000:2252		    retn
seg000:2252 sub_224A	    endp
seg000:2252
seg000:2253
seg000:2253 ; =============== S	U B R O	U T I N	E =======================================
seg000:2253
seg000:2253
seg000:2253 sub_2253	    proc near		    ; CODE XREF: sub_2429+2Fp
seg000:2253					    ; cmd_colorBar+37p	...
seg000:2253		    push    ax
seg000:2254		    push    si
seg000:2255		    call    get_key?_0
seg000:2258		    jz	    short loc_2271
seg000:225A		    cmp	    al,	13h
seg000:225C		    jnz	    short loc_2271
seg000:225E		    call    keyb_menu
seg000:2261		    call    keyb_menu
seg000:2264		    cmp	    ax,	0
seg000:2267		    jz	    short loc_2292
seg000:2269		    cmp	    al,	1Bh
seg000:226B		    jz	    short loc_2292
seg000:226D		    cmp	    al,	3
seg000:226F		    jz	    short loc_2292
seg000:2271
seg000:2271 loc_2271:				    ; CODE XREF: sub_2253+5j
seg000:2271					    ; sub_2253+9j ...
seg000:2271		    test    byte ptr ds:loc_16+1, 10h
seg000:2276		    jnz	    short loc_2271
seg000:2278		    mov	    si,	offset newline ; "\r\n"
seg000:227B		    call    print_null_terminated
seg000:227E		    call    get_key?_0
seg000:2281		    jz	    short loc_22A0
seg000:2283		    cmp	    ax,	0
seg000:2286		    jz	    short loc_229A
seg000:2288		    cmp	    al,	1Bh
seg000:228A		    jz	    short loc_229A
seg000:228C		    cmp	    al,	3
seg000:228E		    jnz	    short loc_22A0
seg000:2290		    jmp	    short loc_229A
seg000:2292 ; ---------------------------------------------------------------------------
seg000:2292
seg000:2292 loc_2292:				    ; CODE XREF: sub_2253+14j
seg000:2292					    ; sub_2253+18j ...
seg000:2292		    mov	    si,	offset newline ; "\r\n"
seg000:2295		    call    print_null_terminated
seg000:2298		    jmp	    short loc_229D
seg000:229A ; ---------------------------------------------------------------------------
seg000:229A
seg000:229A loc_229A:				    ; CODE XREF: sub_2253+33j
seg000:229A					    ; sub_2253+37j ...
seg000:229A		    call    keyb_menu
seg000:229D
seg000:229D loc_229D:				    ; CODE XREF: sub_2253+45j
seg000:229D		    jmp	    loc_6365
seg000:22A0 ; ---------------------------------------------------------------------------
seg000:22A0
seg000:22A0 loc_22A0:				    ; CODE XREF: sub_2253+2Ej
seg000:22A0					    ; sub_2253+3Bj
seg000:22A0		    pop	    si
seg000:22A1		    pop	    ax
seg000:22A2		    retn
seg000:22A2 sub_2253	    endp
seg000:22A2
seg000:22A3
seg000:22A3 ; =============== S	U B R O	U T I N	E =======================================
seg000:22A3
seg000:22A3
seg000:22A3 print_null_terminated proc near	    ; CODE XREF: ColrWarm_Boot+518p
seg000:22A3					    ; div_by_zero+Ap ...
seg000:22A3		    push    ax
seg000:22A4		    push    si
seg000:22A5
seg000:22A5 loc_22A5:				    ; CODE XREF: print_null_terminated+Dj
seg000:22A5		    mov	    al,	cs:[si]
seg000:22A8		    inc	    si
seg000:22A9		    test    al,	al
seg000:22AB		    jz	    short loc_22B2
seg000:22AD		    call    printChar_VGABIOS
seg000:22B0		    jmp	    short loc_22A5
seg000:22B2 ; ---------------------------------------------------------------------------
seg000:22B2
seg000:22B2 loc_22B2:				    ; CODE XREF: print_null_terminated+8j
seg000:22B2		    pop	    si
seg000:22B3		    pop	    ax
seg000:22B4		    retn
seg000:22B4 print_null_terminated endp
seg000:22B4
seg000:22B5
seg000:22B5 ; =============== S	U B R O	U T I N	E =======================================
seg000:22B5
seg000:22B5
seg000:22B5 sub_22B5	    proc near		    ; CODE XREF: cmd_disp_memory+56p
seg000:22B5		    push    ax
seg000:22B6		    push    cx
seg000:22B7		    push    dx
seg000:22B8		    call    tab_size_?
seg000:22BB		    sub	    ah,	dl
seg000:22BD		    call    print_spaces_AH
seg000:22C0		    pop	    dx
seg000:22C1		    pop	    cx
seg000:22C2		    pop	    ax
seg000:22C3		    retn
seg000:22C3 sub_22B5	    endp
seg000:22C3
seg000:22C4
seg000:22C4 ; =============== S	U B R O	U T I N	E =======================================
seg000:22C4
seg000:22C4
seg000:22C4 print_spaces_AH proc near		    ; CODE XREF: sub_22B5+8p
seg000:22C4					    ; printChar_VGABIOS+19p ...
seg000:22C4		    push    ax
seg000:22C5
seg000:22C5 loc_22C5:				    ; CODE XREF: print_spaces_AH+8j
seg000:22C5		    mov	    al,	20h ; ' '
seg000:22C7		    call    printChar_VGABIOS
seg000:22CA		    dec	    ah
seg000:22CC		    jnz	    short loc_22C5
seg000:22CE		    pop	    ax
seg000:22CF		    retn
seg000:22CF print_spaces_AH endp
seg000:22CF
seg000:22D0
seg000:22D0 ; =============== S	U B R O	U T I N	E =======================================
seg000:22D0
seg000:22D0
seg000:22D0 printChar_VGABIOS proc near		    ; CODE XREF: print_number+16p
seg000:22D0					    ; print_HEX_ESDI+8p ...
seg000:22D0		    push    ax
seg000:22D1		    push    bx
seg000:22D2		    push    cx
seg000:22D3		    push    dx
seg000:22D4		    test    al,	al
seg000:22D6		    jz	    short loc_22F4
seg000:22D8		    cmp	    al,	9	    ; \t Tab
seg000:22DA		    jnz	    short not_tab
seg000:22DC		    call    tab_size_?
seg000:22DF		    mov	    ah,	dl
seg000:22E1		    and	    ah,	0F8h
seg000:22E4		    add	    ah,	8
seg000:22E7		    sub	    ah,	dl
seg000:22E9		    call    print_spaces_AH
seg000:22EC		    jmp	    short loc_22F4
seg000:22EE ; ---------------------------------------------------------------------------
seg000:22EE
seg000:22EE not_tab:				    ; CODE XREF: printChar_VGABIOS+Aj
seg000:22EE		    mov	    ah,	0Eh
seg000:22F0		    mov	    bl,	7
seg000:22F2		    int	    10h		    ; -	VIDEO -	WRITE CHARACTER	AND ADVANCE CURSOR (TTY	WRITE)
seg000:22F2					    ; AL = character, BH = display page	(alpha modes)
seg000:22F2					    ; BL = foreground color (graphics modes)
seg000:22F4
seg000:22F4 loc_22F4:				    ; CODE XREF: printChar_VGABIOS+6j
seg000:22F4					    ; printChar_VGABIOS+1Cj
seg000:22F4		    pop	    dx
seg000:22F5		    pop	    cx
seg000:22F6		    pop	    bx
seg000:22F7		    pop	    ax
seg000:22F8		    retn
seg000:22F8 printChar_VGABIOS endp
seg000:22F8
seg000:22F8 ; ---------------------------------------------------------------------------
seg000:22F9 asc_22F9	    db 8,' ',8,0            ; DATA XREF: sub_224A+1o
seg000:22FD		    db	  0
seg000:22FE
seg000:22FE ; =============== S	U B R O	U T I N	E =======================================
seg000:22FE
seg000:22FE
seg000:22FE sub_22FE	    proc near		    ; CODE XREF: cmd_fill_mem+11p
seg000:22FE					    ; sub_69DC+10p
seg000:22FE		    push    ax
seg000:22FF		    mov	    bx,	0
seg000:2302		    call    sub_2403
seg000:2305		    jb	    short loc_233A
seg000:2307
seg000:2307 loc_2307:				    ; CODE XREF: sub_22FE+39j
seg000:2307		    cmp	    byte ptr cs:[si+21Ah], 22h ; '"'
seg000:230D		    jnz	    short loc_2325
seg000:230F		    inc	    si
seg000:2310
seg000:2310 loc_2310:				    ; CODE XREF: sub_22FE+25j
seg000:2310		    mov	    al,	cs:[si+21Ah]
seg000:2315		    inc	    si
seg000:2316		    cmp	    al,	0Dh
seg000:2318		    stc
seg000:2319		    jz	    short loc_233A
seg000:231B		    cmp	    al,	22h ; '"'
seg000:231D		    jz	    short loc_232E
seg000:231F		    mov	    cs:[bx+di],	al
seg000:2322		    inc	    bx
seg000:2323		    jmp	    short loc_2310
seg000:2325 ; ---------------------------------------------------------------------------
seg000:2325
seg000:2325 loc_2325:				    ; CODE XREF: sub_22FE+Fj
seg000:2325		    call    convert_hex
seg000:2328		    jb	    short loc_233A
seg000:232A		    mov	    cs:[bx+di],	al
seg000:232D		    inc	    bx
seg000:232E
seg000:232E loc_232E:				    ; CODE XREF: sub_22FE+1Fj
seg000:232E		    call    sub_23EA
seg000:2331		    cmp	    byte ptr cs:[si+21Ah], 0Dh
seg000:2337		    jnz	    short loc_2307
seg000:2339		    clc
seg000:233A
seg000:233A loc_233A:				    ; CODE XREF: sub_22FE+7j
seg000:233A					    ; sub_22FE+1Bj ...
seg000:233A		    pop	    ax
seg000:233B		    retn
seg000:233B sub_22FE	    endp
seg000:233B
seg000:233C
seg000:233C ; =============== S	U B R O	U T I N	E =======================================
seg000:233C
seg000:233C
seg000:233C sub_233C	    proc near		    ; CODE XREF: cmd_disp_memory+13p
seg000:233C					    ; cmd_fill_mem+8p ...
seg000:233C		    push    ax
seg000:233D		    push    ax
seg000:233E		    call    sub_2377
seg000:2341		    pop	    ax
seg000:2342		    jb	    short loc_2375
seg000:2344		    mov	    al,	cs:[si+21Ah]
seg000:2349		    cmp	    al,	0Dh
seg000:234B		    jnz	    short loc_2354
seg000:234D		    test    ah,	ah
seg000:234F		    jnz	    short loc_2371
seg000:2351		    stc
seg000:2352		    jmp	    short loc_2375
seg000:2354 ; ---------------------------------------------------------------------------
seg000:2354
seg000:2354 loc_2354:				    ; CODE XREF: sub_233C+Fj
seg000:2354		    call    convert_ASCII
seg000:2357		    cmp	    al,	4Ch ; 'L'
seg000:2359		    jnz	    short loc_2365
seg000:235B		    inc	    si
seg000:235C		    call    convert_hex
seg000:235F		    jb	    short loc_2375
seg000:2361		    mov	    cx,	ax
seg000:2363		    jmp	    short loc_2371
seg000:2365 ; ---------------------------------------------------------------------------
seg000:2365
seg000:2365 loc_2365:				    ; CODE XREF: sub_233C+1Dj
seg000:2365		    call    convert_hex
seg000:2368		    cmp	    ax,	di
seg000:236A		    jb	    short loc_2375
seg000:236C		    mov	    cx,	ax
seg000:236E		    sub	    cx,	di
seg000:2370		    inc	    cx
seg000:2371
seg000:2371 loc_2371:				    ; CODE XREF: sub_233C+13j
seg000:2371					    ; sub_233C+27j
seg000:2371		    clc
seg000:2372		    call    sub_23EA
seg000:2375
seg000:2375 loc_2375:				    ; CODE XREF: sub_233C+6j
seg000:2375					    ; sub_233C+16j ...
seg000:2375		    pop	    ax
seg000:2376		    retn
seg000:2376 sub_233C	    endp
seg000:2376
seg000:2377
seg000:2377 ; =============== S	U B R O	U T I N	E =======================================
seg000:2377
seg000:2377
seg000:2377 sub_2377	    proc near		    ; CODE XREF: sub_233C+2p
seg000:2377					    ; cmd_examine_mem+4p ...
seg000:2377		    push    ax
seg000:2378		    call    convert_hex
seg000:237B		    jb	    short loc_2392
seg000:237D		    mov	    di,	ax
seg000:237F		    cmp	    byte ptr cs:[si+21Ah], 3Ah ; ':'
seg000:2385		    clc
seg000:2386		    jnz	    short loc_2392
seg000:2388		    inc	    si
seg000:2389		    mov	    es,	di
seg000:238B		    call    convert_hex
seg000:238E		    jb	    short loc_2395
seg000:2390		    mov	    di,	ax
seg000:2392
seg000:2392 loc_2392:				    ; CODE XREF: sub_2377+4j
seg000:2392					    ; sub_2377+Fj
seg000:2392		    call    sub_23EA
seg000:2395
seg000:2395 loc_2395:				    ; CODE XREF: sub_2377+17j
seg000:2395		    pop	    ax
seg000:2396		    retn
seg000:2396 sub_2377	    endp
seg000:2396
seg000:2397
seg000:2397 ; =============== S	U B R O	U T I N	E =======================================
seg000:2397
seg000:2397
seg000:2397 convert_hex	    proc near		    ; CODE XREF: sub_22FE:loc_2325p
seg000:2397					    ; sub_233C+20p ...
seg000:2397		    push    bx
seg000:2398		    push    dx
seg000:2399		    call    sub_2403
seg000:239C		    jb	    short loc_23E7
seg000:239E		    call    sub_6881
seg000:23A1		    jb	    short loc_23AA
seg000:23A3		    mov	    dx,	cs:[bx+8Ch]
seg000:23A8		    jmp	    short loc_23E1
seg000:23AA ; ---------------------------------------------------------------------------
seg000:23AA
seg000:23AA loc_23AA:				    ; CODE XREF: convert_hex+Aj
seg000:23AA		    mov	    dx,	0
seg000:23AD		    call    sub_241F
seg000:23B0
seg000:23B0 loc_23B0:				    ; CODE XREF: convert_hex+48j
seg000:23B0		    call    convert_ASCII
seg000:23B3		    call    sub_247B
seg000:23B6		    jb	    short loc_23E7
seg000:23B8		    shl	    dx,	1
seg000:23BA		    shl	    dx,	1
seg000:23BC		    shl	    dx,	1
seg000:23BE		    shl	    dx,	1
seg000:23C0		    or	    dl,	al
seg000:23C2		    mov	    al,	cs:[si+21Ah]
seg000:23C7		    call    convert_ASCII
seg000:23CA		    cmp	    al,	20h ; ' '
seg000:23CC		    jz	    short loc_23E1
seg000:23CE		    cmp	    al,	2Ch ; ','
seg000:23D0		    jz	    short loc_23E1
seg000:23D2		    cmp	    al,	3Ah ; ':'
seg000:23D4		    jz	    short loc_23E1
seg000:23D6		    cmp	    al,	4Ch ; 'L'
seg000:23D8		    jz	    short loc_23E1
seg000:23DA		    cmp	    al,	0Dh
seg000:23DC		    jz	    short loc_23E1
seg000:23DE		    inc	    si
seg000:23DF		    jmp	    short loc_23B0
seg000:23E1 ; ---------------------------------------------------------------------------
seg000:23E1
seg000:23E1 loc_23E1:				    ; CODE XREF: convert_hex+11j
seg000:23E1					    ; convert_hex+35j ...
seg000:23E1		    mov	    ax,	dx
seg000:23E3		    clc
seg000:23E4		    call    sub_23EA
seg000:23E7
seg000:23E7 loc_23E7:				    ; CODE XREF: convert_hex+5j
seg000:23E7					    ; convert_hex+1Fj
seg000:23E7		    pop	    dx
seg000:23E8		    pop	    bx
seg000:23E9		    retn
seg000:23E9 convert_hex	    endp
seg000:23E9
seg000:23EA
seg000:23EA ; =============== S	U B R O	U T I N	E =======================================
seg000:23EA
seg000:23EA
seg000:23EA sub_23EA	    proc near		    ; CODE XREF: sub_22FE:loc_232Ep
seg000:23EA					    ; sub_233C+36p ...
seg000:23EA		    pushf
seg000:23EB		    push    ax
seg000:23EC		    call    count_to_space
seg000:23EF		    mov	    al,	cs:[si+21Ah]
seg000:23F4		    cmp	    al,	2Ch ; ','
seg000:23F6		    jz	    short loc_23FC
seg000:23F8		    cmp	    al,	2Dh ; '-'
seg000:23FA		    jnz	    short loc_23FD
seg000:23FC
seg000:23FC loc_23FC:				    ; CODE XREF: sub_23EA+Cj
seg000:23FC		    inc	    si
seg000:23FD
seg000:23FD loc_23FD:				    ; CODE XREF: sub_23EA+10j
seg000:23FD		    call    count_to_space
seg000:2400		    pop	    ax
seg000:2401		    popf
seg000:2402		    retn
seg000:2402 sub_23EA	    endp
seg000:2402
seg000:2403
seg000:2403 ; =============== S	U B R O	U T I N	E =======================================
seg000:2403
seg000:2403
seg000:2403 sub_2403	    proc near		    ; CODE XREF: sub_22FE+4p
seg000:2403					    ; convert_hex+2p ...
seg000:2403		    push    ax
seg000:2404		    call    count_to_space
seg000:2407		    mov	    al,	cs:[si+21Ah]
seg000:240C		    sub	    al,	0Dh
seg000:240E		    add	    al,	0FFh
seg000:2410		    cmc
seg000:2411		    pop	    ax
seg000:2412		    retn
seg000:2412 sub_2403	    endp
seg000:2412
seg000:2413
seg000:2413 ; =============== S	U B R O	U T I N	E =======================================
seg000:2413
seg000:2413
seg000:2413 count_to_space  proc near		    ; CODE XREF: sub_23EA+2p
seg000:2413					    ; sub_23EA:loc_23FDp ...
seg000:2413		    cmp	    byte ptr cs:[si+21Ah], 20h ; ' '
seg000:2419		    jnz	    short locret_241E
seg000:241B		    inc	    si
seg000:241C		    jmp	    short count_to_space
seg000:241E ; ---------------------------------------------------------------------------
seg000:241E
seg000:241E locret_241E:			    ; CODE XREF: count_to_space+6j
seg000:241E		    retn
seg000:241E count_to_space  endp
seg000:241E
seg000:241F
seg000:241F ; =============== S	U B R O	U T I N	E =======================================
seg000:241F
seg000:241F
seg000:241F sub_241F	    proc near		    ; CODE XREF: convert_hex+16p
seg000:241F					    ; cmd_boot+2p ...
seg000:241F		    call    count_to_space
seg000:2422		    mov	    al,	cs:[si+21Ah]
seg000:2427		    inc	    si
seg000:2428		    retn
seg000:2428 sub_241F	    endp
seg000:2428
seg000:2429
seg000:2429 ; =============== S	U B R O	U T I N	E =======================================
seg000:2429
seg000:2429
seg000:2429 sub_2429	    proc near		    ; CODE XREF: ColrWarm_Boot+532Ep
seg000:2429					    ; cmd_display_regs+1Cp
seg000:2429		    push    ax
seg000:242A		    push    cx
seg000:242B		    push    dx
seg000:242C		    push    di
seg000:242D		    call    tab_size_?
seg000:2430		    mov	    byte ptr cs:loc_26B, dl
seg000:2435		    mov	    di,	0
seg000:2438
seg000:2438 loc_2438:				    ; CODE XREF: sub_2429+1Ej
seg000:2438					    ; sub_2429+24j ...
seg000:2438		    call    keyb_menu
seg000:243B		    cmp	    al,	8
seg000:243D		    jnz	    short loc_244F
seg000:243F		    call    tab_size_?
seg000:2442		    cmp	    dl,	byte ptr cs:loc_26B
seg000:2447		    jbe	    short loc_2438
seg000:2449		    call    sub_224A
seg000:244C		    dec	    di
seg000:244D		    jmp	    short loc_2438
seg000:244F ; ---------------------------------------------------------------------------
seg000:244F
seg000:244F loc_244F:				    ; CODE XREF: sub_2429+14j
seg000:244F		    cmp	    al,	0Dh
seg000:2451		    jnz	    short loc_245D
seg000:2453		    mov	    cs:[di+21Ah], al
seg000:2458		    call    sub_2253
seg000:245B		    jmp	    short loc_2476
seg000:245D ; ---------------------------------------------------------------------------
seg000:245D
seg000:245D loc_245D:				    ; CODE XREF: sub_2429+28j
seg000:245D		    cmp	    al,	20h ; ' '
seg000:245F		    jnb	    short loc_2466
seg000:2461
seg000:2461 loc_2461:				    ; CODE XREF: sub_2429+40j
seg000:2461		    call    Beep_long
seg000:2464		    jmp	    short loc_2438
seg000:2466 ; ---------------------------------------------------------------------------
seg000:2466
seg000:2466 loc_2466:				    ; CODE XREF: sub_2429+36j
seg000:2466		    cmp	    di,	50h ; 'P'
seg000:2469		    jnb	    short loc_2461
seg000:246B		    mov	    cs:[di+21Ah], al
seg000:2470		    inc	    di
seg000:2471		    call    printChar_VGABIOS
seg000:2474		    jmp	    short loc_2438
seg000:2476 ; ---------------------------------------------------------------------------
seg000:2476
seg000:2476 loc_2476:				    ; CODE XREF: sub_2429+32j
seg000:2476		    pop	    di
seg000:2477		    pop	    dx
seg000:2478		    pop	    cx
seg000:2479		    pop	    ax
seg000:247A		    retn
seg000:247A sub_2429	    endp
seg000:247A
seg000:247B
seg000:247B ; =============== S	U B R O	U T I N	E =======================================
seg000:247B
seg000:247B
seg000:247B sub_247B	    proc near		    ; CODE XREF: convert_hex+1Cp
seg000:247B					    ; cmd_examine_mem+8Ap
seg000:247B		    push    bx
seg000:247C		    mov	    bl,	al
seg000:247E		    sub	    al,	30h ; '0'
seg000:2480		    jb	    short loc_2492
seg000:2482		    cmp	    al,	0Ah
seg000:2484		    cmc
seg000:2485		    jnb	    short loc_2494
seg000:2487		    cmp	    al,	11h
seg000:2489		    jb	    short loc_2492
seg000:248B		    sub	    al,	7
seg000:248D		    cmp	    al,	10h
seg000:248F		    cmc
seg000:2490		    jnb	    short loc_2494
seg000:2492
seg000:2492 loc_2492:				    ; CODE XREF: sub_247B+5j
seg000:2492					    ; sub_247B+Ej
seg000:2492		    mov	    al,	bl
seg000:2494
seg000:2494 loc_2494:				    ; CODE XREF: sub_247B+Aj
seg000:2494					    ; sub_247B+15j
seg000:2494		    pop	    bx
seg000:2495		    retn
seg000:2495 sub_247B	    endp
seg000:2495
seg000:2496
seg000:2496 ; =============== S	U B R O	U T I N	E =======================================
seg000:2496
seg000:2496
seg000:2496 tab_size_?	    proc near		    ; CODE XREF: sub_22B5+3p
seg000:2496					    ; printChar_VGABIOS+Cp ...
seg000:2496		    push    ax
seg000:2497		    push    bx
seg000:2498		    push    si
seg000:2499		    push    ds
seg000:249A		    mov	    bh,	byte ptr ds:loc_61+1
seg000:249E		    call    read_50h_bl_toDX
seg000:24A1		    pop	    ds
seg000:24A2		    pop	    si
seg000:24A3		    pop	    bx
seg000:24A4		    pop	    ax
seg000:24A5		    retn
seg000:24A5 tab_size_?	    endp
seg000:24A5
seg000:24A6
seg000:24A6 ; =============== S	U B R O	U T I N	E =======================================
seg000:24A6
seg000:24A6
seg000:24A6 duble_fault_0   proc far		    ; CODE XREF: duble_faultj
seg000:24A6		    push    ds
seg000:24A7		    push    ax
seg000:24A8		    push    dx
seg000:24A9		    sti
seg000:24AA		    mov	    ds,	word ptr cs:loc_C5+1
seg000:24AF		    inc	    word ptr ds:loc_6C
seg000:24B3		    jnz	    short loc_24B9
seg000:24B5		    inc	    word ptr ds:loc_6E
seg000:24B9
seg000:24B9 loc_24B9:				    ; CODE XREF: duble_fault_0+Dj
seg000:24B9		    cmp	    word ptr ds:loc_6E,	18h
seg000:24BE		    jnz	    short loc_24D8
seg000:24C0		    cmp	    word ptr ds:loc_6C,	0B0h ; '°'
seg000:24C6		    jnz	    short loc_24D8
seg000:24C8		    inc	    byte ptr ds:loc_70
seg000:24CC		    mov	    word ptr ds:loc_6E,	0
seg000:24D2		    mov	    word ptr ds:loc_6C,	0
seg000:24D8
seg000:24D8 loc_24D8:				    ; CODE XREF: duble_fault_0+18j
seg000:24D8					    ; duble_fault_0+20j
seg000:24D8		    mov	    ah,	0
seg000:24DA		    dec	    byte ptr ds:loc_3E+2
seg000:24DE		    jnz	    short loc_2523
seg000:24E0		    mov	    ah,	0Ch
seg000:24E2		    and	    byte ptr ds:loc_3E+1, 0FCh
seg000:24E7		    mov	    dx,	3F2h
seg000:24EA		    mov	    al,	0Ch
seg000:24EC		    out	    dx,	al	    ; Floppy: digital output reg bits:
seg000:24EC					    ; 0-1: Drive to select 0-3 (AT: bit	1 not used)
seg000:24EC					    ; 2:   0=reset diskette controller;	1=enable controller
seg000:24EC					    ; 3:   1=enable diskette DMA and interrupts
seg000:24EC					    ; 4-7: drive motor enable.	Set bits to turn drive ON.
seg000:24EC					    ;
seg000:24ED		    cmp	    byte ptr cs:word_4C5, 2
seg000:24F3		    jnz	    short loc_2523
seg000:24F5		    push    ax
seg000:24F6		    smsw    ax
seg000:24F9		    test    ax,	1
seg000:24FC		    pop	    ax
seg000:24FD		    jnz	    short loc_2523
seg000:24FF		    out	    0FBh, al	    ; AT 80287 data.
seg000:24FF					    ; 286 sends	opcodes	& operands and receives	results.
seg000:2501		    pushf
seg000:2502		    inc	    byte ptr ds:loc_BB+4
seg000:2506		    popf
seg000:2507		    out	    0F5h, al
seg000:2509		    mov	    byte ptr cs:word_4C5, 1
seg000:250F		    mov	    cs:RTC_test_timer, 600h
seg000:2516		    call    port_9F4_Out_0
seg000:2519		    pushf
seg000:251A		    dec	    byte ptr ds:loc_BB+4
seg000:251E		    jnz	    short loc_2522
seg000:2520		    out	    0F9h, al	    ; AT 80287 data.
seg000:2520					    ; 286 sends	opcodes	& operands and receives	results.
seg000:2522
seg000:2522 loc_2522:				    ; CODE XREF: duble_fault_0+78j
seg000:2522		    popf
seg000:2523
seg000:2523 loc_2523:				    ; CODE XREF: duble_fault_0+38j
seg000:2523					    ; duble_fault_0+4Dj ...
seg000:2523		    mov	    al,	ah
seg000:2525		    mov	    ah,	0
seg000:2527		    int	    1Ch		    ; CLOCK TICK
seg000:2529		    mov	    al,	20h ; ' '
seg000:252B		    cli
seg000:252C		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:252E		    pop	    dx
seg000:252F		    pop	    ax
seg000:2530		    pop	    ds
seg000:2531		    iret
seg000:2531 duble_fault_0   endp
seg000:2531
seg000:2532
seg000:2532 ; =============== S	U B R O	U T I N	E =======================================
seg000:2532
seg000:2532
seg000:2532 ram_cmos_same_size?	proc near	    ; CODE XREF: ColrWarm_Boot+3DFp
seg000:2532		    push    ax
seg000:2533		    push    bx
seg000:2534		    push    dx
seg000:2535		    push    si
seg000:2536		    call    ram_size?
seg000:2539		    mov	    word ptr ds:loc_11+2, ax
seg000:253C		    mov	    bx,	ax
seg000:253E		    mov	    al,	95h ; ''
seg000:2540		    call    read_cmos_word
seg000:2543		    cmp	    ax,	bx
seg000:2545		    jz	    short ram_sizeOK
seg000:2547		    mov	    si,	offset aBaseMemorySize ; "Base memory size error!  SETUP: "
seg000:254A		    call    print_AX?
seg000:254D
seg000:254D ram_sizeOK:				    ; CODE XREF: ram_cmos_same_size?+13j
seg000:254D		    sub	    bx,	40h ; '@'
seg000:2550		    mov	    word ptr ds:loc_14+1, bx
seg000:2554		    cmp	    bx,	1C0h
seg000:2558		    jbe	    short loc_2568
seg000:255A		    mov	    al,	0B3h ; '³'
seg000:255C		    call    read_cmos
seg000:255F		    or	    al,	80h
seg000:2561		    mov	    ah,	al
seg000:2563		    mov	    al,	0B3h ; '³'
seg000:2565		    call    write_cmos
seg000:2568
seg000:2568 loc_2568:				    ; CODE XREF: ram_cmos_same_size?+26j
seg000:2568		    mov	    al,	0B0h ; '°'
seg000:256A		    call    read_cmos_word
seg000:256D		    mov	    cs:stru_40E.check, ax
seg000:2571		    mov	    bx,	ax
seg000:2573		    mov	    al,	97h ; ''
seg000:2575		    call    read_cmos_word
seg000:2578		    cmp	    ax,	bx
seg000:257A		    jz	    short ext_ram_sizeOK
seg000:257C		    mov	    si,	offset aExtendedMemory ; "Extended memory size error!  SETUP: "
seg000:257F		    call    print_AX?
seg000:2582
seg000:2582 ext_ram_sizeOK:			    ; CODE XREF: ram_cmos_same_size?+48j
seg000:2582		    pop	    si
seg000:2583		    pop	    dx
seg000:2584		    pop	    bx
seg000:2585		    pop	    ax
seg000:2586		    retn
seg000:2586 ram_cmos_same_size?	endp
seg000:2586
seg000:2587
seg000:2587 ; =============== S	U B R O	U T I N	E =======================================
seg000:2587
seg000:2587
seg000:2587 load_DSAX_compa proc far		    ; CODE XREF: load_DSAX_compa_0j
seg000:2587		    push    ds
seg000:2588		    mov	    ds,	word ptr cs:loc_C5+1
seg000:258D		    mov	    ax,	word ptr ds:loc_11+2
seg000:2590		    cmp	    byte ptr cs:loc_C5,	0FFh
seg000:2596		    jnz	    short loc_259B
seg000:2598		    sub	    ax,	1
seg000:259B
seg000:259B loc_259B:				    ; CODE XREF: load_DSAX_compa+Fj
seg000:259B		    pop	    ds
seg000:259C		    iret
seg000:259C load_DSAX_compa endp
seg000:259C
seg000:259D
seg000:259D ; =============== S	U B R O	U T I N	E =======================================
seg000:259D
seg000:259D
seg000:259D ram_size?	    proc near		    ; CODE XREF: ColrWarm_Boot+2D4p
seg000:259D					    ; ram_cmos_same_size?+4p
seg000:259D		    push    bx
seg000:259E		    push    cx
seg000:259F		    push    dx
seg000:25A0		    push    si
seg000:25A1		    push    es
seg000:25A2		    cli
seg000:25A3		    mov	    bx,	0
seg000:25A6		    mov	    cx,	bx
seg000:25A8
seg000:25A8 loc_25A8:				    ; CODE XREF: ram_size?+5Cj
seg000:25A8		    mov	    es,	bx
seg000:25AA		    mov	    ax,	word ptr es:sub_0
seg000:25AE		    mov	    si,	ax
seg000:25B0		    not	    ax
seg000:25B2		    mov	    word ptr es:sub_0, ax
seg000:25B6		    mov	    dx,	ax
seg000:25B8		    xor	    dx,	55AAh
seg000:25BC		    push    dx
seg000:25BD		    pop	    dx
seg000:25BE		    xchg    si,	word ptr es:sub_0
seg000:25C3		    xor	    ax,	si
seg000:25C5		    jnz	    short loc_25DA
seg000:25C7		    mov	    ax,	si
seg000:25C9		    not	    ax
seg000:25CB		    mov	    dx,	ax
seg000:25CD		    xor	    dx,	0AA55h
seg000:25D1		    push    dx
seg000:25D2		    pop	    dx
seg000:25D3		    xor	    ax,	word ptr es:sub_0
seg000:25D8		    jz	    short loc_25EE
seg000:25DA
seg000:25DA loc_25DA:				    ; CODE XREF: ram_size?+28j
seg000:25DA		    push    cx
seg000:25DB		    mov	    cx,	10h
seg000:25DE		    mov	    si,	0
seg000:25E1
seg000:25E1 loc_25E1:				    ; CODE XREF: ram_size?+49j
seg000:25E1		    shl	    ax,	1
seg000:25E3		    adc	    si,	0
seg000:25E6		    loop    loc_25E1
seg000:25E8		    cmp	    si,	1
seg000:25EB		    pop	    cx
seg000:25EC		    ja	    short loc_25FB
seg000:25EE
seg000:25EE loc_25EE:				    ; CODE XREF: ram_size?+3Bj
seg000:25EE		    add	    bx,	1000h
seg000:25F2		    add	    cx,	40h ; '@'
seg000:25F5		    cmp	    cx,	280h
seg000:25F9		    jb	    short loc_25A8
seg000:25FB
seg000:25FB loc_25FB:				    ; CODE XREF: ram_size?+4Fj
seg000:25FB		    mov	    ax,	cx
seg000:25FD		    cmp	    ax,	80h ; ''
seg000:2600		    jnb	    short loc_2605
seg000:2602		    mov	    ax,	80h ; ''
seg000:2605
seg000:2605 loc_2605:				    ; CODE XREF: ram_size?+63j
seg000:2605		    push    ax
seg000:2606		    out	    0F7h, al
seg000:2608		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:2608					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:2608					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:2608					    ; 3: 1=read	high switches
seg000:2608					    ; 4: 0=enable RAM parity checking
seg000:2608					    ; 5: 0=enable I/O channel check
seg000:2608					    ; 6: 0=hold	keyboard clock low
seg000:2608					    ; 7: 0=enable kbrd
seg000:260A		    or	    al,	0Ch
seg000:260C		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:260C					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:260C					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:260C					    ; 3: 1=read	high switches
seg000:260C					    ; 4: 0=enable RAM parity checking
seg000:260C					    ; 5: 0=enable I/O channel check
seg000:260C					    ; 6: 0=hold	keyboard clock low
seg000:260C					    ; 7: 0=enable kbrd
seg000:260E		    and	    al,	0F3h
seg000:2610		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:2610					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:2610					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:2610					    ; 3: 1=read	high switches
seg000:2610					    ; 4: 0=enable RAM parity checking
seg000:2610					    ; 5: 0=enable I/O channel check
seg000:2610					    ; 6: 0=hold	keyboard clock low
seg000:2610					    ; 7: 0=enable kbrd
seg000:2612		    pop	    ax
seg000:2613		    pop	    es
seg000:2614		    pop	    si
seg000:2615		    pop	    dx
seg000:2616		    pop	    cx
seg000:2617		    pop	    bx
seg000:2618		    retn
seg000:2618 ram_size?	    endp
seg000:2618
seg000:2619
seg000:2619 ; =============== S	U B R O	U T I N	E =======================================
seg000:2619
seg000:2619
seg000:2619 port_BF4_Out    proc near		    ; CODE XREF: ColrWarm_Boot+4DCp
seg000:2619		    push    ax
seg000:261A		    push    bx
seg000:261B		    push    dx
seg000:261C		    sub	    al,	al
seg000:261E		    mov	    dx,	0BF4h
seg000:2621		    out	    dx,	al
seg000:2622		    mov	    byte ptr cs:loc_505+2, al
seg000:2626		    mov	    al,	byte ptr cs:loc_CA+4
seg000:262A		    test    al,	4
seg000:262C		    jz	    short loc_2694
seg000:262E		    test    al,	8
seg000:2630		    jnz	    short loc_2694
seg000:2632		    mov	    al,	21h ; '!'
seg000:2634		    call    read_cmos
seg000:2637		    and	    ax,	30h
seg000:263A		    shr	    ax,	4
seg000:263D		    mov	    bx,	ax
seg000:263F		    mov	    al,	cs:byte_297F[bx]
seg000:2644		    mov	    byte ptr cs:loc_505+2, al
seg000:2648		    mov	    al,	30h ; '0'
seg000:264A		    call    read_cmos_word
seg000:264D		    mov	    dx,	ax
seg000:264F		    mov	    al,	1Fh
seg000:2651		    call    read_cmos
seg000:2654		    and	    al,	7
seg000:2656		    or	    al,	8
seg000:2658		    cmp	    dx,	0
seg000:265B		    jz	    short loc_2690
seg000:265D		    cmp	    dx,	0C00h
seg000:2661		    jnb	    short loc_2668
seg000:2663		    cmp	    bx,	3
seg000:2666		    jnz	    short loc_2690
seg000:2668
seg000:2668 loc_2668:				    ; CODE XREF: port_BF4_Out+48j
seg000:2668		    or	    al,	10h
seg000:266A		    cmp	    dx,	0C00h
seg000:266E		    jbe	    short loc_2690
seg000:2670		    cmp	    dx,	1C00h
seg000:2674		    jnb	    short loc_267B
seg000:2676		    cmp	    bx,	3
seg000:2679		    jnz	    short loc_2690
seg000:267B
seg000:267B loc_267B:				    ; CODE XREF: port_BF4_Out+5Bj
seg000:267B		    or	    al,	20h
seg000:267D		    cmp	    dx,	1C00h
seg000:2681		    jbe	    short loc_2690
seg000:2683		    cmp	    dx,	3C00h
seg000:2687		    jnb	    short loc_268E
seg000:2689		    cmp	    bx,	3
seg000:268C		    jb	    short loc_2690
seg000:268E
seg000:268E loc_268E:				    ; CODE XREF: port_BF4_Out+6Ej
seg000:268E		    or	    al,	40h
seg000:2690
seg000:2690 loc_2690:				    ; CODE XREF: port_BF4_Out+42j
seg000:2690					    ; port_BF4_Out+4Dj	...
seg000:2690		    mov	    dx,	0BF4h
seg000:2693		    out	    dx,	al
seg000:2694
seg000:2694 loc_2694:				    ; CODE XREF: port_BF4_Out+13j
seg000:2694					    ; port_BF4_Out+17j
seg000:2694		    pop	    dx
seg000:2695		    pop	    bx
seg000:2696		    pop	    ax
seg000:2697		    retn
seg000:2697 port_BF4_Out    endp
seg000:2697
seg000:2698
seg000:2698 ; =============== S	U B R O	U T I N	E =======================================
seg000:2698
seg000:2698
seg000:2698 port_9F4_Out_0  proc near		    ; CODE XREF: port_9F4F4F5_Out+3Ep
seg000:2698					    ; port_9F4F4F5_Out+55p ...
seg000:2698		    push    ax
seg000:2699		    push    dx
seg000:269A		    mov	    al,	byte ptr cs:loc_505+2
seg000:269E		    mov	    dx,	9F4h
seg000:26A1		    out	    dx,	al
seg000:26A2		    pop	    dx
seg000:26A3		    pop	    ax
seg000:26A4		    retn
seg000:26A4 port_9F4_Out_0  endp
seg000:26A4
seg000:26A5
seg000:26A5 ; =============== S	U B R O	U T I N	E =======================================
seg000:26A5
seg000:26A5
seg000:26A5 out_9F4_sync    proc near		    ; CODE XREF: port_9F4F4F5_Out+27p
seg000:26A5					    ; port_9F4_Out:loc_1B19p ...
seg000:26A5		    push    ax
seg000:26A6		    push    dx
seg000:26A7		    mov	    dx,	9F4h
seg000:26AA		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:26AA					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:26AA					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:26AA					    ; 3: 1=read	high switches
seg000:26AA					    ; 4: 0=enable RAM parity checking
seg000:26AA					    ; 5: 0=enable I/O channel check
seg000:26AA					    ; 6: 0=hold	keyboard clock low
seg000:26AA					    ; 7: 0=enable kbrd
seg000:26AC		    mov	    al,	8
seg000:26AE		    out	    dx,	al
seg000:26AF		    pop	    dx
seg000:26B0		    pop	    ax
seg000:26B1		    retn
seg000:26B1 out_9F4_sync    endp
seg000:26B1
seg000:26B2
seg000:26B2 ; =============== S	U B R O	U T I N	E =======================================
seg000:26B2
seg000:26B2 ; Attributes: noreturn
seg000:26B2
seg000:26B2 sgdt_hlt?	    proc near		    ; CODE XREF: ColrWarm_Boot+267p
seg000:26B2					    ; ColrWarm_Boot+2C6p
seg000:26B2		    push    bx
seg000:26B3		    push    cx
seg000:26B4		    push    dx
seg000:26B5		    push    ds
seg000:26B6		    push    es
seg000:26B7		    push    si
seg000:26B8		    push    di
seg000:26B9		    push    bp
seg000:26BA		    mov	    bp,	word ptr ds:loc_70+2
seg000:26BE		    call    diag_out?
seg000:26C1		    mov	    ax,	8
seg000:26C4		    mov	    es,	ax
seg000:26C6		    assume es:nothing
seg000:26C6		    mov	    si,	18h
seg000:26C9		    mov	    word ptr es:[si], 0FFFFh
seg000:26CE		    mov	    word ptr es:[si+2],	0
seg000:26D4		    mov	    byte ptr es:[si+4],	10h
seg000:26D9		    xor	    cx,	cx
seg000:26DB		    mov	    ax,	8
seg000:26DE		    mov	    es,	ax
seg000:26E0		    mov	    si,	18h
seg000:26E3		    mov	    byte ptr es:[si+4],	10h
seg000:26E8
seg000:26E8 loc_26E8:				    ; CODE XREF: sgdt_hlt?+62j
seg000:26E8		    mov	    ax,	18h
seg000:26EB		    mov	    ds,	ax
seg000:26ED		    assume ds:nothing
seg000:26ED		    call    sub_275E
seg000:26F0		    jb	    short loc_2716
seg000:26F2		    push    cx
seg000:26F3		    mov	    cx,	8000h
seg000:26F6		    mov	    ax,	18h
seg000:26F9		    mov	    es,	ax
seg000:26FB		    assume es:nothing
seg000:26FB		    xor	    di,	di
seg000:26FD		    mov	    ax,	di
seg000:26FF		    rep	stosw
seg000:2701		    pop	    cx
seg000:2702		    add	    cx,	40h ; '@'
seg000:2705		    mov	    ax,	8
seg000:2708		    mov	    es,	ax
seg000:270A		    assume es:nothing
seg000:270A		    mov	    al,	es:[si+4]
seg000:270E		    inc	    al
seg000:2710		    mov	    es:[si+4], al
seg000:2714		    jnz	    short loc_26E8
seg000:2716
seg000:2716 loc_2716:				    ; CODE XREF: sgdt_hlt?+3Ej
seg000:2716		    push    ax
seg000:2717		    push    cx
seg000:2718		    push    si
seg000:2719		    push    di
seg000:271A		    push    ds
seg000:271B		    push    es
seg000:271C		    mov	    ax,	8
seg000:271F		    mov	    ds,	ax
seg000:2721		    assume ds:nothing
seg000:2721		    mov	    si,	18h
seg000:2724		    mov	    byte ptr [si+4], 55h ; 'U'
seg000:2728		    mov	    es,	si
seg000:272A		    assume es:nothing
seg000:272A		    sub	    ax,	ax
seg000:272C		    sub	    di,	di
seg000:272E		    mov	    cx,	8000h
seg000:2731		    rep	stosw
seg000:2733		    mov	    byte ptr [si+4], 0AAh ; 'ª'
seg000:2737		    mov	    es,	si
seg000:2739		    mov	    cx,	8000h
seg000:273C		    rep	stosw
seg000:273E		    pop	    es
seg000:273F		    assume es:nothing
seg000:273F		    pop	    ds
seg000:2740		    assume ds:nothing
seg000:2740		    pop	    di
seg000:2741		    pop	    si
seg000:2742		    pop	    cx
seg000:2743		    pop	    ax
seg000:2744		    out	    0F7h, al
seg000:2746		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:2746					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:2746					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:2746					    ; 3: 1=read	high switches
seg000:2746					    ; 4: 0=enable RAM parity checking
seg000:2746					    ; 5: 0=enable I/O channel check
seg000:2746					    ; 6: 0=hold	keyboard clock low
seg000:2746					    ; 7: 0=enable kbrd
seg000:2748		    or	    al,	0Ch
seg000:274A		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:274A					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:274A					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:274A					    ; 3: 1=read	high switches
seg000:274A					    ; 4: 0=enable RAM parity checking
seg000:274A					    ; 5: 0=enable I/O channel check
seg000:274A					    ; 6: 0=hold	keyboard clock low
seg000:274A					    ; 7: 0=enable kbrd
seg000:274C		    and	    al,	0F3h
seg000:274E		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:274E					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:274E					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:274E					    ; 3: 1=read	high switches
seg000:274E					    ; 4: 0=enable RAM parity checking
seg000:274E					    ; 5: 0=enable I/O channel check
seg000:274E					    ; 6: 0=hold	keyboard clock low
seg000:274E					    ; 7: 0=enable kbrd
seg000:2750		    mov	    ax,	cx
seg000:2752		    call    sgdt_hlt
seg000:2755 ; ---------------------------------------------------------------------------
seg000:2755		    pop	    bp
seg000:2756		    pop	    di
seg000:2757		    pop	    si
seg000:2758		    pop	    es
seg000:2759		    pop	    ds
seg000:275A		    pop	    dx
seg000:275B		    pop	    cx
seg000:275C		    pop	    bx
seg000:275D		    retn
seg000:275D sgdt_hlt?	    endp
seg000:275D
seg000:275E
seg000:275E ; =============== S	U B R O	U T I N	E =======================================
seg000:275E
seg000:275E
seg000:275E sub_275E	    proc near		    ; CODE XREF: sgdt_hlt?+3Bp
seg000:275E		    push    si
seg000:275F		    mov	    ax,	word ptr ds:sub_0
seg000:2762		    mov	    si,	ax
seg000:2764		    xor	    ax,	4D2h
seg000:2767		    mov	    word ptr ds:sub_0, ax
seg000:276A		    mov	    dx,	ax
seg000:276C		    xor	    dx,	55AAh
seg000:2770		    push    dx
seg000:2771		    push    dx
seg000:2772		    pop	    dx
seg000:2773		    pop	    dx
seg000:2774		    xchg    si,	word ptr ds:sub_0
seg000:2778		    xor	    ax,	si
seg000:277A		    jnz	    short loc_2791
seg000:277C		    mov	    ax,	si
seg000:277E		    xor	    ax,	4D2h
seg000:2781		    mov	    dx,	ax
seg000:2783		    xor	    dx,	0AA55h
seg000:2787		    push    dx
seg000:2788		    push    dx
seg000:2789		    pop	    dx
seg000:278A		    pop	    dx
seg000:278B		    xor	    ax,	word ptr ds:sub_0
seg000:278F		    jz	    short loc_27A8
seg000:2791
seg000:2791 loc_2791:				    ; CODE XREF: sub_275E+1Cj
seg000:2791		    push    cx
seg000:2792		    mov	    cx,	10h
seg000:2795		    mov	    si,	0
seg000:2798
seg000:2798 loc_2798:				    ; CODE XREF: sub_275E+3Fj
seg000:2798		    shl	    ax,	1
seg000:279A		    adc	    si,	0
seg000:279D		    loop    loc_2798
seg000:279F		    cmp	    si,	1
seg000:27A2		    pop	    cx
seg000:27A3		    pop	    si
seg000:27A4		    jbe	    short loc_27A9
seg000:27A6		    stc
seg000:27A7		    retn
seg000:27A8 ; ---------------------------------------------------------------------------
seg000:27A8
seg000:27A8 loc_27A8:				    ; CODE XREF: sub_275E+31j
seg000:27A8		    pop	    si
seg000:27A9
seg000:27A9 loc_27A9:				    ; CODE XREF: sub_275E+46j
seg000:27A9		    clc
seg000:27AA		    retn
seg000:27AA sub_275E	    endp
seg000:27AA
seg000:27AB
seg000:27AB ; =============== S	U B R O	U T I N	E =======================================
seg000:27AB
seg000:27AB
seg000:27AB init_lpt_ser    proc near		    ; CODE XREF: ColrWarm_Boot+45Ep
seg000:27AB		    push    ax
seg000:27AC		    push    bx
seg000:27AD		    push    cx
seg000:27AE		    push    dx
seg000:27AF		    push    di
seg000:27B0		    mov	    al,	0Eh
seg000:27B2		    call    read_cmos
seg000:27B5		    test    al,	0E0h
seg000:27B7		    mov	    al,	19h
seg000:27B9		    jnz	    short loc_27C0
seg000:27BB		    mov	    al,	1Eh
seg000:27BD		    call    read_cmos
seg000:27C0
seg000:27C0 loc_27C0:				    ; CODE XREF: init_lpt_ser+Ej
seg000:27C0		    out	    0E6h, al
seg000:27C2		    call    sub_7B44
seg000:27C5		    mov	    ah,	0
seg000:27C7		    mov	    bx,	0
seg000:27CA		    mov	    di,	bx
seg000:27CC		    mov	    cx,	3
seg000:27CF
seg000:27CF init_lpt_loop:			    ; CODE XREF: init_lpt_ser+40j
seg000:27CF		    mov	    dx,	cs:setup_lpt_table[bx]
seg000:27D4		    mov	    al,	0AAh ; 'ª'
seg000:27D6		    out	    dx,	al
seg000:27D7		    push    bx
seg000:27D8		    in	    al,	dx
seg000:27D9		    pop	    bx
seg000:27DA		    cmp	    al,	0AAh ; 'ª'
seg000:27DC		    jnz	    short loc_27E7
seg000:27DE		    mov	    [di+8], dx
seg000:27E2		    add	    di,	2
seg000:27E5		    inc	    ah
seg000:27E7
seg000:27E7 loc_27E7:				    ; CODE XREF: init_lpt_ser+31j
seg000:27E7		    add	    bx,	2
seg000:27EA		    nop
seg000:27EB		    loop    init_lpt_loop
seg000:27ED		    push    ax
seg000:27EE		    mov	    cl,	ah
seg000:27F0		    xor	    ch,	ch
seg000:27F2		    jcxz    short loc_27FD
seg000:27F4		    xor	    dx,	dx
seg000:27F6
seg000:27F6 init_lpt_loop1:			    ; CODE XREF: init_lpt_ser+50j
seg000:27F6		    mov	    ah,	1
seg000:27F8		    int	    17h		    ; PRINTER -	INITIALIZE
seg000:27F8					    ; DX = printer port	(0-3)
seg000:27F8					    ; Return: AH = status
seg000:27FA		    inc	    dx
seg000:27FB		    loop    init_lpt_loop1
seg000:27FD
seg000:27FD loc_27FD:				    ; CODE XREF: init_lpt_ser+47j
seg000:27FD		    pop	    ax
seg000:27FE		    xor	    al,	al
seg000:2800		    mov	    cl,	6
seg000:2802		    shl	    ax,	cl
seg000:2804		    push    ax
seg000:2805		    mov	    bx,	0
seg000:2808		    mov	    di,	bx
seg000:280A		    mov	    cx,	2
seg000:280D		    mov	    ah,	0
seg000:280F
seg000:280F init_serial_loop:			    ; CODE XREF: init_lpt_ser+81j
seg000:280F		    mov	    dx,	cs:setup_ser_table[bx]
seg000:2814		    add	    dx,	2
seg000:2817		    in	    al,	dx
seg000:2818		    and	    al,	0F8h
seg000:281A		    jnz	    short loc_2828
seg000:281C		    sub	    dx,	2
seg000:281F		    mov	    [di+0], dx
seg000:2823		    add	    di,	2
seg000:2826		    inc	    ah
seg000:2828
seg000:2828 loc_2828:				    ; CODE XREF: init_lpt_ser+6Fj
seg000:2828		    add	    bx,	2
seg000:282B		    nop
seg000:282C		    loop    init_serial_loop
seg000:282E		    push    ax
seg000:282F		    mov	    cl,	ah
seg000:2831		    xor	    ch,	ch
seg000:2833		    jcxz    short loc_283F
seg000:2835		    xor	    dx,	dx
seg000:2837
seg000:2837 init_serial_loop1:			    ; CODE XREF: init_lpt_ser+92j
seg000:2837		    mov	    ax,	0C3h ; 'Ã'
seg000:283A		    int	    14h		    ; SERIAL I/O - INITIALIZE USART
seg000:283A					    ; AL = initializing	parameters, DX = port number (0-3)
seg000:283A					    ; Return: AH = RS-232 status code bits, AL = modem status bits
seg000:283C		    inc	    dx
seg000:283D		    loop    init_serial_loop1
seg000:283F
seg000:283F loc_283F:				    ; CODE XREF: init_lpt_ser+88j
seg000:283F		    pop	    ax
seg000:2840		    mov	    al,	0
seg000:2842		    shl	    ax,	1
seg000:2844		    pop	    cx
seg000:2845		    or	    cx,	ax
seg000:2847		    mov	    dx,	201h
seg000:284A		    in	    al,	dx	    ; Game I/O port
seg000:284A					    ; bits 0-3:	Coordinates (resistive,	time-dependent inputs)
seg000:284A					    ; bits 4-7:	Buttons/Triggers (digital inputs)
seg000:284B		    and	    al,	0Fh
seg000:284D		    jnz	    short loc_2853
seg000:284F		    or	    cx,	1000h
seg000:2853
seg000:2853 loc_2853:				    ; CODE XREF: init_lpt_ser+A2j
seg000:2853		    mov	    ax,	word ptr ds:loc_E+2
seg000:2856		    and	    ax,	1000h
seg000:2859		    or	    cx,	ax
seg000:285B		    call    sub_28F5
seg000:285E		    or	    cl,	ah
seg000:2860		    mov	    word ptr ds:loc_E+2, cx
seg000:2864		    pop	    di
seg000:2865		    pop	    dx
seg000:2866		    pop	    cx
seg000:2867		    pop	    bx
seg000:2868		    pop	    ax
seg000:2869		    retn
seg000:2869 init_lpt_ser    endp
seg000:2869
seg000:286A ; ---------------------------------------------------------------------------
seg000:286A ; START OF FUNCTION	CHUNK FOR load_DSAX_0
seg000:286A
seg000:286A load_DSAX:				    ; CODE XREF: load_DSAX_0j
seg000:286A		    push    ds
seg000:286B		    mov	    ds,	word ptr cs:loc_C5+1
seg000:2870		    mov	    ax,	word ptr ds:loc_E+2
seg000:2873		    pop	    ds
seg000:2874		    iret
seg000:2874 ; END OF FUNCTION CHUNK FOR	load_DSAX_0
seg000:2875
seg000:2875 ; =============== S	U B R O	U T I N	E =======================================
seg000:2875
seg000:2875
seg000:2875 FPU_init_?	    proc near		    ; CODE XREF: ColrWarm_Boot+457p
seg000:2875		    push    ax
seg000:2876		    push    cx
seg000:2877		    push    dx
seg000:2878		    mov	    al,	1Ch
seg000:287A		    call    cmos_readALcond
seg000:287D		    jnb	    short loc_2886
seg000:287F		    mov	    al,	0Eh
seg000:2881		    call    read_cmos
seg000:2884		    jmp	    short loc_2898
seg000:2886 ; ---------------------------------------------------------------------------
seg000:2886
seg000:2886 loc_2886:				    ; CODE XREF: FPU_init_?+8j
seg000:2886		    mov	    dl,	al
seg000:2888		    mov	    al,	14h
seg000:288A		    call    read_cmos
seg000:288D		    mov	    dh,	al
seg000:288F		    mov	    al,	0Eh
seg000:2891		    call    read_cmos
seg000:2894		    test    al,	20h
seg000:2896		    jz	    short loc_28A5
seg000:2898
seg000:2898 loc_2898:				    ; CODE XREF: FPU_init_?+Fj
seg000:2898		    mov	    dx,	0
seg000:289B		    and	    al,	8
seg000:289D		    mov	    al,	20h ; ' '
seg000:289F		    jnz	    short loc_28A3
seg000:28A1		    mov	    al,	40h ; '@'
seg000:28A3
seg000:28A3 loc_28A3:				    ; CODE XREF: FPU_init_?+2Aj
seg000:28A3		    or	    dl,	al
seg000:28A5
seg000:28A5 loc_28A5:				    ; CODE XREF: FPU_init_?+21j
seg000:28A5		    and	    dh,	3Fh
seg000:28A8		    mov	    al,	byte ptr cs:loc_52+1
seg000:28AC		    dec	    al
seg000:28AE		    js	    short loc_28B9
seg000:28B0		    or	    dh,	1
seg000:28B3		    mov	    cl,	6
seg000:28B5		    shl	    al,	cl
seg000:28B7		    or	    dh,	al
seg000:28B9
seg000:28B9 loc_28B9:				    ; CODE XREF: FPU_init_?+39j
seg000:28B9		    and	    dh,	0CFh
seg000:28BC		    mov	    al,	byte ptr ds:loc_E+2
seg000:28BF		    and	    al,	30h
seg000:28C1		    or	    dh,	al
seg000:28C3		    and	    dh,	0FDh
seg000:28C6		    call    FPU_init
seg000:28C9		    and	    al,	2
seg000:28CB		    or	    dh,	al
seg000:28CD		    and	    dh,	0F3h
seg000:28D0		    mov	    ax,	word ptr ds:loc_14+1
seg000:28D3		    mov	    cl,	5
seg000:28D5		    shr	    ax,	cl
seg000:28D7		    or	    dl,	al
seg000:28D9		    mov	    ah,	0B0h ; '°'
seg000:28DB		    call    Keyboard_command
seg000:28DE		    call    Keyboard_readyWait
seg000:28E1		    mov	    al,	dh
seg000:28E3		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:28E5		    call    Keyboard_readyWait
seg000:28E8		    mov	    al,	dl
seg000:28EA		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:28EC		    mov	    word ptr cs:loc_46+1, dx
seg000:28F1		    pop	    dx
seg000:28F2		    pop	    cx
seg000:28F3		    pop	    ax
seg000:28F4		    retn
seg000:28F4 FPU_init_?	    endp
seg000:28F4
seg000:28F5
seg000:28F5 ; =============== S	U B R O	U T I N	E =======================================
seg000:28F5
seg000:28F5
seg000:28F5 sub_28F5	    proc near		    ; CODE XREF: ColrWarm_Boot+538p
seg000:28F5					    ; init_lpt_ser+B0p
seg000:28F5		    mov	    ax,	word ptr cs:loc_46+1
seg000:28F9		    retn
seg000:28F9 sub_28F5	    endp
seg000:28F9
seg000:28FA
seg000:28FA ; =============== S	U B R O	U T I N	E =======================================
seg000:28FA
seg000:28FA
seg000:28FA FPU_init	    proc near		    ; CODE XREF: FPU_init_?+51p
seg000:28FA		    push    cx
seg000:28FB		    smsw    ax
seg000:28FE		    and	    ax,	0FFFBh
seg000:2901		    lmsw    ax
seg000:2904		    fninit
seg000:2906		    fnstsw  ax
seg000:2908		    test    al,	al
seg000:290A		    jnz	    short loc_2919
seg000:290C		    in	    al,	0A1h	    ; Interrupt	Controller #2, 8259A
seg000:290E		    and	    al,	0DFh
seg000:2910		    jmp	    short $+2
seg000:2912		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:2914		    mov	    al,	0FFh
seg000:2916		    jmp	    short loc_291B
seg000:2918 ; ---------------------------------------------------------------------------
seg000:2918		    nop
seg000:2919
seg000:2919 loc_2919:				    ; CODE XREF: FPU_init+10j
seg000:2919		    mov	    al,	0
seg000:291B
seg000:291B loc_291B:				    ; CODE XREF: FPU_init+1Cj
seg000:291B		    push    bx
seg000:291C		    mov	    bx,	ax
seg000:291E		    mov	    al,	8Eh ; ''
seg000:2920		    call    read_cmos
seg000:2923		    test    al,	20h
seg000:2925		    jnz	    short loc_2941
seg000:2927		    mov	    al,	94h ; ''
seg000:2929		    call    read_cmos
seg000:292C		    mov	    ah,	al
seg000:292E		    and	    ah,	0FDh
seg000:2931		    cmp	    bl,	0FFh
seg000:2934		    jnz	    short loc_2939
seg000:2936		    or	    ah,	2
seg000:2939
seg000:2939 loc_2939:				    ; CODE XREF: FPU_init+3Aj
seg000:2939		    mov	    al,	94h ; ''
seg000:293B		    call    write_cmos
seg000:293E		    call    cmos_checksum
seg000:2941
seg000:2941 loc_2941:				    ; CODE XREF: FPU_init+2Bj
seg000:2941		    mov	    ax,	bx
seg000:2943		    pop	    bx
seg000:2944		    pop	    cx
seg000:2945		    retn
seg000:2945 FPU_init	    endp
seg000:2945
seg000:2945 ; ---------------------------------------------------------------------------
seg000:2946 setup_lpt_table dw 378h		    ; DATA XREF: init_lpt_ser:init_lpt_loopr
seg000:2948		    dw 278h
seg000:294A		    dw 3BCh
seg000:294C setup_ser_table dw 3F8h		    ; DATA XREF: init_lpt_ser:init_serial_loopr
seg000:294E		    dw 2F8h
seg000:2950
seg000:2950 ; =============== S	U B R O	U T I N	E =======================================
seg000:2950
seg000:2950
seg000:2950 keyb_commands1  proc near		    ; CODE XREF: VGA_bios_init:VGA_bios_found?p
seg000:2950					    ; keyb_reset_PC+2Ep ...
seg000:2950		    push    ax
seg000:2951		    push    si
seg000:2952		    mov	    si,	offset keybCommands_1
seg000:2955		    jmp	    short loc_2966
seg000:2955 keyb_commands1  endp
seg000:2955
seg000:2957
seg000:2957 ; =============== S	U B R O	U T I N	E =======================================
seg000:2957
seg000:2957
seg000:2957 keyb_commands2  proc near		    ; CODE XREF: VGA_bios_init+3Cp
seg000:2957					    ; port_9F4BF4_In:loc_1BBDp	...
seg000:2957		    push    ax
seg000:2958		    push    si
seg000:2959		    mov	    si,	offset keybCommands_2
seg000:295C		    jmp	    short loc_2966
seg000:295C ; ---------------------------------------------------------------------------
seg000:295E keybCommands_1  db 0B7h		    ; DATA XREF: keyb_commands1+2o
seg000:295F		    db	76h ; v
seg000:2960		    db	92h ; 
seg000:2961		    db	  4
seg000:2962 keybCommands_2  db 0B8h		    ; DATA XREF: keyb_commands2+2o
seg000:2963		    db 0F8h ; ø
seg000:2964		    db	4Bh ; K
seg000:2965		    db 69h
seg000:2966 ; ---------------------------------------------------------------------------
seg000:2966
seg000:2966 loc_2966:				    ; CODE XREF: keyb_commands1+5j
seg000:2966					    ; keyb_commands2+5j
seg000:2966		    push    cx
seg000:2967		    mov	    cx,	4
seg000:296A
seg000:296A keyb_loop:				    ; CODE XREF: keyb_commands2+1Aj
seg000:296A		    mov	    ah,	cs:[si]
seg000:296D		    call    Keyboard_command
seg000:2970		    inc	    si
seg000:2971		    loop    keyb_loop
seg000:2973		    mov	    ah,	0FFh
seg000:2975		    call    Keyboard_command
seg000:2978		    call    Keyboard_readyWait
seg000:297B		    pop	    cx
seg000:297C		    pop	    si
seg000:297D		    pop	    ax
seg000:297E		    retn
seg000:297E keyb_commands2  endp
seg000:297E
seg000:297E ; ---------------------------------------------------------------------------
seg000:297F byte_297F	    db 8		    ; DATA XREF: port_BF4_Out+26r
seg000:2980		    db	48h ; H
seg000:2981		    db	4Ah ; J
seg000:2982		    db	4Eh ; N
seg000:2983		    db	  0
seg000:2984
seg000:2984 ; =============== S	U B R O	U T I N	E =======================================
seg000:2984
seg000:2984
seg000:2984 joystick	    proc near		    ; CODE XREF: sub_A114:int15h84hjoyp
seg000:2984		    push    ds
seg000:2985		    push    es
seg000:2986		    push    di
seg000:2987		    push    si
seg000:2988		    mov	    di,	cs
seg000:298A		    mov	    ds,	di
seg000:298C		    mov	    es,	di
seg000:298E		    cmp	    dx,	1
seg000:2991		    jz	    short joy_position
seg000:2993		    jb	    short joy_buttons
seg000:2995		    call    near ptr end_interrupt?
seg000:2998		    jmp	    short loc_29B9
seg000:299A ; ---------------------------------------------------------------------------
seg000:299A		    nop
seg000:299B
seg000:299B joy_buttons:			    ; CODE XREF: joystick+Fj
seg000:299B		    mov	    si,	offset joy_buttons?
seg000:299E		    call    read_joystick
seg000:29A1		    mov	    ax,	[di-2]
seg000:29A4		    jmp	    short loc_29B9
seg000:29A6 ; ---------------------------------------------------------------------------
seg000:29A6		    nop
seg000:29A7
seg000:29A7 joy_position:			    ; CODE XREF: joystick+Dj
seg000:29A7		    mov	    si,	offset joy_possition?
seg000:29AA		    call    read_joystick
seg000:29AD		    mov	    dx,	[di-8]
seg000:29B0		    mov	    bx,	[di-6]
seg000:29B3		    mov	    cx,	[di-4]
seg000:29B6		    mov	    ax,	[di-2]
seg000:29B9
seg000:29B9 loc_29B9:				    ; CODE XREF: joystick+14j
seg000:29B9					    ; joystick+20j
seg000:29B9		    pop	    si
seg000:29BA		    pop	    di
seg000:29BB		    pop	    es
seg000:29BC		    pop	    ds
seg000:29BD		    retn
seg000:29BD joystick	    endp
seg000:29BD
seg000:29BE
seg000:29BE ; =============== S	U B R O	U T I N	E =======================================
seg000:29BE
seg000:29BE
seg000:29BE read_joystick   proc near		    ; CODE XREF: joystick+1Ap
seg000:29BE					    ; joystick+26p
seg000:29BE		    push    bx
seg000:29BF		    push    cx
seg000:29C0		    push    dx
seg000:29C1		    push    bp
seg000:29C2		    mov	    bp,	dx
seg000:29C4		    mov	    di,	406h
seg000:29C7
seg000:29C7 loc_29C7:				    ; CODE XREF: read_joystick+4Bj
seg000:29C7		    mov	    dx,	201h
seg000:29CA		    mov	    al,	0FFh
seg000:29CC		    out	    dx,	al	    ; Game I/O port
seg000:29CC					    ; bits 0-3:	Coordinates (resistive,	time-dependent inputs)
seg000:29CC					    ; bits 4-7:	Buttons/Triggers (digital inputs)
seg000:29CD		    call    timer
seg000:29D0		    mov	    bx,	ax
seg000:29D2		    mov	    ah,	[si]
seg000:29D4		    mov	    cx,	300h
seg000:29D7
seg000:29D7 loc_29D7:				    ; CODE XREF: read_joystick+23j
seg000:29D7		    in	    al,	dx
seg000:29D8		    cmp	    bp,	0
seg000:29DB		    jz	    short loc_29E3
seg000:29DD		    test    al,	ah
seg000:29DF		    jz	    short loc_29F1
seg000:29E1		    loop    loc_29D7
seg000:29E3
seg000:29E3 loc_29E3:				    ; CODE XREF: read_joystick+1Dj
seg000:29E3		    and	    al,	ah
seg000:29E5		    xor	    ah,	ah
seg000:29E7		    cmp	    word ptr [si+1], 0
seg000:29EB		    jnz	    short loc_29FF
seg000:29ED		    xor	    ax,	ax
seg000:29EF		    jmp	    short loc_29FF
seg000:29F1 ; ---------------------------------------------------------------------------
seg000:29F1
seg000:29F1 loc_29F1:				    ; CODE XREF: read_joystick+21j
seg000:29F1		    call    timer
seg000:29F4		    sub	    ax,	bx
seg000:29F6		    neg	    ax
seg000:29F8		    mov	    cl,	4
seg000:29FA		    shr	    ax,	cl
seg000:29FC		    and	    ah,	1
seg000:29FF
seg000:29FF loc_29FF:				    ; CODE XREF: read_joystick+2Dj
seg000:29FF					    ; read_joystick+31j
seg000:29FF		    stosw
seg000:2A00		    cmp	    byte ptr [si+3], 0FFh
seg000:2A04		    jz	    short loc_2A0B
seg000:2A06		    add	    si,	4
seg000:2A09		    jmp	    short loc_29C7
seg000:2A0B ; ---------------------------------------------------------------------------
seg000:2A0B
seg000:2A0B loc_2A0B:				    ; CODE XREF: read_joystick+46j
seg000:2A0B		    pop	    bp
seg000:2A0C		    pop	    dx
seg000:2A0D		    pop	    cx
seg000:2A0E		    pop	    bx
seg000:2A0F		    retn
seg000:2A10 ; ---------------------------------------------------------------------------
seg000:2A10
seg000:2A10 timer:				    ; CODE XREF: read_joystick+Fp
seg000:2A10					    ; read_joystick:loc_29F1p
seg000:2A10		    xor	    al,	al
seg000:2A12		    out	    43h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:2A14		    jmp	    short $+2
seg000:2A16		    in	    al,	40h	    ; Timer 8253-5 (AT:	8254.2).
seg000:2A18		    mov	    ah,	al
seg000:2A1A		    jmp	    short $+2
seg000:2A1C		    in	    al,	40h	    ; Timer 8253-5 (AT:	8254.2).
seg000:2A1E		    xchg    al,	ah
seg000:2A20		    retn
seg000:2A20 read_joystick   endp
seg000:2A20
seg000:2A20 ; ---------------------------------------------------------------------------
seg000:2A21 joy_buttons?    joy_lookup <0F0h, 2FFh, 0FFh> ; DATA XREF: joystick:joy_buttonso
seg000:2A25 joy_possition?  joy_lookup <8, 0, 0>    ; DATA XREF: joystick:joy_positiono
seg000:2A29		    joy_lookup <2, 0, 0>
seg000:2A2D		    joy_lookup <4, 0, 0>
seg000:2A31		    joy_lookup <1, 0, 0FFh>
seg000:2A35		    db	  0
seg000:2A36		    db	  0
seg000:2A37		    db	  0
seg000:2A38		    db	  0
seg000:2A39		    db	  0
seg000:2A3A		    db	  0
seg000:2A3B		    db	  0
seg000:2A3C		    db	  0
seg000:2A3D		    db	  0
seg000:2A3E		    db	  0
seg000:2A3F		    db	  0
seg000:2A40		    db	  0
seg000:2A41		    db	  0
seg000:2A42		    db	  0
seg000:2A43		    db	  0
seg000:2A44		    db	  0
seg000:2A45		    db	  0
seg000:2A46		    db	  0
seg000:2A47		    db	  0
seg000:2A48		    db	  0
seg000:2A49		    db	  0
seg000:2A4A		    db	  0
seg000:2A4B		    db	  0
seg000:2A4C		    db	  0
seg000:2A4D		    db	  0
seg000:2A4E		    db	  0
seg000:2A4F		    db	  0
seg000:2A50		    db	  0
seg000:2A51		    db	  0
seg000:2A52		    db	  0
seg000:2A53		    db	  0
seg000:2A54		    db	  0
seg000:2A55		    db	  0
seg000:2A56		    db	  0
seg000:2A57		    db	  0
seg000:2A58		    db	  0
seg000:2A59		    db	  0
seg000:2A5A		    db	  0
seg000:2A5B		    db	  0
seg000:2A5C		    db	  0
seg000:2A5D		    db	  0
seg000:2A5E		    db	  0
seg000:2A5F		    db	  0
seg000:2A60		    db	  0
seg000:2A61		    db	  0
seg000:2A62		    db	  0
seg000:2A63		    db	  0
seg000:2A64		    db	  0
seg000:2A65		    db	  0
seg000:2A66		    db	  0
seg000:2A67		    db	  0
seg000:2A68		    db	  0
seg000:2A69		    db	  0
seg000:2A6A		    db	  0
seg000:2A6B		    db	  0
seg000:2A6C		    db	  0
seg000:2A6D		    db	  0
seg000:2A6E		    db	  0
seg000:2A6F		    db	  0
seg000:2A70 ; ---------------------------------------------------------------------------
seg000:2A70		    nop
seg000:2A71
seg000:2A71 ; =============== S	U B R O	U T I N	E =======================================
seg000:2A71
seg000:2A71 ; Attributes: noreturn
seg000:2A71
seg000:2A71 sub_2A71	    proc far		    ; DATA XREF: ide_detect_init?+51o
seg000:2A71					    ; sub_98A5+B7o
seg000:2A71
seg000:2A71 ; FUNCTION CHUNK AT	seg000:9B29 SIZE 0000007A BYTES
seg000:2A71 ; FUNCTION CHUNK AT	seg000:9BA4 SIZE 00000014 BYTES
seg000:2A71
seg000:2A71		    cmp	    dl,	80h ; ''
seg000:2A74		    jmp	    far	ptr 0F000h:2A79h
seg000:2A79 ; ---------------------------------------------------------------------------
seg000:2A79
seg000:2A79 loc_2A79:
seg000:2A79		    cmp	    ah,	0
seg000:2A7C		    jnz	    short loc_2A84
seg000:2A7E		    int	    40h		    ; Hard disk	- Relocated Floppy Handler (original INT 13h)
seg000:2A80		    mov	    ah,	0
seg000:2A82		    jmp	    short loc_2A8D
seg000:2A84 ; ---------------------------------------------------------------------------
seg000:2A84
seg000:2A84 loc_2A84:				    ; CODE XREF: sub_2A71+Bj
seg000:2A84		    test    dl,	80h
seg000:2A87		    jnz	    short loc_2A8D
seg000:2A89		    int	    40h		    ; Hard disk	- Relocated Floppy Handler (original INT 13h)
seg000:2A8B		    jmp	    short locret_2AF1
seg000:2A8D ; ---------------------------------------------------------------------------
seg000:2A8D
seg000:2A8D loc_2A8D:				    ; CODE XREF: sub_2A71+11j
seg000:2A8D					    ; sub_2A71+16j
seg000:2A8D		    test    word ptr cs:loc_50E, 1
seg000:2A94		    jnz	    short loc_2A99
seg000:2A96		    jmp	    loc_9B29
seg000:2A99 ; ---------------------------------------------------------------------------
seg000:2A99
seg000:2A99 loc_2A99:				    ; CODE XREF: sub_2A71+23j
seg000:2A99					    ; sub_2A71:loc_9B2Fj ...
seg000:2A99		    push    di
seg000:2A9A		    push    bp
seg000:2A9B		    push    ds
seg000:2A9C		    mov	    ds,	word ptr cs:loc_C5+1
seg000:2AA1		    out	    0FBh, al	    ; AT 80287 data.
seg000:2AA1					    ; 286 sends	opcodes	& operands and receives	results.
seg000:2AA3		    pushf
seg000:2AA4		    inc	    byte ptr ds:loc_BB+4
seg000:2AA8		    popf
seg000:2AA9		    sti
seg000:2AAA		    cld
seg000:2AAB		    mov	    bp,	ax
seg000:2AAD		    mov	    di,	0Ah
seg000:2AB0
seg000:2AB0 loc_2AB0:				    ; CODE XREF: sub_2A71+5Bj
seg000:2AB0		    mov	    ax,	bp
seg000:2AB2		    call    sub_2AF4
seg000:2AB5		    jnb	    short loc_2ACE
seg000:2AB7		    push    bx
seg000:2AB8		    mov	    bx,	bp
seg000:2ABA		    call    sub_32B3
seg000:2ABD		    pop	    bx
seg000:2ABE		    jb	    short loc_2ACE
seg000:2AC0		    cmp	    di,	0Ah
seg000:2AC3		    jl	    short loc_2ACB
seg000:2AC5		    mov	    ax,	1B00h
seg000:2AC8		    call    sub_2AF4
seg000:2ACB
seg000:2ACB loc_2ACB:				    ; CODE XREF: sub_2A71+52j
seg000:2ACB		    dec	    di
seg000:2ACC		    jnz	    short loc_2AB0
seg000:2ACE
seg000:2ACE loc_2ACE:				    ; CODE XREF: sub_2A71+44j
seg000:2ACE					    ; sub_2A71+4Dj
seg000:2ACE		    pushf
seg000:2ACF		    cmp	    di,	0Ah
seg000:2AD2		    jz	    short loc_2AE3
seg000:2AD4		    cmp	    di,	0
seg000:2AD7		    ja	    short loc_2ADB
seg000:2AD9		    mov	    al,	0FFh
seg000:2ADB
seg000:2ADB loc_2ADB:				    ; CODE XREF: sub_2A71+66j
seg000:2ADB		    push    ax
seg000:2ADC		    mov	    ax,	1C00h
seg000:2ADF		    call    sub_2AF4
seg000:2AE2		    pop	    ax
seg000:2AE3
seg000:2AE3 loc_2AE3:				    ; CODE XREF: sub_2A71+61j
seg000:2AE3		    pushf
seg000:2AE4		    dec	    byte ptr ds:loc_BB+4
seg000:2AE8		    jnz	    short loc_2AEC
seg000:2AEA		    out	    0F9h, al	    ; AT 80287 data.
seg000:2AEA					    ; 286 sends	opcodes	& operands and receives	results.
seg000:2AEC
seg000:2AEC loc_2AEC:				    ; CODE XREF: sub_2A71+77j
seg000:2AEC		    popf
seg000:2AED		    popf
seg000:2AEE		    pop	    ds
seg000:2AEF		    pop	    bp
seg000:2AF0		    pop	    di
seg000:2AF1
seg000:2AF1 locret_2AF1:			    ; CODE XREF: sub_2A71+1Aj
seg000:2AF1		    retf    2
seg000:2AF1 sub_2A71	    endp
seg000:2AF1
seg000:2AF4
seg000:2AF4 ; =============== S	U B R O	U T I N	E =======================================
seg000:2AF4
seg000:2AF4
seg000:2AF4 sub_2AF4	    proc near		    ; CODE XREF: sub_2A71+41p
seg000:2AF4					    ; sub_2A71+57p ...
seg000:2AF4		    push    si
seg000:2AF5		    push    di
seg000:2AF6		    push    bp
seg000:2AF7		    mov	    di,	dx
seg000:2AF9		    mov	    byte ptr cs:stru_405.check,	ah
seg000:2AFE		    test    ah,	ah
seg000:2B00		    jnz	    short loc_2B0E
seg000:2B02		    mov	    cs:stru_3FC.data6, 0C0h
seg000:2B08		    call    ide_?_6
seg000:2B0B		    jmp	    loc_2BF3
seg000:2B0E ; ---------------------------------------------------------------------------
seg000:2B0E
seg000:2B0E loc_2B0E:				    ; CODE XREF: sub_2AF4+Cj
seg000:2B0E		    test    dl,	80h
seg000:2B11		    jnz	    short loc_2B16
seg000:2B13		    jmp	    loc_2C15
seg000:2B16 ; ---------------------------------------------------------------------------
seg000:2B16
seg000:2B16 loc_2B16:				    ; CODE XREF: sub_2AF4+1Dj
seg000:2B16		    push    ax
seg000:2B17		    push    bx
seg000:2B18		    xchg    al,	ah
seg000:2B1A		    mov	    bx,	offset word_373F
seg000:2B1D		    xlat    byte ptr cs:[bx]
seg000:2B1F		    mov	    cs:stru_3FC.data6, al
seg000:2B23		    test    al,	10h
seg000:2B25		    pop	    bx
seg000:2B26		    pop	    ax
seg000:2B27		    jz	    short loc_2B2C
seg000:2B29		    jmp	    short loc_2BA8
seg000:2B2B ; ---------------------------------------------------------------------------
seg000:2B2B		    nop
seg000:2B2C
seg000:2B2C loc_2B2C:				    ; CODE XREF: sub_2AF4+33j
seg000:2B2C		    call    ide_?_5
seg000:2B2F		    jnb	    short loc_2B34
seg000:2B31		    jmp	    loc_2BF0
seg000:2B34 ; ---------------------------------------------------------------------------
seg000:2B34
seg000:2B34 loc_2B34:				    ; CODE XREF: sub_2AF4+3Bj
seg000:2B34		    call    sub_2D92
seg000:2B37		    jnb	    short loc_2B3C
seg000:2B39		    jmp	    loc_2BF0
seg000:2B3C ; ---------------------------------------------------------------------------
seg000:2B3C
seg000:2B3C loc_2B3C:				    ; CODE XREF: sub_2AF4+43j
seg000:2B3C		    test    cs:stru_3FC.data6, 80h
seg000:2B42		    jnz	    short loc_2BA8
seg000:2B44		    push    dx
seg000:2B45		    push    cx
seg000:2B46		    mov	    byte ptr ds:loc_43,	al
seg000:2B49		    and	    cl,	3Fh
seg000:2B4C		    mov	    byte ptr ds:loc_43+1, cl
seg000:2B50		    pop	    cx
seg000:2B51		    push    cx
seg000:2B52		    mov	    byte ptr ds:loc_43+2, ch
seg000:2B56		    and	    cl,	0C0h
seg000:2B59		    rol	    cl,	1
seg000:2B5B		    rol	    cl,	1
seg000:2B5D		    mov	    byte ptr ds:loc_46,	cl
seg000:2B61		    mov	    dx,	di
seg000:2B63		    and	    dl,	1
seg000:2B66		    and	    dh,	0Fh
seg000:2B69		    mov	    cl,	4
seg000:2B6B		    shl	    dl,	cl
seg000:2B6D		    or	    dl,	0A0h
seg000:2B70		    or	    dl,	dh
seg000:2B72		    mov	    byte ptr ds:loc_46+1, dl
seg000:2B76		    pop	    cx
seg000:2B77		    pop	    dx
seg000:2B78		    push    ax
seg000:2B79		    push    es
seg000:2B7A		    push    si
seg000:2B7B		    mov	    ax,	di
seg000:2B7D		    and	    al,	1
seg000:2B7F		    call    sub_323B
seg000:2B82		    mov	    ax,	es:[si+5]
seg000:2B86		    shr	    ax,	1
seg000:2B88		    shr	    ax,	1
seg000:2B8A		    mov	    byte ptr ds:loc_41+1, al
seg000:2B8D		    mov	    al,	es:[si+8]
seg000:2B91		    mov	    ah,	0C0h ; 'À'
seg000:2B93		    and	    ah,	byte ptr ds:loc_76
seg000:2B97		    or	    ah,	al
seg000:2B99		    push    dx
seg000:2B9A		    mov	    dx,	cs:fdd_IO_port
seg000:2B9F		    out	    dx,	al	    ; AT only. Fixed disk register
seg000:2BA0		    pop	    dx
seg000:2BA1		    mov	    byte ptr ds:loc_76,	ah
seg000:2BA5		    pop	    si
seg000:2BA6		    pop	    es
seg000:2BA7		    pop	    ax
seg000:2BA8
seg000:2BA8 loc_2BA8:				    ; CODE XREF: sub_2AF4+35j
seg000:2BA8					    ; sub_2AF4+4Ej
seg000:2BA8		    cmp	    ah,	1Eh
seg000:2BAB		    nop
seg000:2BAC		    jnb	    short loc_2BF0
seg000:2BAE		    call    push_ret_ah
seg000:2BB1		    jmp	    short loc_2BF3
seg000:2BB3 ; ---------------------------------------------------------------------------
seg000:2BB3		    nop
seg000:2BB3 ; ---------------------------------------------------------------------------
seg000:2BB4 ret_vectors	    dw offset ide_?_6	    ; 0
seg000:2BB4		    dw offset read_74h_al_and0;	1
seg000:2BB4		    dw offset ide_?_8	    ; 2
seg000:2BB4		    dw offset ide_?_8	    ; 3
seg000:2BB4		    dw offset ide_?_4	    ; 4
seg000:2BB4		    dw offset ide_?_9	    ; 5
seg000:2BB4		    dw offset ax100_stc	    ; 6
seg000:2BB4		    dw offset ax100_stc	    ; 7
seg000:2BB4		    dw offset ide_?_10	    ; 8
seg000:2BB4		    dw offset ide_?_11	    ; 9
seg000:2BB4		    dw offset ide_?_8	    ; 0Ah
seg000:2BB4		    dw offset ide_?_8	    ; 0Bh
seg000:2BB4		    dw offset ide_?_4	    ; 0Ch
seg000:2BB4		    dw offset ide_?_6	    ; 0Dh
seg000:2BB4		    dw offset ax100_stc	    ; 0Eh
seg000:2BB4		    dw offset ax100_stc	    ; 0Fh
seg000:2BB4		    dw offset ide_?_7	    ; 10h
seg000:2BB4		    dw offset ide_?_13	    ; 11h
seg000:2BB4		    dw offset ax100_stc	    ; 12h
seg000:2BB4		    dw offset ax100_stc	    ; 13h
seg000:2BB4		    dw offset ide_?_14	    ; 14h
seg000:2BB4		    dw offset store_74h_3or0; 15h
seg000:2BB4		    dw offset ax100_stc	    ; 16h
seg000:2BB4		    dw offset ax100_stc	    ; 17h
seg000:2BB4		    dw offset ide_?_4	    ; 18h
seg000:2BB4		    dw offset ide_?_15	    ; 19h
seg000:2BB4		    dw offset ax100_stc	    ; 1Ah
seg000:2BB4		    dw offset ide_?_4	    ; 1Bh
seg000:2BB4		    dw offset ide_?_4	    ; 1Ch
seg000:2BB4		    dw offset ide_?_16	    ; 1Dh
seg000:2BF0 ; ---------------------------------------------------------------------------
seg000:2BF0
seg000:2BF0 loc_2BF0:				    ; CODE XREF: sub_2AF4+3Dj
seg000:2BF0					    ; sub_2AF4+45j ...
seg000:2BF0		    call    ax100_stc
seg000:2BF3
seg000:2BF3 loc_2BF3:				    ; CODE XREF: sub_2AF4+17j
seg000:2BF3					    ; sub_2AF4+BDj
seg000:2BF3		    jnb	    short loc_2C0D
seg000:2BF5		    cmp	    ah,	3Eh ; '>'
seg000:2BF8		    stc
seg000:2BF9		    jnz	    short loc_2C0F
seg000:2BFB		    mov	    ah,	byte ptr ds:loc_73+1
seg000:2BFF		    mov	    byte ptr ds:loc_73+1, 0
seg000:2C04		    cmp	    ah,	11h
seg000:2C07		    stc
seg000:2C08		    jz	    short loc_2C13
seg000:2C0A		    clc
seg000:2C0B		    jmp	    short loc_2C13
seg000:2C0D ; ---------------------------------------------------------------------------
seg000:2C0D
seg000:2C0D loc_2C0D:				    ; CODE XREF: sub_2AF4:loc_2BF3j
seg000:2C0D		    mov	    ah,	0
seg000:2C0F
seg000:2C0F loc_2C0F:				    ; CODE XREF: sub_2AF4+105j
seg000:2C0F		    mov	    byte ptr ds:loc_73+1, ah
seg000:2C13
seg000:2C13 loc_2C13:				    ; CODE XREF: sub_2AF4+114j
seg000:2C13					    ; sub_2AF4+117j
seg000:2C13		    mov	    dx,	di
seg000:2C15
seg000:2C15 loc_2C15:				    ; CODE XREF: sub_2AF4+1Fj
seg000:2C15		    pop	    bp
seg000:2C16		    pop	    di
seg000:2C17		    pop	    si
seg000:2C18		    retn
seg000:2C18 sub_2AF4	    endp
seg000:2C18
seg000:2C19
seg000:2C19 ; =============== S	U B R O	U T I N	E =======================================
seg000:2C19
seg000:2C19
seg000:2C19 ax100_stc	    proc near		    ; CODE XREF: sub_2AF4:loc_2BF0p
seg000:2C19					    ; ide_?_10+Aj ...
seg000:2C19		    mov	    ah,	1
seg000:2C1B		    mov	    al,	0
seg000:2C1D		    stc
seg000:2C1E		    retn
seg000:2C1E ax100_stc	    endp
seg000:2C1E
seg000:2C1F
seg000:2C1F ; =============== S	U B R O	U T I N	E =======================================
seg000:2C1F
seg000:2C1F
seg000:2C1F ide_?_15	    proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2C1F		    push    ax
seg000:2C20		    mov	    ax,	1100h
seg000:2C23		    call    ide_?_4
seg000:2C26		    pop	    ax
seg000:2C27		    call    ide_?_4
seg000:2C2A		    retn
seg000:2C2A ide_?_15	    endp
seg000:2C2A
seg000:2C2B
seg000:2C2B ; =============== S	U B R O	U T I N	E =======================================
seg000:2C2B
seg000:2C2B
seg000:2C2B ide_?_6	    proc near		    ; CODE XREF: sub_2AF4+14p
seg000:2C2B					    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2C2B		    push    bx
seg000:2C2C		    push    cx
seg000:2C2D		    push    dx
seg000:2C2E		    mov	    dx,	di
seg000:2C30		    test    dl,	80h
seg000:2C33		    jz	    short loc_2CA4
seg000:2C35		    cmp	    dl,	82h ; ''
seg000:2C38		    mov	    al,	2
seg000:2C3A		    jnb	    short loc_2CA4
seg000:2C3C		    and	    dl,	80h
seg000:2C3F		    cmp	    byte ptr ds:loc_73+2, 0
seg000:2C3F					    ; CODE XREF: ColrWarm_Boot:loc_63AAp
seg000:2C44		    mov	    ah,	1
seg000:2C46		    stc
seg000:2C47		    jz	    short loc_2CA4
seg000:2C49		    call    ide_?_5
seg000:2C4C		    jb	    short loc_2CA2
seg000:2C4E		    add	    dx,	6
seg000:2C51		    in	    al,	dx
seg000:2C52		    mov	    bl,	al
seg000:2C54		    sub	    dx,	6
seg000:2C57		    and	    bl,	10h
seg000:2C5A		    or	    bl,	0A0h
seg000:2C5D		    push    dx
seg000:2C5E		    mov	    dx,	cs:fdd_IO_port
seg000:2C63		    mov	    al,	4
seg000:2C65		    out	    dx,	al	    ; AT only. Fixed disk register
seg000:2C66		    mov	    cx,	5
seg000:2C69		    call    delay_doubleCX
seg000:2C6C		    mov	    al,	0Fh
seg000:2C6E		    and	    al,	byte ptr ds:loc_76
seg000:2C72		    out	    dx,	al
seg000:2C73		    mov	    dx,	0A1h ; '¡'
seg000:2C76		    cli
seg000:2C77		    in	    al,	dx	    ; Interrupt	Controller #2, 8259A
seg000:2C78		    and	    al,	0BFh
seg000:2C7A		    jmp	    short $+2
seg000:2C7C		    out	    dx,	al	    ; Interrupt	Controller #2, 8259A
seg000:2C7D		    sti
seg000:2C7E		    pop	    dx
seg000:2C7F		    mov	    ah,	0
seg000:2C81		    call    ide_?_0
seg000:2C84		    jb	    short loc_2CA2
seg000:2C86		    inc	    dx
seg000:2C87		    in	    al,	dx
seg000:2C88		    dec	    dx
seg000:2C89		    dec	    al
seg000:2C8B		    jnz	    short loc_2CA2
seg000:2C8D		    add	    dx,	6
seg000:2C90		    mov	    al,	bl
seg000:2C92		    out	    dx,	al
seg000:2C93		    sub	    dx,	6
seg000:2C96		    call    sub_2E85
seg000:2C99		    push    di
seg000:2C9A		    mov	    di,	80h ; ''
seg000:2C9D		    call    sub_2CA8
seg000:2CA0		    pop	    di
seg000:2CA1		    clc
seg000:2CA2
seg000:2CA2 loc_2CA2:				    ; CODE XREF: ide_?_6+21j
seg000:2CA2					    ; ide_?_6+59j ...
seg000:2CA2		    mov	    ah,	5
seg000:2CA4
seg000:2CA4 loc_2CA4:				    ; CODE XREF: ide_?_6+8j
seg000:2CA4					    ; ide_?_6+Fj ...
seg000:2CA4		    pop	    dx
seg000:2CA5		    pop	    cx
seg000:2CA6		    pop	    bx
seg000:2CA7		    retn
seg000:2CA7 ide_?_6	    endp
seg000:2CA7
seg000:2CA8
seg000:2CA8 ; =============== S	U B R O	U T I N	E =======================================
seg000:2CA8
seg000:2CA8
seg000:2CA8 sub_2CA8	    proc near		    ; CODE XREF: ide_?_6+72p
seg000:2CA8		    push    bx
seg000:2CA9		    push    cx
seg000:2CAA		    mov	    byte ptr cs:stru_405.check,	11h
seg000:2CB0		    mov	    bx,	di
seg000:2CB2		    xor	    ch,	ch
seg000:2CB4		    mov	    cl,	byte ptr ds:loc_73+2
seg000:2CB8		    sub	    cl,	byte ptr cs:loc_511
seg000:2CBD		    add	    cl,	byte ptr cs:loc_50E+2
seg000:2CC2		    mov	    byte ptr ds:loc_41+1, 0
seg000:2CC7		    mov	    byte ptr ds:loc_43,	0
seg000:2CCC		    mov	    byte ptr ds:loc_43+1, 1
seg000:2CD1		    mov	    byte ptr ds:loc_43+2, 0
seg000:2CD6		    mov	    byte ptr ds:loc_46,	0
seg000:2CDB
seg000:2CDB loc_2CDB:				    ; CODE XREF: sub_2CA8+4Dj
seg000:2CDB		    mov	    bh,	bl
seg000:2CDD		    and	    bh,	1
seg000:2CE0		    push    cx
seg000:2CE1		    mov	    cl,	4
seg000:2CE3		    shl	    bh,	cl
seg000:2CE5		    pop	    cx
seg000:2CE6		    or	    bh,	0A0h
seg000:2CE9		    mov	    byte ptr ds:loc_46+1, bh
seg000:2CED		    mov	    ax,	1100h
seg000:2CF0		    call    ide_?_4
seg000:2CF3		    inc	    bl
seg000:2CF5		    loop    loc_2CDB
seg000:2CF7		    pop	    cx
seg000:2CF8		    pop	    bx
seg000:2CF9		    retn
seg000:2CF9 sub_2CA8	    endp
seg000:2CF9
seg000:2CFA
seg000:2CFA ; =============== S	U B R O	U T I N	E =======================================
seg000:2CFA
seg000:2CFA
seg000:2CFA ide_?_13	    proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2CFA		    call    ide_?_4
seg000:2CFD		    jnb	    short locret_2D05
seg000:2CFF		    cmp	    ah,	40h ; '@'
seg000:2D02		    jz	    short locret_2D05
seg000:2D04		    stc
seg000:2D05
seg000:2D05 locret_2D05:			    ; CODE XREF: ide_?_13+3j
seg000:2D05					    ; ide_?_13+8j
seg000:2D05		    retn
seg000:2D05 ide_?_13	    endp
seg000:2D05
seg000:2D06
seg000:2D06 ; =============== S	U B R O	U T I N	E =======================================
seg000:2D06
seg000:2D06
seg000:2D06 store_74h_3or0  proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2D06		    push    si
seg000:2D07		    push    es
seg000:2D08		    call    sub_2D92
seg000:2D0B		    jb	    short loc_2D2C
seg000:2D0D		    mov	    ax,	di
seg000:2D0F		    and	    al,	1
seg000:2D11		    call    sub_323B
seg000:2D14		    mov	    al,	es:[si+0Eh]
seg000:2D18		    imul    byte ptr es:[si+2]
seg000:2D1C		    mov	    dx,	es:[si]
seg000:2D1F		    dec	    dx
seg000:2D20		    imul    dx
seg000:2D22		    xchg    ax,	dx
seg000:2D23		    mov	    cx,	ax
seg000:2D25		    mov	    byte ptr ds:loc_73+1, 3
seg000:2D2A		    jmp	    short loc_2D35
seg000:2D2C ; ---------------------------------------------------------------------------
seg000:2D2C
seg000:2D2C loc_2D2C:				    ; CODE XREF: store_74h_3or0+5j
seg000:2D2C		    xor	    dx,	dx
seg000:2D2E		    xor	    cx,	cx
seg000:2D30		    mov	    byte ptr ds:loc_73+1, 0
seg000:2D35
seg000:2D35 loc_2D35:				    ; CODE XREF: store_74h_3or0+24j
seg000:2D35		    mov	    ah,	3Eh ; '>'
seg000:2D37		    stc
seg000:2D38		    mov	    di,	dx
seg000:2D3A		    pop	    es
seg000:2D3B		    pop	    si
seg000:2D3C		    retn
seg000:2D3C store_74h_3or0  endp
seg000:2D3C
seg000:2D3D
seg000:2D3D ; =============== S	U B R O	U T I N	E =======================================
seg000:2D3D
seg000:2D3D
seg000:2D3D ide_?_14	    proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2D3D		    push    bx
seg000:2D3E		    push    cx
seg000:2D3F		    mov	    bh,	20h ; ' '
seg000:2D41		    call    PIC_irq_mask?
seg000:2D44		    mov	    ah,	0
seg000:2D46		    call    ide_?_0
seg000:2D49		    jb	    short loc_2D7F
seg000:2D4B		    add	    dx,	6
seg000:2D4E		    in	    al,	dx
seg000:2D4F		    sub	    dx,	6
seg000:2D52		    and	    al,	10h
seg000:2D54		    or	    al,	0A0h
seg000:2D56		    mov	    cl,	al
seg000:2D58		    mov	    al,	90h ; ''
seg000:2D5A		    add	    dx,	7
seg000:2D5D		    out	    dx,	al
seg000:2D5E		    sub	    dx,	7
seg000:2D61		    mov	    ah,	0
seg000:2D63		    call    ide_?_0
seg000:2D66		    jb	    short loc_2D82
seg000:2D68		    add	    dx,	1
seg000:2D6B		    in	    al,	dx
seg000:2D6C		    sub	    dx,	1
seg000:2D6F		    clc
seg000:2D70		    push    es
seg000:2D71		    mov	    es,	word ptr cs:loc_48+1
seg000:2D76		    mov	    byte ptr es:loc_8D,	al
seg000:2D7A		    pop	    es
seg000:2D7B		    cmp	    al,	1
seg000:2D7D		    jz	    short loc_2D82
seg000:2D7F
seg000:2D7F loc_2D7F:				    ; CODE XREF: ide_?_14+Cj
seg000:2D7F		    mov	    ah,	bh
seg000:2D81		    stc
seg000:2D82
seg000:2D82 loc_2D82:				    ; CODE XREF: ide_?_14+29j
seg000:2D82					    ; ide_?_14+40j
seg000:2D82		    pushf
seg000:2D83		    push    ax
seg000:2D84		    add	    dx,	6
seg000:2D87		    mov	    al,	cl
seg000:2D89		    out	    dx,	al
seg000:2D8A		    sub	    dx,	6
seg000:2D8D		    pop	    ax
seg000:2D8E		    popf
seg000:2D8F		    pop	    cx
seg000:2D90		    pop	    bx
seg000:2D91		    retn
seg000:2D91 ide_?_14	    endp
seg000:2D91
seg000:2D92
seg000:2D92 ; =============== S	U B R O	U T I N	E =======================================
seg000:2D92
seg000:2D92
seg000:2D92 sub_2D92	    proc near		    ; CODE XREF: sub_2AF4:loc_2B34p
seg000:2D92					    ; store_74h_3or0+2p
seg000:2D92		    push    ax
seg000:2D93		    mov	    ax,	di
seg000:2D95		    cmp	    al,	byte ptr cs:loc_50E+2
seg000:2D9A		    stc
seg000:2D9B		    jnb	    short loc_2DA7
seg000:2D9D		    and	    al,	7Fh
seg000:2D9F		    cmp	    al,	byte ptr ds:loc_73+2
seg000:2DA3		    stc
seg000:2DA4		    jge	    short loc_2DA7
seg000:2DA6		    clc
seg000:2DA7
seg000:2DA7 loc_2DA7:				    ; CODE XREF: sub_2D92+9j
seg000:2DA7					    ; sub_2D92+12j
seg000:2DA7		    pop	    ax
seg000:2DA8		    retn
seg000:2DA8 sub_2D92	    endp
seg000:2DA8
seg000:2DA9
seg000:2DA9 ; =============== S	U B R O	U T I N	E =======================================
seg000:2DA9
seg000:2DA9
seg000:2DA9 read_74h_al_and0 proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2DA9		    mov	    al,	byte ptr ds:loc_73+1
seg000:2DAC		    mov	    byte ptr ds:loc_73+1, 0
seg000:2DB1		    clc
seg000:2DB2		    retn
seg000:2DB2 read_74h_al_and0 endp
seg000:2DB2
seg000:2DB3
seg000:2DB3 ; =============== S	U B R O	U T I N	E =======================================
seg000:2DB3
seg000:2DB3
seg000:2DB3 ide_?_9	    proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2DB3		    push    ax
seg000:2DB4		    push    cx
seg000:2DB5		    push    si
seg000:2DB6		    push    es
seg000:2DB7		    mov	    ax,	di
seg000:2DB9		    and	    al,	1
seg000:2DBB		    call    sub_323B
seg000:2DBE		    mov	    ch,	es:[si+0Eh]
seg000:2DC2		    mov	    byte ptr ds:loc_43,	ch
seg000:2DC6		    pop	    es
seg000:2DC7		    pop	    si
seg000:2DC8		    pop	    cx
seg000:2DC9		    pop	    ax
seg000:2DCA		    call    ide_?_8
seg000:2DCD		    retn
seg000:2DCD ide_?_9	    endp
seg000:2DCD
seg000:2DCE
seg000:2DCE ; =============== S	U B R O	U T I N	E =======================================
seg000:2DCE
seg000:2DCE
seg000:2DCE ide_?_7	    proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2DCE		    push    cx
seg000:2DCF		    push    es
seg000:2DD0		    push    si
seg000:2DD1		    mov	    ah,	0
seg000:2DD3		    call    ide_?_0
seg000:2DD6		    jb	    short loc_2E11
seg000:2DD8		    mov	    al,	byte ptr ds:loc_46+1
seg000:2DDB		    mov	    cl,	4
seg000:2DDD		    shr	    al,	cl
seg000:2DDF		    and	    al,	1
seg000:2DE1		    call    sub_323B
seg000:2DE4		    test    byte ptr es:[si+0Fh], 1
seg000:2DE9		    jz	    short loc_2E11
seg000:2DEB		    call    PIC_irq_mask?
seg000:2DEE		    add	    dx,	6
seg000:2DF1		    mov	    al,	byte ptr ds:loc_46+1
seg000:2DF4		    out	    dx,	al
seg000:2DF5		    sub	    dx,	6
seg000:2DF8		    call    delay_14_cycles
seg000:2DFB		    call    sub_2E15
seg000:2DFE		    mov	    ah,	50h ; 'P'
seg000:2E00		    call    ide_?_0
seg000:2E03		    call    sub_3055
seg000:2E06		    jnb	    short loc_2E11
seg000:2E08		    cmp	    ah,	1
seg000:2E0B		    jz	    short loc_2E10
seg000:2E0D		    stc
seg000:2E0E		    jmp	    short loc_2E11
seg000:2E10 ; ---------------------------------------------------------------------------
seg000:2E10
seg000:2E10 loc_2E10:				    ; CODE XREF: ide_?_7+3Dj
seg000:2E10		    clc
seg000:2E11
seg000:2E11 loc_2E11:				    ; CODE XREF: ide_?_7+8j
seg000:2E11					    ; ide_?_7+1Bj ...
seg000:2E11		    pop	    si
seg000:2E12		    pop	    es
seg000:2E13		    pop	    cx
seg000:2E14		    retn
seg000:2E14 ide_?_7	    endp
seg000:2E14
seg000:2E15
seg000:2E15 ; =============== S	U B R O	U T I N	E =======================================
seg000:2E15
seg000:2E15
seg000:2E15 sub_2E15	    proc near		    ; CODE XREF: ide_?_7+2Dp
seg000:2E15		    push    ax
seg000:2E16		    push    es
seg000:2E17		    mov	    es,	word ptr cs:loc_48+1
seg000:2E1C		    mov	    byte ptr es:loc_8D+1, 0
seg000:2E22		    pop	    es
seg000:2E23		    add	    dx,	7
seg000:2E26		    mov	    al,	0
seg000:2E28		    out	    dx,	al
seg000:2E29		    sub	    dx,	7
seg000:2E2C		    call    sub_313F
seg000:2E2F		    pop	    ax
seg000:2E30		    retn
seg000:2E30 sub_2E15	    endp
seg000:2E30
seg000:2E31
seg000:2E31 ; =============== S	U B R O	U T I N	E =======================================
seg000:2E31
seg000:2E31
seg000:2E31 ide_?_10	    proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2E31		    mov	    al,	cs:byte_4EE
seg000:2E35		    and	    al,	81h
seg000:2E37		    cmp	    al,	80h ; ''
seg000:2E39		    jnz	    short loc_2E3E
seg000:2E3B		    jmp	    ax100_stc
seg000:2E3E ; ---------------------------------------------------------------------------
seg000:2E3E
seg000:2E3E loc_2E3E:				    ; CODE XREF: ide_?_10+8j
seg000:2E3E		    push    si
seg000:2E3F		    push    es
seg000:2E40		    mov	    ax,	di
seg000:2E42		    mov	    dx,	ax
seg000:2E44		    call    ide_?_5
seg000:2E47		    mov	    ah,	7
seg000:2E49		    mov	    cx,	0
seg000:2E4C		    mov	    dx,	cx
seg000:2E4E		    jb	    short loc_2E80
seg000:2E50		    and	    al,	1
seg000:2E52		    call    sub_323B
seg000:2E55		    mov	    ax,	es:[si]
seg000:2E58		    cmp	    ax,	3FFh
seg000:2E5B		    jle	    short loc_2E60
seg000:2E5D		    mov	    ax,	3FFh
seg000:2E60
seg000:2E60 loc_2E60:				    ; CODE XREF: ide_?_10+2Aj
seg000:2E60		    sub	    ax,	3
seg000:2E63		    mov	    cl,	6
seg000:2E65		    shl	    ah,	cl
seg000:2E67		    mov	    cx,	ax
seg000:2E69		    or	    ch,	es:[si+0Eh]
seg000:2E6D		    xchg    cl,	ch
seg000:2E6F		    mov	    dl,	byte ptr ds:loc_73+2
seg000:2E73		    mov	    dh,	es:[si+2]
seg000:2E77		    dec	    dh
seg000:2E79		    mov	    byte ptr ds:loc_41+1, 0
seg000:2E7E		    xor	    al,	al
seg000:2E80
seg000:2E80 loc_2E80:				    ; CODE XREF: ide_?_10+1Dj
seg000:2E80		    mov	    di,	dx
seg000:2E82		    pop	    es
seg000:2E83		    pop	    si
seg000:2E84		    retn
seg000:2E84 ide_?_10	    endp
seg000:2E84
seg000:2E85
seg000:2E85 ; =============== S	U B R O	U T I N	E =======================================
seg000:2E85
seg000:2E85
seg000:2E85 sub_2E85	    proc near		    ; CODE XREF: ide_?_6+6Bp
seg000:2E85		    push    bx
seg000:2E86		    push    cx
seg000:2E87		    push    dx
seg000:2E88		    mov	    ax,	0
seg000:2E8B		    mov	    cl,	byte ptr ds:loc_73+2
seg000:2E8F		    sub	    cl,	byte ptr cs:loc_511
seg000:2E94		    add	    cl,	byte ptr cs:loc_50E+2
seg000:2E99		    cmp	    cl,	1
seg000:2E9C		    jz	    short loc_2EAC
seg000:2E9E		    add	    dx,	6
seg000:2EA1		    in	    al,	dx
seg000:2EA2		    sub	    dx,	6
seg000:2EA5		    and	    al,	10h
seg000:2EA7		    shr	    al,	4
seg000:2EAA		    mov	    bx,	ax
seg000:2EAC
seg000:2EAC loc_2EAC:				    ; CODE XREF: sub_2E85+17j
seg000:2EAC		    call    ide_?_12
seg000:2EAF		    jb	    short loc_2EBD
seg000:2EB1		    dec	    cl
seg000:2EB3		    jz	    short loc_2EBD
seg000:2EB5		    mov	    ax,	bx
seg000:2EB7		    xor	    ax,	1
seg000:2EBA		    call    ide_?_12
seg000:2EBD
seg000:2EBD loc_2EBD:				    ; CODE XREF: sub_2E85+2Aj
seg000:2EBD					    ; sub_2E85+2Ej
seg000:2EBD		    pop	    dx
seg000:2EBE		    pop	    cx
seg000:2EBF		    pop	    bx
seg000:2EC0		    retn
seg000:2EC0 sub_2E85	    endp
seg000:2EC0
seg000:2EC1
seg000:2EC1 ; =============== S	U B R O	U T I N	E =======================================
seg000:2EC1
seg000:2EC1
seg000:2EC1 ide_?_11	    proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2EC1		    mov	    ax,	di
seg000:2EC3		    and	    al,	1
seg000:2EC5		    call    ide_?_12
seg000:2EC8		    retn
seg000:2EC8 ide_?_11	    endp
seg000:2EC8
seg000:2EC9
seg000:2EC9 ; =============== S	U B R O	U T I N	E =======================================
seg000:2EC9
seg000:2EC9
seg000:2EC9 ide_?_12	    proc near		    ; CODE XREF: sub_2E85:loc_2EACp
seg000:2EC9					    ; sub_2E85+35p ...
seg000:2EC9		    push    cx
seg000:2ECA		    push    si
seg000:2ECB		    push    es
seg000:2ECC		    call    sub_323B
seg000:2ECF		    mov	    cl,	4
seg000:2ED1		    shl	    al,	cl
seg000:2ED3		    or	    al,	0A0h
seg000:2ED5		    mov	    cl,	es:[si+2]
seg000:2ED9		    dec	    cl
seg000:2EDB		    or	    cl,	al
seg000:2EDD		    mov	    byte ptr ds:loc_46+1, cl
seg000:2EE1		    mov	    byte ptr ds:loc_43+2, 0
seg000:2EE6		    mov	    cl,	es:[si+0Fh]
seg000:2EEA		    mov	    byte ptr ds:loc_46,	cl
seg000:2EEE		    mov	    ah,	0F0h ; 'ð'
seg000:2EF0		    mov	    al,	0
seg000:2EF2		    call    ide_?
seg000:2EF5		    jb	    short loc_2EFC
seg000:2EF7		    mov	    ah,	0
seg000:2EF9		    call    ide_?_0
seg000:2EFC
seg000:2EFC loc_2EFC:				    ; CODE XREF: ide_?_12+2Cj
seg000:2EFC		    mov	    byte ptr ds:loc_46,	0
seg000:2F01		    mov	    cl,	es:[si+0Eh]
seg000:2F05		    mov	    byte ptr ds:loc_43,	cl
seg000:2F09		    mov	    ah,	91h ; ''
seg000:2F0B		    mov	    al,	0
seg000:2F0D		    call    ide_?
seg000:2F10		    jb	    short loc_2F29
seg000:2F12		    mov	    ah,	0
seg000:2F14		    call    ide_?_0
seg000:2F17		    jb	    short loc_2F29
seg000:2F19		    call    sub_3055
seg000:2F1C		    jnb	    short loc_2F29
seg000:2F1E		    cmp	    ah,	40h ; '@'
seg000:2F21		    jz	    short loc_2F26
seg000:2F23		    stc
seg000:2F24		    jmp	    short loc_2F29
seg000:2F26 ; ---------------------------------------------------------------------------
seg000:2F26
seg000:2F26 loc_2F26:				    ; CODE XREF: ide_?_12+58j
seg000:2F26		    mov	    ah,	0
seg000:2F28		    clc
seg000:2F29
seg000:2F29 loc_2F29:				    ; CODE XREF: ide_?_12+47j
seg000:2F29					    ; ide_?_12+4Ej ...
seg000:2F29		    mov	    es,	word ptr cs:loc_48+1
seg000:2F2E		    mov	    byte ptr es:loc_8D+1, 0
seg000:2F34		    pop	    es
seg000:2F35		    pop	    si
seg000:2F36		    pop	    cx
seg000:2F37		    retn
seg000:2F37 ide_?_12	    endp
seg000:2F37
seg000:2F38
seg000:2F38 ; =============== S	U B R O	U T I N	E =======================================
seg000:2F38
seg000:2F38
seg000:2F38 ide_?_4	    proc near		    ; CODE XREF: ide_?_15+4p
seg000:2F38					    ; ide_?_15+8p ...
seg000:2F38		    call    ide_?_3
seg000:2F3B		    retn
seg000:2F3B ide_?_4	    endp
seg000:2F3B
seg000:2F3C
seg000:2F3C ; =============== S	U B R O	U T I N	E =======================================
seg000:2F3C
seg000:2F3C
seg000:2F3C ide_?_8	    proc near		    ; CODE XREF: ide_?_9+17p
seg000:2F3C					    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:2F3C		    push    bp
seg000:2F3D		    mov	    bp,	ax
seg000:2F3F		    mov	    al,	ah
seg000:2F41		    push    bx
seg000:2F42		    push    es
seg000:2F43		    call    sub_324F
seg000:2F46		    jb	    short loc_2F4D
seg000:2F48		    mov	    ax,	bp
seg000:2F4A		    call    ide_?_3
seg000:2F4D
seg000:2F4D loc_2F4D:				    ; CODE XREF: ide_?_8+Aj
seg000:2F4D		    pop	    es
seg000:2F4E		    pop	    bx
seg000:2F4F		    pop	    bp
seg000:2F50		    retn
seg000:2F50 ide_?_8	    endp
seg000:2F50
seg000:2F51
seg000:2F51 ; =============== S	U B R O	U T I N	E =======================================
seg000:2F51
seg000:2F51
seg000:2F51 ide_?_3	    proc near		    ; CODE XREF: ide_?_4p
seg000:2F51					    ; ide_?_8+Ep
seg000:2F51		    push    bp
seg000:2F52		    mov	    bp,	ax
seg000:2F54		    push    bx
seg000:2F55		    mov	    bx,	offset unk_3722
seg000:2F58		    xchg    al,	ah
seg000:2F5A		    xlat    byte ptr cs:[bx]
seg000:2F5C		    pop	    bx
seg000:2F5D		    xchg    al,	ah
seg000:2F5F		    test    byte ptr ds:loc_76,	0C0h
seg000:2F64		    jz	    short loc_2F71
seg000:2F66		    test    cs:stru_3FC.data6, 20h
seg000:2F6C		    jz	    short loc_2F71
seg000:2F6E		    or	    ah,	1
seg000:2F71
seg000:2F71 loc_2F71:				    ; CODE XREF: ide_?_3+13j
seg000:2F71					    ; ide_?_3+1Bj
seg000:2F71		    call    ide_?
seg000:2F74		    jb	    short loc_2F9C
seg000:2F76		    test    cs:stru_3FC.data6, 0Ch
seg000:2F7C		    jnz	    short loc_2F99
seg000:2F7E		    test    cs:stru_3FC.data6, 40h
seg000:2F84		    jnz	    short loc_2F8F
seg000:2F86		    mov	    ah,	40h ; '@'
seg000:2F88		    call    ide_?_0
seg000:2F8B		    jb	    short loc_2F9C
seg000:2F8D		    jmp	    short loc_2F94
seg000:2F8F ; ---------------------------------------------------------------------------
seg000:2F8F
seg000:2F8F loc_2F8F:				    ; CODE XREF: ide_?_3+33j
seg000:2F8F		    call    sub_313F
seg000:2F92		    jb	    short loc_2F9C
seg000:2F94
seg000:2F94 loc_2F94:				    ; CODE XREF: ide_?_3+3Cj
seg000:2F94		    call    sub_3055
seg000:2F97		    jmp	    short loc_2F9C
seg000:2F99 ; ---------------------------------------------------------------------------
seg000:2F99
seg000:2F99 loc_2F99:				    ; CODE XREF: ide_?_3+2Bj
seg000:2F99		    call    sub_2F9E
seg000:2F9C
seg000:2F9C loc_2F9C:				    ; CODE XREF: ide_?_3+23j
seg000:2F9C					    ; ide_?_3+3Aj ...
seg000:2F9C		    pop	    bp
seg000:2F9D		    retn
seg000:2F9D ide_?_3	    endp
seg000:2F9D
seg000:2F9E
seg000:2F9E ; =============== S	U B R O	U T I N	E =======================================
seg000:2F9E
seg000:2F9E
seg000:2F9E sub_2F9E	    proc near		    ; CODE XREF: ide_?_3:loc_2F99p
seg000:2F9E		    push    cx
seg000:2F9F		    push    si
seg000:2FA0		    push    di
seg000:2FA1		    push    es
seg000:2FA2		    cld
seg000:2FA3		    mov	    si,	bx
seg000:2FA5		    mov	    di,	si
seg000:2FA7		    test    cs:stru_3FC.data6, 8
seg000:2FAD		    jnz	    short loc_2FC9
seg000:2FAF		    call    sub_31AE
seg000:2FB2		    jb	    short loc_2FC0
seg000:2FB4
seg000:2FB4 loc_2FB4:				    ; CODE XREF: sub_2F9E+77j
seg000:2FB4		    push    ds
seg000:2FB5		    push    es
seg000:2FB6		    pop	    ds
seg000:2FB7		    mov	    cx,	100h
seg000:2FBA		    rep	outsw
seg000:2FBC		    pop	    ds
seg000:2FBD		    call    sub_3030
seg000:2FC0
seg000:2FC0 loc_2FC0:				    ; CODE XREF: sub_2F9E+14j
seg000:2FC0		    jb	    short loc_302B
seg000:2FC2		    call    sub_313F
seg000:2FC5		    jb	    short loc_302B
seg000:2FC7		    jmp	    short loc_2FF5
seg000:2FC9 ; ---------------------------------------------------------------------------
seg000:2FC9
seg000:2FC9 loc_2FC9:				    ; CODE XREF: sub_2F9E+Fj
seg000:2FC9					    ; sub_2F9E+80j
seg000:2FC9		    call    sub_313F
seg000:2FCC		    jb	    short loc_302B
seg000:2FCE		    call    sub_3055
seg000:2FD1		    push    ax
seg000:2FD2		    pushf
seg000:2FD3		    mov	    cx,	100h
seg000:2FD6		    cli
seg000:2FD7		    cld
seg000:2FD8		    rep	insw
seg000:2FDA		    sti
seg000:2FDB		    popf
seg000:2FDC		    pop	    ax
seg000:2FDD		    jnb	    short loc_2FEE
seg000:2FDF		    cmp	    ah,	3Eh ; '>'
seg000:2FE2		    stc
seg000:2FE3		    jz	    short loc_2FEE
seg000:2FE5		    push    ax
seg000:2FE6		    call    sub_3030
seg000:2FE9		    pop	    ax
seg000:2FEA		    stc
seg000:2FEB		    jmp	    short loc_302B
seg000:2FEB ; ---------------------------------------------------------------------------
seg000:2FED		    db	90h ; 
seg000:2FEE ; ---------------------------------------------------------------------------
seg000:2FEE
seg000:2FEE loc_2FEE:				    ; CODE XREF: sub_2F9E+3Fj
seg000:2FEE					    ; sub_2F9E+45j
seg000:2FEE		    call    sub_3030
seg000:2FF1		    jb	    short loc_302B
seg000:2FF3		    jmp	    short loc_3000
seg000:2FF5 ; ---------------------------------------------------------------------------
seg000:2FF5
seg000:2FF5 loc_2FF5:				    ; CODE XREF: sub_2F9E+29j
seg000:2FF5		    call    sub_3055
seg000:2FF8		    jnb	    short loc_3000
seg000:2FFA		    cmp	    ah,	3Eh ; '>'
seg000:2FFD		    stc
seg000:2FFE		    jnz	    short loc_302B
seg000:3000
seg000:3000 loc_3000:				    ; CODE XREF: sub_2F9E+55j
seg000:3000					    ; sub_2F9E+5Aj
seg000:3000		    push    es
seg000:3001		    mov	    es,	word ptr cs:loc_48+1
seg000:3006		    test    cs:stru_3FC.data6, 8
seg000:300C		    jnz	    short loc_3019
seg000:300E		    test    byte ptr es:loc_8B+1, 8
seg000:3014		    pop	    es
seg000:3015		    jnz	    short loc_2FB4
seg000:3017		    jmp	    short loc_3020
seg000:3019 ; ---------------------------------------------------------------------------
seg000:3019
seg000:3019 loc_3019:				    ; CODE XREF: sub_2F9E+6Ej
seg000:3019		    dec	    byte ptr ds:loc_43
seg000:301D		    pop	    es
seg000:301E		    jnz	    short loc_2FC9
seg000:3020
seg000:3020 loc_3020:				    ; CODE XREF: sub_2F9E+79j
seg000:3020		    cmp	    ah,	3Eh ; '>'
seg000:3023		    clc
seg000:3024		    jnz	    short loc_302B
seg000:3026		    mov	    ah,	byte ptr ds:loc_73+1
seg000:302A		    stc
seg000:302B
seg000:302B loc_302B:				    ; CODE XREF: sub_2F9E:loc_2FC0j
seg000:302B					    ; sub_2F9E+27j ...
seg000:302B		    pop	    es
seg000:302C		    pop	    di
seg000:302D		    pop	    si
seg000:302E		    pop	    cx
seg000:302F		    retn
seg000:302F sub_2F9E	    endp
seg000:302F
seg000:3030
seg000:3030 ; =============== S	U B R O	U T I N	E =======================================
seg000:3030
seg000:3030
seg000:3030 sub_3030	    proc near		    ; CODE XREF: sub_2F9E+1Fp
seg000:3030					    ; sub_2F9E+48p ...
seg000:3030		    push    cx
seg000:3031		    test    byte ptr ds:loc_48,	2
seg000:3036		    jz	    short loc_3053
seg000:3038		    call    sub_31AE
seg000:303B		    jb	    short loc_3053
seg000:303D		    mov	    cx,	4
seg000:3040		    test    cs:stru_3FC.data6, 8
seg000:3046		    jnz	    short loc_304F
seg000:3048
seg000:3048 loc_3048:				    ; CODE XREF: sub_3030+1Bj
seg000:3048		    lods    byte ptr es:[si]
seg000:304A		    out	    dx,	al
seg000:304B		    loop    loc_3048
seg000:304D		    jmp	    short loc_3053
seg000:304F ; ---------------------------------------------------------------------------
seg000:304F
seg000:304F loc_304F:				    ; CODE XREF: sub_3030+16j
seg000:304F					    ; sub_3030+21j
seg000:304F		    in	    al,	dx
seg000:3050		    stosb
seg000:3051		    loop    loc_304F
seg000:3053
seg000:3053 loc_3053:				    ; CODE XREF: sub_3030+6j
seg000:3053					    ; sub_3030+Bj ...
seg000:3053		    pop	    cx
seg000:3054		    retn
seg000:3054 sub_3030	    endp
seg000:3054
seg000:3055
seg000:3055 ; =============== S	U B R O	U T I N	E =======================================
seg000:3055
seg000:3055
seg000:3055 sub_3055	    proc near		    ; CODE XREF: ide_?_7+35p
seg000:3055					    ; ide_?_12+50p ...
seg000:3055		    push    bx
seg000:3056		    push    cx
seg000:3057		    push    es
seg000:3058		    call    sub_3183
seg000:305B		    mov	    bl,	byte ptr cs:stru_405.check
seg000:3060		    mov	    bh,	0
seg000:3062		    xor	    ah,	50h
seg000:3065		    mov	    ch,	cs:[bx+375Dh]
seg000:306A		    and	    ah,	ch
seg000:306C		    test    ah,	0FEh
seg000:306F		    jz	    short loc_3092
seg000:3071		    push    ax
seg000:3072		    call    read_ah_from_
seg000:3075		    cmp	    ah,	11h
seg000:3078		    jnz	    short loc_308C
seg000:307A		    mov	    byte ptr ds:loc_73+1, ah
seg000:307E		    pop	    ax
seg000:307F		    and	    ah,	0FBh
seg000:3082		    test    ah,	1
seg000:3085		    jnz	    short loc_3097
seg000:3087		    mov	    ah,	3Eh ; '>'
seg000:3089		    stc
seg000:308A		    jmp	    short loc_309F
seg000:308C ; ---------------------------------------------------------------------------
seg000:308C
seg000:308C loc_308C:				    ; CODE XREF: sub_3055+23j
seg000:308C		    add	    sp,	2
seg000:308F		    jmp	    short loc_309A
seg000:308F ; ---------------------------------------------------------------------------
seg000:3091		    db	90h ; 
seg000:3092 ; ---------------------------------------------------------------------------
seg000:3092
seg000:3092 loc_3092:				    ; CODE XREF: sub_3055+1Aj
seg000:3092		    test    ah,	1
seg000:3095		    jz	    short loc_309F
seg000:3097
seg000:3097 loc_3097:				    ; CODE XREF: sub_3055+30j
seg000:3097		    call    read_ah_from_
seg000:309A
seg000:309A loc_309A:				    ; CODE XREF: sub_3055+3Aj
seg000:309A		    stc
seg000:309B		    mov	    al,	0
seg000:309D		    jb	    short loc_30A8
seg000:309F
seg000:309F loc_309F:				    ; CODE XREF: sub_3055+35j
seg000:309F					    ; sub_3055+40j
seg000:309F		    mov	    es,	word ptr cs:loc_48+1
seg000:30A4		    mov	    al,	byte ptr es:loc_8B+1
seg000:30A8
seg000:30A8 loc_30A8:				    ; CODE XREF: sub_3055+48j
seg000:30A8		    pop	    es
seg000:30A9		    pop	    cx
seg000:30AA		    pop	    bx
seg000:30AB		    retn
seg000:30AB sub_3055	    endp
seg000:30AB
seg000:30AC
seg000:30AC ; =============== S	U B R O	U T I N	E =======================================
seg000:30AC
seg000:30AC
seg000:30AC read_ah_from_   proc near		    ; CODE XREF: sub_3055+1Dp
seg000:30AC					    ; sub_3055:loc_3097p
seg000:30AC		    push    bx
seg000:30AD		    push    si
seg000:30AE		    mov	    bx,	8
seg000:30B1		    cmp	    ah,	1
seg000:30B4		    jg	    short loc_30C2
seg000:30B6		    mov	    si,	offset table_pointer_?
seg000:30B9
seg000:30B9 loc_30B9:				    ; CODE XREF: read_ah_from_+12j
seg000:30B9		    shl	    al,	1
seg000:30BB		    jb	    short loc_30CC
seg000:30BD		    dec	    bx
seg000:30BE		    jnz	    short loc_30B9
seg000:30C0		    jmp	    short loc_30CC
seg000:30C2 ; ---------------------------------------------------------------------------
seg000:30C2
seg000:30C2 loc_30C2:				    ; CODE XREF: read_ah_from_+8j
seg000:30C2		    mov	    si,	offset table_pointer_?_0
seg000:30C5
seg000:30C5 loc_30C5:				    ; CODE XREF: read_ah_from_+1Ej
seg000:30C5		    shl	    ah,	1
seg000:30C7		    jb	    short loc_30CC
seg000:30C9		    dec	    bx
seg000:30CA		    jnz	    short loc_30C5
seg000:30CC
seg000:30CC loc_30CC:				    ; CODE XREF: read_ah_from_+Fj
seg000:30CC					    ; read_ah_from_+14j ...
seg000:30CC		    mov	    ah,	cs:[bx+si]
seg000:30CF		    pop	    si
seg000:30D0		    pop	    bx
seg000:30D1		    retn
seg000:30D1 read_ah_from_   endp
seg000:30D1
seg000:30D2
seg000:30D2 ; =============== S	U B R O	U T I N	E =======================================
seg000:30D2
seg000:30D2
seg000:30D2 ide_?	    proc near		    ; CODE XREF: ide_?_12+29p
seg000:30D2					    ; ide_?_12+44p ...
seg000:30D2		    push    cx
seg000:30D3		    push    dx
seg000:30D4		    push    si
seg000:30D5		    mov	    byte ptr ds:loc_48,	ah
seg000:30D9		    mov	    ah,	0
seg000:30DB		    call    ide_?_0
seg000:30DE		    jb	    short loc_3124
seg000:30E0		    cmp	    byte ptr ds:loc_48,	0F0h ; 'ð'
seg000:30E5		    jz	    short loc_3106
seg000:30E7		    cmp	    byte ptr ds:loc_48,	91h ; ''
seg000:30EC		    jz	    short loc_3106
seg000:30EE		    cmp	    byte ptr ds:loc_48,	0E0h ; 'à'
seg000:30F3		    jz	    short loc_3106
seg000:30F5		    add	    dx,	6
seg000:30F8		    mov	    al,	byte ptr ds:loc_46+1
seg000:30FB		    out	    dx,	al
seg000:30FC		    sub	    dx,	6
seg000:30FF		    mov	    ah,	50h ; 'P'
seg000:3101		    call    ide_?_0
seg000:3104		    jb	    short loc_3126
seg000:3106
seg000:3106 loc_3106:				    ; CODE XREF: ide_?+13j
seg000:3106					    ; ide_?+1Aj ...
seg000:3106		    push    es
seg000:3107		    mov	    es,	word ptr cs:loc_48+1
seg000:310C		    mov	    byte ptr es:loc_8D+1, 0
seg000:3112		    pop	    es
seg000:3113		    call    PIC_irq_mask?
seg000:3116		    mov	    si,	42h ; 'B'
seg000:3119		    mov	    cx,	7
seg000:311C		    add	    dx,	1
seg000:311F
seg000:311F loc_311F:				    ; CODE XREF: ide_?+50j
seg000:311F		    lodsb
seg000:3120		    out	    dx,	al
seg000:3121		    inc	    dx
seg000:3122		    loop    loc_311F
seg000:3124
seg000:3124 loc_3124:				    ; CODE XREF: ide_?+Cj
seg000:3124		    mov	    ah,	20h ; ' '
seg000:3126
seg000:3126 loc_3126:				    ; CODE XREF: ide_?+32j
seg000:3126		    pop	    si
seg000:3127		    pop	    dx
seg000:3128		    pop	    cx
seg000:3129		    retn
seg000:3129 ide_?	    endp
seg000:3129
seg000:312A
seg000:312A ; =============== S	U B R O	U T I N	E =======================================
seg000:312A
seg000:312A
seg000:312A PIC_irq_mask?   proc near		    ; CODE XREF: ide_?_14+4p
seg000:312A					    ; ide_?_7+1Dp ...
seg000:312A		    push    dx
seg000:312B		    mov	    dx,	0A1h ; '¡'
seg000:312E		    in	    al,	dx	    ; Interrupt	Controller #2, 8259A
seg000:312F		    and	    al,	0BFh
seg000:3131		    jmp	    short $+2
seg000:3133		    out	    dx,	al	    ; Interrupt	Controller #2, 8259A
seg000:3134		    mov	    dx,	21h ; '!'
seg000:3137		    in	    al,	dx	    ; Interrupt	controller, 8259A.
seg000:3138		    and	    al,	0FBh
seg000:313A		    jmp	    short $+2
seg000:313C		    out	    dx,	al	    ; Interrupt	controller, 8259A.
seg000:313D		    pop	    dx
seg000:313E		    retn
seg000:313E PIC_irq_mask?   endp
seg000:313E
seg000:313F
seg000:313F ; =============== S	U B R O	U T I N	E =======================================
seg000:313F
seg000:313F
seg000:313F sub_313F	    proc near		    ; CODE XREF: sub_2E15+17p
seg000:313F					    ; ide_?_3:loc_2F8Fp ...
seg000:313F		    push    bx
seg000:3140		    push    cx
seg000:3141		    push    si
seg000:3142		    push    es
seg000:3143		    sti
seg000:3144		    mov	    es,	word ptr cs:loc_48+1
seg000:3149		    mov	    byte ptr ds:loc_73+1, 0
seg000:314E		    cmp	    byte ptr cs:stru_405.check,	11h
seg000:3154		    mov	    bh,	0A0h ; ' '
seg000:3156		    jz	    short loc_315A
seg000:3158		    mov	    bh,	25h ; '%'
seg000:315A
seg000:315A loc_315A:				    ; CODE XREF: sub_313F+17j
seg000:315A		    mov	    cx,	0FFFFh
seg000:315D		    mov	    ax,	9000h
seg000:3160		    clc
seg000:3161		    int	    15h		    ; OS HOOK -	DEVICE BUSY LOOP (AT,XT2,XT286,CONV,PS)
seg000:3161					    ; AL = disk
seg000:3163		    jb	    short loc_3174
seg000:3165
seg000:3165 loc_3165:				    ; CODE XREF: sub_313F+2Ej
seg000:3165					    ; sub_313F+32j
seg000:3165		    test    byte ptr es:loc_8D+1, 80h
seg000:316B		    jnz	    short loc_3178
seg000:316D		    loop    loc_3165
seg000:316F		    dec	    bh
seg000:3171		    jnz	    short loc_3165
seg000:3173		    stc
seg000:3174
seg000:3174 loc_3174:				    ; CODE XREF: sub_313F+24j
seg000:3174		    mov	    ah,	80h ; ''
seg000:3176		    jmp	    short loc_317E
seg000:3178 ; ---------------------------------------------------------------------------
seg000:3178
seg000:3178 loc_3178:				    ; CODE XREF: sub_313F+2Cj
seg000:3178		    mov	    byte ptr es:loc_8D+1, 0
seg000:317E
seg000:317E loc_317E:				    ; CODE XREF: sub_313F+37j
seg000:317E		    pop	    es
seg000:317F		    pop	    si
seg000:3180		    pop	    cx
seg000:3181		    pop	    bx
seg000:3182		    retn
seg000:3182 sub_313F	    endp
seg000:3182
seg000:3183
seg000:3183 ; =============== S	U B R O	U T I N	E =======================================
seg000:3183
seg000:3183
seg000:3183 sub_3183	    proc near		    ; CODE XREF: sub_3055+3p
seg000:3183		    push    dx
seg000:3184		    push    es
seg000:3185		    mov	    es,	word ptr cs:loc_48+1
seg000:318A		    add	    dx,	7
seg000:318D		    in	    al,	dx
seg000:318E		    mov	    byte ptr es:loc_8B+1, al
seg000:3192		    xchg    ah,	al
seg000:3194		    add	    dx,	0FFFAh
seg000:3197		    test    ah,	1
seg000:319A		    jnz	    short loc_31A0
seg000:319C		    xor	    al,	al
seg000:319E		    jmp	    short loc_31A7
seg000:31A0 ; ---------------------------------------------------------------------------
seg000:31A0
seg000:31A0 loc_31A0:				    ; CODE XREF: sub_3183+17j
seg000:31A0		    call    delay_14_cycles
seg000:31A3		    call    delay_14_cycles
seg000:31A6		    in	    al,	dx
seg000:31A7
seg000:31A7 loc_31A7:				    ; CODE XREF: sub_3183+1Bj
seg000:31A7		    mov	    byte ptr es:loc_8D,	al
seg000:31AB		    pop	    es
seg000:31AC		    pop	    dx
seg000:31AD		    retn
seg000:31AD sub_3183	    endp
seg000:31AD
seg000:31AE
seg000:31AE ; =============== S	U B R O	U T I N	E =======================================
seg000:31AE
seg000:31AE
seg000:31AE sub_31AE	    proc near		    ; CODE XREF: sub_2F9E+11p
seg000:31AE					    ; sub_3030+8p
seg000:31AE		    push    cx
seg000:31AF		    push    dx
seg000:31B0		    mov	    ah,	80h ; ''
seg000:31B2		    mov	    cx,	0FFh
seg000:31B5		    add	    dx,	7
seg000:31B8		    clc
seg000:31B9
seg000:31B9 loc_31B9:				    ; CODE XREF: sub_31AE+1Dj
seg000:31B9		    in	    al,	dx
seg000:31BA		    push    ax
seg000:31BB		    and	    al,	8
seg000:31BD		    pop	    ax
seg000:31BE		    jnz	    short loc_31CE
seg000:31C0		    test    al,	80h
seg000:31C2		    jnz	    short loc_31C8
seg000:31C4		    test    al,	1
seg000:31C6		    jnz	    short loc_31CE
seg000:31C8
seg000:31C8 loc_31C8:				    ; CODE XREF: sub_31AE+14j
seg000:31C8		    call    delay_14_cycles
seg000:31CB		    loop    loc_31B9
seg000:31CD		    stc
seg000:31CE
seg000:31CE loc_31CE:				    ; CODE XREF: sub_31AE+10j
seg000:31CE					    ; sub_31AE+18j
seg000:31CE		    pop	    dx
seg000:31CF		    pop	    cx
seg000:31D0		    retn
seg000:31D0 sub_31AE	    endp
seg000:31D0
seg000:31D1
seg000:31D1 ; =============== S	U B R O	U T I N	E =======================================
seg000:31D1
seg000:31D1
seg000:31D1 ide_?_0	    proc near		    ; CODE XREF: ide_?_6+56p
seg000:31D1					    ; ide_?_14+9p ...
seg000:31D1		    push    bx
seg000:31D2		    push    cx
seg000:31D3		    push    dx
seg000:31D4		    push    si
seg000:31D5		    add	    dx,	7
seg000:31D8		    mov	    cx,	0FFFFh
seg000:31DB
seg000:31DB ide_busywait:			    ; CODE XREF: ide_?_0:ide_busyj
seg000:31DB		    call    delay_28_cycles
seg000:31DE		    in	    al,	dx
seg000:31DF		    test    al,	80h
seg000:31E1		    jnz	    short ide_busy
seg000:31E3		    push    ax
seg000:31E4		    and	    al,	ah
seg000:31E6		    cmp	    al,	ah
seg000:31E8		    pop	    ax
seg000:31E9		    jz	    short loc_3209
seg000:31EB
seg000:31EB ide_busy:				    ; CODE XREF: ide_?_0+10j
seg000:31EB		    loop    ide_busywait
seg000:31ED		    test    al,	80h
seg000:31EF		    jz	    short loc_31F8
seg000:31F1		    mov	    ah,	80h ; ''
seg000:31F3		    jmp	    short loc_3208
seg000:31F5 ; ---------------------------------------------------------------------------
seg000:31F5		    nop
seg000:31F6		    mov	    ah,	al
seg000:31F8
seg000:31F8 loc_31F8:				    ; CODE XREF: ide_?_0+1Ej
seg000:31F8		    mov	    bx,	8
seg000:31FB		    mov	    si,	offset table_pointer_?_0
seg000:31FE
seg000:31FE loc_31FE:				    ; CODE XREF: ide_?_0+32j
seg000:31FE		    shl	    ah,	1
seg000:3200		    jb	    short loc_3205
seg000:3202		    dec	    bx
seg000:3203		    jnz	    short loc_31FE
seg000:3205
seg000:3205 loc_3205:				    ; CODE XREF: ide_?_0+2Fj
seg000:3205		    mov	    ah,	cs:[bx+si]
seg000:3208
seg000:3208 loc_3208:				    ; CODE XREF: ide_?_0+22j
seg000:3208		    stc
seg000:3209
seg000:3209 loc_3209:				    ; CODE XREF: ide_?_0+18j
seg000:3209		    pop	    si
seg000:320A		    pop	    dx
seg000:320B		    pop	    cx
seg000:320C		    pop	    bx
seg000:320D		    retn
seg000:320D ide_?_0	    endp
seg000:320D
seg000:320E
seg000:320E ; =============== S	U B R O	U T I N	E =======================================
seg000:320E
seg000:320E
seg000:320E delay_14_cycles proc near		    ; CODE XREF: ide_?_7+2Ap
seg000:320E					    ; sub_3183:loc_31A0p ...
seg000:320E		    push    cx
seg000:320F		    mov	    cx,	14h
seg000:3212
seg000:3212 loc_3212:				    ; CODE XREF: delay_14_cycles:loc_3212j
seg000:3212		    loop    loc_3212
seg000:3214		    pop	    cx
seg000:3215		    retn
seg000:3215 delay_14_cycles endp
seg000:3215
seg000:3216
seg000:3216 ; =============== S	U B R O	U T I N	E =======================================
seg000:3216
seg000:3216
seg000:3216 delay_28_cycles proc near		    ; CODE XREF: ide_?_0:ide_busywaitp
seg000:3216		    push    cx
seg000:3217		    mov	    cx,	28h ; '('
seg000:321A
seg000:321A loc_321A:				    ; CODE XREF: delay_28_cycles:loc_321Aj
seg000:321A		    loop    loc_321A
seg000:321C		    pop	    cx
seg000:321D		    retn
seg000:321D delay_28_cycles endp
seg000:321D
seg000:321E
seg000:321E ; =============== S	U B R O	U T I N	E =======================================
seg000:321E
seg000:321E
seg000:321E ide_?_5	    proc near		    ; CODE XREF: sub_2AF4:loc_2B2Cp
seg000:321E					    ; ide_?_6+1Ep ...
seg000:321E		    push    bx
seg000:321F		    push    cx
seg000:3220		    sub	    dl,	80h ; ''
seg000:3223		    cmp	    dl,	2
seg000:3226		    jnb	    short loc_3235
seg000:3228		    mov	    dx,	cs:ide_IO_port
seg000:322D		    mov	    byte ptr ds:loc_76+1, 0
seg000:3232		    clc
seg000:3233		    jmp	    short loc_3238
seg000:3235 ; ---------------------------------------------------------------------------
seg000:3235
seg000:3235 loc_3235:				    ; CODE XREF: ide_?_5+8j
seg000:3235		    call    ax100_stc
seg000:3238
seg000:3238 loc_3238:				    ; CODE XREF: ide_?_5+15j
seg000:3238		    pop	    cx
seg000:3239		    pop	    bx
seg000:323A		    retn
seg000:323A ide_?_5	    endp
seg000:323A
seg000:323B
seg000:323B ; =============== S	U B R O	U T I N	E =======================================
seg000:323B
seg000:323B
seg000:323B sub_323B	    proc near		    ; CODE XREF: sub_2AF4+8Bp
seg000:323B					    ; store_74h_3or0+Bp ...
seg000:323B		    push    ax
seg000:323C		    push    ds
seg000:323D		    mov	    ah,	41h ; 'A'
seg000:323F		    dec	    al
seg000:3241		    js	    short loc_3245
seg000:3243		    mov	    ah,	46h ; 'F'
seg000:3245
seg000:3245 loc_3245:				    ; CODE XREF: sub_323B+6j
seg000:3245		    mov	    al,	ah
seg000:3247		    call    table_lookup_ptr
seg000:324A		    push    ds
seg000:324B		    pop	    es
seg000:324C		    pop	    ds
seg000:324D		    pop	    ax
seg000:324E		    retn
seg000:324E sub_323B	    endp
seg000:324E
seg000:324F
seg000:324F ; =============== S	U B R O	U T I N	E =======================================
seg000:324F
seg000:324F
seg000:324F sub_324F	    proc near		    ; CODE XREF: ide_?_8+7p
seg000:324F		    push    cx
seg000:3250		    push    dx
seg000:3251		    cmp	    ah,	5
seg000:3254		    jz	    short loc_3292
seg000:3256		    cmp	    byte ptr ds:loc_43,	80h ; ''
seg000:325B		    ja	    short loc_328C
seg000:325D		    push    bx
seg000:325E		    mov	    cl,	4
seg000:3260		    shr	    bx,	cl
seg000:3262		    mov	    dx,	es
seg000:3264		    add	    dx,	bx
seg000:3266		    mov	    es,	dx
seg000:3268		    pop	    bx
seg000:3269		    and	    bx,	0Fh
seg000:326C		    test    byte ptr ds:loc_48,	2
seg000:3271		    jnz	    short loc_327C
seg000:3273		    mov	    ch,	0
seg000:3275		    cmp	    byte ptr ds:loc_43,	80h ; ''
seg000:327A		    jmp	    short loc_3283
seg000:327C ; ---------------------------------------------------------------------------
seg000:327C
seg000:327C loc_327C:				    ; CODE XREF: sub_324F+22j
seg000:327C		    mov	    ch,	4
seg000:327E		    cmp	    byte ptr ds:loc_43,	7Fh ; ''
seg000:3283
seg000:3283 loc_3283:				    ; CODE XREF: sub_324F+2Bj
seg000:3283		    jnz	    short loc_3287
seg000:3285		    cmp	    bl,	ch
seg000:3287
seg000:3287 loc_3287:				    ; CODE XREF: sub_324F:loc_3283j
seg000:3287		    ja	    short loc_328C
seg000:3289		    clc
seg000:328A		    jmp	    short loc_3292
seg000:328C ; ---------------------------------------------------------------------------
seg000:328C
seg000:328C loc_328C:				    ; CODE XREF: sub_324F+Cj
seg000:328C					    ; sub_324F:loc_3287j
seg000:328C		    stc
seg000:328D		    mov	    ah,	9
seg000:328F		    mov	    al,	byte ptr ds:loc_43
seg000:3292
seg000:3292 loc_3292:				    ; CODE XREF: sub_324F+5j
seg000:3292					    ; sub_324F+3Bj
seg000:3292		    pop	    dx
seg000:3293		    pop	    cx
seg000:3294		    retn
seg000:3294 sub_324F	    endp
seg000:3294
seg000:3295
seg000:3295 ; =============== S	U B R O	U T I N	E =======================================
seg000:3295
seg000:3295
seg000:3295 Iret_complete_? proc far		    ; DATA XREF: seg000:FF2Fo
seg000:3295		    push    ax
seg000:3296		    push    es
seg000:3297		    mov	    al,	20h ; ' '
seg000:3299		    mov	    es,	word ptr cs:loc_48+1
seg000:329E		    mov	    byte ptr es:loc_8D+1, 0FFh
seg000:32A4		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:32A6		    jmp	    short $+2
seg000:32A8		    out	    0A0h, al	    ; PIC 2  same as 0020 for PIC 1
seg000:32AA		    mov	    ax,	9100h
seg000:32AD		    sti
seg000:32AE		    int	    15h		    ; OS HOOK -	SET FLAG AND COMPLETE INTERRUPT	(AT,XT2,XT286,CONV,PS)
seg000:32AE					    ; AL = type	code, ES:BX -> request block for type codes 80h	through	BFh
seg000:32B0		    pop	    es
seg000:32B1		    pop	    ax
seg000:32B2		    iret
seg000:32B2 Iret_complete_? endp
seg000:32B2
seg000:32B3
seg000:32B3 ; =============== S	U B R O	U T I N	E =======================================
seg000:32B3
seg000:32B3
seg000:32B3 sub_32B3	    proc near		    ; CODE XREF: sub_2A71+49p
seg000:32B3		    push    ax
seg000:32B4		    push    bx
seg000:32B5		    push    cx
seg000:32B6		    push    si
seg000:32B7		    push    es
seg000:32B8		    mov	    al,	dl
seg000:32BA		    and	    al,	7Fh
seg000:32BC		    call    sub_323B
seg000:32BF		    mov	    cl,	es:[si+0Fh]
seg000:32C3		    test    cl,	1
seg000:32C6		    jz	    short loc_32E9
seg000:32C8		    mov	    cl,	byte ptr ds:loc_76
seg000:32CC		    test    cl,	0C0h
seg000:32CF		    jnz	    short loc_32E9
seg000:32D1		    cmp	    bh,	2
seg000:32D4		    jz	    short loc_32DB
seg000:32D6		    cmp	    bh,	0Ah
seg000:32D9		    jnz	    short loc_32E9
seg000:32DB
seg000:32DB loc_32DB:				    ; CODE XREF: sub_32B3+21j
seg000:32DB		    mov	    bx,	offset word_3793
seg000:32DE		    mov	    cx,	5
seg000:32E1
seg000:32E1 loc_32E1:				    ; CODE XREF: sub_32B3+34j
seg000:32E1		    cmp	    ah,	cs:[bx]
seg000:32E4		    jz	    short loc_32EA
seg000:32E6		    inc	    bx
seg000:32E7		    loop    loc_32E1
seg000:32E9
seg000:32E9 loc_32E9:				    ; CODE XREF: sub_32B3+13j
seg000:32E9					    ; sub_32B3+1Cj ...
seg000:32E9		    stc
seg000:32EA
seg000:32EA loc_32EA:				    ; CODE XREF: sub_32B3+31j
seg000:32EA		    pop	    es
seg000:32EB		    pop	    si
seg000:32EC		    pop	    cx
seg000:32ED		    pop	    bx
seg000:32EE		    pop	    ax
seg000:32EF		    retn
seg000:32EF sub_32B3	    endp
seg000:32EF
seg000:32F0
seg000:32F0 ; =============== S	U B R O	U T I N	E =======================================
seg000:32F0
seg000:32F0
seg000:32F0 ide_detect_init? proc near		    ; CODE XREF: ColrWarm_Boot+44Dp
seg000:32F0					    ; test_ram_base+3Ap
seg000:32F0		    mov	    word ptr cs:loc_50E, 1
seg000:32F7		    mov	    byte ptr cs:loc_50E+2, 0
seg000:32FD		    mov	    byte ptr cs:loc_511, 0
seg000:3303		    call    Option_ROM_sig?
seg000:3306		    jb	    short loc_330B
seg000:3308		    jmp	    loc_34AB
seg000:330B ; ---------------------------------------------------------------------------
seg000:330B
seg000:330B loc_330B:				    ; CODE XREF: ide_detect_init?+16j
seg000:330B		    mov	    al,	0Eh
seg000:330D		    call    read_cmos
seg000:3310		    and	    al,	20h
seg000:3312		    mov	    ah,	al
seg000:3314		    jz	    short loc_3319
seg000:3316		    jmp	    loc_34AB
seg000:3319 ; ---------------------------------------------------------------------------
seg000:3319
seg000:3319 loc_3319:				    ; CODE XREF: ide_detect_init?+24j
seg000:3319		    mov	    al,	12h
seg000:331B		    call    read_cmos
seg000:331E		    test    al,	0FFh
seg000:3320		    jnz	    short loc_3325
seg000:3322		    jmp	    loc_34AB
seg000:3325 ; ---------------------------------------------------------------------------
seg000:3325
seg000:3325 loc_3325:				    ; CODE XREF: ide_detect_init?+30j
seg000:3325		    call    ide_?_2
seg000:3328		    mov	    bl,	al
seg000:332A		    and	    ah,	0F7h
seg000:332D		    mov	    al,	0Eh
seg000:332F		    call    write_cmos
seg000:3332		    mov	    ch,	al
seg000:3334		    cli
seg000:3335		    mov	    al,	13h
seg000:3337		    call    table_lookup_ptr
seg000:333A		    mov	    al,	40h ; '@'
seg000:333C		    call    table_store
seg000:333F		    push    cs
seg000:3340		    pop	    ds
seg000:3341		    mov	    si,	offset sub_2A71
seg000:3344		    mov	    al,	13h
seg000:3346		    call    table_store
seg000:3349		    mov	    si,	offset word_E401
seg000:334C		    mov	    al,	41h ; 'A'
seg000:334E		    call    table_store
seg000:3351		    mov	    al,	46h ; 'F'
seg000:3353		    call    table_store
seg000:3356		    sti
seg000:3357		    call    PIC_irq_mask?
seg000:335A		    mov	    ax,	word ptr cs:loc_C5+1
seg000:335E		    mov	    ds,	ax
seg000:3360		    xor	    ax,	ax
seg000:3362		    mov	    byte ptr ds:loc_73+2, al
seg000:3365		    mov	    byte ptr ds:loc_76+1, al
seg000:3368		    mov	    byte ptr ds:loc_76,	al
seg000:336B		    mov	    byte ptr ds:loc_73+1, al
seg000:336E		    mov	    al,	bl
seg000:3370		    mov	    cl,	4
seg000:3372		    shr	    al,	cl
seg000:3374		    mov	    ah,	19h
seg000:3376		    call    read_cmos_condi?
seg000:3379		    mov	    cs:byte_4EF, al
seg000:337D		    dec	    al
seg000:337F		    jns	    short loc_3384
seg000:3381		    jmp	    loc_34AB
seg000:3384 ; ---------------------------------------------------------------------------
seg000:3384
seg000:3384 loc_3384:				    ; CODE XREF: ide_detect_init?+8Fj
seg000:3384		    mov	    ah,	41h ; 'A'
seg000:3386		    call    sub_34DC
seg000:3389		    mov	    al,	bl
seg000:338B		    and	    al,	0Fh
seg000:338D		    mov	    ah,	1Ah
seg000:338F		    call    read_cmos_condi?
seg000:3392		    mov	    byte ptr cs:unk_4F0, al
seg000:3396		    dec	    al
seg000:3398		    js	    short loc_339F
seg000:339A		    mov	    ah,	46h ; 'F'
seg000:339C		    call    sub_34DC
seg000:339F
seg000:339F loc_339F:				    ; CODE XREF: ide_detect_init?+A8j
seg000:339F		    mov	    dx,	cs:ide_IO_port
seg000:33A4		    add	    dx,	6
seg000:33A7		    mov	    al,	0A0h ; ' '
seg000:33A9		    out	    dx,	al	    ; AT hard disk controller:
seg000:33A9					    ; Drive & Head.
seg000:33A9					    ; Read/Write: bits indicate	head, drive for	operation
seg000:33AA		    call    delay_14_cycles
seg000:33AD		    mov	    di,	276h
seg000:33B0		    cmp	    word ptr ds:loc_70+2, 1234h
seg000:33B6		    jz	    short loc_33BB
seg000:33B8		    mov	    di,	546h
seg000:33BB
seg000:33BB loc_33BB:				    ; CODE XREF: ide_detect_init?+C6j
seg000:33BB		    mov	    ax,	1400h
seg000:33BE		    mov	    dx,	80h ; ''
seg000:33C1		    call    fdd_?
seg000:33C4		    mov	    cx,	5
seg000:33C7
seg000:33C7 loc_33C7:				    ; CODE XREF: ide_detect_init?+DFj
seg000:33C7		    mov	    ax,	0D01h
seg000:33CA		    call    fdd_?
seg000:33CD		    jnb	    short loc_33D1
seg000:33CF		    loop    loc_33C7
seg000:33D1
seg000:33D1 loc_33D1:				    ; CODE XREF: ide_detect_init?+DDj
seg000:33D1		    cli
seg000:33D2		    mov	    bp,	0FFh
seg000:33D5
seg000:33D5 loc_33D5:
seg000:33D5		    push    word ptr ds:loc_6C
seg000:33D9		    mov	    word ptr ds:loc_6C,	0
seg000:33DF		    sti
seg000:33E0
seg000:33E0 loc_33E0:				    ; CODE XREF: ide_detect_init?+10Cj
seg000:33E0		    mov	    ax,	901h
seg000:33E3		    call    fdd_?
seg000:33E6		    jb	    short loc_33F8
seg000:33E8		    mov	    ax,	1101h
seg000:33EB		    call    fdd_?
seg000:33EE		    jb	    short loc_33F8
seg000:33F0		    mov	    ax,	1001h
seg000:33F3		    call    fdd_?
seg000:33F6		    jnb	    short loc_340F
seg000:33F8
seg000:33F8 loc_33F8:				    ; CODE XREF: ide_detect_init?+F6j
seg000:33F8					    ; ide_detect_init?+FEj ...
seg000:33F8		    cmp	    word ptr ds:loc_6C,	di
seg000:33FC		    jb	    short loc_33E0
seg000:33FE		    mov	    al,	dl
seg000:3400		    call    sub_323B
seg000:3403		    test    byte ptr es:[si+0Fh], 1
seg000:3408		    jnz	    short loc_3433
seg000:340A		    stc
seg000:340B		    mov	    ah,	80h ; ''
seg000:340D		    jmp	    short fdd_?
seg000:340F ; ---------------------------------------------------------------------------
seg000:340F
seg000:340F loc_340F:				    ; CODE XREF: ide_detect_init?+106j
seg000:340F		    test    cs:byte_4EE, 80h
seg000:3415		    jnz	    short loc_3433
seg000:3417		    push    dx
seg000:3418		    mov	    ax,	801h
seg000:341B		    call    fdd_?
seg000:341E		    pop	    dx
seg000:341F		    jb	    short fdd_?
seg000:3421		    cmp	    word ptr ds:loc_70+2, 1234h
seg000:3427		    jz	    short loc_3433
seg000:3429
seg000:3429 loc_3429:				    ; CODE XREF: ide_detect_init?+17Dj
seg000:3429		    push    cx
seg000:342A		    mov	    ax,	401h
seg000:342D		    call    fdd_?
seg000:3430		    pop	    cx
seg000:3431		    jb	    short loc_345A
seg000:3433
seg000:3433 loc_3433:				    ; CODE XREF: ide_detect_init?+118j
seg000:3433					    ; ide_detect_init?+125j ...
seg000:3433		    inc	    dl
seg000:3435		    mov	    al,	byte ptr ds:loc_73+2
seg000:3438		    add	    al,	80h ; ''
seg000:343A		    cmp	    dl,	al
seg000:343C		    jb	    short loc_33F8
seg000:343E		    test    cs:byte_4EE, 80h
seg000:3444		    jz	    short loc_3458
seg000:3446		    mov	    dl,	80h ; ''
seg000:3448		    mov	    ax,	1D01h
seg000:344B		    call    fdd_?
seg000:344E		    jb	    short fdd_?
seg000:3450		    mov	    ax,	0D01h
seg000:3453		    call    fdd_?
seg000:3456		    jb	    short fdd_?
seg000:3458
seg000:3458 loc_3458:				    ; CODE XREF: ide_detect_init?+154j
seg000:3458		    jmp	    short loc_3493
seg000:345A ; ---------------------------------------------------------------------------
seg000:345A
seg000:345A loc_345A:				    ; CODE XREF: ide_detect_init?+141j
seg000:345A		    mov	    bx,	3
seg000:345D		    mov	    si,	offset word_377A
seg000:3460
seg000:3460 loc_3460:				    ; CODE XREF: ide_detect_init?+177j
seg000:3460		    cmp	    ah,	cs:[si]
seg000:3463		    jz	    short loc_3433
seg000:3465		    inc	    si
seg000:3466		    dec	    bx
seg000:3467		    jnz	    short loc_3460
seg000:3469		    cmp	    word ptr ds:loc_6C,	di
seg000:346D		    jb	    short loc_3429
seg000:346F		    stc
seg000:3470		    mov	    ah,	80h ; ''
seg000:3472		    jmp	    short fdd_?
seg000:3474 ; ---------------------------------------------------------------------------
seg000:3474		    push    ax
seg000:3475		    mov	    al,	0Eh
seg000:3477		    mov	    ah,	al
seg000:3479		    call    read_cmos
seg000:347C		    or	    al,	8
seg000:347E		    xchg    al,	ah
seg000:3480		    call    write_cmos
seg000:3483		    pop	    ax
seg000:3484
seg000:3484 fdd_?:				    ; CODE XREF: ide_detect_init?+11Dj
seg000:3484					    ; ide_detect_init?+12Fj ...
seg000:3484		    push    ax
seg000:3485		    push    dx
seg000:3486		    mov	    ax,	0D01h
seg000:3489		    mov	    dl,	80h ; ''
seg000:348B		    call    fdd_?
seg000:348E		    pop	    dx
seg000:348F		    pop	    ax
seg000:3490		    call    print_DiskError
seg000:3493
seg000:3493 loc_3493:				    ; CODE XREF: ide_detect_init?:loc_3458j
seg000:3493		    cmp	    bp,	0FFh
seg000:3497		    jnz	    short loc_34AB
seg000:3499		    cli
seg000:349A		    mov	    bx,	word ptr ds:loc_6C
seg000:349E		    pop	    word ptr ds:loc_6C
seg000:34A2		    add	    word ptr ds:loc_6C,	bx
seg000:34A6		    adc	    word ptr ds:loc_6E,	0
seg000:34AB
seg000:34AB loc_34AB:				    ; CODE XREF: ide_detect_init?+18j
seg000:34AB					    ; ide_detect_init?+26j ...
seg000:34AB		    cli
seg000:34AC		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:34AE		    mov	    cl,	0FEh ; 'þ'
seg000:34B0		    and	    al,	cl
seg000:34B2		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:34B4		    sti
seg000:34B5		    call    sub_9169
seg000:34B8		    retn
seg000:34B8 ide_detect_init? endp ; sp-analysis	failed
seg000:34B8
seg000:34B9
seg000:34B9 ; =============== S	U B R O	U T I N	E =======================================
seg000:34B9
seg000:34B9
seg000:34B9 fdd_?	    proc near		    ; CODE XREF: ide_detect_init?+D1p
seg000:34B9					    ; ide_detect_init?+DAp ...
seg000:34B9		    push    bp
seg000:34BA		    push    ax
seg000:34BB		    int	    13h		    ; DISK -
seg000:34BD		    jnb	    short loc_34CF
seg000:34BF		    cmp	    ah,	6
seg000:34C2		    stc
seg000:34C3		    jnz	    short loc_34CF
seg000:34C5		    mov	    ax,	1800h
seg000:34C8		    int	    13h		    ; DISK - SET MEDIA TYPE FOR	FORMAT (AT model 3x9,XT2,XT286,PS)
seg000:34C8					    ; DL = drive number, CH = lower 8 bits of number of	tracks,	CL = sectors per track
seg000:34CA		    pop	    ax
seg000:34CB		    int	    13h		    ; DISK -
seg000:34CD		    jmp	    short loc_34D0
seg000:34CF ; ---------------------------------------------------------------------------
seg000:34CF
seg000:34CF loc_34CF:				    ; CODE XREF: fdd_?+4j
seg000:34CF					    ; fdd_?+Aj
seg000:34CF		    pop	    bp
seg000:34D0
seg000:34D0 loc_34D0:				    ; CODE XREF: fdd_?+14j
seg000:34D0		    pop	    bp
seg000:34D1		    retn
seg000:34D1 fdd_?	    endp
seg000:34D1
seg000:34D2
seg000:34D2 ; =============== S	U B R O	U T I N	E =======================================
seg000:34D2
seg000:34D2
seg000:34D2 read_cmos_condi? proc near		    ; CODE XREF: ide_detect_init?+86p
seg000:34D2					    ; ide_detect_init?+9Fp
seg000:34D2		    cmp	    al,	0Fh
seg000:34D4		    jnz	    short locret_34DB
seg000:34D6		    xchg    al,	ah
seg000:34D8		    call    read_cmos
seg000:34DB
seg000:34DB locret_34DB:			    ; CODE XREF: read_cmos_condi?+2j
seg000:34DB		    retn
seg000:34DB read_cmos_condi? endp
seg000:34DB
seg000:34DC
seg000:34DC ; =============== S	U B R O	U T I N	E =======================================
seg000:34DC
seg000:34DC
seg000:34DC sub_34DC	    proc near		    ; CODE XREF: ide_detect_init?+96p
seg000:34DC					    ; ide_detect_init?+ACp
seg000:34DC		    cmp	    al,	64h ; 'd'
seg000:34DE		    jnz	    short loc_34E5
seg000:34E0		    inc	    byte ptr ds:loc_73+2
seg000:34E4		    retn
seg000:34E5 ; ---------------------------------------------------------------------------
seg000:34E5
seg000:34E5 loc_34E5:				    ; CODE XREF: sub_34DC+2j
seg000:34E5		    push    bx
seg000:34E6		    push    cx
seg000:34E7		    mov	    cx,	offset word_E401
seg000:34EA		    cmp	    al,	2Eh ; '.'
seg000:34EC		    jb	    short loc_34F3
seg000:34EE		    mov	    cx,	offset unk_F94B
seg000:34F1		    sub	    al,	2Eh ; '.'
seg000:34F3
seg000:34F3 loc_34F3:				    ; CODE XREF: sub_34DC+10j
seg000:34F3		    push    ax
seg000:34F4		    mov	    bl,	10h
seg000:34F6		    imul    bl
seg000:34F8		    add	    ax,	cx
seg000:34FA		    mov	    si,	ax
seg000:34FC		    pop	    ax
seg000:34FD		    xchg    al,	ah
seg000:34FF		    push    ds
seg000:3500		    push    cs
seg000:3501		    pop	    ds
seg000:3502		    call    table_store
seg000:3505		    pop	    ds
seg000:3506		    inc	    byte ptr ds:loc_73+2
seg000:350A		    pop	    cx
seg000:350B		    pop	    bx
seg000:350C		    retn
seg000:350C sub_34DC	    endp
seg000:350C
seg000:350D
seg000:350D ; =============== S	U B R O	U T I N	E =======================================
seg000:350D
seg000:350D
seg000:350D sub_350D	    proc far		    ; CODE XREF: sub_15ED:loc_15F8p
seg000:350D		    pushf
seg000:350E		    push    cs
seg000:350F		    mov	    ax,	offset return_?
seg000:3512		    push    ax
seg000:3513		    jmp	    short loc_3517
seg000:3515 ; ---------------------------------------------------------------------------
seg000:3515		    nop
seg000:3516
seg000:3516 return_?:				    ; DATA XREF: sub_350D+2o
seg000:3516		    retn
seg000:3517 ; ---------------------------------------------------------------------------
seg000:3517
seg000:3517 loc_3517:				    ; CODE XREF: sub_350D+6j
seg000:3517					    ; sub_E6F2j
seg000:3517		    push    bp
seg000:3518		    mov	    bp,	sp
seg000:351A		    cmp	    word ptr [bp+4], 0F000h
seg000:351F		    pop	    bp
seg000:3520		    mov	    ds,	word ptr cs:loc_C5+1
seg000:3525		    jz	    short loc_352F
seg000:3527		    out	    0FBh, al	    ; AT 80287 data.
seg000:3527					    ; 286 sends	opcodes	& operands and receives	results.
seg000:3529		    pushf
seg000:352A		    inc	    byte ptr ds:loc_BB+4
seg000:352E		    popf
seg000:352F
seg000:352F loc_352F:				    ; CODE XREF: sub_350D+18j
seg000:352F		    call    disk_reset_verify
seg000:3532		    mov	    dl,	byte ptr cs:loc_54+4
seg000:3537		    call    sub_361C
seg000:353A		    jnb	    short loc_3556
seg000:353C		    test    ah,	ah
seg000:353E		    jz	    short loc_354E
seg000:3540		    cmp	    byte ptr cs:loc_59,	0FFh
seg000:3546		    jnz	    short loc_354B
seg000:3548		    retf    2
seg000:354B ; ---------------------------------------------------------------------------
seg000:354B
seg000:354B loc_354B:				    ; CODE XREF: sub_350D+39j
seg000:354B		    call    disk_erro_print
seg000:354E
seg000:354E loc_354E:				    ; CODE XREF: sub_350D+31j
seg000:354E					    ; sub_350D+6Dj
seg000:354E		    call    password_?_1
seg000:3551		    jmp	    far	ptr 0F000h:0FFEDh
seg000:3556 ; ---------------------------------------------------------------------------
seg000:3556
seg000:3556 loc_3556:				    ; CODE XREF: sub_350D+2Dj
seg000:3556		    test    byte ptr cs:loc_54+3, 80h
seg000:355C		    jnz	    short loc_356C
seg000:355E		    cmp	    byte ptr cs:loc_59,	0FFh
seg000:3564		    jnz	    short loc_3569
seg000:3566		    call    password_?_1
seg000:3569
seg000:3569 loc_3569:				    ; CODE XREF: sub_350D+57j
seg000:3569		    jmp	    short loc_357C
seg000:356B ; ---------------------------------------------------------------------------
seg000:356B		    nop
seg000:356C
seg000:356C loc_356C:				    ; CODE XREF: sub_350D+4Fj
seg000:356C		    push    es
seg000:356D		    mov	    ax,	0
seg000:3570		    mov	    es,	ax
seg000:3572		    cmp	    es:word_7DFE, 0AA55h
seg000:3579		    pop	    es
seg000:357A		    jnz	    short loc_354E
seg000:357C
seg000:357C loc_357C:				    ; CODE XREF: sub_350D:loc_3569j
seg000:357C		    mov	    si,	offset newline ; "\r\n"
seg000:357F		    call    print_null_terminated
seg000:3582		    call    print_null_terminated
seg000:3585		    in	    al,	8Ch
seg000:3587		    or	    al,	20h
seg000:3589		    out	    8Ch, al
seg000:358B		    out	    0F2h, al
seg000:358D		    call    sub_36CE
seg000:3590		    mov	    byte ptr cs:loc_59,	0
seg000:3596		    mov	    dl,	byte ptr cs:loc_54+3
seg000:359B		    mov	    dh,	0
seg000:359D		    mov	    cx,	1
seg000:35A0		    mov	    ax,	30h ; '0'
seg000:35A3		    mov	    ss,	ax
seg000:35A5		    assume ss:nothing
seg000:35A5		    mov	    sp,	100h
seg000:35A8		    mov	    ax,	0
seg000:35AB		    mov	    es,	ax
seg000:35AD		    mov	    bx,	7C00h
seg000:35B0		    pushf
seg000:35B1		    dec	    byte ptr ds:loc_BB+4
seg000:35B5		    jnz	    short loc_35B9
seg000:35B7		    out	    0F9h, al	    ; AT 80287 data.
seg000:35B7					    ; 286 sends	opcodes	& operands and receives	results.
seg000:35B9
seg000:35B9 loc_35B9:				    ; CODE XREF: sub_350D+A8j
seg000:35B9		    popf
seg000:35BA		    call    sub_E91C
seg000:35BD		    jmp	    far	ptr loc_7C00
seg000:35BD sub_350D	    endp ; sp-analysis failed
seg000:35BD
seg000:35C2
seg000:35C2 ; =============== S	U B R O	U T I N	E =======================================
seg000:35C2
seg000:35C2
seg000:35C2 disk_reset_verify proc near		    ; CODE XREF: sub_350D:loc_352Fp
seg000:35C2		    cmp	    byte ptr cs:loc_4C+1, 0FFh
seg000:35C8		    jnz	    short loc_35DA
seg000:35CA
seg000:35CA loc_35CA:				    ; CODE XREF: disk_reset_verify+34j
seg000:35CA					    ; disk_reset_verify+4Bj ...
seg000:35CA		    mov	    byte ptr cs:loc_4C+1, 0
seg000:35D0		    mov	    dl,	byte ptr cs:loc_54+3
seg000:35D5		    mov	    al,	byte ptr cs:loc_54+4
seg000:35D9		    retn
seg000:35DA ; ---------------------------------------------------------------------------
seg000:35DA
seg000:35DA loc_35DA:				    ; CODE XREF: disk_reset_verify+6j
seg000:35DA		    mov	    byte ptr cs:loc_54+3, 0
seg000:35E0		    mov	    byte ptr cs:loc_54+4, 0Dh
seg000:35E6		    mov	    ax,	0
seg000:35E9		    int	    13h		    ; DISK - RESET DISK	SYSTEM
seg000:35E9					    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
seg000:35EB		    mov	    ax,	401h
seg000:35EE		    mov	    cx,	1
seg000:35F1		    mov	    dx,	0
seg000:35F4		    int	    13h		    ; DISK - VERIFY SECTORS
seg000:35F4					    ; AL = number of sectors to	verify,	CH = track, CL = sector
seg000:35F4					    ; DH = head, DL = drive
seg000:35F4					    ; Return: CF set on	error, AH = status
seg000:35F4					    ; AL = number of sectors verified
seg000:35F6		    jnb	    short loc_35CA
seg000:35F8		    cmp	    ah,	80h ; ''
seg000:35FB		    jz	    short loc_360F
seg000:35FD		    mov	    ax,	0
seg000:3600		    int	    13h		    ; DISK - RESET DISK	SYSTEM
seg000:3600					    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
seg000:3602		    mov	    ax,	401h
seg000:3605		    mov	    cx,	1
seg000:3608		    mov	    dx,	0
seg000:360B		    int	    13h		    ; DISK - VERIFY SECTORS
seg000:360B					    ; AL = number of sectors to	verify,	CH = track, CL = sector
seg000:360B					    ; DH = head, DL = drive
seg000:360B					    ; Return: CF set on	error, AH = status
seg000:360B					    ; AL = number of sectors verified
seg000:360D		    jnb	    short loc_35CA
seg000:360F
seg000:360F loc_360F:				    ; CODE XREF: disk_reset_verify+39j
seg000:360F		    mov	    byte ptr cs:loc_54+3, 80h ;	''
seg000:3615		    mov	    ax,	0
seg000:3618		    int	    13h		    ; DISK - RESET DISK	SYSTEM
seg000:3618					    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
seg000:361A		    jmp	    short loc_35CA
seg000:361A disk_reset_verify endp
seg000:361A
seg000:361C
seg000:361C ; =============== S	U B R O	U T I N	E =======================================
seg000:361C
seg000:361C
seg000:361C sub_361C	    proc near		    ; CODE XREF: sub_350D+2Ap
seg000:361C					    ; test_disk:loc_8BA7p
seg000:361C		    push    bx
seg000:361D		    push    cx
seg000:361E		    push    dx
seg000:361F		    push    si
seg000:3620		    push    es
seg000:3621		    sti
seg000:3622		    cld
seg000:3623		    mov	    si,	5
seg000:3626		    cmp	    byte ptr cs:loc_54+3, 0FFh
seg000:362C		    jnz	    short loc_3631
seg000:362E		    jmp	    loc_36C8
seg000:3631 ; ---------------------------------------------------------------------------
seg000:3631
seg000:3631 loc_3631:				    ; CODE XREF: sub_361C+10j
seg000:3631					    ; sub_361C+71j ...
seg000:3631		    call    get_key?_0
seg000:3634		    jz	    short loc_3646
seg000:3636		    call    keyb_menu
seg000:3639		    cmp	    ax,	11Bh
seg000:363C		    jnz	    short loc_3641
seg000:363E		    jmp	    loc_36C5
seg000:3641 ; ---------------------------------------------------------------------------
seg000:3641
seg000:3641 loc_3641:				    ; CODE XREF: sub_361C+20j
seg000:3641		    cmp	    ax,	0
seg000:3644		    jz	    short loc_36C5
seg000:3646
seg000:3646 loc_3646:				    ; CODE XREF: sub_361C+18j
seg000:3646		    mov	    bx,	0
seg000:3649		    mov	    es,	bx
seg000:364B		    mov	    bx,	7C00h
seg000:364E		    mov	    dl,	byte ptr cs:loc_54+3
seg000:3653		    test    dl,	80h
seg000:3656		    jz	    short loc_3663
seg000:3658		    mov	    al,	0Eh
seg000:365A		    call    read_cmos
seg000:365D		    test    al,	20h
seg000:365F		    mov	    ah,	82h ; ''
seg000:3661		    jnz	    short loc_36C7
seg000:3663
seg000:3663 loc_3663:				    ; CODE XREF: sub_361C+3Aj
seg000:3663		    mov	    dh,	0
seg000:3665		    mov	    cx,	1
seg000:3668		    mov	    ax,	201h
seg000:366B		    int	    13h		    ; DISK - READ SECTORS INTO MEMORY
seg000:366B					    ; AL = number of sectors to	read, CH = track, CL = sector
seg000:366B					    ; DH = head, DL = drive, ES:BX -> buffer to	fill
seg000:366B					    ; Return: CF set on	error, AH = status, AL = number	of sectors read
seg000:366D		    jnb	    short loc_3694
seg000:366F		    dec	    si
seg000:3670		    jz	    short loc_36C7
seg000:3672		    push    ax
seg000:3673		    mov	    ax,	0
seg000:3676		    int	    13h		    ; DISK - RESET DISK	SYSTEM
seg000:3676					    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
seg000:3678		    pop	    ax
seg000:3679		    test    dl,	80h
seg000:367C		    jz	    short loc_368A
seg000:367E		    cmp	    ah,	6
seg000:3681		    jnz	    short loc_368A
seg000:3683		    push    ax
seg000:3684		    mov	    ax,	1800h
seg000:3687		    int	    13h		    ; DISK - SET MEDIA TYPE FOR	FORMAT (AT model 3x9,XT2,XT286,PS)
seg000:3687					    ; DL = drive number, CH = lower 8 bits of number of	tracks,	CL = sectors per track
seg000:3689		    pop	    ax
seg000:368A
seg000:368A loc_368A:				    ; CODE XREF: sub_361C+60j
seg000:368A					    ; sub_361C+65j
seg000:368A		    cmp	    ah,	80h ; ''
seg000:368D		    jnz	    short loc_3631
seg000:368F		    mov	    si,	1
seg000:3692		    jmp	    short loc_3631
seg000:3694 ; ---------------------------------------------------------------------------
seg000:3694
seg000:3694 loc_3694:				    ; CODE XREF: sub_361C+51j
seg000:3694		    test    dl,	83h
seg000:3697		    jnz	    short loc_36B0
seg000:3699		    push    ds
seg000:369A		    push    es
seg000:369B		    push    di
seg000:369C		    call    sub_4327
seg000:369F		    jb	    short loc_36AD
seg000:36A1		    push    0
seg000:36A4		    pop	    ds
seg000:36A5		    mov	    word ptr ds:loc_78,	di
seg000:36A9		    mov	    word ptr ds:cmos_sum_loop, es
seg000:36AD
seg000:36AD loc_36AD:				    ; CODE XREF: sub_361C+83j
seg000:36AD		    pop	    di
seg000:36AE		    pop	    es
seg000:36AF		    pop	    ds
seg000:36B0
seg000:36B0 loc_36B0:				    ; CODE XREF: sub_361C+7Bj
seg000:36B0		    mov	    ax,	es:[bx]
seg000:36B3		    mov	    cx,	0Ah
seg000:36B6
seg000:36B6 loc_36B6:				    ; CODE XREF: sub_361C+A3j
seg000:36B6		    add	    bx,	2
seg000:36B9		    cmp	    ax,	es:[bx]
seg000:36BC		    clc
seg000:36BD		    jnz	    short loc_36C8
seg000:36BF		    loop    loc_36B6
seg000:36C1		    mov	    ah,	81h ; ''
seg000:36C3		    jmp	    short loc_36C7
seg000:36C5 ; ---------------------------------------------------------------------------
seg000:36C5
seg000:36C5 loc_36C5:				    ; CODE XREF: sub_361C+22j
seg000:36C5					    ; sub_361C+28j
seg000:36C5		    mov	    ah,	0
seg000:36C7
seg000:36C7 loc_36C7:				    ; CODE XREF: sub_361C+45j
seg000:36C7					    ; sub_361C+54j ...
seg000:36C7		    stc
seg000:36C8
seg000:36C8 loc_36C8:				    ; CODE XREF: sub_361C+12j
seg000:36C8					    ; sub_361C+A1j
seg000:36C8		    pop	    es
seg000:36C9		    pop	    si
seg000:36CA		    pop	    dx
seg000:36CB		    pop	    cx
seg000:36CC		    pop	    bx
seg000:36CD		    retn
seg000:36CD sub_361C	    endp
seg000:36CD
seg000:36CE
seg000:36CE ; =============== S	U B R O	U T I N	E =======================================
seg000:36CE
seg000:36CE
seg000:36CE sub_36CE	    proc near		    ; CODE XREF: sub_350D+80p
seg000:36CE		    push    ax
seg000:36CF		    push    bx
seg000:36D0		    push    cx
seg000:36D1		    push    dx
seg000:36D2		    push    si
seg000:36D3		    push    es
seg000:36D4		    test    byte ptr cs:loc_54+3, 80h
seg000:36DA		    jz	    short loc_371B
seg000:36DC		    cmp	    dl,	0Dh
seg000:36DF		    jz	    short loc_371B
seg000:36E1		    test    dl,	dl
seg000:36E3		    jz	    short loc_371B
seg000:36E5		    sub	    dl,	30h ; '0'
seg000:36E8		    mov	    dh,	1
seg000:36EA		    mov	    si,	0
seg000:36ED		    mov	    es,	si
seg000:36EF		    mov	    bx,	7C00h
seg000:36F2		    mov	    si,	1BEh
seg000:36F5		    mov	    ah,	byte ptr cs:loc_54+3
seg000:36FA		    and	    ah,	7Fh
seg000:36FD
seg000:36FD loc_36FD:				    ; CODE XREF: sub_36CE+4Bj
seg000:36FD		    mov	    al,	ah
seg000:36FF
seg000:36FF loc_36FF:
seg000:36FF		    cmp	    dh,	dl
seg000:3701		    jnz	    short loc_370A
seg000:3703		    or	    al,	80h
seg000:3705		    mov	    es:[bx+si],	al
seg000:3708		    jmp	    short loc_3711
seg000:370A ; ---------------------------------------------------------------------------
seg000:370A
seg000:370A loc_370A:				    ; CODE XREF: sub_36CE+33j
seg000:370A		    mov	    al,	0
seg000:370C		    and	    al,	7Fh
seg000:370E		    mov	    es:[bx+si],	al
seg000:3711
seg000:3711 loc_3711:				    ; CODE XREF: sub_36CE+3Aj
seg000:3711		    inc	    dh
seg000:3713		    add	    si,	10h
seg000:3716		    cmp	    dh,	5
seg000:3719		    jb	    short loc_36FD
seg000:371B
seg000:371B loc_371B:				    ; CODE XREF: sub_36CE+Cj
seg000:371B					    ; sub_36CE+11j ...
seg000:371B		    pop	    es
seg000:371C		    pop	    si
seg000:371D		    pop	    dx
seg000:371E		    pop	    cx
seg000:371F		    pop	    bx
seg000:3720		    pop	    ax
seg000:3721		    retn
seg000:3721 sub_36CE	    endp
seg000:3721
seg000:3721 ; ---------------------------------------------------------------------------
seg000:3722 unk_3722	    db	  0		    ; DATA XREF: ide_?_3+4o
seg000:3723		    db	  0
seg000:3724		    db	20h
seg000:3725		    db	30h ; 0
seg000:3726		    db	40h ; @
seg000:3727		    db	50h ; P
seg000:3728		    db	  0
seg000:3729		    db	  0
seg000:372A		    db	  0
seg000:372B		    db	91h ; 
seg000:372C		    db	22h ; "
seg000:372D		    db	32h ; 2
seg000:372E		    db	70h ; p
seg000:372F		    db	  0
seg000:3730		    db	  0
seg000:3731		    db	  0
seg000:3732		    db	  0
seg000:3733		    db	10h
seg000:3734		    db	  0
seg000:3735		    db	  0
seg000:3736		    db	90h ; 
seg000:3737		    db	  0
seg000:3738		    db	  0
seg000:3739		    db	  0
seg000:373A		    db 0B0h ; °
seg000:373B		    db 0A1h ; ¡
seg000:373C		    db	  0
seg000:373D		    db 0F1h ; ñ
seg000:373E		    db 0F2h ; ò
seg000:373F word_373F	    dw 90C0h		    ; DATA XREF: sub_2AF4+26o
seg000:3741		    db	68h ; h
seg000:3742		    db	64h ; d
seg000:3743		    db	60h ; `
seg000:3744		    db	44h ; D
seg000:3745		    db	  0
seg000:3746		    db	  0
seg000:3747		    db	90h ; 
seg000:3748		    db	  0
seg000:3749		    db	68h ; h
seg000:374A		    db	64h ; d
seg000:374B		    db	40h ; @
seg000:374C		    db 0C0h ; À
seg000:374D		    db	  0
seg000:374E		    db	  0
seg000:374F		    db	  0
seg000:3750		    db	40h ; @
seg000:3751		    db	  0
seg000:3752		    db	  0
seg000:3753		    db	80h ; 
seg000:3754		    db	90h ; 
seg000:3755		    db	  0
seg000:3756		    db	  0
seg000:3757		    db	  0
seg000:3758		    db	40h ; @
seg000:3759		    db	  0
seg000:375A		    db	  0
seg000:375B		    db	  0
seg000:375C		    db	10h
seg000:375D		    db	61h ; a
seg000:375E		    db	  0
seg000:375F		    db	75h ; u
seg000:3760		    db	75h ; u
seg000:3761		    db	75h ; u
seg000:3762		    db	75h ; u
seg000:3763		    db	  0
seg000:3764		    db	  0
seg000:3765		    db	  0
seg000:3766		    db	25h ; %
seg000:3767		    db	75h ; u
seg000:3768		    db	75h ; u
seg000:3769		    db	61h ; a
seg000:376A		    db	65h ; e
seg000:376B		    db	  0
seg000:376C		    db	  0
seg000:376D		    db	71h ; q
seg000:376E		    db	61h ; a
seg000:376F		    db	  0
seg000:3770		    db	  0
seg000:3771		    db	  0
seg000:3772		    db	  0
seg000:3773		    db	  0
seg000:3774		    db	  0
seg000:3775		    db	61h ; a
seg000:3776		    db	71h ; q
seg000:3777		    db	  0
seg000:3778		    db	61h ; a
seg000:3779		    db	61h ; a
seg000:377A word_377A	    dw 0A10h		    ; DATA XREF: ide_detect_init?+16Do
seg000:377C		    db	11h
seg000:377D table_pointer_? db 0E0h ; à		    ; DATA XREF: read_ah_from_+Ao
seg000:377E		    db	  2
seg000:377F		    db	40h ; @
seg000:3780		    db	  1
seg000:3781		    db	  6
seg000:3782		    db	  4
seg000:3783		    db	  3
seg000:3784		    db	10h
seg000:3785		    db	0Ah
seg000:3786 table_pointer_?_0 db 0E0h ;	à	    ; DATA XREF: read_ah_from_:loc_30C2o
seg000:3786					    ; ide_?_0+2Ao
seg000:3787		    db 0BBh ; »
seg000:3788		    db 0E0h ; à
seg000:3789		    db	11h
seg000:378A		    db 0E0h ; à
seg000:378B		    db	40h ; @
seg000:378C		    db 0CCh ; Ì
seg000:378D		    db 0AAh ; ª
seg000:378E		    db 0E0h ; à
seg000:378F ide_IO_port	    dw 1F0h		    ; DATA XREF: ide_?_5+Ar
seg000:378F					    ; ide_detect_init?:loc_339Fr ...
seg000:3791 fdd_IO_port	    dw 3F6h		    ; DATA XREF: sub_2AF4+A6r
seg000:3791					    ; ide_?_6+33r
seg000:3793 word_3793	    dw 402h		    ; DATA XREF: sub_32B3:loc_32DBo
seg000:3795		    db	0Bh
seg000:3796		    db	10h
seg000:3797		    db	40h ; @
seg000:3798 cmos_data_1	    db 0DFh ; ß		    ; DATA XREF: seg000:off_37E6o
seg000:3798					    ; seg000:39FAo ...
seg000:3799		    db	  2
seg000:379A		    db	25h ; %
seg000:379B		    db	  2
seg000:379C		    db	  9
seg000:379D		    db	2Ah ; *
seg000:379E		    db 0FFh
seg000:379F		    db	50h ; P
seg000:37A0		    db 0F6h ; ö
seg000:37A1		    db	0Fh
seg000:37A2		    db	  8
seg000:37A3		    db	27h ; '
seg000:37A4		    db	80h ; 
seg000:37A5 unk_37A5	    db 0DFh ; ß		    ; DATA XREF: seg000:37EAo
seg000:37A5					    ; seg000:3BFBo
seg000:37A6		    db	  2
seg000:37A7		    db	25h ; %
seg000:37A8		    db	  2
seg000:37A9		    db	  9
seg000:37AA		    db	2Ah ; *
seg000:37AB		    db 0FFh
seg000:37AC		    db	50h ; P
seg000:37AD		    db 0F6h ; ö
seg000:37AE		    db	0Fh
seg000:37AF		    db	  8
seg000:37B0		    db	27h ; '
seg000:37B1		    db	40h ; @
seg000:37B2 cmos_data_2	    db 0DFh ; ß		    ; DATA XREF: seg000:37ECo
seg000:37B2					    ; seg000:39FCo ...
seg000:37B3		    db	  2
seg000:37B4		    db	25h ; %
seg000:37B5		    db	  2
seg000:37B6		    db	0Fh
seg000:37B7		    db	1Bh
seg000:37B8		    db 0FFh
seg000:37B9		    db	54h ; T
seg000:37BA		    db 0F6h ; ö
seg000:37BB		    db	0Fh
seg000:37BC		    db	  8
seg000:37BD		    db	4Fh ; O
seg000:37BE		    db	  0
seg000:37BF cmos_data_3?    db 0DFh ; ß		    ; DATA XREF: seg000:37EEo
seg000:37BF					    ; seg000:39FEo ...
seg000:37C0		    db	  2
seg000:37C1		    db	25h ; %
seg000:37C2		    db	  2
seg000:37C3		    db	  9
seg000:37C4		    db	2Ah ; *
seg000:37C5		    db 0FFh
seg000:37C6		    db	50h ; P
seg000:37C7		    db 0F6h ; ö
seg000:37C8		    db	0Fh
seg000:37C9		    db	  8
seg000:37CA		    db	4Fh ; O
seg000:37CB		    db	80h ; 
seg000:37CC unk_37CC	    db 0DFh ; ß		    ; DATA XREF: seg000:37F2o
seg000:37CC					    ; seg000:3C0Do
seg000:37CD		    db	  2
seg000:37CE		    db	25h ; %
seg000:37CF		    db	  2
seg000:37D0		    db	  9
seg000:37D1		    db	2Ah ; *
seg000:37D2		    db 0FFh
seg000:37D3		    db	50h ; P
seg000:37D4		    db 0F6h ; ö
seg000:37D5		    db	0Fh
seg000:37D6		    db	  8
seg000:37D7		    db	4Fh ; O
seg000:37D8		    db	80h ; 
seg000:37D9 cmos_data_4	    db 0AFh ; ¯		    ; DATA XREF: seg000:37F4o
seg000:37D9					    ; seg000:3A00o ...
seg000:37DA		    db	  2
seg000:37DB		    db	25h ; %
seg000:37DC		    db	  2
seg000:37DD		    db	12h
seg000:37DE		    db	1Bh
seg000:37DF		    db 0FFh
seg000:37E0		    db	6Ch ; l
seg000:37E1		    db 0F6h ; ö
seg000:37E2		    db	0Fh
seg000:37E3		    db	  8
seg000:37E4		    db	4Fh ; O
seg000:37E5		    db	  0
seg000:37E6 off_37E6	    dw offset cmos_data_1   ; DATA XREF: sub_3B53+24r
seg000:37E6					    ; sub_4327+33r ...
seg000:37E8 word_37E8	    dw 0FFFFh		    ; DATA XREF: sub_3B53:loc_3B88r
seg000:37EA		    dw offset unk_37A5
seg000:37EC		    dw offset cmos_data_2
seg000:37EE		    dw offset cmos_data_3?
seg000:37F0		    dw 0FFFFh
seg000:37F2		    dw offset unk_37CC
seg000:37F4		    dw offset cmos_data_4
seg000:37F6 offset_table    dw 90h		    ; 0	; DATA XREF: dma_fdd_?+1r
seg000:37F6					    ; fdd_?_0r	...
seg000:37F6		    dw 91h		    ; 1
seg000:37F6		    dw 480h		    ; 2
seg000:37F6		    dw 2000h		    ; 3
seg000:37F6		    dw 1020h		    ; 4
seg000:37F6		    dw 810h		    ; 5
seg000:37F6		    dw 2000h		    ; 6
seg000:37F6		    dw 404h		    ; 7
seg000:37F6		    dw 302h		    ; 8
seg000:37F6		    dw 201h		    ; 9
seg000:380A unk_380A	    db	80h ; 		    ; DATA XREF: sub_3D1E+25r
seg000:380B		    db	  0
seg000:380C		    dw 8040h
seg000:380E table_bits	    db	1		    ; 0	; DATA XREF: FDD_?_7+8r
seg000:380E					    ; FDD_?_3+7r ...
seg000:380E		    db	2		    ; 1
seg000:380E		    db	4		    ; 2
seg000:380E		    db	8		    ; 3
seg000:380E		    db 10h		    ; 4
seg000:380E		    db 20h		    ; 5
seg000:380E		    db 40h		    ; 6
seg000:380E		    db 80h		    ; 7
seg000:3816 zero?	    db 0		    ; DATA XREF: FDD_?+71r
seg000:3816					    ; compare_41h_to_0?:loc_3921r ...
seg000:3817 jump_table	    dw offset FDD_?	    ; 0	; DATA XREF: fdd_?_3+39r
seg000:3817		    dw offset compare_41h_to_0?; 1
seg000:3817		    dw offset dma_fdd_?	    ; 2
seg000:3817		    dw offset dma_fdd_?	    ; 3
seg000:3817		    dw offset dma_fdd_?	    ; 4
seg000:3817		    dw offset fdd_?_0	    ; 5
seg000:3817		    dw offset store_41h_1   ; 6
seg000:3817		    dw offset store_41h_1   ; 7
seg000:3817		    dw offset cmos_read_?   ; 8
seg000:3817		    dw offset store_41h_1   ; 9
seg000:3817		    dw offset store_41h_1   ; 0Ah
seg000:3817		    dw offset store_41h_1   ; 0Bh
seg000:3817		    dw offset store_41h_1   ; 0Ch
seg000:3817		    dw offset store_41h_1   ; 0Dh
seg000:3817		    dw offset store_41h_1   ; 0Eh
seg000:3817		    dw offset store_41h_1   ; 0Fh
seg000:3817		    dw offset store_41h_1   ; 10h
seg000:3817		    dw offset store_41h_1   ; 11h
seg000:3817		    dw offset store_41h_1   ; 12h
seg000:3817		    dw offset store_41h_1   ; 13h
seg000:3817		    dw offset store_41h_1   ; 14h
seg000:3817		    dw offset sub_3A9D	    ; 15h
seg000:3817		    dw offset fdd_?_1	    ; 16h
seg000:3817		    dw offset fdd_?_2	    ; 17h
seg000:3817		    dw offset sub_3B53	    ; 18h
seg000:3849
seg000:3849 ; =============== S	U B R O	U T I N	E =======================================
seg000:3849
seg000:3849
seg000:3849 fdd_?_3	    proc far		    ; CODE XREF: fdd_?_4j
seg000:3849		    push    si
seg000:384A		    push    bp
seg000:384B		    push    ds
seg000:384C		    mov	    ds,	word ptr cs:loc_C5+1
seg000:3851		    out	    0FBh, al	    ; AT 80287 data.
seg000:3851					    ; 286 sends	opcodes	& operands and receives	results.
seg000:3853		    pushf
seg000:3854		    inc	    byte ptr ds:loc_BB+4
seg000:3858		    popf
seg000:3859		    sti
seg000:385A		    cld
seg000:385B		    cmp	    ah,	2
seg000:385E		    jb	    short loc_3871
seg000:3860		    cmp	    ah,	8
seg000:3863		    jz	    short loc_3871
seg000:3865		    cmp	    ah,	19h
seg000:3868		    jnb	    short loc_386F
seg000:386A		    cmp	    dl,	2
seg000:386D		    jb	    short loc_3871
seg000:386F
seg000:386F loc_386F:				    ; CODE XREF: fdd_?_3+1Fj
seg000:386F		    mov	    ah,	13h
seg000:3871
seg000:3871 loc_3871:				    ; CODE XREF: fdd_?_3+15j
seg000:3871					    ; fdd_?_3+1Aj ...
seg000:3871		    mov	    si,	dx
seg000:3873		    sub	    dh,	dh
seg000:3875		    shl	    dx,	1
seg000:3877		    xchg    dx,	si
seg000:3879		    mov	    bp,	ax
seg000:387B		    mov	    al,	ah
seg000:387D		    sub	    ah,	ah
seg000:387F		    shl	    ax,	1
seg000:3881		    xchg    ax,	bp
seg000:3882		    call    cs:jump_table[bp]
seg000:3887		    mov	    bp,	sp
seg000:3889		    pushf
seg000:388A		    pop	    word ptr [bp+0Ah]
seg000:388D		    pushf
seg000:388E		    dec	    byte ptr ds:loc_BB+4
seg000:3892		    jnz	    short loc_3896
seg000:3894		    out	    0F9h, al	    ; AT 80287 data.
seg000:3894					    ; 286 sends	opcodes	& operands and receives	results.
seg000:3896
seg000:3896 loc_3896:				    ; CODE XREF: fdd_?_3+49j
seg000:3896		    popf
seg000:3897		    pop	    ds
seg000:3898		    pop	    bp
seg000:3899		    pop	    si
seg000:389A		    iret
seg000:389A fdd_?_3	    endp
seg000:389A
seg000:389B
seg000:389B ; =============== S	U B R O	U T I N	E =======================================
seg000:389B
seg000:389B
seg000:389B store_41h_1	    proc near		    ; DATA XREF: seg000:jump_tableo
seg000:389B		    mov	    ah,	1
seg000:389D		    mov	    byte ptr ds:loc_41,	ah
seg000:38A1		    stc
seg000:38A2		    retn
seg000:38A2 store_41h_1	    endp
seg000:38A2
seg000:38A3
seg000:38A3 ; =============== S	U B R O	U T I N	E =======================================
seg000:38A3
seg000:38A3
seg000:38A3 FDD_?	    proc near		    ; CODE XREF: fdd_?_3+39p
seg000:38A3					    ; FDD_?_4+Cp
seg000:38A3					    ; DATA XREF: ...
seg000:38A3		    push    cx
seg000:38A4		    push    dx
seg000:38A5		    push    si
seg000:38A6		    push    ax
seg000:38A7		    push    ds
seg000:38A8		    cli
seg000:38A9		    mov	    al,	byte ptr ds:loc_3E+1
seg000:38AC		    ror	    al,	4
seg000:38AF		    or	    al,	8
seg000:38B1		    and	    al,	0FBh
seg000:38B3		    mov	    dx,	3F2h
seg000:38B6		    out	    dx,	al	    ; Floppy: digital output reg bits:
seg000:38B6					    ; 0-1: Drive to select 0-3 (AT: bit	1 not used)
seg000:38B6					    ; 2:   0=reset diskette controller;	1=enable controller
seg000:38B6					    ; 3:   1=enable diskette DMA and interrupts
seg000:38B6					    ; 4-7: drive motor enable.	Set bits to turn drive ON.
seg000:38B6					    ;
seg000:38B7		    or	    al,	4
seg000:38B9		    mov	    byte ptr ds:loc_3E,	0
seg000:38BE		    mov	    cx,	4
seg000:38C1
seg000:38C1 loc_38C1:				    ; CODE XREF: FDD_?+21j
seg000:38C1		    call    null_sub
seg000:38C4		    loop    loc_38C1
seg000:38C6		    out	    dx,	al
seg000:38C7		    sti
seg000:38C8		    call    FDD_busy_wait
seg000:38CB		    jb	    short loc_3907
seg000:38CD		    mov	    dx,	0C004h
seg000:38D0
seg000:38D0 loc_38D0:				    ; CODE XREF: FDD_?+43j
seg000:38D0		    mov	    ah,	8
seg000:38D2		    call    FDD_rdy_wait
seg000:38D5		    jb	    short loc_3907
seg000:38D7		    call    FDD_?_1
seg000:38DA		    jb	    short loc_3907
seg000:38DC		    cmp	    dh,	byte ptr ds:loc_41+1
seg000:38E0		    jnz	    short loc_3907
seg000:38E2		    inc	    dh
seg000:38E4		    dec	    dl
seg000:38E6		    jnz	    short loc_38D0
seg000:38E8		    mov	    ah,	3
seg000:38EA		    call    FDD_rdy_wait
seg000:38ED		    jb	    short loc_3909
seg000:38EF		    mov	    al,	1Eh
seg000:38F1		    call    table_lookup_ptr
seg000:38F4		    mov	    ah,	[si]
seg000:38F6		    call    FDD_rdy_wait
seg000:38F9		    jb	    short loc_3909
seg000:38FB		    mov	    ah,	[si+1]
seg000:38FE		    call    FDD_rdy_wait
seg000:3901		    jb	    short loc_3909
seg000:3903		    sub	    ah,	ah
seg000:3905		    jmp	    short loc_3909
seg000:3907 ; ---------------------------------------------------------------------------
seg000:3907
seg000:3907 loc_3907:				    ; CODE XREF: FDD_?+28j
seg000:3907					    ; FDD_?+32j ...
seg000:3907		    mov	    ah,	20h ; ' '
seg000:3909
seg000:3909 loc_3909:				    ; CODE XREF: FDD_?+4Aj
seg000:3909					    ; FDD_?+56j ...
seg000:3909		    pop	    ds
seg000:390A		    call    sub_417A
seg000:390D		    pop	    dx
seg000:390E		    mov	    al,	dl
seg000:3910		    mov	    byte ptr ds:loc_41,	ah
seg000:3914		    cmp	    cs:zero?, ah
seg000:3919		    pop	    si
seg000:391A		    pop	    dx
seg000:391B		    pop	    cx
seg000:391C
seg000:391C null_sub:				    ; CODE XREF: FDD_?:loc_38C1p
seg000:391C					    ; sub_3F02+Cp ...
seg000:391C		    retn
seg000:391C FDD_?	    endp
seg000:391C
seg000:391D
seg000:391D ; =============== S	U B R O	U T I N	E =======================================
seg000:391D
seg000:391D
seg000:391D compare_41h_to_0? proc near		    ; DATA XREF: seg000:jump_tableo
seg000:391D		    mov	    ah,	byte ptr ds:loc_41
seg000:3921
seg000:3921 loc_3921:
seg000:3921		    cmp	    cs:zero?, ah
seg000:3926		    retn
seg000:3926 compare_41h_to_0? endp
seg000:3926
seg000:3926 ; ---------------------------------------------------------------------------
seg000:3927		    db	46h ; F
seg000:3928 byte_3928	    db 4Ah		    ; DATA XREF: dma_fdd_?+1Br
seg000:3929		    dw offset unk_E642
seg000:392B		    dw offset unk_E6C5
seg000:392D
seg000:392D ; =============== S	U B R O	U T I N	E =======================================
seg000:392D
seg000:392D
seg000:392D dma_fdd_?	    proc near		    ; DATA XREF: seg000:jump_tableo
seg000:392D		    push    di
seg000:392E		    mov	    si,	cs:offset_table[si]
seg000:3933		    push    ax
seg000:3934		    shr	    bp,	1
seg000:3936		    call    sub_418C
seg000:3939
seg000:3939 loc_3939:				    ; CODE XREF: dma_fdd_?+2Cj
seg000:3939		    call    FDD_?_10
seg000:393C		    jb	    short loc_3952
seg000:393E		    mov	    ah,	cs:[bp+3925h]
seg000:3943		    call    sub_3F02
seg000:3946		    jb	    short loc_395E
seg000:3948		    mov	    ah,	cs:byte_3928[bp]
seg000:394D		    call    sub_3D7E
seg000:3950		    jnb	    short loc_395B
seg000:3952
seg000:3952 loc_3952:				    ; CODE XREF: dma_fdd_?+Fj
seg000:3952		    call    sub_3D1E
seg000:3955		    jb	    short loc_395E
seg000:3957		    pop	    ax
seg000:3958		    push    ax
seg000:3959		    jmp	    short loc_3939
seg000:395B ; ---------------------------------------------------------------------------
seg000:395B
seg000:395B loc_395B:				    ; CODE XREF: dma_fdd_?+23j
seg000:395B		    call    sub_3D58
seg000:395E
seg000:395E loc_395E:				    ; CODE XREF: dma_fdd_?+19j
seg000:395E					    ; dma_fdd_?+28j
seg000:395E		    call    sub_4200
seg000:3961		    call    sub_417A
seg000:3964		    add	    sp,	2
seg000:3967		    mov	    byte ptr ds:loc_41,	ah
seg000:396B		    cmp	    cs:zero?, ah
seg000:3970		    jnb	    short loc_3974
seg000:3972		    mov	    al,	0
seg000:3974
seg000:3974 loc_3974:				    ; CODE XREF: dma_fdd_?+43j
seg000:3974		    pop	    di
seg000:3975
seg000:3975 locret_3975:			    ; DATA XREF: fdd_?_0+35r
seg000:3975		    retn
seg000:3975 dma_fdd_?	    endp
seg000:3975
seg000:3975 ; ---------------------------------------------------------------------------
seg000:3976		    dw offset loc_1090
seg000:3978		    dw offset ColrWarm_Boot
seg000:397A
seg000:397A ; =============== S	U B R O	U T I N	E =======================================
seg000:397A
seg000:397A
seg000:397A fdd_?_0	    proc near		    ; DATA XREF: seg000:jump_tableo
seg000:397A		    mov	    si,	cs:offset_table[si]
seg000:397F		    call    sub_41C6
seg000:3982		    or	    byte ptr ds:loc_3E+1, 80h
seg000:3987		    mov	    ah,	[si]
seg000:3989		    test    ah,	10h
seg000:398C		    jnz	    short loc_39BF
seg000:398E		    push    ax
seg000:398F		    call    cmos_read_10h
seg000:3992		    jb	    short loc_3998
seg000:3994		    cmp	    al,	5
seg000:3996		    jb	    short loc_399A
seg000:3998
seg000:3998 loc_3998:				    ; CODE XREF: fdd_?_0+18j
seg000:3998		    sub	    al,	al
seg000:399A
seg000:399A loc_399A:				    ; CODE XREF: fdd_?_0+1Cj
seg000:399A		    or	    al,	al
seg000:399C		    jz	    short loc_39BC
seg000:399E		    cmp	    al,	3
seg000:39A0		    jnz	    short loc_39AC
seg000:39A2		    and	    ah,	6
seg000:39A5		    cmp	    ah,	6
seg000:39A8		    jz	    short loc_39AC
seg000:39AA		    mov	    al,	1
seg000:39AC
seg000:39AC loc_39AC:				    ; CODE XREF: fdd_?_0+26j
seg000:39AC					    ; fdd_?_0+2Ej
seg000:39AC		    sub	    ah,	ah
seg000:39AE		    xchg    ax,	bx
seg000:39AF		    mov	    bl,	byte ptr cs:locret_3975[bx]
seg000:39B4		    xchg    ax,	bx
seg000:39B5		    mov	    ah,	[si]
seg000:39B7		    and	    ah,	1Fh
seg000:39BA		    or	    al,	ah
seg000:39BC
seg000:39BC loc_39BC:				    ; CODE XREF: fdd_?_0+22j
seg000:39BC		    mov	    [si], al
seg000:39BE		    pop	    ax
seg000:39BF
seg000:39BF loc_39BF:				    ; CODE XREF: fdd_?_0+12j
seg000:39BF		    call    FDD_change?_0
seg000:39C2		    jb	    short loc_39F0
seg000:39C4		    call    FDD_?_6
seg000:39C7		    push    si
seg000:39C8		    push    ds
seg000:39C9		    mov	    al,	1Eh
seg000:39CB		    call    table_lookup_ptr
seg000:39CE		    mov	    ah,	3
seg000:39D0		    call    FDD_rdy_wait
seg000:39D3		    jb	    short loc_39E2
seg000:39D5		    mov	    ah,	[si]
seg000:39D7		    call    FDD_rdy_wait
seg000:39DA		    jb	    short loc_39E2
seg000:39DC		    mov	    ah,	[si+1]
seg000:39DF		    call    FDD_rdy_wait
seg000:39E2
seg000:39E2 loc_39E2:				    ; CODE XREF: fdd_?_0+59j
seg000:39E2					    ; fdd_?_0+60j
seg000:39E2		    pop	    ds
seg000:39E3		    pop	    si
seg000:39E4		    mov	    ah,	4Ah ; 'J'
seg000:39E6		    call    sub_3F02
seg000:39E9		    jb	    short loc_39F0
seg000:39EB		    mov	    ah,	4Dh ; 'M'
seg000:39ED		    call    sub_3D7E
seg000:39F0
seg000:39F0 loc_39F0:				    ; CODE XREF: fdd_?_0+48j
seg000:39F0					    ; fdd_?_0+6Fj
seg000:39F0		    mov	    byte ptr ds:loc_41,	ah
seg000:39F4
seg000:39F4 loc_39F4:				    ; DATA XREF: cmos_read_?+7Br
seg000:39F4		    cmp	    cs:zero?, ah
seg000:39F9		    retn
seg000:39F9 fdd_?_0	    endp
seg000:39F9
seg000:39F9 ; ---------------------------------------------------------------------------
seg000:39FA		    dw offset cmos_data_1
seg000:39FC		    dw offset cmos_data_2
seg000:39FE		    dw offset cmos_data_3?
seg000:3A00		    dw offset cmos_data_4
seg000:3A02
seg000:3A02 ; =============== S	U B R O	U T I N	E =======================================
seg000:3A02
seg000:3A02
seg000:3A02 cmos_read_?	    proc near		    ; DATA XREF: seg000:jump_tableo
seg000:3A02		    push    bp
seg000:3A03		    mov	    bp,	dx
seg000:3A05		    sub	    dh,	dh
seg000:3A07		    xchg    dx,	bp
seg000:3A09		    mov	    si,	cs:offset_table[si]
seg000:3A0E		    sub	    bx,	bx
seg000:3A10		    mov	    ah,	byte ptr ds:loc_E+2
seg000:3A14		    mov	    dl,	2
seg000:3A16		    and	    ah,	0C1h
seg000:3A19		    cmp	    ah,	41h ; 'A'
seg000:3A1C		    jz	    short loc_3A32
seg000:3A1E		    mov	    dl,	1
seg000:3A20		    cmp	    ah,	1
seg000:3A23		    jz	    short loc_3A32
seg000:3A25		    mov	    dl,	0
seg000:3A27
seg000:3A27 loc_3A27:				    ; CODE XREF: cmos_read_?+33j
seg000:3A27		    cmp	    bp,	80h ; ''
seg000:3A2B		    jb	    short loc_3A8C
seg000:3A2D		    mov	    ah,	1
seg000:3A2F		    stc
seg000:3A30		    jmp	    short loc_3A96
seg000:3A32 ; ---------------------------------------------------------------------------
seg000:3A32
seg000:3A32 loc_3A32:				    ; CODE XREF: cmos_read_?+1Aj
seg000:3A32					    ; cmos_read_?+21j
seg000:3A32		    cmp	    bp,	1
seg000:3A35		    ja	    short loc_3A27
seg000:3A37		    mov	    dh,	1
seg000:3A39		    xchg    dx,	bp
seg000:3A3B		    call    cmos_read_10h
seg000:3A3E		    xchg    dx,	bp
seg000:3A40		    jb	    short loc_3A4E
seg000:3A42		    cmp	    al,	4
seg000:3A44		    ja	    short loc_3A4E
seg000:3A46		    cmp	    al,	0
seg000:3A48		    jz	    short loc_3A4E
seg000:3A4A		    mov	    bl,	al
seg000:3A4C		    jmp	    short loc_3A73
seg000:3A4E ; ---------------------------------------------------------------------------
seg000:3A4E
seg000:3A4E loc_3A4E:				    ; CODE XREF: cmos_read_?+3Ej
seg000:3A4E					    ; cmos_read_?+42j ...
seg000:3A4E		    call    sub_41C6
seg000:3A51		    mov	    al,	[si]
seg000:3A53		    call    sub_4200
seg000:3A56		    test    al,	10h
seg000:3A58		    jz	    short loc_3A8C
seg000:3A5A		    mov	    ah,	al
seg000:3A5C		    and	    al,	0C0h
seg000:3A5E		    cmp	    al,	80h ; ''
seg000:3A60		    jz	    short loc_3A6A
seg000:3A62		    cmp	    al,	40h ; '@'
seg000:3A64		    jnz	    short loc_3A71
seg000:3A66		    mov	    al,	2
seg000:3A68		    jmp	    short loc_3A73
seg000:3A6A ; ---------------------------------------------------------------------------
seg000:3A6A
seg000:3A6A loc_3A6A:				    ; CODE XREF: cmos_read_?+5Ej
seg000:3A6A		    mov	    al,	1
seg000:3A6C		    test    ah,	1
seg000:3A6F		    jz	    short loc_3A73
seg000:3A71
seg000:3A71 loc_3A71:				    ; CODE XREF: cmos_read_?+62j
seg000:3A71		    mov	    al,	4
seg000:3A73
seg000:3A73 loc_3A73:				    ; CODE XREF: cmos_read_?+4Aj
seg000:3A73					    ; cmos_read_?+66j ...
seg000:3A73		    sub	    ah,	ah
seg000:3A75		    shl	    ax,	1
seg000:3A77		    mov	    di,	ax
seg000:3A79		    mov	    ax,	cs
seg000:3A7B		    mov	    es,	ax
seg000:3A7D		    mov	    di,	word ptr es:(loc_39F4+4)[di]
seg000:3A82		    mov	    cl,	es:[di+4]
seg000:3A86		    mov	    ch,	es:[di+0Bh]
seg000:3A8A		    jmp	    short loc_3A94
seg000:3A8C ; ---------------------------------------------------------------------------
seg000:3A8C
seg000:3A8C loc_3A8C:				    ; CODE XREF: cmos_read_?+29j
seg000:3A8C					    ; cmos_read_?+56j
seg000:3A8C		    sub	    cx,	cx
seg000:3A8E		    sub	    dh,	dh
seg000:3A90		    sub	    di,	di
seg000:3A92		    mov	    es,	di
seg000:3A94
seg000:3A94 loc_3A94:				    ; CODE XREF: cmos_read_?+88j
seg000:3A94		    sub	    ax,	ax
seg000:3A96
seg000:3A96 loc_3A96:				    ; CODE XREF: cmos_read_?+2Ej
seg000:3A96		    mov	    byte ptr ds:loc_41,	0
seg000:3A9B		    pop	    bp
seg000:3A9C		    retn
seg000:3A9C cmos_read_?	    endp
seg000:3A9C
seg000:3A9D
seg000:3A9D ; =============== S	U B R O	U T I N	E =======================================
seg000:3A9D
seg000:3A9D
seg000:3A9D sub_3A9D	    proc near		    ; DATA XREF: seg000:jump_tableo
seg000:3A9D		    mov	    si,	cs:offset_table[si]
seg000:3AA2		    call    sub_41C6
seg000:3AA5		    mov	    ah,	[si]
seg000:3AA7		    or	    ah,	ah
seg000:3AA9		    jz	    short loc_3AB4
seg000:3AAB		    test    ah,	1
seg000:3AAE		    mov	    ah,	2
seg000:3AB0		    jnz	    short loc_3AB4
seg000:3AB2		    mov	    ah,	1
seg000:3AB4
seg000:3AB4 loc_3AB4:				    ; CODE XREF: sub_3A9D+Cj
seg000:3AB4					    ; sub_3A9D+13j
seg000:3AB4		    call    sub_4200
seg000:3AB7		    mov	    byte ptr ds:loc_41,	0
seg000:3ABC		    clc
seg000:3ABD		    retn
seg000:3ABD sub_3A9D	    endp
seg000:3ABD
seg000:3ABE
seg000:3ABE ; =============== S	U B R O	U T I N	E =======================================
seg000:3ABE
seg000:3ABE
seg000:3ABE fdd_?_1	    proc near		    ; DATA XREF: seg000:jump_tableo
seg000:3ABE		    mov	    si,	cs:offset_table[si]
seg000:3AC3		    call    sub_41C6
seg000:3AC6		    mov	    ah,	80h ; ''
seg000:3AC8		    cmp	    byte ptr [si], 0
seg000:3ACB		    jz	    short loc_3ADB
seg000:3ACD		    mov	    ah,	6
seg000:3ACF		    test    byte ptr [si], 1
seg000:3AD2		    jz	    short loc_3ADB
seg000:3AD4		    call    FDD_change?
seg000:3AD7		    jb	    short loc_3ADB
seg000:3AD9		    sub	    ah,	ah
seg000:3ADB
seg000:3ADB loc_3ADB:				    ; CODE XREF: fdd_?_1+Dj
seg000:3ADB					    ; fdd_?_1+14j ...
seg000:3ADB		    call    sub_4200
seg000:3ADE		    cmp	    byte ptr cs:word_4C5, 2
seg000:3AE4		    jz	    short loc_3AE9
seg000:3AE6		    call    sub_417A
seg000:3AE9
seg000:3AE9 loc_3AE9:				    ; CODE XREF: fdd_?_1+26j
seg000:3AE9		    mov	    byte ptr ds:loc_41,	ah
seg000:3AED		    cmp	    cs:zero?, ah
seg000:3AF2
seg000:3AF2 locret_3AF2:			    ; DATA XREF: fdd_?_2+3Fr
seg000:3AF2		    retn
seg000:3AF2 fdd_?_1	    endp
seg000:3AF2
seg000:3AF2 ; ---------------------------------------------------------------------------
seg000:3AF3		    db	90h ; 
seg000:3AF4		    db	70h ; p
seg000:3AF5		    db	10h
seg000:3AF6		    db	50h ; P
seg000:3AF7
seg000:3AF7 ; =============== S	U B R O	U T I N	E =======================================
seg000:3AF7
seg000:3AF7
seg000:3AF7 fdd_?_2	    proc near		    ; DATA XREF: seg000:jump_tableo
seg000:3AF7		    push    cx
seg000:3AF8		    mov	    si,	cs:offset_table[si]
seg000:3AFD		    call    sub_41C6
seg000:3B00		    mov	    ah,	[si]
seg000:3B02		    and	    ah,	0Fh
seg000:3B05		    mov	    [si], ah
seg000:3B07		    mov	    cx,	ax
seg000:3B09		    cmp	    al,	1
seg000:3B0B		    jz	    short loc_3B33
seg000:3B0D		    call    FDD_change?_0
seg000:3B10		    jnb	    short loc_3B17
seg000:3B12		    cmp	    ah,	80h ; ''
seg000:3B15		    jz	    short loc_3B40
seg000:3B17
seg000:3B17 loc_3B17:				    ; CODE XREF: fdd_?_2+19j
seg000:3B17		    mov	    ah,	ch
seg000:3B19		    cmp	    al,	4
seg000:3B1B		    ja	    short loc_3B21
seg000:3B1D		    cmp	    al,	0
seg000:3B1F		    ja	    short loc_3B25
seg000:3B21
seg000:3B21 loc_3B21:				    ; CODE XREF: fdd_?_2+24j
seg000:3B21		    mov	    ah,	1
seg000:3B23		    jmp	    short loc_3B40
seg000:3B25 ; ---------------------------------------------------------------------------
seg000:3B25
seg000:3B25 loc_3B25:				    ; CODE XREF: fdd_?_2+28j
seg000:3B25		    cmp	    al,	4
seg000:3B27		    jnz	    short loc_3B33
seg000:3B29		    and	    ah,	6
seg000:3B2C		    cmp	    ah,	6
seg000:3B2F		    jz	    short loc_3B33
seg000:3B31		    mov	    al,	1
seg000:3B33
seg000:3B33 loc_3B33:				    ; CODE XREF: fdd_?_2+14j
seg000:3B33					    ; fdd_?_2+30j ...
seg000:3B33		    sub	    ah,	ah
seg000:3B35		    xchg    ax,	bx
seg000:3B36		    mov	    bh,	byte ptr cs:locret_3AF2[bx]
seg000:3B3B		    xchg    ax,	bx
seg000:3B3C		    or	    [si], ah
seg000:3B3E		    sub	    ah,	ah
seg000:3B40
seg000:3B40 loc_3B40:				    ; CODE XREF: fdd_?_2+1Ej
seg000:3B40					    ; fdd_?_2+2Cj
seg000:3B40		    mov	    al,	cl
seg000:3B42		    call    sub_4200
seg000:3B45		    call    sub_417A
seg000:3B48		    mov	    byte ptr ds:loc_41,	ah
seg000:3B4C		    cmp	    cs:zero?, ah
seg000:3B51		    pop	    cx
seg000:3B52		    retn
seg000:3B52 fdd_?_2	    endp
seg000:3B52
seg000:3B53
seg000:3B53 ; =============== S	U B R O	U T I N	E =======================================
seg000:3B53
seg000:3B53
seg000:3B53 sub_3B53	    proc near		    ; DATA XREF: seg000:jump_tableo
seg000:3B53		    push    bx
seg000:3B54		    push    di
seg000:3B55		    mov	    si,	cs:offset_table[si]
seg000:3B5A		    call    sub_41C6
seg000:3B5D		    mov	    ah,	0
seg000:3B5F		    mov	    bx,	1
seg000:3B62		    call    cmos_read_10h
seg000:3B65		    jb	    short loc_3B71
seg000:3B67		    cmp	    al,	4
seg000:3B69		    ja	    short loc_3B71
seg000:3B6B		    cmp	    al,	0
seg000:3B6D		    jz	    short loc_3BBF
seg000:3B6F		    mov	    bl,	al
seg000:3B71
seg000:3B71 loc_3B71:				    ; CODE XREF: sub_3B53+12j
seg000:3B71					    ; sub_3B53+16j
seg000:3B71		    dec	    bx
seg000:3B72		    shl	    bx,	2
seg000:3B75		    mov	    ah,	0Ch
seg000:3B77		    mov	    di,	cs:off_37E6[bx]
seg000:3B7C		    cmp	    cl,	cs:[di+4]
seg000:3B80		    jnz	    short loc_3B88
seg000:3B82		    cmp	    ch,	cs:[di+0Bh]
seg000:3B86		    jz	    short loc_3B9E
seg000:3B88
seg000:3B88 loc_3B88:				    ; CODE XREF: sub_3B53+2Dj
seg000:3B88		    mov	    di,	cs:word_37E8[bx]
seg000:3B8D		    cmp	    di,	0FFFFh
seg000:3B90		    jz	    short loc_3BBF
seg000:3B92		    cmp	    cl,	cs:[di+4]
seg000:3B96		    jnz	    short loc_3BBF
seg000:3B98		    cmp	    ch,	cs:[di+0Bh]
seg000:3B9C		    jnz	    short loc_3BBF
seg000:3B9E
seg000:3B9E loc_3B9E:				    ; CODE XREF: sub_3B53+33j
seg000:3B9E		    mov	    ah,	cs:[di+0Ch]
seg000:3BA2		    cmp	    ah,	40h ; '@'
seg000:3BA5		    jnz	    short loc_3BAA
seg000:3BA7		    or	    ah,	20h
seg000:3BAA
seg000:3BAA loc_3BAA:				    ; CODE XREF: sub_3B53+52j
seg000:3BAA		    mov	    al,	[si]
seg000:3BAC		    and	    al,	0Fh
seg000:3BAE		    or	    al,	10h
seg000:3BB0		    or	    al,	ah
seg000:3BB2		    mov	    [si], al
seg000:3BB4		    mov	    ax,	cs
seg000:3BB6		    mov	    es,	ax
seg000:3BB8		    sub	    ah,	ah
seg000:3BBA		    add	    sp,	2
seg000:3BBD		    jmp	    short loc_3BC0
seg000:3BBF ; ---------------------------------------------------------------------------
seg000:3BBF
seg000:3BBF loc_3BBF:				    ; CODE XREF: sub_3B53+1Aj
seg000:3BBF					    ; sub_3B53+3Dj ...
seg000:3BBF		    pop	    di
seg000:3BC0
seg000:3BC0 loc_3BC0:				    ; CODE XREF: sub_3B53+6Aj
seg000:3BC0		    mov	    byte ptr ds:loc_41,	ah
seg000:3BC4		    call    sub_4200
seg000:3BC7		    cmp	    cs:zero?, ah
seg000:3BCC		    pop	    bx
seg000:3BCD		    retn
seg000:3BCD sub_3B53	    endp
seg000:3BCD
seg000:3BCE
seg000:3BCE ; =============== S	U B R O	U T I N	E =======================================
seg000:3BCE
seg000:3BCE
seg000:3BCE FDD_?_10	    proc near		    ; CODE XREF: dma_fdd_?:loc_3939p
seg000:3BCE		    call    FDD_change?_0
seg000:3BD1		    jb	    short locret_3BE2
seg000:3BD3		    call    FDD_?_5
seg000:3BD6		    test    byte ptr [si], 10h
seg000:3BD9		    jnz	    short loc_3BE0
seg000:3BDB		    call    FDD_?_7
seg000:3BDE		    jb	    short locret_3BE2
seg000:3BE0
seg000:3BE0 loc_3BE0:				    ; CODE XREF: FDD_?_10+Bj
seg000:3BE0		    sub	    ah,	ah
seg000:3BE2
seg000:3BE2 locret_3BE2:			    ; CODE XREF: FDD_?_10+3j
seg000:3BE2					    ; FDD_?_10+10j
seg000:3BE2		    retn
seg000:3BE2 FDD_?_10	    endp
seg000:3BE2
seg000:3BE3
seg000:3BE3 ; =============== S	U B R O	U T I N	E =======================================
seg000:3BE3
seg000:3BE3
seg000:3BE3 FDD_change?_0   proc near		    ; CODE XREF: fdd_?_0:loc_39BFp
seg000:3BE3					    ; fdd_?_2+16p ...
seg000:3BE3		    call    FDD_?_4
seg000:3BE6		    jnb	    short locret_3BF0
seg000:3BE8		    call    FDD_change?
seg000:3BEB		    jnb	    short loc_3BEF
seg000:3BED		    mov	    ah,	80h ; ''
seg000:3BEF
seg000:3BEF loc_3BEF:				    ; CODE XREF: FDD_change?_0+8j
seg000:3BEF		    stc
seg000:3BF0
seg000:3BF0 locret_3BF0:			    ; CODE XREF: FDD_change?_0+3j
seg000:3BF0		    retn
seg000:3BF0 FDD_change?_0   endp
seg000:3BF0
seg000:3BF0 ; ---------------------------------------------------------------------------
seg000:3BF1 off_3BF1	    dw offset byte_FFFF	    ; 0	; DATA XREF: FDD_?_5+3Er
seg000:3BF1		    dw offset byte_FFFF	    ; 1
seg000:3BF1		    dw offset cmos_data_1   ; 2
seg000:3BF1		    dw offset byte_FFFF	    ; 3
seg000:3BF9		    dw offset cmos_data_2
seg000:3BFB		    dw offset unk_37A5
seg000:3BFD		    dw 0FFFFh
seg000:3BFF		    dw 0FFFFh
seg000:3C01		    dw 0FFFFh
seg000:3C03		    dw 0FFFFh
seg000:3C05		    dw offset cmos_data_3?
seg000:3C07		    dw 0FFFFh
seg000:3C09		    dw offset cmos_data_4
seg000:3C0B		    dw 0FFFFh
seg000:3C0D		    dw offset unk_37CC
seg000:3C0F		    dw 0FFFFh
seg000:3C11
seg000:3C11 ; =============== S	U B R O	U T I N	E =======================================
seg000:3C11
seg000:3C11
seg000:3C11 FDD_?_5	    proc near		    ; CODE XREF: FDD_?_10+5p
seg000:3C11		    push    ax
seg000:3C12		    push    bx
seg000:3C13		    mov	    bl,	[si]
seg000:3C15		    mov	    di,	offset cmos_data_1
seg000:3C18		    test    bl,	1
seg000:3C1B		    jz	    short loc_3C20
seg000:3C1D		    mov	    di,	offset cmos_data_2
seg000:3C20
seg000:3C20 loc_3C20:				    ; CODE XREF: FDD_?_5+Aj
seg000:3C20		    call    cmos_read_10h
seg000:3C23		    jb	    short loc_3C5B
seg000:3C25		    or	    al,	al
seg000:3C27		    jz	    short loc_3C5B
seg000:3C29		    cmp	    al,	2
seg000:3C2B		    jb	    short loc_3C36
seg000:3C2D		    test    bl,	1
seg000:3C30		    jnz	    short loc_3C3D
seg000:3C32		    mov	    al,	1
seg000:3C34		    jmp	    short loc_3C3D
seg000:3C36 ; ---------------------------------------------------------------------------
seg000:3C36
seg000:3C36 loc_3C36:				    ; CODE XREF: FDD_?_5+1Aj
seg000:3C36		    test    bl,	1
seg000:3C39		    jz	    short loc_3C3D
seg000:3C3B		    mov	    al,	2
seg000:3C3D
seg000:3C3D loc_3C3D:				    ; CODE XREF: FDD_?_5+1Fj
seg000:3C3D					    ; FDD_?_5+23j ...
seg000:3C3D		    dec	    ax
seg000:3C3E		    cmp	    al,	3
seg000:3C40		    ja	    short loc_3C5B
seg000:3C42		    shl	    al,	2
seg000:3C45		    rol	    bl,	2
seg000:3C48		    and	    bx,	3
seg000:3C4B		    or	    bl,	al
seg000:3C4D		    shl	    bx,	1
seg000:3C4F		    mov	    bx,	cs:off_3BF1[bx]
seg000:3C54		    cmp	    bx,	0FFFFh
seg000:3C57		    jz	    short loc_3C5B
seg000:3C59		    mov	    di,	bx
seg000:3C5B
seg000:3C5B loc_3C5B:				    ; CODE XREF: FDD_?_5+12j
seg000:3C5B					    ; FDD_?_5+16j ...
seg000:3C5B		    mov	    ah,	3
seg000:3C5D		    call    FDD_rdy_wait
seg000:3C60		    jb	    short loc_3C71
seg000:3C62		    mov	    ah,	cs:[di]
seg000:3C65		    call    FDD_rdy_wait
seg000:3C68		    jb	    short loc_3C71
seg000:3C6A		    mov	    ah,	cs:[di+1]
seg000:3C6E		    call    FDD_rdy_wait
seg000:3C71
seg000:3C71 loc_3C71:				    ; CODE XREF: FDD_?_5+4Fj
seg000:3C71					    ; FDD_?_5+57j
seg000:3C71		    call    FDD_?_6
seg000:3C74		    pop	    bx
seg000:3C75		    pop	    ax
seg000:3C76		    retn
seg000:3C76 FDD_?_5	    endp
seg000:3C76
seg000:3C77
seg000:3C77 ; =============== S	U B R O	U T I N	E =======================================
seg000:3C77
seg000:3C77
seg000:3C77 FDD_?_6	    proc near		    ; CODE XREF: fdd_?_0+4Ap
seg000:3C77					    ; FDD_?_5:loc_3C71p
seg000:3C77		    push    ax
seg000:3C78		    push    dx
seg000:3C79		    mov	    al,	[si]
seg000:3C7B		    and	    al,	0C0h
seg000:3C7D		    mov	    dl,	byte ptr ds:loc_8B
seg000:3C81		    mov	    dh,	dl
seg000:3C83		    and	    dl,	0C0h
seg000:3C86		    cmp	    al,	dl
seg000:3C88		    jz	    short loc_3C9A
seg000:3C8A		    and	    dh,	3Fh
seg000:3C8D		    or	    dh,	al
seg000:3C8F		    mov	    byte ptr ds:loc_8B,	dh
seg000:3C93		    rol	    al,	2
seg000:3C96		    mov	    dx,	3F7h
seg000:3C99		    out	    dx,	al	    ; Floppy disk: AT diskette control register	bits:
seg000:3C99					    ; 0-1: data	transfer rate
seg000:3C99					    ;	   00=500 KBS, 01=300 KBS, 10=250 KBS, 11=reserved
seg000:3C9A
seg000:3C9A loc_3C9A:				    ; CODE XREF: FDD_?_6+11j
seg000:3C9A		    pop	    dx
seg000:3C9B		    pop	    ax
seg000:3C9C		    retn
seg000:3C9C FDD_?_6	    endp
seg000:3C9C
seg000:3C9D
seg000:3C9D ; =============== S	U B R O	U T I N	E =======================================
seg000:3C9D
seg000:3C9D
seg000:3C9D FDD_?_7	    proc near		    ; CODE XREF: FDD_?_10+Dp
seg000:3C9D		    push    bx
seg000:3C9E		    push    cx
seg000:3C9F		    push    dx
seg000:3CA0		    push    ax
seg000:3CA1		    sub	    bh,	bh
seg000:3CA3		    mov	    bl,	dl
seg000:3CA5		    mov	    al,	cs:table_bits[bx]
seg000:3CAA		    not	    al
seg000:3CAC		    and	    byte ptr ds:loc_3E,	al
seg000:3CB0		    sub	    ch,	ch
seg000:3CB2		    call    FDD_?_3
seg000:3CB5		    mov	    ah,	4Ah ; 'J'
seg000:3CB7		    call    FDD_rdy_wait
seg000:3CBA		    jb	    short loc_3D17
seg000:3CBC		    mov	    ah,	dl
seg000:3CBE		    call    FDD_rdy_wait
seg000:3CC1		    jb	    short loc_3D17
seg000:3CC3		    call    sub_3FEF
seg000:3CC6		    jb	    short loc_3D17
seg000:3CC8		    mov	    bh,	4
seg000:3CCA		    mov	    bl,	50h ; 'P'
seg000:3CCC		    test    byte ptr [si], 1
seg000:3CCF		    jz	    short loc_3CD3
seg000:3CD1		    mov	    bl,	0A0h ; ' '
seg000:3CD3
seg000:3CD3 loc_3CD3:				    ; CODE XREF: FDD_?_7+32j
seg000:3CD3					    ; FDD_?_7+64j
seg000:3CD3		    mov	    ch,	bh
seg000:3CD5		    shr	    ch,	1
seg000:3CD7		    mov	    byte ptr ds:loc_3E+2, 0FFh
seg000:3CDC		    call    FDD_?_3
seg000:3CDF		    mov	    ah,	4Ah ; 'J'
seg000:3CE1		    call    FDD_rdy_wait
seg000:3CE4		    jb	    short loc_3CF2
seg000:3CE6		    mov	    ah,	dl
seg000:3CE8		    call    FDD_rdy_wait
seg000:3CEB		    jb	    short loc_3CF2
seg000:3CED		    call    sub_3FEF
seg000:3CF0		    jnb	    short loc_3D06
seg000:3CF2
seg000:3CF2 loc_3CF2:				    ; CODE XREF: FDD_?_7+47j
seg000:3CF2					    ; FDD_?_7+4Ej
seg000:3CF2		    xor	    dl,	4
seg000:3CF5		    inc	    bh
seg000:3CF7		    test    bh,	2
seg000:3CFA		    jz	    short loc_3CFF
seg000:3CFC		    add	    bh,	2
seg000:3CFF
seg000:3CFF loc_3CFF:				    ; CODE XREF: FDD_?_7+5Dj
seg000:3CFF		    cmp	    bh,	bl
seg000:3D01		    jb	    short loc_3CD3
seg000:3D03		    stc
seg000:3D04		    jmp	    short loc_3D17
seg000:3D06 ; ---------------------------------------------------------------------------
seg000:3D06
seg000:3D06 loc_3D06:				    ; CODE XREF: FDD_?_7+53j
seg000:3D06		    mov	    al,	byte ptr ds:loc_43+2
seg000:3D09		    mov	    [si+4], al
seg000:3D0C		    shr	    bh,	1
seg000:3D0E		    cmp	    bh,	al
seg000:3D10		    jz	    short loc_3D15
seg000:3D12		    or	    byte ptr [si], 20h
seg000:3D15
seg000:3D15 loc_3D15:				    ; CODE XREF: FDD_?_7+73j
seg000:3D15		    sub	    ah,	ah
seg000:3D17
seg000:3D17 loc_3D17:				    ; CODE XREF: FDD_?_7+1Dj
seg000:3D17					    ; FDD_?_7+24j ...
seg000:3D17		    pop	    bx
seg000:3D18		    mov	    al,	bl
seg000:3D1A		    pop	    dx
seg000:3D1B		    pop	    cx
seg000:3D1C		    pop	    bx
seg000:3D1D		    retn
seg000:3D1D FDD_?_7	    endp
seg000:3D1D
seg000:3D1E
seg000:3D1E ; =============== S	U B R O	U T I N	E =======================================
seg000:3D1E
seg000:3D1E
seg000:3D1E sub_3D1E	    proc near		    ; CODE XREF: dma_fdd_?:loc_3952p
seg000:3D1E		    push    ax
seg000:3D1F		    cmp	    ah,	80h ; ''
seg000:3D22		    jz	    short loc_3D55
seg000:3D24		    cmp	    ah,	6
seg000:3D27		    jz	    short loc_3D55
seg000:3D29		    mov	    al,	[si]
seg000:3D2B		    test    al,	10h
seg000:3D2D		    jnz	    short loc_3D55
seg000:3D2F		    rol	    al,	2
seg000:3D32		    mov	    ah,	byte ptr ds:loc_8B
seg000:3D36		    ror	    ah,	2
seg000:3D39		    and	    ax,	303h
seg000:3D3C		    cmp	    al,	ah
seg000:3D3E		    jz	    short loc_3D55
seg000:3D40		    sub	    ah,	ah
seg000:3D42		    xchg    ax,	bx
seg000:3D43		    mov	    bl,	byte ptr cs:unk_380A[bx]
seg000:3D48		    xchg    ax,	bx
seg000:3D49		    mov	    ah,	[si]
seg000:3D4B		    and	    ah,	1Fh
seg000:3D4E		    or	    al,	ah
seg000:3D50		    mov	    [si], al
seg000:3D52		    clc
seg000:3D53		    jmp	    short loc_3D56
seg000:3D55 ; ---------------------------------------------------------------------------
seg000:3D55
seg000:3D55 loc_3D55:				    ; CODE XREF: sub_3D1E+4j
seg000:3D55					    ; sub_3D1E+9j ...
seg000:3D55		    stc
seg000:3D56
seg000:3D56 loc_3D56:				    ; CODE XREF: sub_3D1E+35j
seg000:3D56		    pop	    ax
seg000:3D57		    retn
seg000:3D57 sub_3D1E	    endp
seg000:3D57
seg000:3D58
seg000:3D58 ; =============== S	U B R O	U T I N	E =======================================
seg000:3D58
seg000:3D58
seg000:3D58 sub_3D58	    proc near		    ; CODE XREF: dma_fdd_?:loc_395Bp
seg000:3D58		    push    ax
seg000:3D59		    mov	    al,	[si]
seg000:3D5B		    or	    al,	10h
seg000:3D5D		    test    al,	4
seg000:3D5F		    jnz	    short loc_3D7A
seg000:3D61		    mov	    ah,	al
seg000:3D63		    or	    ah,	16h
seg000:3D66		    and	    al,	0C0h
seg000:3D68		    cmp	    al,	80h ; ''
seg000:3D6A		    jnz	    short loc_3D78
seg000:3D6C		    call    cmos_read_10h
seg000:3D6F		    jb	    short loc_3D78
seg000:3D71		    cmp	    al,	4
seg000:3D73		    jz	    short loc_3D78
seg000:3D75		    and	    ah,	0FDh
seg000:3D78
seg000:3D78 loc_3D78:				    ; CODE XREF: sub_3D58+12j
seg000:3D78					    ; sub_3D58+17j ...
seg000:3D78		    mov	    al,	ah
seg000:3D7A
seg000:3D7A loc_3D7A:				    ; CODE XREF: sub_3D58+7j
seg000:3D7A		    mov	    [si], al
seg000:3D7C		    pop	    ax
seg000:3D7D		    retn
seg000:3D7D sub_3D58	    endp
seg000:3D7D
seg000:3D7E
seg000:3D7E ; =============== S	U B R O	U T I N	E =======================================
seg000:3D7E
seg000:3D7E
seg000:3D7E sub_3D7E	    proc near		    ; CODE XREF: dma_fdd_?+20p
seg000:3D7E					    ; fdd_?_0+73p
seg000:3D7E		    push    bx
seg000:3D7F		    push    cx
seg000:3D80		    push    si
seg000:3D81		    push    es
seg000:3D82		    push    ax
seg000:3D83		    mov	    bx,	ax
seg000:3D85		    call    FDD_?_3
seg000:3D88		    jb	    short loc_3DB2
seg000:3D8A		    mov	    ah,	bh
seg000:3D8C		    call    FDD_rdy_wait
seg000:3D8F		    jb	    short loc_3DB2
seg000:3D91		    mov	    ah,	dh
seg000:3D93		    and	    ah,	1
seg000:3D96		    shl	    ah,	2
seg000:3D99		    or	    ah,	dl
seg000:3D9B		    call    FDD_rdy_wait
seg000:3D9E		    jb	    short loc_3DB2
seg000:3DA0		    cmp	    bh,	4Dh ; 'M'
seg000:3DA3		    jnz	    short loc_3DAA
seg000:3DA5		    call    sub_3EDA
seg000:3DA8		    jmp	    short loc_3DAD
seg000:3DAA ; ---------------------------------------------------------------------------
seg000:3DAA
seg000:3DAA loc_3DAA:				    ; CODE XREF: sub_3D7E+25j
seg000:3DAA		    call    sub_3E9A
seg000:3DAD
seg000:3DAD loc_3DAD:				    ; CODE XREF: sub_3D7E+2Aj
seg000:3DAD		    jb	    short loc_3DB2
seg000:3DAF		    call    sub_3FEF
seg000:3DB2
seg000:3DB2 loc_3DB2:				    ; CODE XREF: sub_3D7E+Aj
seg000:3DB2					    ; sub_3D7E+11j ...
seg000:3DB2		    mov	    al,	0
seg000:3DB4		    jb	    short loc_3DD8
seg000:3DB6		    push    ds
seg000:3DB7		    mov	    al,	1Eh
seg000:3DB9		    call    table_lookup_ptr
seg000:3DBC		    mov	    bl,	[si+4]
seg000:3DBF		    pop	    ds
seg000:3DC0		    sub	    al,	al
seg000:3DC2		    cmp	    dh,	byte ptr ds:loc_46
seg000:3DC6		    jnz	    short loc_3DD0
seg000:3DC8		    cmp	    ch,	byte ptr ds:loc_43+2
seg000:3DCC		    jz	    short loc_3DD2
seg000:3DCE		    shl	    bl,	1
seg000:3DD0
seg000:3DD0 loc_3DD0:				    ; CODE XREF: sub_3D7E+48j
seg000:3DD0		    add	    al,	bl
seg000:3DD2
seg000:3DD2 loc_3DD2:				    ; CODE XREF: sub_3D7E+4Ej
seg000:3DD2		    add	    al,	byte ptr ds:loc_46+1
seg000:3DD6		    sub	    al,	cl
seg000:3DD8
seg000:3DD8 loc_3DD8:				    ; CODE XREF: sub_3D7E+36j
seg000:3DD8		    pop	    cx
seg000:3DD9		    cmp	    bh,	4Dh ; 'M'
seg000:3DDC		    jnz	    short loc_3DE0
seg000:3DDE		    mov	    al,	cl
seg000:3DE0
seg000:3DE0 loc_3DE0:				    ; CODE XREF: sub_3D7E+5Ej
seg000:3DE0		    cmp	    cs:zero?, ah
seg000:3DE5		    pop	    es
seg000:3DE6		    pop	    si
seg000:3DE7		    pop	    cx
seg000:3DE8		    pop	    bx
seg000:3DE9		    retn
seg000:3DE9 sub_3D7E	    endp
seg000:3DE9
seg000:3DEA
seg000:3DEA ; =============== S	U B R O	U T I N	E =======================================
seg000:3DEA
seg000:3DEA
seg000:3DEA FDD_?_3	    proc near		    ; CODE XREF: FDD_?_7+15p
seg000:3DEA					    ; FDD_?_7+3Fp ...
seg000:3DEA		    push    bx
seg000:3DEB		    push    cx
seg000:3DEC		    push    dx
seg000:3DED		    sub	    bh,	bh
seg000:3DEF		    mov	    bl,	dl
seg000:3DF1		    mov	    al,	cs:table_bits[bx]
seg000:3DF6		    test    byte ptr ds:loc_3E,	al
seg000:3DFA		    jnz	    short loc_3E27
seg000:3DFC		    or	    byte ptr ds:loc_3E,	al
seg000:3E00		    mov	    bh,	2
seg000:3E02
seg000:3E02 loc_3E02:				    ; CODE XREF: FDD_?_3+33j
seg000:3E02		    mov	    ah,	7
seg000:3E04		    call    FDD_rdy_wait
seg000:3E07		    jnb	    short loc_3E0C
seg000:3E09		    jmp	    _3DEA_ret
seg000:3E0C ; ---------------------------------------------------------------------------
seg000:3E0C
seg000:3E0C loc_3E0C:				    ; CODE XREF: FDD_?_3+1Dj
seg000:3E0C		    mov	    ah,	dl
seg000:3E0E		    call    FDD_rdy_wait
seg000:3E11		    jnb	    short loc_3E16
seg000:3E13		    jmp	    _3DEA_ret
seg000:3E16 ; ---------------------------------------------------------------------------
seg000:3E16
seg000:3E16 loc_3E16:				    ; CODE XREF: FDD_?_3+27j
seg000:3E16		    call    FDD_?_2
seg000:3E19		    jnb	    short loc_3E23
seg000:3E1B		    dec	    bh
seg000:3E1D		    jnz	    short loc_3E02
seg000:3E1F		    mov	    ah,	40h ; '@'
seg000:3E21		    jmp	    short _3DEA_ret
seg000:3E23 ; ---------------------------------------------------------------------------
seg000:3E23
seg000:3E23 loc_3E23:				    ; CODE XREF: FDD_?_3+2Fj
seg000:3E23		    mov	    byte ptr [si+4], 0
seg000:3E27
seg000:3E27 loc_3E27:				    ; CODE XREF: FDD_?_3+10j
seg000:3E27		    test    byte ptr [si], 20h
seg000:3E2A		    jz	    short loc_3E2E
seg000:3E2C		    shl	    ch,	1
seg000:3E2E
seg000:3E2E loc_3E2E:				    ; CODE XREF: FDD_?_3+40j
seg000:3E2E		    cmp	    [si+4], ch
seg000:3E31		    jz	    short loc_3E94
seg000:3E33		    mov	    [si+4], ch
seg000:3E36		    cli
seg000:3E37		    mov	    ah,	0Fh
seg000:3E39		    call    FDD_rdy_wait
seg000:3E3C		    jb	    short _3DEA_ret
seg000:3E3E		    mov	    ah,	dl
seg000:3E40		    call    FDD_rdy_wait
seg000:3E43		    jb	    short _3DEA_ret
seg000:3E45		    mov	    ah,	ch
seg000:3E47		    call    FDD_rdy_wait
seg000:3E4A		    jb	    short _3DEA_ret
seg000:3E4C		    sti
seg000:3E4D		    call    FDD_?_2
seg000:3E50		    mov	    ah,	40h ; '@'
seg000:3E52		    jb	    short _3DEA_ret
seg000:3E54		    push    si
seg000:3E55		    push    ds
seg000:3E56		    mov	    al,	1Eh
seg000:3E58		    call    table_lookup_ptr
seg000:3E5B		    mov	    cl,	[si+9]
seg000:3E5E		    pop	    ds
seg000:3E5F		    pop	    si
seg000:3E60		    mov	    ch,	0
seg000:3E62		    test    byte ptr ds:loc_3E+1, 80h
seg000:3E67		    jz	    short loc_3E7B
seg000:3E69		    or	    cx,	cx
seg000:3E6B		    jnz	    short loc_3E7D
seg000:3E6D		    mov	    cl,	14h
seg000:3E6F		    mov	    ah,	[si]
seg000:3E71		    and	    ah,	0C0h
seg000:3E74		    cmp	    ah,	80h ; ''
seg000:3E77		    jz	    short loc_3E7D
seg000:3E79		    mov	    cl,	0Fh
seg000:3E7B
seg000:3E7B loc_3E7B:				    ; CODE XREF: FDD_?_3+7Dj
seg000:3E7B		    jcxz    short loc_3E94
seg000:3E7D
seg000:3E7D loc_3E7D:				    ; CODE XREF: FDD_?_3+81j
seg000:3E7D					    ; FDD_?_3+8Dj
seg000:3E7D		    push    ax
seg000:3E7E		    push    cx
seg000:3E7F		    mov	    ax,	3E8h
seg000:3E82		    mul	    cx
seg000:3E84		    mov	    cx,	dx
seg000:3E86		    mov	    dx,	ax
seg000:3E88		    mov	    ah,	86h ; ''
seg000:3E8A		    stc
seg000:3E8B		    int	    15h		    ; SYSTEM - WAIT (AT,XT2,XT286,CONV,PS)
seg000:3E8B					    ; CX,DX = number of	microseconds to	wait
seg000:3E8B					    ; Return: CF clear:	after wait elapses, CF set: immediately	due to error
seg000:3E8D		    pop	    cx
seg000:3E8E		    pop	    ax
seg000:3E8F		    jnb	    short _3DEA_ret
seg000:3E91		    call    delay_doubleCX
seg000:3E94
seg000:3E94 loc_3E94:				    ; CODE XREF: FDD_?_3+47j
seg000:3E94					    ; FDD_?_3:loc_3E7Bj
seg000:3E94		    clc
seg000:3E95
seg000:3E95 _3DEA_ret:				    ; CODE XREF: FDD_?_3+1Fj
seg000:3E95					    ; FDD_?_3+29j ...
seg000:3E95		    sti
seg000:3E96		    pop	    dx
seg000:3E97		    pop	    cx
seg000:3E98		    pop	    bx
seg000:3E99		    retn
seg000:3E99 FDD_?_3	    endp
seg000:3E99
seg000:3E9A
seg000:3E9A ; =============== S	U B R O	U T I N	E =======================================
seg000:3E9A
seg000:3E9A
seg000:3E9A sub_3E9A	    proc near		    ; CODE XREF: sub_3D7E:loc_3DAAp
seg000:3E9A		    push    bx
seg000:3E9B		    push    si
seg000:3E9C		    push    ds
seg000:3E9D		    mov	    al,	1Eh
seg000:3E9F		    call    table_lookup_ptr
seg000:3EA2		    mov	    ah,	ch
seg000:3EA4		    call    FDD_rdy_wait
seg000:3EA7		    jb	    short loc_3ED6
seg000:3EA9		    mov	    ah,	dh
seg000:3EAB		    call    FDD_rdy_wait
seg000:3EAE		    jb	    short loc_3ED6
seg000:3EB0		    mov	    ah,	cl
seg000:3EB2		    call    FDD_rdy_wait
seg000:3EB5		    jb	    short loc_3ED6
seg000:3EB7		    mov	    ah,	[si+3]
seg000:3EBA		    call    FDD_rdy_wait
seg000:3EBD		    jb	    short loc_3ED6
seg000:3EBF		    mov	    ah,	[si+4]
seg000:3EC2		    call    FDD_rdy_wait
seg000:3EC5		    jb	    short loc_3ED6
seg000:3EC7		    mov	    ah,	cs:[di+5]
seg000:3ECB		    call    FDD_rdy_wait
seg000:3ECE		    jb	    short loc_3ED6
seg000:3ED0		    mov	    ah,	[si+6]
seg000:3ED3		    call    FDD_rdy_wait
seg000:3ED6
seg000:3ED6 loc_3ED6:				    ; CODE XREF: sub_3E9A+Dj
seg000:3ED6					    ; sub_3E9A+14j ...
seg000:3ED6		    pop	    ds
seg000:3ED7		    pop	    si
seg000:3ED8		    pop	    bx
seg000:3ED9		    retn
seg000:3ED9 sub_3E9A	    endp
seg000:3ED9
seg000:3EDA
seg000:3EDA ; =============== S	U B R O	U T I N	E =======================================
seg000:3EDA
seg000:3EDA
seg000:3EDA sub_3EDA	    proc near		    ; CODE XREF: sub_3D7E+27p
seg000:3EDA		    push    si
seg000:3EDB		    push    ds
seg000:3EDC		    mov	    al,	1Eh
seg000:3EDE		    call    table_lookup_ptr
seg000:3EE1		    mov	    ah,	[si+3]
seg000:3EE4		    call    FDD_rdy_wait
seg000:3EE7		    jb	    short loc_3EFF
seg000:3EE9		    mov	    ah,	[si+4]
seg000:3EEC		    call    FDD_rdy_wait
seg000:3EEF		    jb	    short loc_3EFF
seg000:3EF1		    mov	    ah,	[si+7]
seg000:3EF4		    call    FDD_rdy_wait
seg000:3EF7		    jb	    short loc_3EFF
seg000:3EF9		    mov	    ah,	[si+8]
seg000:3EFC		    call    FDD_rdy_wait
seg000:3EFF
seg000:3EFF loc_3EFF:				    ; CODE XREF: sub_3EDA+Dj
seg000:3EFF					    ; sub_3EDA+15j ...
seg000:3EFF		    pop	    ds
seg000:3F00		    pop	    si
seg000:3F01		    retn
seg000:3F01 sub_3EDA	    endp
seg000:3F01
seg000:3F02
seg000:3F02 ; =============== S	U B R O	U T I N	E =======================================
seg000:3F02
seg000:3F02
seg000:3F02 sub_3F02	    proc near		    ; CODE XREF: dma_fdd_?+16p
seg000:3F02					    ; fdd_?_0+6Cp
seg000:3F02		    push    bx
seg000:3F03		    push    cx
seg000:3F04		    push    dx
seg000:3F05		    push    si
seg000:3F06		    push    ds
seg000:3F07		    cli
seg000:3F08		    mov	    ch,	al
seg000:3F0A		    mov	    al,	ah
seg000:3F0C		    out	    0Ch, al	    ; DMA controller, 8237A-5.
seg000:3F0C					    ; clear byte pointer flip-flop.
seg000:3F0E		    call    null_sub
seg000:3F11		    out	    0Bh, al	    ; DMA 8237A-5. mode	register bits:
seg000:3F11					    ; 0-1: channel (00=0; 01=1;	10=2; 11=3)
seg000:3F11					    ; 2-3: transfer type (00=verify=Nop; 01=write; 10=read)
seg000:3F11					    ; 4: 1=enable auto-initialization
seg000:3F11					    ; 5: 1=address increment; 0=address	decrement
seg000:3F11					    ; 6-7: 00=demand mode; 01=single; 10=block;	11=cascade
seg000:3F13		    mov	    ax,	es
seg000:3F15		    cmp	    ax,	0F000h
seg000:3F18		    jnz	    short loc_3F1E
seg000:3F1A		    or	    bx,	8000h
seg000:3F1E
seg000:3F1E loc_3F1E:				    ; CODE XREF: sub_3F02+16j
seg000:3F1E		    rol	    ax,	4
seg000:3F21		    mov	    cl,	al
seg000:3F23		    and	    ax,	0FFF0h
seg000:3F26		    add	    ax,	bx
seg000:3F28		    adc	    cl,	0
seg000:3F2B		    and	    cl,	0Fh
seg000:3F2E		    push    ax
seg000:3F2F		    out	    4, al	    ; DMA controller, 8237A-5.
seg000:3F2F					    ; channel 2	base address
seg000:3F2F					    ; (also sets current address)
seg000:3F31		    call    null_sub
seg000:3F34		    mov	    al,	ah
seg000:3F36		    out	    4, al	    ; DMA controller, 8237A-5.
seg000:3F36					    ; channel 2	base address
seg000:3F36					    ; (also sets current address)
seg000:3F38		    mov	    al,	cl
seg000:3F3A		    call    null_sub
seg000:3F3D		    out	    81h, al	    ; DMA page register	74LS612:
seg000:3F3D					    ; Channel 2	(diskette DMA)	(address bits 16-23)
seg000:3F3F		    mov	    al,	1Eh
seg000:3F41		    call    table_lookup_ptr
seg000:3F44		    mov	    ah,	ch
seg000:3F46		    mov	    al,	0
seg000:3F48		    shr	    ax,	1
seg000:3F4A		    mov	    cl,	[si+3]
seg000:3F4D		    shl	    ax,	cl
seg000:3F4F		    dec	    ax
seg000:3F50		    push    ax
seg000:3F51		    out	    5, al	    ; DMA controller, 8237A-5.
seg000:3F51					    ; channel 2	base address and word count
seg000:3F53		    mov	    al,	ah
seg000:3F55		    call    null_sub
seg000:3F58		    out	    5, al	    ; DMA controller, 8237A-5.
seg000:3F58					    ; channel 2	base address and word count
seg000:3F5A		    mov	    al,	2
seg000:3F5C		    call    null_sub
seg000:3F5F		    out	    0Ah, al	    ; DMA controller, 8237A-5.
seg000:3F5F					    ; single mask bit register
seg000:3F5F					    ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
seg000:3F5F					    ; 2: 1=set mask for	channel; 0=clear mask (enable)
seg000:3F61		    pop	    dx
seg000:3F62		    pop	    ax
seg000:3F63		    add	    ax,	dx
seg000:3F65		    jnb	    short loc_3F69
seg000:3F67		    mov	    ah,	9
seg000:3F69
seg000:3F69 loc_3F69:				    ; CODE XREF: sub_3F02+63j
seg000:3F69		    mov	    al,	ch
seg000:3F6B		    sti
seg000:3F6C		    pop	    ds
seg000:3F6D		    pop	    si
seg000:3F6E		    pop	    dx
seg000:3F6F		    pop	    cx
seg000:3F70		    pop	    bx
seg000:3F71		    retn
seg000:3F71 sub_3F02	    endp
seg000:3F71
seg000:3F72
seg000:3F72 ; =============== S	U B R O	U T I N	E =======================================
seg000:3F72
seg000:3F72
seg000:3F72 FDD_?_2	    proc near		    ; CODE XREF: FDD_?_3:loc_3E16p
seg000:3F72					    ; FDD_?_3+63p
seg000:3F72		    call    FDD_busy_wait
seg000:3F75		    jb	    short loc_3F8B
seg000:3F77		    mov	    ah,	8
seg000:3F79		    call    FDD_rdy_wait
seg000:3F7C		    jb	    short loc_3F8B
seg000:3F7E		    call    FDD_?_1
seg000:3F81		    mov	    al,	byte ptr ds:loc_41+1
seg000:3F84		    and	    al,	60h
seg000:3F86		    cmp	    al,	60h ; '`'
seg000:3F88		    clc
seg000:3F89		    jnz	    short locret_3F8E
seg000:3F8B
seg000:3F8B loc_3F8B:				    ; CODE XREF: FDD_?_2+3j
seg000:3F8B					    ; FDD_?_2+Aj
seg000:3F8B		    mov	    ah,	40h ; '@'
seg000:3F8D		    stc
seg000:3F8E
seg000:3F8E locret_3F8E:			    ; CODE XREF: FDD_?_2+17j
seg000:3F8E		    retn
seg000:3F8E FDD_?_2	    endp
seg000:3F8E
seg000:3F8F
seg000:3F8F ; =============== S	U B R O	U T I N	E =======================================
seg000:3F8F
seg000:3F8F
seg000:3F8F FDD_busy_wait   proc near		    ; CODE XREF: FDD_?+25p
seg000:3F8F					    ; FDD_?_2p	...
seg000:3F8F		    push    bx
seg000:3F90		    push    cx
seg000:3F91		    mov	    ah,	90h ; ''
seg000:3F93		    mov	    al,	1
seg000:3F95		    clc
seg000:3F96		    int	    15h		    ; OS HOOK -	DEVICE BUSY LOOP (AT,XT2,XT286,CONV,PS)
seg000:3F96					    ; AL = diskette
seg000:3F98		    jb	    short loc_3FAE
seg000:3F9A		    mov	    bx,	6
seg000:3F9D		    mov	    cx,	0
seg000:3FA0		    mov	    ah,	ch
seg000:3FA2
seg000:3FA2 loc_3FA2:				    ; CODE XREF: FDD_busy_wait+1Aj
seg000:3FA2					    ; FDD_busy_wait+1Dj
seg000:3FA2		    test    byte ptr ds:loc_3E,	80h
seg000:3FA7		    jnz	    short loc_3FB0
seg000:3FA9		    loop    loc_3FA2
seg000:3FAB		    dec	    bx
seg000:3FAC		    jnz	    short loc_3FA2
seg000:3FAE
seg000:3FAE loc_3FAE:				    ; CODE XREF: FDD_busy_wait+9j
seg000:3FAE		    mov	    ah,	80h ; ''
seg000:3FB0
seg000:3FB0 loc_3FB0:				    ; CODE XREF: FDD_busy_wait+18j
seg000:3FB0		    and	    byte ptr ds:loc_3E,	7Fh
seg000:3FB5		    cmp	    cs:zero?, ah
seg000:3FBA		    pop	    cx
seg000:3FBB		    pop	    bx
seg000:3FBC		    retn
seg000:3FBC FDD_busy_wait   endp
seg000:3FBC
seg000:3FBD
seg000:3FBD ; =============== S	U B R O	U T I N	E =======================================
seg000:3FBD
seg000:3FBD
seg000:3FBD FDD_?_1	    proc near		    ; CODE XREF: FDD_?+34p
seg000:3FBD					    ; FDD_?_2+Cp ...
seg000:3FBD		    push    cx
seg000:3FBE		    push    dx
seg000:3FBF		    push    di
seg000:3FC0		    push    es
seg000:3FC1		    mov	    di,	42h ; 'B'
seg000:3FC4		    push    ds
seg000:3FC5		    pop	    es
seg000:3FC6		    mov	    cx,	7
seg000:3FC9
seg000:3FC9 loc_3FC9:				    ; CODE XREF: FDD_?_1+28j
seg000:3FC9		    mov	    ah,	40h ; '@'
seg000:3FCB		    call    floppy_rdy_wait
seg000:3FCE		    jb	    short loc_3FEA
seg000:3FD0		    inc	    dx
seg000:3FD1		    in	    al,	dx
seg000:3FD2		    stosb
seg000:3FD3		    push    cx
seg000:3FD4		    mov	    cx,	cs:RTC_test_timer
seg000:3FD9		    shr	    cx,	4
seg000:3FDC
seg000:3FDC loc_3FDC:				    ; CODE XREF: FDD_?_1:loc_3FDCj
seg000:3FDC		    loop    loc_3FDC
seg000:3FDE		    pop	    cx
seg000:3FDF		    dec	    dx
seg000:3FE0		    in	    al,	dx
seg000:3FE1		    test    al,	10h
seg000:3FE3		    jz	    short loc_3FEA
seg000:3FE5		    loop    loc_3FC9
seg000:3FE7		    stc
seg000:3FE8		    mov	    ah,	20h ; ' '
seg000:3FEA
seg000:3FEA loc_3FEA:				    ; CODE XREF: FDD_?_1+11j
seg000:3FEA					    ; FDD_?_1+26j
seg000:3FEA		    pop	    es
seg000:3FEB		    pop	    di
seg000:3FEC		    pop	    dx
seg000:3FED		    pop	    cx
seg000:3FEE		    retn
seg000:3FEE FDD_?_1	    endp
seg000:3FEE
seg000:3FEF
seg000:3FEF ; =============== S	U B R O	U T I N	E =======================================
seg000:3FEF
seg000:3FEF
seg000:3FEF sub_3FEF	    proc near		    ; CODE XREF: FDD_?_7+26p
seg000:3FEF					    ; FDD_?_7+50p ...
seg000:3FEF		    push    cx
seg000:3FF0		    push    si
seg000:3FF1		    call    FDD_busy_wait
seg000:3FF4		    rcl	    cl,	1
seg000:3FF6		    mov	    ch,	ah
seg000:3FF8		    call    FDD_?_1
seg000:3FFB		    jb	    short loc_4024
seg000:3FFD		    mov	    ah,	ch
seg000:3FFF		    rcr	    cl,	1
seg000:4001		    jb	    short loc_4024
seg000:4003		    mov	    ah,	byte ptr ds:loc_41+1
seg000:4007		    and	    ah,	0C0h
seg000:400A		    jz	    short loc_4024
seg000:400C		    cmp	    ah,	40h ; '@'
seg000:400F		    jnz	    short loc_4021
seg000:4011		    mov	    si,	(offset	offset_table+4)
seg000:4014		    mov	    cx,	8
seg000:4017
seg000:4017 loc_4017:				    ; CODE XREF: sub_3FEF+2Ej
seg000:4017		    lods    word ptr cs:[si]
seg000:4019		    test    byte ptr ds:loc_43,	al
seg000:401D		    loope   loc_4017
seg000:401F		    jnz	    short loc_4023
seg000:4021
seg000:4021 loc_4021:				    ; CODE XREF: sub_3FEF+20j
seg000:4021		    mov	    ah,	20h ; ' '
seg000:4023
seg000:4023 loc_4023:				    ; CODE XREF: sub_3FEF+30j
seg000:4023		    stc
seg000:4024
seg000:4024 loc_4024:				    ; CODE XREF: sub_3FEF+Cj
seg000:4024					    ; sub_3FEF+12j ...
seg000:4024		    pop	    si
seg000:4025		    pop	    cx
seg000:4026		    retn
seg000:4026 sub_3FEF	    endp
seg000:4026
seg000:4027
seg000:4027 ; =============== S	U B R O	U T I N	E =======================================
seg000:4027
seg000:4027
seg000:4027 FDD_rdy_wait    proc near		    ; CODE XREF: FDD_?+2Fp
seg000:4027					    ; FDD_?+47p ...
seg000:4027		    push    cx
seg000:4028		    push    dx
seg000:4029		    mov	    cl,	ah
seg000:402B		    mov	    ah,	0
seg000:402D		    call    floppy_rdy_wait
seg000:4030		    jb	    short loc_4037
seg000:4032		    inc	    dx
seg000:4033		    mov	    al,	cl
seg000:4035		    out	    dx,	al
seg000:4036		    clc
seg000:4037
seg000:4037 loc_4037:				    ; CODE XREF: FDD_rdy_wait+9j
seg000:4037		    pop	    dx
seg000:4038		    pop	    cx
seg000:4039		    retn
seg000:4039 FDD_rdy_wait    endp
seg000:4039
seg000:403A
seg000:403A ; =============== S	U B R O	U T I N	E =======================================
seg000:403A
seg000:403A
seg000:403A floppy_rdy_wait proc near		    ; CODE XREF: FDD_?_1+Ep
seg000:403A					    ; FDD_rdy_wait+6p
seg000:403A		    push    cx
seg000:403B		    or	    ah,	80h
seg000:403E		    mov	    dx,	3F4h
seg000:4041		    mov	    cx,	0FFFFh
seg000:4044
seg000:4044 loc_4044:				    ; CODE XREF: floppy_rdy_wait+Fj
seg000:4044		    in	    al,	dx	    ; Floppy: main status reg bits:
seg000:4044					    ; 0-3: diskette busy
seg000:4044					    ; 4: 1=cntrlr busy
seg000:4044					    ; 5: 1=non-DMA mode
seg000:4044					    ; 6: Data dir: 1=cntrlr to CPU
seg000:4044					    ; 7: 1=OK to snd/rcv cmd or	data
seg000:4045		    and	    al,	0C0h
seg000:4047		    cmp	    al,	ah
seg000:4049		    loopne  loc_4044
seg000:404B		    jnz	    short loc_405A
seg000:404D		    mov	    cx,	cs:RTC_test_timer
seg000:4052		    shr	    cx,	4
seg000:4055
seg000:4055 loc_4055:				    ; CODE XREF: floppy_rdy_wait:loc_4055j
seg000:4055		    loop    loc_4055
seg000:4057		    clc
seg000:4058		    pop	    cx
seg000:4059		    retn
seg000:405A ; ---------------------------------------------------------------------------
seg000:405A
seg000:405A loc_405A:				    ; CODE XREF: floppy_rdy_wait+11j
seg000:405A		    stc
seg000:405B		    mov	    ah,	80h ; ''
seg000:405D		    pop	    cx
seg000:405E		    retn
seg000:405E floppy_rdy_wait endp
seg000:405E
seg000:405F ; ---------------------------------------------------------------------------
seg000:405F ; START OF FUNCTION	CHUNK FOR page_fault
seg000:405F
seg000:405F Int_complete:			    ; CODE XREF: page_faultj
seg000:405F		    push    ax
seg000:4060		    push    ds
seg000:4061		    mov	    ds,	word ptr cs:loc_C5+1
seg000:4066		    or	    byte ptr ds:loc_3E,	80h
seg000:406B		    mov	    al,	20h ; ' '
seg000:406D		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:406F		    mov	    ah,	91h ; ''
seg000:4071		    mov	    al,	1
seg000:4073		    int	    15h		    ; OS HOOK -	SET FLAG AND COMPLETE INTERRUPT	(AT,XT2,XT286,CONV,PS)
seg000:4073					    ; AL = type	code, ES:BX -> request block for type codes 80h	through	BFh
seg000:4075		    pop	    ds
seg000:4076		    pop	    ax
seg000:4077		    iret
seg000:4077 ; END OF FUNCTION CHUNK FOR	page_fault
seg000:4078
seg000:4078 ; =============== S	U B R O	U T I N	E =======================================
seg000:4078
seg000:4078
seg000:4078 FDD_change?	    proc near		    ; CODE XREF: fdd_?_1+16p
seg000:4078					    ; FDD_change?_0+5p	...
seg000:4078		    push    ax
seg000:4079		    push    dx
seg000:407A		    call    sub_40D0
seg000:407D		    mov	    dx,	3F7h
seg000:4080		    in	    al,	dx	    ; Floppy disk: digital input register.
seg000:4080					    ; Used for diagnostics (except bit 7):
seg000:4080					    ; 0:   1=select drive 0
seg000:4080					    ; 1:   1=select drive 1
seg000:4080					    ; 2-5: Head	select 0-3 (bit	2=hd 0,	3=hd 1,	etc)
seg000:4080					    ; 6:   Write Gate
seg000:4080					    ; 7:   Change Line (1=ON)
seg000:4081		    and	    al,	80h
seg000:4083		    add	    al,	0FFh
seg000:4085		    pop	    dx
seg000:4086		    pop	    ax
seg000:4087		    retn
seg000:4087 FDD_change?	    endp
seg000:4087
seg000:4088
seg000:4088 ; =============== S	U B R O	U T I N	E =======================================
seg000:4088
seg000:4088
seg000:4088 FDD_?_4	    proc near		    ; CODE XREF: FDD_change?_0p
seg000:4088		    call    FDD_change?
seg000:408B		    jnb	    short locret_40BA
seg000:408D		    push    bx
seg000:408E		    push    cx
seg000:408F		    mov	    bl,	al
seg000:4091		    and	    byte ptr [si], 0EFh
seg000:4094		    call    FDD_?
seg000:4097		    call    FDD_?_0
seg000:409A		    mov	    ch,	2
seg000:409C		    call    FDD_?_3
seg000:409F		    mov	    ch,	0
seg000:40A1		    call    FDD_?_3
seg000:40A4		    mov	    al,	bl
seg000:40A6		    mov	    bl,	dl
seg000:40A8		    sub	    bh,	bh
seg000:40AA		    mov	    ah,	cs:table_bits[bx]
seg000:40AF		    not	    ah
seg000:40B1		    and	    byte ptr ds:loc_3E+1, ah
seg000:40B5		    mov	    ah,	6
seg000:40B7		    stc
seg000:40B8		    pop	    cx
seg000:40B9		    pop	    bx
seg000:40BA
seg000:40BA locret_40BA:			    ; CODE XREF: FDD_?_4+3j
seg000:40BA		    retn
seg000:40BA FDD_?_4	    endp
seg000:40BA
seg000:40BB
seg000:40BB ; =============== S	U B R O	U T I N	E =======================================
seg000:40BB
seg000:40BB
seg000:40BB cmos_read_10h   proc near		    ; CODE XREF: fdd_?_0+15p
seg000:40BB					    ; cmos_read_?+39p ...
seg000:40BB		    mov	    al,	10h
seg000:40BD		    call    cmos_readALcond
seg000:40C0		    jb	    short loc_40CD
seg000:40C2		    cmp	    dl,	0
seg000:40C5		    jnz	    short loc_40CA
seg000:40C7		    shr	    al,	4
seg000:40CA
seg000:40CA loc_40CA:				    ; CODE XREF: cmos_read_10h+Aj
seg000:40CA		    and	    al,	0Fh
seg000:40CC		    retn
seg000:40CD ; ---------------------------------------------------------------------------
seg000:40CD
seg000:40CD loc_40CD:				    ; CODE XREF: cmos_read_10h+5j
seg000:40CD		    mov	    al,	2
seg000:40CF		    retn
seg000:40CF cmos_read_10h   endp
seg000:40CF
seg000:40D0
seg000:40D0 ; =============== S	U B R O	U T I N	E =======================================
seg000:40D0
seg000:40D0
seg000:40D0 sub_40D0	    proc near		    ; CODE XREF: FDD_change?+2p
seg000:40D0					    ; FDD_?_8+Dp
seg000:40D0		    push    ax
seg000:40D1		    push    cx
seg000:40D2		    push    dx
seg000:40D3		    call    FDD_?_0
seg000:40D6		    jnb	    short loc_411D
seg000:40D8		    mov	    al,	1Eh
seg000:40DA		    push    si
seg000:40DB		    push    ds
seg000:40DC		    call    table_lookup_ptr
seg000:40DF		    mov	    al,	7Dh ; '}'
seg000:40E1		    mul	    byte ptr [si+0Ah]
seg000:40E4		    pop	    ds
seg000:40E5		    pop	    si
seg000:40E6		    cmp	    ax,	3E8h
seg000:40E9		    ja	    short loc_40EE
seg000:40EB		    mov	    ax,	3E8h
seg000:40EE
seg000:40EE loc_40EE:				    ; CODE XREF: sub_40D0+19j
seg000:40EE		    push    ax
seg000:40EF		    call    sub_4200
seg000:40F2		    mov	    ah,	90h ; ''
seg000:40F4		    mov	    al,	0FDh ; 'ý'
seg000:40F6		    clc
seg000:40F7		    int	    15h		    ; OS HOOK -	DEVICE BUSY LOOP (AT,XT2,XT286,CONV,PS)
seg000:40F7					    ; AL = diskette motor start
seg000:40F9		    pop	    ax
seg000:40FA		    rcl	    dx,	1
seg000:40FC		    call    sub_41C6
seg000:40FF		    rcr	    dx,	1
seg000:4101		    jnb	    short loc_4108
seg000:4103		    call    FDD_?_0
seg000:4106		    jnb	    short loc_411D
seg000:4108
seg000:4108 loc_4108:				    ; CODE XREF: sub_40D0+31j
seg000:4108		    push    ax
seg000:4109		    mov	    dx,	3E8h
seg000:410C		    mul	    dx
seg000:410E		    mov	    cx,	ax
seg000:4110		    xchg    cx,	dx
seg000:4112		    mov	    ah,	86h ; ''
seg000:4114		    stc
seg000:4115		    int	    15h		    ; SYSTEM - WAIT (AT,XT2,XT286,CONV,PS)
seg000:4115					    ; CX,DX = number of	microseconds to	wait
seg000:4115					    ; Return: CF clear:	after wait elapses, CF set: immediately	due to error
seg000:4117		    pop	    cx
seg000:4118		    jnb	    short loc_411D
seg000:411A		    call    delay_doubleCX
seg000:411D
seg000:411D loc_411D:				    ; CODE XREF: sub_40D0+6j
seg000:411D					    ; sub_40D0+36j ...
seg000:411D		    pop	    dx
seg000:411E		    pop	    cx
seg000:411F		    pop	    ax
seg000:4120		    retn
seg000:4120 sub_40D0	    endp
seg000:4120
seg000:4121
seg000:4121 ; =============== S	U B R O	U T I N	E =======================================
seg000:4121
seg000:4121
seg000:4121 FDD_?_0	    proc near		    ; CODE XREF: FDD_?_4+Fp
seg000:4121					    ; sub_40D0+3p ...
seg000:4121		    push    ax
seg000:4122		    push    bx
seg000:4123		    push    dx
seg000:4124		    cmp	    byte ptr cs:word_4C5, 1
seg000:412A		    jnz	    short loc_413E
seg000:412C		    call    out_9F4_sync
seg000:412F		    mov	    byte ptr cs:word_4C5, 2
seg000:4135		    out	    0F4h, al
seg000:4137		    mov	    cs:RTC_test_timer, 1B8h
seg000:413E
seg000:413E loc_413E:				    ; CODE XREF: FDD_?_0+9j
seg000:413E		    sub	    bh,	bh
seg000:4140		    mov	    bl,	dl
seg000:4142		    cli
seg000:4143		    mov	    byte ptr cs:loc_54+2, dl
seg000:4148		    mov	    byte ptr ds:loc_3E+2, 0FFh
seg000:414D		    mov	    al,	byte ptr ds:loc_3E+1
seg000:4150		    mov	    ah,	al
seg000:4152		    or	    al,	cs:[bx+380Eh]
seg000:4157		    and	    al,	0CFh
seg000:4159		    rol	    dl,	4
seg000:415C		    or	    al,	dl
seg000:415E		    ror	    dl,	4
seg000:4161		    mov	    byte ptr ds:loc_3E+1, al
seg000:4164		    rol	    al,	4
seg000:4167		    or	    al,	0Ch
seg000:4169		    mov	    dx,	3F2h
seg000:416C		    out	    dx,	al	    ; Floppy: digital output reg bits:
seg000:416C					    ; 0-1: Drive to select 0-3 (AT: bit	1 not used)
seg000:416C					    ; 2:   0=reset diskette controller;	1=enable controller
seg000:416C					    ; 3:   1=enable diskette DMA and interrupts
seg000:416C					    ; 4-7: drive motor enable.	Set bits to turn drive ON.
seg000:416C					    ;
seg000:416D		    sti
seg000:416E		    test    cs:[bx+380Eh], ah
seg000:4173		    jnz	    short loc_4176
seg000:4175		    stc
seg000:4176
seg000:4176 loc_4176:				    ; CODE XREF: FDD_?_0+52j
seg000:4176		    pop	    dx
seg000:4177		    pop	    bx
seg000:4178		    pop	    ax
seg000:4179		    retn
seg000:4179 FDD_?_0	    endp
seg000:4179
seg000:417A
seg000:417A ; =============== S	U B R O	U T I N	E =======================================
seg000:417A
seg000:417A
seg000:417A sub_417A	    proc near		    ; CODE XREF: FDD_?+67p
seg000:417A					    ; dma_fdd_?+34p ...
seg000:417A		    push    ax
seg000:417B		    push    si
seg000:417C		    push    ds
seg000:417D		    mov	    al,	1Eh
seg000:417F		    call    table_lookup_ptr
seg000:4182		    mov	    al,	[si+2]
seg000:4185		    pop	    ds
seg000:4186		    mov	    byte ptr ds:loc_3E+2, al
seg000:4189		    pop	    si
seg000:418A		    pop	    ax
seg000:418B		    retn
seg000:418B sub_417A	    endp
seg000:418B
seg000:418C
seg000:418C ; =============== S	U B R O	U T I N	E =======================================
seg000:418C
seg000:418C
seg000:418C sub_418C	    proc near		    ; CODE XREF: dma_fdd_?+9p
seg000:418C		    push    ax
seg000:418D		    call    sub_41C6
seg000:4190		    and	    byte ptr ds:loc_3E+1, 7Fh
seg000:4195		    cmp	    ah,	3
seg000:4198		    jnz	    short loc_419F
seg000:419A		    or	    byte ptr ds:loc_3E+1, 80h
seg000:419F
seg000:419F loc_419F:				    ; CODE XREF: sub_418C+Cj
seg000:419F		    mov	    al,	[si]
seg000:41A1		    test    al,	10h
seg000:41A3		    jnz	    short loc_41C4
seg000:41A5		    and	    byte ptr ds:loc_8B,	0F3h
seg000:41AA		    or	    byte ptr ds:loc_8B,	8
seg000:41AF		    and	    al,	1Fh
seg000:41B1		    mov	    ah,	al
seg000:41B3		    or	    ah,	80h
seg000:41B6		    and	    al,	6
seg000:41B8		    cmp	    al,	4
seg000:41BA		    jz	    short loc_41C2
seg000:41BC		    xor	    ah,	80h
seg000:41BF		    or	    ah,	40h
seg000:41C2
seg000:41C2 loc_41C2:				    ; CODE XREF: sub_418C+2Ej
seg000:41C2		    mov	    [si], ah
seg000:41C4
seg000:41C4 loc_41C4:				    ; CODE XREF: sub_418C+17j
seg000:41C4		    pop	    ax
seg000:41C5		    retn
seg000:41C5 sub_418C	    endp
seg000:41C5
seg000:41C6
seg000:41C6 ; =============== S	U B R O	U T I N	E =======================================
seg000:41C6
seg000:41C6
seg000:41C6 sub_41C6	    proc near		    ; CODE XREF: fdd_?_0+5p
seg000:41C6					    ; cmos_read_?:loc_3A4Ep ...
seg000:41C6		    push    ax
seg000:41C7		    mov	    al,	[si]
seg000:41C9		    or	    al,	al
seg000:41CB		    jz	    short loc_41E3
seg000:41CD		    mov	    ah,	byte ptr ds:loc_8F
seg000:41D1		    or	    dl,	dl
seg000:41D3		    jz	    short loc_41D8
seg000:41D5		    shr	    ah,	4
seg000:41D8
seg000:41D8 loc_41D8:				    ; CODE XREF: sub_41C6+Dj
seg000:41D8		    and	    ah,	7
seg000:41DB		    and	    al,	0F8h
seg000:41DD		    or	    al,	ah
seg000:41DF		    mov	    [si], al
seg000:41E1		    jmp	    short loc_41F6
seg000:41E3 ; ---------------------------------------------------------------------------
seg000:41E3
seg000:41E3 loc_41E3:				    ; CODE XREF: sub_41C6+5j
seg000:41E3		    call    cmos_read_10h
seg000:41E6		    jb	    short loc_41F6
seg000:41E8		    or	    al,	al
seg000:41EA		    jz	    short loc_41F6
seg000:41EC		    mov	    ah,	1
seg000:41EE		    cmp	    al,	1
seg000:41F0		    jnz	    short loc_41F4
seg000:41F2		    mov	    ah,	94h ; ''
seg000:41F4
seg000:41F4 loc_41F4:				    ; CODE XREF: sub_41C6+2Aj
seg000:41F4		    mov	    [si], ah
seg000:41F6
seg000:41F6 loc_41F6:				    ; CODE XREF: sub_41C6+1Bj
seg000:41F6					    ; sub_41C6+20j ...
seg000:41F6		    pop	    ax
seg000:41F7		    retn
seg000:41F7 sub_41C6	    endp
seg000:41F7
seg000:41F7 ; ---------------------------------------------------------------------------
seg000:41F8 off_41F8	    dw offset loc_4248	    ; DATA XREF: sub_4200+31r
seg000:41FA		    dw offset loc_423F
seg000:41FC		    dw offset loc_4236
seg000:41FE		    dw offset loc_425B
seg000:4200
seg000:4200 ; =============== S	U B R O	U T I N	E =======================================
seg000:4200
seg000:4200
seg000:4200 sub_4200	    proc near		    ; CODE XREF: dma_fdd_?:loc_395Ep
seg000:4200					    ; cmos_read_?+51p ...
seg000:4200		    push    ax
seg000:4201		    push    bx
seg000:4202		    push    cx
seg000:4203		    mov	    ch,	[si]
seg000:4205		    or	    ch,	ch
seg000:4207		    jz	    short loc_4262
seg000:4209		    mov	    al,	byte ptr ds:loc_8F
seg000:420C		    mov	    cl,	dl
seg000:420E		    shl	    cl,	2
seg000:4211		    rol	    al,	cl
seg000:4213		    test    al,	2
seg000:4215		    jnz	    short loc_4225
seg000:4217		    and	    al,	0F8h
seg000:4219		    mov	    ah,	ch
seg000:421B		    and	    ah,	7
seg000:421E		    or	    al,	ah
seg000:4220		    rol	    al,	cl
seg000:4222		    mov	    byte ptr ds:loc_8F,	al
seg000:4225
seg000:4225 loc_4225:				    ; CODE XREF: sub_4200+15j
seg000:4225		    mov	    al,	ch
seg000:4227		    and	    ax,	0C0h
seg000:422A		    rol	    al,	3
seg000:422D		    mov	    bx,	ax
seg000:422F		    mov	    ah,	7
seg000:4231		    jmp	    cs:off_41F8[bx]
seg000:4236
seg000:4236 loc_4236:				    ; DATA XREF: seg000:41FCo
seg000:4236		    test    ch,	1
seg000:4239		    jnz	    short loc_425B
seg000:423B		    mov	    ah,	0
seg000:423D		    jmp	    short loc_4253
seg000:423F ; ---------------------------------------------------------------------------
seg000:423F
seg000:423F loc_423F:				    ; CODE XREF: sub_4200+31j
seg000:423F					    ; DATA XREF: seg000:41FAo
seg000:423F		    test    ch,	20h
seg000:4242		    jz	    short loc_425B
seg000:4244		    mov	    ah,	1
seg000:4246		    jmp	    short loc_4253
seg000:4248 ; ---------------------------------------------------------------------------
seg000:4248
seg000:4248 loc_4248:				    ; CODE XREF: sub_4200+31j
seg000:4248					    ; DATA XREF: seg000:off_41F8o
seg000:4248		    call    cmos_read_10h
seg000:424B		    jb	    short loc_425B
seg000:424D		    cmp	    al,	2
seg000:424F		    jnz	    short loc_425B
seg000:4251		    mov	    ah,	2
seg000:4253
seg000:4253 loc_4253:				    ; CODE XREF: sub_4200+3Dj
seg000:4253					    ; sub_4200+46j
seg000:4253		    test    ch,	10h
seg000:4256		    jz	    short loc_425B
seg000:4258		    add	    ah,	3
seg000:425B
seg000:425B loc_425B:				    ; CODE XREF: sub_4200+31j
seg000:425B					    ; sub_4200+39j ...
seg000:425B		    and	    ch,	0F8h
seg000:425E		    or	    ah,	ch
seg000:4260		    mov	    [si], ah
seg000:4262
seg000:4262 loc_4262:				    ; CODE XREF: sub_4200+7j
seg000:4262		    pop	    cx
seg000:4263		    pop	    bx
seg000:4264		    pop	    ax
seg000:4265		    retn
seg000:4265 sub_4200	    endp
seg000:4265
seg000:4266
seg000:4266 ; =============== S	U B R O	U T I N	E =======================================
seg000:4266
seg000:4266
seg000:4266 FDD_init_detect? proc near		    ; CODE XREF: ColrWarm_Boot+437p
seg000:4266		    push    bx
seg000:4267		    push    dx
seg000:4268		    push    si
seg000:4269		    push    ds
seg000:426A		    push    ax
seg000:426B		    mov	    ds,	word ptr cs:loc_C5+1
seg000:4270		    mov	    byte ptr ds:loc_8F,	0
seg000:4275		    mov	    byte ptr cs:unk_4CB, 1
seg000:427B		    mov	    byte ptr cs:loc_52+1, 0
seg000:4281		    mov	    byte ptr cs:loc_54+2, 0
seg000:4287		    or	    byte ptr ds:loc_9F+1, 1
seg000:428C		    mov	    dx,	3F7h
seg000:428F		    mov	    al,	2
seg000:4291		    out	    dx,	al	    ; Floppy disk: AT diskette control register	bits:
seg000:4291					    ; 0-1: data	transfer rate
seg000:4291					    ;	   00=500 KBS, 01=300 KBS, 10=250 KBS, 11=reserved
seg000:4292		    mov	    byte ptr ds:loc_3E+1, 0
seg000:4297		    mov	    ax,	0
seg000:429A		    mov	    dx,	ax
seg000:429C		    int	    13h		    ; DISK - RESET DISK	SYSTEM
seg000:429C					    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
seg000:429E		    mov	    ax,	0
seg000:42A1		    int	    13h		    ; DISK - RESET DISK	SYSTEM
seg000:42A1					    ; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
seg000:42A3		    jb	    short loc_42E9
seg000:42A5		    sub	    ax,	ax
seg000:42A7		    mov	    byte ptr ds:loc_41,	al
seg000:42AA		    mov	    byte ptr ds:loc_3E,	al
seg000:42AD		    mov	    byte ptr ds:loc_3E+1, al
seg000:42B0		    mov	    byte ptr ds:loc_3E+2, al
seg000:42B3		    and	    byte ptr ds:loc_8B,	33h
seg000:42B8		    or	    byte ptr ds:loc_8B,	0C0h
seg000:42BD		    sub	    dx,	dx
seg000:42BF
seg000:42BF loc_42BF:				    ; CODE XREF: FDD_init_detect?+79j
seg000:42BF		    mov	    bx,	dx
seg000:42C1		    shl	    bx,	1
seg000:42C3		    mov	    si,	cs:offset_table[bx]
seg000:42C8		    mov	    byte ptr [si], 0
seg000:42CB		    call    FDD_?_8
seg000:42CE		    cmp	    byte ptr [si], 0
seg000:42D1		    jz	    short loc_42D8
seg000:42D3		    inc	    byte ptr cs:loc_52+1
seg000:42D8
seg000:42D8 loc_42D8:				    ; CODE XREF: FDD_init_detect?+6Bj
seg000:42D8		    call    sub_4200
seg000:42DB		    inc	    dx
seg000:42DC		    cmp	    dx,	2
seg000:42DF		    jb	    short loc_42BF
seg000:42E1		    mov	    byte ptr ds:loc_3E,	0
seg000:42E6		    call    sub_417A
seg000:42E9
seg000:42E9 loc_42E9:				    ; CODE XREF: FDD_init_detect?+3Dj
seg000:42E9		    pop	    bx
seg000:42EA		    mov	    al,	bl
seg000:42EC		    and	    byte ptr ds:loc_9F+1, 0FEh
seg000:42F1		    cmp	    cs:zero?, ah
seg000:42F6		    pop	    ds
seg000:42F7		    pop	    si
seg000:42F8		    pop	    dx
seg000:42F9		    pop	    bx
seg000:42FA		    retn
seg000:42FA FDD_init_detect? endp
seg000:42FA
seg000:42FB
seg000:42FB ; =============== S	U B R O	U T I N	E =======================================
seg000:42FB
seg000:42FB
seg000:42FB FDD_?_8	    proc near		    ; CODE XREF: FDD_init_detect?+65p
seg000:42FB		    push    ax
seg000:42FC		    push    cx
seg000:42FD		    call    cmos_read_10h
seg000:4300		    jb	    short loc_4324
seg000:4302		    or	    al,	al
seg000:4304		    jz	    short loc_4324
seg000:4306		    mov	    cl,	al
seg000:4308		    call    sub_40D0
seg000:430B		    mov	    ch,	1
seg000:430D		    call    FDD_?_3
seg000:4310		    jb	    short loc_4324
seg000:4312		    mov	    ch,	1Eh
seg000:4314		    call    FDD_?_3
seg000:4317		    jb	    short loc_4324
seg000:4319		    mov	    al,	1
seg000:431B		    cmp	    cl,	1
seg000:431E		    jnz	    short loc_4322
seg000:4320		    mov	    al,	94h ; ''
seg000:4322
seg000:4322 loc_4322:				    ; CODE XREF: FDD_?_8+23j
seg000:4322		    mov	    [si], al
seg000:4324
seg000:4324 loc_4324:				    ; CODE XREF: FDD_?_8+5j
seg000:4324					    ; FDD_?_8+9j ...
seg000:4324		    pop	    cx
seg000:4325		    pop	    ax
seg000:4326		    retn
seg000:4326 FDD_?_8	    endp
seg000:4326
seg000:4327
seg000:4327 ; =============== S	U B R O	U T I N	E =======================================
seg000:4327
seg000:4327
seg000:4327 sub_4327	    proc near		    ; CODE XREF: sub_361C+80p
seg000:4327		    push    ax
seg000:4328		    push    bx
seg000:4329		    push    ds
seg000:432A		    xor	    bx,	bx
seg000:432C		    mov	    bl,	dl
seg000:432E		    mov	    ds,	word ptr cs:loc_C5+1
seg000:4333		    mov	    bx,	cs:offset_table[bx]
seg000:4338		    call    cmos_read_10h
seg000:433B		    jb	    short loc_436D
seg000:433D		    cmp	    al,	4
seg000:433F		    ja	    short loc_436D
seg000:4341		    test    al,	al
seg000:4343		    jz	    short loc_436D
seg000:4345		    test    byte ptr [bx], 10h
seg000:4348		    jz	    short loc_436D
seg000:434A		    dec	    al
seg000:434C		    shl	    al,	2
seg000:434F		    test    byte ptr [bx], 0C0h
seg000:4352		    jnz	    short loc_4356
seg000:4354		    add	    al,	2
seg000:4356
seg000:4356 loc_4356:				    ; CODE XREF: sub_4327+2Bj
seg000:4356		    xor	    bx,	bx
seg000:4358		    mov	    bl,	al
seg000:435A		    cmp	    cs:off_37E6[bx], 0FFFFh
seg000:4360		    jz	    short loc_436D
seg000:4362		    push    cs
seg000:4363		    pop	    es
seg000:4364		    mov	    di,	cs:off_37E6[bx]
seg000:4369		    clc
seg000:436A		    jmp	    short loc_436E
seg000:436C ; ---------------------------------------------------------------------------
seg000:436C		    nop
seg000:436D
seg000:436D loc_436D:				    ; CODE XREF: sub_4327+14j
seg000:436D					    ; sub_4327+18j ...
seg000:436D		    stc
seg000:436E
seg000:436E loc_436E:				    ; CODE XREF: sub_4327+43j
seg000:436E		    pop	    ds
seg000:436F		    pop	    bx
seg000:4370		    pop	    ax
seg000:4371		    retn
seg000:4371 sub_4327	    endp
seg000:4371
seg000:4372
seg000:4372 ; =============== S	U B R O	U T I N	E =======================================
seg000:4372
seg000:4372
seg000:4372 FPU_error_0	    proc far		    ; CODE XREF: FPU_errorj
seg000:4372					    ; DATA XREF: ColrWarm_Boot+CCo
seg000:4372		    push    di
seg000:4373		    push    ds
seg000:4374		    push    es
seg000:4375		    sti
seg000:4376		    cld
seg000:4377		    mov	    ds,	word ptr cs:loc_C5+1
seg000:437C		    out	    0FBh, al	    ; AT 80287 data.
seg000:437C					    ; 286 sends	opcodes	& operands and receives	results.
seg000:437E		    pushf
seg000:437F		    inc	    byte ptr ds:loc_BB+4
seg000:4383		    popf
seg000:4384		    mov	    di,	ax
seg000:4386		    cmp	    ah,	13h
seg000:4389		    jz	    short loc_439E
seg000:438B		    mov	    es,	cs:colorText
seg000:4390		    assume es:nothing
seg000:4390		    mov	    al,	byte ptr ds:loc_E+2
seg000:4393		    and	    al,	30h
seg000:4395		    cmp	    al,	30h ; '0'
seg000:4397		    jnz	    short loc_439E
seg000:4399		    mov	    es,	cs:monoText
seg000:439E		    assume es:nothing
seg000:439E
seg000:439E loc_439E:				    ; CODE XREF: FPU_error_0+17j
seg000:439E					    ; FPU_error_0+25j ...
seg000:439E		    mov	    al,	byte ptr ds:init_ram_loop
seg000:43A1		    cmp	    al,	byte ptr cs:loc_41+1
seg000:43A6		    jnz	    short loc_43FA
seg000:43A8		    mov	    al,	byte ptr ds:loc_48+1
seg000:43AB		    cmp	    al,	byte ptr cs:loc_2+1
seg000:43B0		    jnz	    short loc_43F0
seg000:43B2
seg000:43B2 loc_43B2:				    ; CODE XREF: FPU_error_0+86j
seg000:43B2		    cmp	    ah,	0Eh
seg000:43B5		    jnz	    short loc_43CC
seg000:43B7		    cmp	    byte ptr cs:loc_41,	0
seg000:43BD		    jnz	    short loc_43CC
seg000:43BF		    and	    ax,	7
seg000:43C2		    shl	    ax,	1
seg000:43C4		    xchg    ax,	di
seg000:43C5		    call    cs:video_jumptable_2[di]
seg000:43CA		    jmp	    short loc_43E2
seg000:43CC ; ---------------------------------------------------------------------------
seg000:43CC
seg000:43CC loc_43CC:				    ; CODE XREF: FPU_error_0+43j
seg000:43CC					    ; FPU_error_0+4Bj
seg000:43CC		    cmp	    ah,	14h
seg000:43CF		    nop
seg000:43D0		    jnb	    short loc_43FF
seg000:43D2		    mov	    al,	ah
seg000:43D4		    xor	    ah,	ah
seg000:43D6		    shl	    ax,	1
seg000:43D8		    xchg    ax,	di
seg000:43D9		    call    cs:video_jumptable_1[di]
seg000:43DE		    jmp	    short loc_43E2
seg000:43E0 ; ---------------------------------------------------------------------------
seg000:43E0
seg000:43E0 loc_43E0:				    ; CODE XREF: FPU_error_0+90j
seg000:43E0					    ; FPU_error_0+95j
seg000:43E0		    mov	    ax,	di
seg000:43E2
seg000:43E2 loc_43E2:				    ; CODE XREF: FPU_error_0+58j
seg000:43E2					    ; FPU_error_0+6Cj ...
seg000:43E2		    pushf
seg000:43E3		    dec	    byte ptr ds:loc_BB+4
seg000:43E7		    jnz	    short loc_43EB
seg000:43E9		    out	    0F9h, al	    ; AT 80287 data.
seg000:43E9					    ; 286 sends	opcodes	& operands and receives	results.
seg000:43EB
seg000:43EB loc_43EB:				    ; CODE XREF: FPU_error_0+75j
seg000:43EB		    popf
seg000:43EC		    pop	    es
seg000:43ED		    assume es:nothing
seg000:43ED		    pop	    ds
seg000:43EE		    pop	    di
seg000:43EF		    iret
seg000:43F0 ; ---------------------------------------------------------------------------
seg000:43F0
seg000:43F0 loc_43F0:				    ; CODE XREF: FPU_error_0+3Ej
seg000:43F0		    mov	    byte ptr cs:loc_2+1, al
seg000:43F4		    stc
seg000:43F5		    call    sub_4FC6
seg000:43F8		    jmp	    short loc_43B2
seg000:43FA ; ---------------------------------------------------------------------------
seg000:43FA
seg000:43FA loc_43FA:				    ; CODE XREF: FPU_error_0+34j
seg000:43FA		    call    sub_5093
seg000:43FD		    jmp	    short loc_439E
seg000:43FF ; ---------------------------------------------------------------------------
seg000:43FF
seg000:43FF loc_43FF:				    ; CODE XREF: FPU_error_0+5Ej
seg000:43FF		    cmp	    ah,	64h ; 'd'
seg000:4402		    jb	    short loc_43E0
seg000:4404		    cmp	    ah,	67h ; 'g'
seg000:4407		    jnb	    short loc_43E0
seg000:4409		    push    ax
seg000:440A		    mov	    ax,	di
seg000:440C		    sub	    ah,	64h ; 'd'
seg000:440F		    push    bp
seg000:4410		    call    push_ret_ah
seg000:4413		    jmp	    short loc_441C
seg000:4415 ; ---------------------------------------------------------------------------
seg000:4415		    nop
seg000:4415 ; ---------------------------------------------------------------------------
seg000:4416 ret_vectors_0   dw offset ret_ah0
seg000:4418		    dw offset ret_ah1
seg000:441A		    dw offset ret_ah2
seg000:441C ; ---------------------------------------------------------------------------
seg000:441C
seg000:441C loc_441C:				    ; CODE XREF: FPU_error_0+A1j
seg000:441C		    pop	    bp
seg000:441D		    pop	    ax
seg000:441E		    jmp	    short loc_43E2
seg000:441E ; ---------------------------------------------------------------------------
seg000:4420 video_jumptable_1 dw offset	sub_4F2E      ;	0 ; DATA XREF: FPU_error_0+67r
seg000:4420		    dw offset write_CX_to_60h; 1
seg000:4420		    dw offset sub_5245	    ; 2
seg000:4420		    dw offset read_50h_bl_toDX;	3
seg000:4420		    dw offset sub_52E3	    ; 4
seg000:4420		    dw offset sub_5184	    ; 5
seg000:4420		    dw offset sub_4A70	    ; 6
seg000:4420		    dw offset loc_4A75	    ; 7
seg000:4420		    dw offset sub_498A	    ; 8
seg000:4420		    dw offset load_some_table; 9
seg000:4420		    dw offset sub_4870	    ; 0Ah
seg000:4420		    dw offset sub_52B6	    ; 0Bh
seg000:4420		    dw offset sub_4935	    ; 0Ch
seg000:4420		    dw offset sub_4A3E	    ; 0Dh
seg000:4420		    dw offset sub_4744	    ; 0Eh
seg000:4420		    dw offset read_some_ram ; 0Fh
seg000:4420		    dw offset nullsub_2	    ; 10h
seg000:4420		    dw offset nullsub_2	    ; 11h
seg000:4420		    dw offset nullsub_2	    ; 12h
seg000:4420		    dw offset sub_46C3	    ; 13h
seg000:4448 video_jumptable_2 dw offset	sub_4744      ;	0 ; DATA XREF: FPU_error_0+53r
seg000:4448		    dw offset sub_4744	    ; 1
seg000:4448		    dw offset something_Vsynced; 2
seg000:4448		    dw offset something_Vsynced; 3
seg000:4448		    dw offset sub_4744	    ; 4
seg000:4448		    dw offset sub_4744	    ; 5
seg000:4448		    dw offset sub_4459	    ; 6
seg000:4448		    dw offset sub_4569	    ; 7
seg000:4458 ; ---------------------------------------------------------------------------
seg000:4458
seg000:4458 nullsub_2:				    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:4458		    retn
seg000:4458 FPU_error_0	    endp
seg000:4458
seg000:4459
seg000:4459 ; =============== S	U B R O	U T I N	E =======================================
seg000:4459
seg000:4459
seg000:4459 sub_4459	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_2o
seg000:4459
seg000:4459 ; FUNCTION CHUNK AT	seg000:44EC SIZE 00000062 BYTES
seg000:4459
seg000:4459		    test    bl,	80h
seg000:445C		    jz	    short loc_4461
seg000:445E		    jmp	    sub_4744
seg000:4461 ; ---------------------------------------------------------------------------
seg000:4461
seg000:4461 loc_4461:				    ; CODE XREF: sub_4459+3j
seg000:4461		    push    ax
seg000:4462		    push    bx
seg000:4463		    push    dx
seg000:4464		    push    si
seg000:4465		    mov	    dx,	word ptr ds:loc_50
seg000:4469		    mov	    bl,	dh
seg000:446B		    mov	    bh,	0
seg000:446D		    shl	    bx,	1
seg000:446F		    mov	    bx,	cs:seg_EC93[bx]
seg000:4474		    add	    bx,	word ptr cs:loc_B
seg000:4479		    add	    bl,	dl
seg000:447B		    adc	    bh,	0
seg000:447E		    and	    bx,	1FFFh
seg000:4482		    cmp	    al,	20h ; ' '
seg000:4484		    jnb	    short loc_4494
seg000:4486		    jmp	    short loc_44EE
seg000:4488 ; ---------------------------------------------------------------------------
seg000:4488		    nop
seg000:4489
seg000:4489 loc_4489:				    ; CODE XREF: sub_4459+3Ej
seg000:4489		    push    ax
seg000:448A		    mov	    al,	1Fh
seg000:448C		    call    table_lookup_ptr
seg000:448F		    pop	    ax
seg000:4490		    and	    al,	7Fh
seg000:4492		    jmp	    short loc_449E
seg000:4494 ; ---------------------------------------------------------------------------
seg000:4494
seg000:4494 loc_4494:				    ; CODE XREF: sub_4459+2Bj
seg000:4494					    ; sub_4459+A5j
seg000:4494		    push    ds
seg000:4495		    test    al,	80h
seg000:4497		    jnz	    short loc_4489
seg000:4499		    lds	    si,	cs:some_table_0
seg000:449E
seg000:449E loc_449E:				    ; CODE XREF: sub_4459+39j
seg000:449E		    mov	    ah,	0
seg000:44A0		    shl	    ax,	1
seg000:44A2		    shl	    ax,	1
seg000:44A4		    shl	    ax,	1
seg000:44A6		    add	    si,	ax
seg000:44A8		    mov	    ax,	bx
seg000:44AA		    add	    ax,	0F0h ; 'ð'
seg000:44AD		    test    ax,	2000h
seg000:44B0		    jnz	    short loc_44EC
seg000:44B2		    lodsw
seg000:44B3		    mov	    es:[bx], al
seg000:44B6		    mov	    es:[bx+2000h], ah
seg000:44BB		    lodsw
seg000:44BC		    mov	    es:[bx+50h], al
seg000:44C0		    mov	    es:[bx+2050h], ah
seg000:44C5		    lodsw
seg000:44C6
seg000:44C6 loc_44C6:
seg000:44C6		    mov	    es:[bx+0A0h], al
seg000:44CB		    mov	    es:[bx+20A0h], ah
seg000:44D0		    lodsw
seg000:44D1		    mov	    es:[bx+0F0h], al
seg000:44D6		    mov	    es:[bx+20F0h], ah
seg000:44DB
seg000:44DB loc_44DB:				    ; CODE XREF: seg000:4566j
seg000:44DB		    pop	    ds
seg000:44DC		    inc	    dl
seg000:44DE		    cmp	    dl,	50h ; 'P'
seg000:44E1		    jz	    short loc_4511
seg000:44E3
seg000:44E3 loc_44E3:				    ; CODE XREF: sub_4459+A9j
seg000:44E3					    ; sub_4459+ADj ...
seg000:44E3		    mov	    word ptr ds:loc_50,	dx
seg000:44E7		    pop	    si
seg000:44E8		    pop	    dx
seg000:44E9		    pop	    bx
seg000:44EA		    pop	    ax
seg000:44EB		    retn
seg000:44EB sub_4459	    endp ; sp-analysis failed
seg000:44EB
seg000:44EC ; ---------------------------------------------------------------------------
seg000:44EC ; START OF FUNCTION	CHUNK FOR sub_4459
seg000:44EC
seg000:44EC loc_44EC:				    ; CODE XREF: sub_4459+57j
seg000:44EC		    jmp	    short loc_452D
seg000:44EE ; ---------------------------------------------------------------------------
seg000:44EE
seg000:44EE loc_44EE:				    ; CODE XREF: sub_4459+2Dj
seg000:44EE		    cmp	    al,	0Dh
seg000:44F0		    jz	    short loc_4508
seg000:44F2		    cmp	    al,	0Ah
seg000:44F4		    jz	    short loc_4513
seg000:44F6		    cmp	    al,	7
seg000:44F8		    jz	    short loc_450C
seg000:44FA		    cmp	    al,	8
seg000:44FC		    jz	    short loc_4500
seg000:44FE		    jmp	    short loc_4494
seg000:4500 ; ---------------------------------------------------------------------------
seg000:4500
seg000:4500 loc_4500:				    ; CODE XREF: sub_4459+A3j
seg000:4500		    test    dl,	dl
seg000:4502		    jz	    short loc_44E3
seg000:4504		    dec	    dl
seg000:4506		    jmp	    short loc_44E3
seg000:4508 ; ---------------------------------------------------------------------------
seg000:4508
seg000:4508 loc_4508:				    ; CODE XREF: sub_4459+97j
seg000:4508		    mov	    dl,	0
seg000:450A		    jmp	    short loc_44E3
seg000:450C ; ---------------------------------------------------------------------------
seg000:450C
seg000:450C loc_450C:				    ; CODE XREF: sub_4459+9Fj
seg000:450C		    call    Beep_long
seg000:450F		    jmp	    short loc_44E3
seg000:4511 ; ---------------------------------------------------------------------------
seg000:4511
seg000:4511 loc_4511:				    ; CODE XREF: sub_4459+88j
seg000:4511		    mov	    dl,	0
seg000:4513
seg000:4513 loc_4513:				    ; CODE XREF: sub_4459+9Bj
seg000:4513		    cmp	    dh,	18h
seg000:4516		    jnz	    short loc_4529
seg000:4518		    push    cx
seg000:4519		    push    dx
seg000:451A		    mov	    al,	1
seg000:451C		    mov	    cx,	0
seg000:451F		    mov	    dx,	184Fh
seg000:4522		    call    sub_4A70
seg000:4525		    pop	    dx
seg000:4526		    pop	    cx
seg000:4527		    jmp	    short loc_44E3
seg000:4529 ; ---------------------------------------------------------------------------
seg000:4529
seg000:4529 loc_4529:				    ; CODE XREF: sub_4459+BDj
seg000:4529		    inc	    dh
seg000:452B		    jmp	    short loc_44E3
seg000:452D ; ---------------------------------------------------------------------------
seg000:452D
seg000:452D loc_452D:				    ; CODE XREF: sub_4459:loc_44ECj
seg000:452D		    lodsw
seg000:452E		    mov	    es:[bx], al
seg000:4531		    mov	    es:[bx+2000h], ah
seg000:4536		    add	    bx,	50h ; 'P'
seg000:4539		    and	    bx,	1FFFh
seg000:453D		    lodsw
seg000:453E		    mov	    es:[bx], al
seg000:4541		    mov	    es:[bx+2000h], ah
seg000:4546		    add	    bx,	50h ; 'P'
seg000:4549		    and	    bx,	1FFFh
seg000:454D		    lodsw
seg000:454D ; END OF FUNCTION CHUNK FOR	sub_4459
seg000:454E		    mov	    es:[bx], al
seg000:4551		    mov	    es:[bx+2000h], ah
seg000:4556		    add	    bx,	50h ; 'P'
seg000:4559		    and	    bx,	1FFFh
seg000:455D		    lodsw
seg000:455E		    mov	    es:[bx], al
seg000:4561		    mov	    es:[bx+2000h], ah
seg000:4566		    jmp	    loc_44DB
seg000:4569
seg000:4569 ; =============== S	U B R O	U T I N	E =======================================
seg000:4569
seg000:4569
seg000:4569 sub_4569	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_2o
seg000:4569		    push    si
seg000:456A		    mov	    si,	word ptr cs:loc_19+2
seg000:456F		    jmp	    short loc_4581
seg000:456F sub_4569	    endp
seg000:456F
seg000:4571
seg000:4571 ; =============== S	U B R O	U T I N	E =======================================
seg000:4571
seg000:4571
seg000:4571 something_Vsynced proc near		    ; DATA XREF: FPU_error_0:video_jumptable_2o
seg000:4571		    cmp	    byte ptr ds:loc_61+1, 0
seg000:4576		    jz	    short loc_457B
seg000:4578		    jmp	    sub_4744
seg000:457B ; ---------------------------------------------------------------------------
seg000:457B
seg000:457B loc_457B:				    ; CODE XREF: something_Vsynced+5j
seg000:457B		    push    si
seg000:457C		    mov	    si,	word ptr cs:loc_B
seg000:4581
seg000:4581 loc_4581:				    ; CODE XREF: sub_4569+6j
seg000:4581		    push    ax
seg000:4582		    push    bx
seg000:4583		    push    dx
seg000:4584		    push    di
seg000:4585		    mov	    dx,	word ptr ds:loc_50
seg000:4589		    mov	    bl,	dh
seg000:458B		    mov	    bh,	0
seg000:458D		    shl	    bx,	1
seg000:458F		    dec	    bh
seg000:4591		    not	    bh
seg000:4593		    mov	    bx,	cs:[bx-132Bh]
seg000:4598		    add	    bx,	si
seg000:459A		    add	    bl,	dl
seg000:459C		    adc	    bh,	0
seg000:459F		    add	    bl,	dl
seg000:45A1		    adc	    bh,	0
seg000:45A4		    mov	    di,	bx
seg000:45A6		    and	    di,	word ptr cs:loc_3E
seg000:45AB		    shr	    bx,	1
seg000:45AD		    cmp	    al,	20h ; ' '
seg000:45AF		    jb	    short loc_4608
seg000:45B1
seg000:45B1 loc_45B1:				    ; CODE XREF: something_Vsynced+A5j
seg000:45B1		    push    dx
seg000:45B2		    mov	    ah,	al
seg000:45B4		    push    cx
seg000:45B5		    mov	    cx,	0FFFFh
seg000:45B8		    test    byte ptr cs:loc_46,	20h
seg000:45BE		    jnz	    short loc_45D5
seg000:45C0		    cmp	    byte ptr ds:loc_48+1, 7
seg000:45C5		    jz	    short loc_45D5
seg000:45C7		    mov	    dx,	3DAh
seg000:45CA
seg000:45CA loc_45CA:				    ; CODE XREF: something_Vsynced+5Cj
seg000:45CA		    in	    al,	dx	    ; Video status bits:
seg000:45CA					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:45CA					    ; 1: 1=light pen is	triggered; 0=armed
seg000:45CA					    ; 2: 1=light pen switch is open; 0=closed
seg000:45CA					    ; 3: 1=vertical sync pulse is occurring.
seg000:45CB		    and	    al,	1
seg000:45CD		    loopne  loc_45CA
seg000:45CF		    cli
seg000:45D0
seg000:45D0 loc_45D0:				    ; CODE XREF: something_Vsynced+62j
seg000:45D0		    in	    al,	dx	    ; Video status bits:
seg000:45D0					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:45D0					    ; 1: 1=light pen is	triggered; 0=armed
seg000:45D0					    ; 2: 1=light pen switch is open; 0=closed
seg000:45D0					    ; 3: 1=vertical sync pulse is occurring.
seg000:45D1		    and	    al,	1
seg000:45D3		    loope   loc_45D0
seg000:45D5
seg000:45D5 loc_45D5:				    ; CODE XREF: something_Vsynced+4Dj
seg000:45D5					    ; something_Vsynced+54j
seg000:45D5		    mov	    al,	ah
seg000:45D7		    stosb
seg000:45D8		    sti
seg000:45D9		    pop	    cx
seg000:45DA		    pop	    dx
seg000:45DB		    dec	    di
seg000:45DC		    inc	    bx
seg000:45DD		    inc	    dl
seg000:45DF		    cmp	    dl,	50h ; 'P'
seg000:45E2		    jz	    short loc_462F
seg000:45E4
seg000:45E4 loc_45E4:				    ; CODE XREF: something_Vsynced+AEj
seg000:45E4					    ; something_Vsynced+B7j ...
seg000:45E4		    mov	    word ptr ds:loc_50,	dx
seg000:45E8		    cmp	    byte ptr ds:loc_61+1, 0
seg000:45ED		    jnz	    short loc_4602
seg000:45EF		    mov	    dx,	word ptr ds:loc_61+2
seg000:45F3		    mov	    al,	0Eh
seg000:45F5		    out	    dx,	al
seg000:45F6		    inc	    dx
seg000:45F7		    mov	    al,	bh
seg000:45F9		    out	    dx,	al
seg000:45FA		    dec	    dx
seg000:45FB		    mov	    al,	0Fh
seg000:45FD		    out	    dx,	al
seg000:45FE		    inc	    dx
seg000:45FF		    mov	    al,	bl
seg000:4601		    out	    dx,	al
seg000:4602
seg000:4602 loc_4602:				    ; CODE XREF: something_Vsynced+7Cj
seg000:4602					    ; something_Vsynced+A9j ...
seg000:4602		    pop	    di
seg000:4603		    pop	    dx
seg000:4604		    pop	    bx
seg000:4605		    pop	    ax
seg000:4606		    pop	    si
seg000:4607		    retn
seg000:4608 ; ---------------------------------------------------------------------------
seg000:4608
seg000:4608 loc_4608:				    ; CODE XREF: something_Vsynced+3Ej
seg000:4608		    cmp	    al,	0Dh
seg000:460A		    jz	    short loc_4621
seg000:460C		    cmp	    al,	0Ah
seg000:460E		    jz	    short loc_4636
seg000:4610		    cmp	    al,	7
seg000:4612		    jz	    short loc_462A
seg000:4614		    cmp	    al,	8
seg000:4616		    jnz	    short loc_45B1
seg000:4618		    test    dl,	dl
seg000:461A		    jz	    short loc_4602
seg000:461C		    dec	    dl
seg000:461E		    dec	    bx
seg000:461F		    jmp	    short loc_45E4
seg000:4621 ; ---------------------------------------------------------------------------
seg000:4621
seg000:4621 loc_4621:				    ; CODE XREF: something_Vsynced+99j
seg000:4621		    sub	    bl,	dl
seg000:4623		    sbb	    bh,	0
seg000:4626		    mov	    dl,	0
seg000:4628		    jmp	    short loc_45E4
seg000:462A ; ---------------------------------------------------------------------------
seg000:462A
seg000:462A loc_462A:				    ; CODE XREF: something_Vsynced+A1j
seg000:462A		    call    Beep_long
seg000:462D		    jmp	    short loc_4602
seg000:462F ; ---------------------------------------------------------------------------
seg000:462F
seg000:462F loc_462F:				    ; CODE XREF: something_Vsynced+71j
seg000:462F		    sub	    bl,	dl
seg000:4631		    sbb	    bh,	0
seg000:4634		    mov	    dl,	0
seg000:4636
seg000:4636 loc_4636:				    ; CODE XREF: something_Vsynced+9Dj
seg000:4636		    cmp	    dh,	byte ptr cs:loc_3B+2
seg000:463B		    jnz	    short loc_464A
seg000:463D		    call    sub_4651
seg000:4640		    cmp	    byte ptr cs:loc_4, 0
seg000:4646		    jz	    short loc_45E4
seg000:4648		    jmp	    short loc_464C
seg000:464A ; ---------------------------------------------------------------------------
seg000:464A
seg000:464A loc_464A:				    ; CODE XREF: something_Vsynced+CAj
seg000:464A		    inc	    dh
seg000:464C
seg000:464C loc_464C:				    ; CODE XREF: something_Vsynced+D7j
seg000:464C		    add	    bx,	50h ; 'P'
seg000:464F		    jmp	    short loc_45E4
seg000:464F something_Vsynced endp
seg000:464F
seg000:4651
seg000:4651 ; =============== S	U B R O	U T I N	E =======================================
seg000:4651
seg000:4651
seg000:4651 sub_4651	    proc near		    ; CODE XREF: something_Vsynced+CCp
seg000:4651		    push    cx
seg000:4652		    push    si
seg000:4653		    push    di
seg000:4654		    push    ds
seg000:4655		    cmp	    byte ptr cs:loc_4, 0
seg000:465B		    jz	    short loc_4676
seg000:465D		    mov	    al,	1
seg000:465F		    mov	    cx,	0
seg000:4662		    push    bx
seg000:4663		    push    dx
seg000:4664		    mov	    dh,	byte ptr cs:loc_3B+2
seg000:4669		    mov	    dl,	4Fh ; 'O'
seg000:466B		    mov	    bh,	es:[di+1]
seg000:466F		    call    sub_4A70
seg000:4672		    pop	    dx
seg000:4673		    pop	    bx
seg000:4674		    jmp	    short loc_46BE
seg000:4676 ; ---------------------------------------------------------------------------
seg000:4676
seg000:4676 loc_4676:				    ; CODE XREF: sub_4651+Aj
seg000:4676		    test    byte ptr cs:loc_46,	20h
seg000:467C		    jnz	    short loc_4683
seg000:467E		    mov	    ah,	25h ; '%'
seg000:4680		    call    Vsync_wait
seg000:4683
seg000:4683 loc_4683:				    ; CODE XREF: sub_4651+2Bj
seg000:4683		    mov	    di,	si
seg000:4685		    add	    si,	0A0h ; ' '
seg000:4689		    mov	    cx,	780h
seg000:468C		    cmp	    byte ptr cs:loc_3B+2, 18h
seg000:4692		    jz	    short loc_469E
seg000:4694		    mov	    al,	byte ptr cs:loc_3B+2
seg000:4698		    mov	    cl,	50h ; 'P'
seg000:469A		    mul	    cl
seg000:469C		    mov	    cx,	ax
seg000:469E
seg000:469E loc_469E:				    ; CODE XREF: sub_4651+41j
seg000:469E		    push    ds
seg000:469F		    push    es
seg000:46A0		    pop	    ds
seg000:46A1		    rep	movsw
seg000:46A3		    mov	    ah,	es:[di-1]
seg000:46A7		    mov	    al,	20h ; ' '
seg000:46A9		    mov	    cx,	50h ; 'P'
seg000:46AC		    rep	stosw
seg000:46AE		    pop	    ds
seg000:46AF		    test    byte ptr cs:loc_46,	20h
seg000:46B5		    jnz	    short loc_46BE
seg000:46B7		    mov	    ah,	byte ptr ds:Timer_init+1
seg000:46BB		    call    Vsync_wait
seg000:46BE
seg000:46BE loc_46BE:				    ; CODE XREF: sub_4651+23j
seg000:46BE					    ; sub_4651+64j
seg000:46BE		    pop	    ds
seg000:46BF		    pop	    di
seg000:46C0		    pop	    si
seg000:46C1		    pop	    cx
seg000:46C2		    retn
seg000:46C2 sub_4651	    endp
seg000:46C2
seg000:46C3
seg000:46C3 ; =============== S	U B R O	U T I N	E =======================================
seg000:46C3
seg000:46C3
seg000:46C3 sub_46C3	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:46C3		    push    ax
seg000:46C4		    push    bx
seg000:46C5		    push    cx
seg000:46C6		    push    dx
seg000:46C7		    push    si
seg000:46C8		    push    di
seg000:46C9		    push    bp
seg000:46CA		    mov	    si,	bp
seg000:46CC		    mov	    bp,	ax
seg000:46CE		    jcxz    short loc_473C
seg000:46D0		    cmp	    bh,	3
seg000:46D3		    ja	    short loc_473C
seg000:46D5		    mov	    al,	bh
seg000:46D7		    cbw
seg000:46D8		    mov	    di,	ax
seg000:46DA		    push    word ptr [di+50h]
seg000:46DE		    mov	    ah,	2
seg000:46E0		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:46E0					    ; DH,DL = row, column (0,0 = upper left)
seg000:46E0					    ; BH = page	number
seg000:46E2
seg000:46E2 loc_46E2:				    ; CODE XREF: sub_46C3:loc_472Fj
seg000:46E2		    lods    byte ptr es:[si]
seg000:46E4		    cmp	    al,	7
seg000:46E6		    jz	    short loc_4727
seg000:46E8		    cmp	    al,	8
seg000:46EA		    jz	    short loc_4727
seg000:46EC		    cmp	    al,	0Ah
seg000:46EE		    jz	    short loc_4727
seg000:46F0		    cmp	    al,	0Dh
seg000:46F2		    jz	    short loc_4727
seg000:46F4		    test    bp,	2
seg000:46F8		    jz	    short loc_46FE
seg000:46FA		    mov	    bl,	es:[si]
seg000:46FD		    inc	    si
seg000:46FE
seg000:46FE loc_46FE:				    ; CODE XREF: sub_46C3+35j
seg000:46FE		    push    cx
seg000:46FF		    mov	    cx,	1
seg000:4702		    mov	    ah,	9
seg000:4704		    int	    10h		    ; -	VIDEO -	WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION
seg000:4704					    ; AL = character, BH = display page
seg000:4704					    ; BL = attributes of character (alpha modes) or color (graphics modes)
seg000:4704					    ; CX = number of times to write character
seg000:4706		    pop	    cx
seg000:4707		    inc	    dl
seg000:4709		    cmp	    dl,	byte ptr ds:init_ram_loop
seg000:470D		    jb	    short loc_4721
seg000:470F		    mov	    dl,	0
seg000:4711		    inc	    dh
seg000:4713		    cmp	    dh,	byte ptr cs:loc_3B+2
seg000:4718		    jbe	    short loc_4721
seg000:471A		    dec	    dh
seg000:471C		    mov	    ax,	0E0Ah
seg000:471F		    int	    10h		    ; -	VIDEO -	WRITE CHARACTER	AND ADVANCE CURSOR (TTY	WRITE)
seg000:471F					    ; AL = character, BH = display page	(alpha modes)
seg000:471F					    ; BL = foreground color (graphics modes)
seg000:4721
seg000:4721 loc_4721:				    ; CODE XREF: sub_46C3+4Aj
seg000:4721					    ; sub_46C3+55j
seg000:4721		    mov	    ah,	2
seg000:4723		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:4723					    ; DH,DL = row, column (0,0 = upper left)
seg000:4723					    ; BH = page	number
seg000:4725		    jmp	    short loc_472F
seg000:4727 ; ---------------------------------------------------------------------------
seg000:4727
seg000:4727 loc_4727:				    ; CODE XREF: sub_46C3+23j
seg000:4727					    ; sub_46C3+27j ...
seg000:4727		    mov	    ah,	0Eh
seg000:4729		    int	    10h		    ; -	VIDEO -	WRITE CHARACTER	AND ADVANCE CURSOR (TTY	WRITE)
seg000:4729					    ; AL = character, BH = display page	(alpha modes)
seg000:4729					    ; BL = foreground color (graphics modes)
seg000:472B		    mov	    dx,	[di+50h]
seg000:472F
seg000:472F loc_472F:				    ; CODE XREF: sub_46C3+62j
seg000:472F		    loop    loc_46E2
seg000:4731		    pop	    dx
seg000:4732		    test    bp,	1
seg000:4736		    jnz	    short loc_473C
seg000:4738		    mov	    ah,	2
seg000:473A		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:473A					    ; DH,DL = row, column (0,0 = upper left)
seg000:473A					    ; BH = page	number
seg000:473C
seg000:473C loc_473C:				    ; CODE XREF: sub_46C3+Bj
seg000:473C					    ; sub_46C3+10j ...
seg000:473C		    pop	    bp
seg000:473D		    pop	    di
seg000:473E		    pop	    si
seg000:473F		    pop	    dx
seg000:4740		    pop	    cx
seg000:4741		    pop	    bx
seg000:4742		    pop	    ax
seg000:4743		    retn
seg000:4743 sub_46C3	    endp
seg000:4743
seg000:4744
seg000:4744 ; =============== S	U B R O	U T I N	E =======================================
seg000:4744
seg000:4744
seg000:4744 sub_4744	    proc near		    ; CODE XREF: FPU_error_0+53p
seg000:4744					    ; FPU_error_0+67p ...
seg000:4744		    push    ax
seg000:4745		    push    bx
seg000:4746		    push    cx
seg000:4747		    push    dx
seg000:4748		    push    si
seg000:4749		    mov	    bh,	byte ptr ds:loc_61+1
seg000:474D		    push    bx
seg000:474E		    push    ax
seg000:474F		    mov	    ah,	3
seg000:4751		    int	    10h		    ; -	VIDEO -	READ CURSOR POSITION
seg000:4751					    ; BH = page	number
seg000:4751					    ; Return: DH,DL = row,column, CH = cursor start line, CL = cursor end line
seg000:4753		    pop	    ax
seg000:4754		    pop	    bx
seg000:4755		    cmp	    al,	7
seg000:4757		    jnz	    short loc_475E
seg000:4759		    call    Beep_long
seg000:475C		    jmp	    short loc_47CA
seg000:475E ; ---------------------------------------------------------------------------
seg000:475E
seg000:475E loc_475E:				    ; CODE XREF: sub_4744+13j
seg000:475E		    cmp	    al,	8
seg000:4760		    jnz	    short loc_476A
seg000:4762		    test    dl,	dl
seg000:4764		    jz	    short loc_47CA
seg000:4766		    dec	    dl
seg000:4768		    jmp	    short loc_47C6
seg000:476A ; ---------------------------------------------------------------------------
seg000:476A
seg000:476A loc_476A:				    ; CODE XREF: sub_4744+1Cj
seg000:476A		    cmp	    al,	0Dh
seg000:476C		    jnz	    short loc_4772
seg000:476E		    mov	    dl,	0
seg000:4770		    jmp	    short loc_47C6
seg000:4772 ; ---------------------------------------------------------------------------
seg000:4772
seg000:4772 loc_4772:				    ; CODE XREF: sub_4744+28j
seg000:4772		    cmp	    al,	0Ah
seg000:4774		    jz	    short loc_4787
seg000:4776		    mov	    cx,	1
seg000:4779		    mov	    ah,	0Ah
seg000:477B		    int	    10h		    ; -	VIDEO -	WRITE CHARACTERS ONLY AT CURSOR	POSITION
seg000:477B					    ; AL = character, BH = display page	- alpha	mode
seg000:477B					    ; BL = color of character (graphics	mode, PCjr only)
seg000:477B					    ; CX = number of times to write character
seg000:477D		    inc	    dl
seg000:477F		    cmp	    dl,	byte ptr ds:init_ram_loop
seg000:4783		    jnz	    short loc_47C6
seg000:4785		    xor	    dl,	dl
seg000:4787
seg000:4787 loc_4787:				    ; CODE XREF: sub_4744+30j
seg000:4787		    cmp	    dh,	byte ptr cs:loc_3B+2
seg000:478C		    jz	    short loc_4792
seg000:478E		    inc	    dh
seg000:4790		    jmp	    short loc_47C6
seg000:4792 ; ---------------------------------------------------------------------------
seg000:4792
seg000:4792 loc_4792:				    ; CODE XREF: sub_4744+48j
seg000:4792		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4797		    jz	    short loc_47A0
seg000:4799		    cmp	    byte ptr ds:loc_48+1, 3
seg000:479E		    ja	    short loc_47AA
seg000:47A0
seg000:47A0 loc_47A0:				    ; CODE XREF: sub_4744+53j
seg000:47A0		    mov	    ah,	2
seg000:47A2		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:47A2					    ; DH,DL = row, column (0,0 = upper left)
seg000:47A2					    ; BH = page	number
seg000:47A4		    mov	    ah,	8
seg000:47A6		    int	    10h		    ; -	VIDEO -	READ ATTRIBUTES/CHARACTER AT CURSOR POSITION
seg000:47A6					    ; BH = display page
seg000:47A6					    ; Return: AL = character
seg000:47A6					    ; AH = attribute of	character (alpha modes)
seg000:47A8		    mov	    bl,	ah
seg000:47AA
seg000:47AA loc_47AA:				    ; CODE XREF: sub_4744+5Aj
seg000:47AA		    mov	    si,	dx
seg000:47AC		    mov	    al,	1
seg000:47AE		    mov	    cx,	0
seg000:47B1		    mov	    dh,	byte ptr cs:loc_3B+2
seg000:47B6		    mov	    dl,	byte ptr ds:init_ram_loop
seg000:47BA		    dec	    dl
seg000:47BC		    xchg    bh,	bl
seg000:47BE		    mov	    ah,	6
seg000:47C0		    int	    10h		    ; -	VIDEO -	SCROLL PAGE UP
seg000:47C0					    ; AL = number of lines to scroll window (0 = blank whole window)
seg000:47C0					    ; BH = attributes to be used on blanked lines
seg000:47C0					    ; CH,CL = row,column of upper left corner of window	to scroll
seg000:47C0					    ; DH,DL = row,column of lower right	corner of window
seg000:47C2		    xchg    bl,	bh
seg000:47C4		    mov	    dx,	si
seg000:47C6
seg000:47C6 loc_47C6:				    ; CODE XREF: sub_4744+24j
seg000:47C6					    ; sub_4744+2Cj ...
seg000:47C6		    mov	    ah,	2
seg000:47C8		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:47C8					    ; DH,DL = row, column (0,0 = upper left)
seg000:47C8					    ; BH = page	number
seg000:47CA
seg000:47CA loc_47CA:				    ; CODE XREF: sub_4744+18j
seg000:47CA					    ; sub_4744+20j
seg000:47CA		    pop	    si
seg000:47CB		    pop	    dx
seg000:47CC		    pop	    cx
seg000:47CD		    pop	    bx
seg000:47CE		    pop	    ax
seg000:47CF		    retn
seg000:47CF sub_4744	    endp
seg000:47CF
seg000:47D0 ; ---------------------------------------------------------------------------
seg000:47D0 ; START OF FUNCTION	CHUNK FOR load_some_table
seg000:47D0
seg000:47D0 loc_47D0:				    ; CODE XREF: load_some_table:loc_48C3j
seg000:47D0		    push    si
seg000:47D1		    mov	    si,	10h
seg000:47D4		    mov	    dx,	word ptr ds:loc_50
seg000:47D8		    jmp	    short loc_47E7
seg000:47DA ; ---------------------------------------------------------------------------
seg000:47DA
seg000:47DA loc_47DA:				    ; CODE XREF: load_some_table:loc_48C6j
seg000:47DA		    push    si
seg000:47DB		    mov	    dl,	bh
seg000:47DD		    mov	    dh,	0
seg000:47DF		    mov	    si,	dx
seg000:47E1		    shl	    si,	1
seg000:47E3		    mov	    dx,	[si+50h]
seg000:47E7
seg000:47E7 loc_47E7:				    ; CODE XREF: load_some_table-9Dj
seg000:47E7		    push    bx
seg000:47E8		    push    cx
seg000:47E9		    push    di
seg000:47EA		    push    bp
seg000:47EB		    xchg    bl,	ah
seg000:47ED		    mov	    bp,	ax
seg000:47EF		    mov	    al,	dh
seg000:47F1		    mov	    bh,	dl
seg000:47F3		    xor	    ah,	ah
seg000:47F5		    mul	    word ptr cs:loc_6
seg000:47FA		    add	    ax,	cs:[si+0Bh]
seg000:47FF		    add	    al,	bh
seg000:4801		    adc	    ah,	0
seg000:4804		    add	    al,	bh
seg000:4806		    adc	    ah,	0
seg000:4809		    mov	    di,	ax
seg000:480B
seg000:480B loc_480B:				    ; CODE XREF: load_some_table-Fj
seg000:480B		    and	    di,	word ptr cs:loc_3E
seg000:4810		    add	    di,	cs:[si+1Dh]
seg000:4815		    push    cx
seg000:4816		    test    bl,	bl
seg000:4818		    jz	    short loc_4840
seg000:481A		    mov	    cx,	0FFFFh
seg000:481D		    test    byte ptr cs:loc_46,	20h
seg000:4823		    jnz	    short loc_483A
seg000:4825		    cmp	    byte ptr ds:loc_48+1, 7
seg000:482A		    jz	    short loc_483A
seg000:482C		    mov	    dx,	3DAh
seg000:482F
seg000:482F loc_482F:				    ; CODE XREF: load_some_table-43j
seg000:482F		    in	    al,	dx	    ; Video status bits:
seg000:482F					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:482F					    ; 1: 1=light pen is	triggered; 0=armed
seg000:482F					    ; 2: 1=light pen switch is open; 0=closed
seg000:482F					    ; 3: 1=vertical sync pulse is occurring.
seg000:4830		    and	    al,	1
seg000:4832		    loopne  loc_482F
seg000:4834		    cli
seg000:4835
seg000:4835 loc_4835:				    ; CODE XREF: load_some_table-3Dj
seg000:4835		    in	    al,	dx	    ; Video status bits:
seg000:4835					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:4835					    ; 1: 1=light pen is	triggered; 0=armed
seg000:4835					    ; 2: 1=light pen switch is open; 0=closed
seg000:4835					    ; 3: 1=vertical sync pulse is occurring.
seg000:4836		    and	    al,	1
seg000:4838		    loope   loc_4835
seg000:483A
seg000:483A loc_483A:				    ; CODE XREF: load_some_table-52j
seg000:483A					    ; load_some_table-4Bj
seg000:483A		    mov	    ax,	bp
seg000:483C		    stosw
seg000:483D		    sti
seg000:483E		    jmp	    short loc_4865
seg000:4840 ; ---------------------------------------------------------------------------
seg000:4840
seg000:4840 loc_4840:				    ; CODE XREF: load_some_table-5Dj
seg000:4840		    mov	    cx,	0FFFFh
seg000:4843		    test    byte ptr cs:loc_46,	20h
seg000:4849		    jnz	    short loc_4860
seg000:484B		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4850		    jz	    short loc_4860
seg000:4852		    mov	    dx,	3DAh
seg000:4855
seg000:4855 loc_4855:				    ; CODE XREF: load_some_table-1Dj
seg000:4855		    in	    al,	dx	    ; Video status bits:
seg000:4855					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:4855					    ; 1: 1=light pen is	triggered; 0=armed
seg000:4855					    ; 2: 1=light pen switch is open; 0=closed
seg000:4855					    ; 3: 1=vertical sync pulse is occurring.
seg000:4856		    and	    al,	1
seg000:4858		    loopne  loc_4855
seg000:485A		    cli
seg000:485B
seg000:485B loc_485B:				    ; CODE XREF: load_some_table-17j
seg000:485B		    in	    al,	dx	    ; Video status bits:
seg000:485B					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:485B					    ; 1: 1=light pen is	triggered; 0=armed
seg000:485B					    ; 2: 1=light pen switch is open; 0=closed
seg000:485B					    ; 3: 1=vertical sync pulse is occurring.
seg000:485C		    and	    al,	1
seg000:485E		    loope   loc_485B
seg000:4860
seg000:4860 loc_4860:				    ; CODE XREF: load_some_table-2Cj
seg000:4860					    ; load_some_table-25j
seg000:4860		    mov	    ax,	bp
seg000:4862		    stosb
seg000:4863		    sti
seg000:4864		    inc	    di
seg000:4865
seg000:4865 loc_4865:				    ; CODE XREF: load_some_table-37j
seg000:4865		    pop	    cx
seg000:4866		    loop    loc_480B
seg000:4868		    pop	    bp
seg000:4869		    pop	    di
seg000:486A		    pop	    cx
seg000:486B		    pop	    bx
seg000:486C		    pop	    si
seg000:486D		    pop	    dx
seg000:486E		    pop	    ax
seg000:486F		    retn
seg000:486F ; END OF FUNCTION CHUNK FOR	load_some_table
seg000:4870
seg000:4870 ; =============== S	U B R O	U T I N	E =======================================
seg000:4870
seg000:4870
seg000:4870 sub_4870	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:4870		    push    ax
seg000:4871		    mov	    ah,	0
seg000:4873		    jmp	    short loc_4878
seg000:4873 sub_4870	    endp
seg000:4873
seg000:4875
seg000:4875 ; =============== S	U B R O	U T I N	E =======================================
seg000:4875
seg000:4875
seg000:4875 load_some_table proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:4875
seg000:4875 ; FUNCTION CHUNK AT	seg000:47D0 SIZE 000000A0 BYTES
seg000:4875
seg000:4875		    push    ax
seg000:4876		    mov	    ah,	0FFh
seg000:4878
seg000:4878 loc_4878:				    ; CODE XREF: sub_4870+3j
seg000:4878		    push    dx
seg000:4879		    cmp	    byte ptr ds:loc_48+1, 3
seg000:487E		    jbe	    short loc_48C6
seg000:4880		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4885		    jz	    short loc_48C3
seg000:4887		    push    bx
seg000:4888		    push    cx
seg000:4889		    push    si
seg000:488A		    push    di
seg000:488B		    push    bp
seg000:488C		    call    read_50h_bl_toCX
seg000:488F		    mov	    bp,	word ptr cs:loc_6+2
seg000:4894		    mov	    bh,	byte ptr ds:loc_48+1
seg000:4898		    push    ds
seg000:4899		    mov	    si,	0F000h
seg000:489C		    mov	    ds,	si
seg000:489E		    assume ds:nothing
seg000:489E		    mov	    si,	offset some_table
seg000:48A1		    test    al,	80h
seg000:48A3		    jz	    short loc_48AE
seg000:48A5		    push    ax
seg000:48A6		    mov	    al,	1Fh
seg000:48A8		    call    table_lookup_ptr
seg000:48AB		    pop	    ax
seg000:48AC		    and	    al,	7Fh
seg000:48AE
seg000:48AE loc_48AE:				    ; CODE XREF: load_some_table+2Ej
seg000:48AE		    cbw
seg000:48AF		    shl	    ax,	1
seg000:48B1		    shl	    ax,	1
seg000:48B3		    shl	    ax,	1
seg000:48B5		    add	    si,	ax
seg000:48B7		    call    sub_48C9
seg000:48BA		    pop	    ds
seg000:48BB		    assume ds:nothing
seg000:48BB		    pop	    bp
seg000:48BC		    pop	    di
seg000:48BD		    pop	    si
seg000:48BE		    pop	    cx
seg000:48BF		    pop	    bx
seg000:48C0		    pop	    dx
seg000:48C1		    pop	    ax
seg000:48C2		    retn
seg000:48C3 ; ---------------------------------------------------------------------------
seg000:48C3
seg000:48C3 loc_48C3:				    ; CODE XREF: load_some_table+10j
seg000:48C3		    jmp	    loc_47D0
seg000:48C6 ; ---------------------------------------------------------------------------
seg000:48C6
seg000:48C6 loc_48C6:				    ; CODE XREF: load_some_table+9j
seg000:48C6		    jmp	    loc_47DA
seg000:48C6 load_some_table endp
seg000:48C6
seg000:48C9
seg000:48C9 ; =============== S	U B R O	U T I N	E =======================================
seg000:48C9
seg000:48C9
seg000:48C9 sub_48C9	    proc near		    ; CODE XREF: load_some_table+42p
seg000:48C9		    mov	    ah,	bh
seg000:48CB
seg000:48CB loc_48CB:				    ; CODE XREF: sub_48C9:loc_4932j
seg000:48CB		    mov	    bh,	8
seg000:48CD		    push    di
seg000:48CE
seg000:48CE loc_48CE:				    ; CODE XREF: sub_48C9+54j
seg000:48CE		    lodsb
seg000:48CF		    cmp	    ah,	6
seg000:48D2		    jnz	    short loc_48E3
seg000:48D4		    test    bl,	80h
seg000:48D7		    jnz	    short loc_48DE
seg000:48D9		    mov	    es:[di], al
seg000:48DC		    jmp	    short loc_4905
seg000:48DE ; ---------------------------------------------------------------------------
seg000:48DE
seg000:48DE loc_48DE:				    ; CODE XREF: sub_48C9+Ej
seg000:48DE		    xor	    es:[di], al
seg000:48E1		    jmp	    short loc_4905
seg000:48E3 ; ---------------------------------------------------------------------------
seg000:48E3
seg000:48E3 loc_48E3:				    ; CODE XREF: sub_48C9+9j
seg000:48E3		    push    bx
seg000:48E4		    and	    bx,	3
seg000:48E7		    shl	    bx,	1
seg000:48E9		    mov	    dx,	cs:bits[bx]
seg000:48EE		    push    ax
seg000:48EF		    call    sub_5473
seg000:48F2		    and	    dx,	ax
seg000:48F4		    xchg    dh,	dl
seg000:48F6		    pop	    ax
seg000:48F7		    pop	    bx
seg000:48F8		    test    bl,	80h
seg000:48FB		    jz	    short loc_4902
seg000:48FD		    xor	    es:[di], dx
seg000:4900		    jmp	    short loc_4905
seg000:4902 ; ---------------------------------------------------------------------------
seg000:4902
seg000:4902 loc_4902:				    ; CODE XREF: sub_48C9+32j
seg000:4902		    mov	    es:[di], dx
seg000:4905
seg000:4905 loc_4905:				    ; CODE XREF: sub_48C9+13j
seg000:4905					    ; sub_48C9+18j ...
seg000:4905		    xor	    di,	2000h
seg000:4909		    test    bh,	1
seg000:490C		    jz	    short loc_491B
seg000:490E		    add	    di,	50h ; 'P'
seg000:4911		    cmp	    di,	1FFFh
seg000:4915		    jbe	    short loc_491B
seg000:4917		    sub	    di,	2000h
seg000:491B
seg000:491B loc_491B:				    ; CODE XREF: sub_48C9+43j
seg000:491B					    ; sub_48C9+4Cj
seg000:491B		    dec	    bh
seg000:491D		    jnz	    short loc_48CE
seg000:491F		    pop	    di
seg000:4920		    dec	    cx
seg000:4921		    jcxz    short locret_4934
seg000:4923		    sub	    si,	8
seg000:4926		    add	    di,	bp
seg000:4928		    cmp	    di,	1FFFh
seg000:492C		    jbe	    short loc_4932
seg000:492E		    sub	    di,	2000h
seg000:4932
seg000:4932 loc_4932:				    ; CODE XREF: sub_48C9+63j
seg000:4932		    jmp	    short loc_48CB
seg000:4934 ; ---------------------------------------------------------------------------
seg000:4934
seg000:4934 locret_4934:			    ; CODE XREF: sub_48C9+58j
seg000:4934		    retn
seg000:4934 sub_48C9	    endp
seg000:4934
seg000:4935
seg000:4935 ; =============== S	U B R O	U T I N	E =======================================
seg000:4935
seg000:4935
seg000:4935 sub_4935	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:4935		    push    ax
seg000:4936		    push    bx
seg000:4937		    push    cx
seg000:4938		    push    di
seg000:4939		    push    ax
seg000:493A		    mov	    ah,	0
seg000:493C		    call    sub_53C8
seg000:493F		    mov	    bl,	ah
seg000:4941		    mov	    bh,	0
seg000:4943		    dec	    al
seg000:4945		    jz	    short loc_494B
seg000:4947		    shl	    ah,	1
seg000:4949		    inc	    ah
seg000:494B
seg000:494B loc_494B:				    ; CODE XREF: sub_4935+10j
seg000:494B		    mov	    cl,	7
seg000:494D		    sub	    cl,	ah
seg000:494F		    pop	    ax
seg000:4950		    test    al,	80h
seg000:4952		    pushf
seg000:4953		    and	    al,	3
seg000:4955		    cmp	    byte ptr ds:loc_48+1, 6
seg000:495A		    jnz	    short loc_495E
seg000:495C		    and	    al,	1
seg000:495E
seg000:495E loc_495E:				    ; CODE XREF: sub_4935+25j
seg000:495E		    shl	    al,	cl
seg000:4960		    mov	    cl,	al
seg000:4962		    popf
seg000:4963		    jz	    short loc_496A
seg000:4965		    xor	    es:[di], cl
seg000:4968		    jmp	    short loc_4985
seg000:496A ; ---------------------------------------------------------------------------
seg000:496A
seg000:496A loc_496A:				    ; CODE XREF: sub_4935+2Ej
seg000:496A		    mov	    al,	cs:[bx+5782h]
seg000:496F		    cmp	    byte ptr ds:loc_48+1, 6
seg000:4974		    jz	    short loc_497B
seg000:4976		    mov	    al,	cs:[bx+578Ah]
seg000:497B
seg000:497B loc_497B:				    ; CODE XREF: sub_4935+3Fj
seg000:497B		    not	    al
seg000:497D		    and	    al,	es:[di]
seg000:4980		    or	    al,	cl
seg000:4982		    mov	    es:[di], al
seg000:4985
seg000:4985 loc_4985:				    ; CODE XREF: sub_4935+33j
seg000:4985		    pop	    di
seg000:4986		    pop	    cx
seg000:4987		    pop	    bx
seg000:4988		    pop	    ax
seg000:4989		    retn
seg000:4989 sub_4935	    endp
seg000:4989
seg000:498A
seg000:498A ; =============== S	U B R O	U T I N	E =======================================
seg000:498A
seg000:498A
seg000:498A sub_498A	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:498A		    push    cx
seg000:498B		    push    dx
seg000:498C		    push    si
seg000:498D		    push    di
seg000:498E		    push    ds
seg000:498F		    call    sub_520F
seg000:4992		    call    read_50h_bl_toCX
seg000:4995		    cmp	    byte ptr ds:loc_48+1, 7
seg000:499A		    jz	    short loc_49A3
seg000:499C		    cmp	    byte ptr ds:loc_48+1, 3
seg000:49A1		    jg	    short loc_49CB
seg000:49A3
seg000:49A3 loc_49A3:				    ; CODE XREF: sub_498A+10j
seg000:49A3		    mov	    cx,	0FFFFh
seg000:49A6		    test    byte ptr cs:loc_46,	20h
seg000:49AC		    jnz	    short loc_49C3
seg000:49AE		    cmp	    byte ptr ds:loc_48+1, 7
seg000:49B3		    jz	    short loc_49C3
seg000:49B5		    mov	    dx,	3DAh
seg000:49B8
seg000:49B8 loc_49B8:				    ; CODE XREF: sub_498A+31j
seg000:49B8		    in	    al,	dx	    ; Video status bits:
seg000:49B8					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:49B8					    ; 1: 1=light pen is	triggered; 0=armed
seg000:49B8					    ; 2: 1=light pen switch is open; 0=closed
seg000:49B8					    ; 3: 1=vertical sync pulse is occurring.
seg000:49B9		    and	    al,	1
seg000:49BB		    loopne  loc_49B8
seg000:49BD		    cli
seg000:49BE
seg000:49BE loc_49BE:				    ; CODE XREF: sub_498A+37j
seg000:49BE		    in	    al,	dx	    ; Video status bits:
seg000:49BE					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:49BE					    ; 1: 1=light pen is	triggered; 0=armed
seg000:49BE					    ; 2: 1=light pen switch is open; 0=closed
seg000:49BE					    ; 3: 1=vertical sync pulse is occurring.
seg000:49BF		    and	    al,	1
seg000:49C1		    loope   loc_49BE
seg000:49C3
seg000:49C3 loc_49C3:				    ; CODE XREF: sub_498A+22j
seg000:49C3					    ; sub_498A+29j
seg000:49C3		    push    es
seg000:49C4		    pop	    ds
seg000:49C5		    mov	    si,	di
seg000:49C7		    lodsw
seg000:49C8		    sti
seg000:49C9		    jmp	    short loc_4A38
seg000:49CB ; ---------------------------------------------------------------------------
seg000:49CB
seg000:49CB loc_49CB:				    ; CODE XREF: sub_498A+17j
seg000:49CB		    mov	    ax,	0F000h
seg000:49CE		    mov	    ds,	ax
seg000:49D0		    assume ds:nothing
seg000:49D0		    mov	    si,	offset some_table
seg000:49D3		    mov	    dh,	2
seg000:49D5		    mov	    dl,	0
seg000:49D7
seg000:49D7 loc_49D7:				    ; CODE XREF: sub_498A+A0j
seg000:49D7					    ; sub_498A+A9j
seg000:49D7		    push    si
seg000:49D8		    push    di
seg000:49D9		    mov	    cx,	8
seg000:49DC
seg000:49DC loc_49DC:				    ; CODE XREF: sub_498A:loc_4A14j
seg000:49DC		    push    ds
seg000:49DD		    mov	    ds,	word ptr cs:loc_C5+1
seg000:49E2		    assume ds:nothing
seg000:49E2		    cmp	    byte ptr ds:loc_48+1, 5
seg000:49E7		    pop	    ds
seg000:49E8		    ja	    short loc_49F5
seg000:49EA		    mov	    ax,	es:[di]
seg000:49ED		    xchg    al,	ah
seg000:49EF		    call    sub_548A
seg000:49F2		    jmp	    short loc_49F8
seg000:49F4 ; ---------------------------------------------------------------------------
seg000:49F4		    nop
seg000:49F5
seg000:49F5 loc_49F5:				    ; CODE XREF: sub_498A+5Ej
seg000:49F5		    mov	    al,	es:[di]
seg000:49F8
seg000:49F8 loc_49F8:				    ; CODE XREF: sub_498A+68j
seg000:49F8		    cmp	    al,	[si]
seg000:49FA		    jnz	    short loc_4A20
seg000:49FC		    xor	    di,	2000h
seg000:4A00		    inc	    si
seg000:4A01		    test    cx,	1
seg000:4A05		    jz	    short loc_4A14
seg000:4A07		    add	    di,	50h ; 'P'
seg000:4A0A		    cmp	    di,	1FFFh
seg000:4A0E		    jbe	    short loc_4A14
seg000:4A10		    sub	    di,	2000h
seg000:4A14
seg000:4A14 loc_4A14:				    ; CODE XREF: sub_498A+7Bj
seg000:4A14					    ; sub_498A+84j
seg000:4A14		    loop    loc_49DC
seg000:4A16		    pop	    di
seg000:4A17		    pop	    si
seg000:4A18		    mov	    ah,	es:[di+1]
seg000:4A1C		    mov	    al,	dl
seg000:4A1E		    jmp	    short loc_4A38
seg000:4A20 ; ---------------------------------------------------------------------------
seg000:4A20
seg000:4A20 loc_4A20:				    ; CODE XREF: sub_498A+70j
seg000:4A20		    pop	    di
seg000:4A21		    pop	    si
seg000:4A22		    add	    si,	8
seg000:4A25		    inc	    dl
seg000:4A27		    test    dl,	7Fh
seg000:4A2A		    jnz	    short loc_49D7
seg000:4A2C		    mov	    al,	1Fh
seg000:4A2E		    call    table_lookup_ptr
seg000:4A31		    dec	    dh
seg000:4A33		    jnz	    short loc_49D7
seg000:4A35		    mov	    ax,	0
seg000:4A38
seg000:4A38 loc_4A38:				    ; CODE XREF: sub_498A+3Fj
seg000:4A38					    ; sub_498A+94j
seg000:4A38		    pop	    ds
seg000:4A39		    pop	    di
seg000:4A3A		    pop	    si
seg000:4A3B		    pop	    dx
seg000:4A3C		    pop	    cx
seg000:4A3D		    retn
seg000:4A3D sub_498A	    endp
seg000:4A3D
seg000:4A3E
seg000:4A3E ; =============== S	U B R O	U T I N	E =======================================
seg000:4A3E
seg000:4A3E
seg000:4A3E sub_4A3E	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:4A3E		    push    bx
seg000:4A3F		    push    cx
seg000:4A40		    push    di
seg000:4A41		    mov	    ah,	0
seg000:4A43		    call    sub_53C8
seg000:4A46		    mov	    bl,	ah
seg000:4A48		    mov	    bh,	0
seg000:4A4A		    dec	    al
seg000:4A4C		    jz	    short loc_4A52
seg000:4A4E		    shl	    ah,	1
seg000:4A50		    inc	    ah
seg000:4A52
seg000:4A52 loc_4A52:				    ; CODE XREF: sub_4A3E+Ej
seg000:4A52		    mov	    cl,	7
seg000:4A54		    sub	    cl,	ah
seg000:4A56		    mov	    al,	cs:byte_5782[bx]
seg000:4A5B		    cmp	    byte ptr ds:loc_48+1, 6
seg000:4A60		    jz	    short loc_4A67
seg000:4A62		    mov	    al,	cs:byte_578A[bx]
seg000:4A67
seg000:4A67 loc_4A67:				    ; CODE XREF: sub_4A3E+22j
seg000:4A67		    and	    al,	es:[di]
seg000:4A6A		    shr	    al,	cl
seg000:4A6C		    pop	    di
seg000:4A6D		    pop	    cx
seg000:4A6E		    pop	    bx
seg000:4A6F		    retn
seg000:4A6F sub_4A3E	    endp
seg000:4A6F
seg000:4A70
seg000:4A70 ; =============== S	U B R O	U T I N	E =======================================
seg000:4A70
seg000:4A70
seg000:4A70 sub_4A70	    proc near		    ; CODE XREF: sub_4459+C9p
seg000:4A70					    ; sub_4651+1Ep ...
seg000:4A70		    push    ax
seg000:4A71		    mov	    ah,	0
seg000:4A73		    jmp	    short loc_4A78
seg000:4A75 ; ---------------------------------------------------------------------------
seg000:4A75
seg000:4A75 loc_4A75:				    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:4A75		    push    ax
seg000:4A76		    mov	    ah,	0FFh
seg000:4A78
seg000:4A78 loc_4A78:				    ; CODE XREF: sub_4A70+3j
seg000:4A78		    push    bx
seg000:4A79		    push    cx
seg000:4A7A		    push    dx
seg000:4A7B		    push    si
seg000:4A7C		    push    di
seg000:4A7D		    test    byte ptr cs:loc_46,	20h
seg000:4A83		    jnz	    short loc_4A8C
seg000:4A85		    push    ax
seg000:4A86		    mov	    ah,	25h ; '%'
seg000:4A88		    call    Vsync_wait
seg000:4A8B		    pop	    ax
seg000:4A8C
seg000:4A8C loc_4A8C:				    ; CODE XREF: sub_4A70+13j
seg000:4A8C		    test    al,	al
seg000:4A8E		    jz	    short loc_4A9C
seg000:4A90		    mov	    bl,	dh
seg000:4A92		    sub	    bl,	ch
seg000:4A94		    inc	    bl
seg000:4A96		    cmp	    al,	bl
seg000:4A98		    jnz	    short loc_4A9C
seg000:4A9A		    xor	    al,	al
seg000:4A9C
seg000:4A9C loc_4A9C:				    ; CODE XREF: sub_4A70+1Ej
seg000:4A9C					    ; sub_4A70+28j
seg000:4A9C		    push    bx
seg000:4A9D		    push    ax
seg000:4A9E		    push    dx
seg000:4A9F		    mov	    al,	byte ptr ds:loc_61+1
seg000:4AA2		    cmp	    al,	byte ptr cs:loc_3B+1
seg000:4AA7		    jnz	    short loc_4AB3
seg000:4AA9		    mov	    ax,	word ptr ds:loc_4E
seg000:4AAC		    mov	    dx,	0
seg000:4AAF		    div	    word ptr ds:loc_4C
seg000:4AB3
seg000:4AB3 loc_4AB3:				    ; CODE XREF: sub_4A70+37j
seg000:4AB3		    mov	    bh,	al
seg000:4AB5		    call    sub_520F
seg000:4AB8		    pop	    dx
seg000:4AB9		    pop	    ax
seg000:4ABA		    pop	    bx
seg000:4ABB
seg000:4ABB loc_4ABB:
seg000:4ABB		    cmp	    byte ptr ds:loc_48+1, 1
seg000:4AC0		    jbe	    short loc_4B03
seg000:4AC2		    cmp	    byte ptr cs:loc_4, 1
seg000:4AC8		    jb	    short loc_4B03
seg000:4ACA		    cmp	    al,	1
seg000:4ACC		    jnz	    short loc_4B03
seg000:4ACE		    mov	    bl,	byte ptr ds:init_ram_loop
seg000:4AD2		    dec	    bl
seg000:4AD4		    cmp	    bl,	dl
seg000:4AD6		    jnz	    short loc_4B03
seg000:4AD8		    test    cx,	cx
seg000:4ADA		    jnz	    short loc_4B03
seg000:4ADC		    cmp	    dh,	byte ptr cs:loc_3B+2
seg000:4AE1		    jnz	    short loc_4B03
seg000:4AE3		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4AE8		    jz	    short loc_4AF9
seg000:4AEA		    cmp	    byte ptr ds:loc_48+1, 3
seg000:4AEF		    jbe	    short loc_4AF9
seg000:4AF1		    cmp	    byte ptr cs:loc_4, 1
seg000:4AF7		    jnz	    short loc_4AFE
seg000:4AF9
seg000:4AF9 loc_4AF9:				    ; CODE XREF: sub_4A70+78j
seg000:4AF9					    ; sub_4A70+7Fj
seg000:4AF9		    call    sub_4B3E
seg000:4AFC		    jmp	    short loc_4B28
seg000:4AFE ; ---------------------------------------------------------------------------
seg000:4AFE
seg000:4AFE loc_4AFE:				    ; CODE XREF: sub_4A70+87j
seg000:4AFE		    call    sub_4BCE
seg000:4B01		    jmp	    short loc_4B28
seg000:4B03 ; ---------------------------------------------------------------------------
seg000:4B03
seg000:4B03 loc_4B03:				    ; CODE XREF: sub_4A70+50j
seg000:4B03					    ; sub_4A70+58j ...
seg000:4B03		    call    sub_4CB1
seg000:4B06		    test    al,	al
seg000:4B08		    jz	    short loc_4B0D
seg000:4B0A		    call    sub_4D02
seg000:4B0D
seg000:4B0D loc_4B0D:				    ; CODE XREF: sub_4A70+98j
seg000:4B0D		    test    al,	al
seg000:4B0F		    jnz	    short loc_4B13
seg000:4B11		    mov	    al,	ch
seg000:4B13
seg000:4B13 loc_4B13:				    ; CODE XREF: sub_4A70+9Fj
seg000:4B13		    mov	    ch,	0
seg000:4B15
seg000:4B15 loc_4B15:				    ; CODE XREF: sub_4A70+B6j
seg000:4B15		    push    ax
seg000:4B16		    mov	    al,	0
seg000:4B18		    call    sub_5527
seg000:4B1B		    pop	    ax
seg000:4B1C		    mov	    dx,	word ptr cs:loc_6
seg000:4B21		    call    sub_54AA
seg000:4B24		    dec	    al
seg000:4B26		    jnz	    short loc_4B15
seg000:4B28
seg000:4B28 loc_4B28:				    ; CODE XREF: sub_4A70+8Cj
seg000:4B28					    ; sub_4A70+91j
seg000:4B28		    test    byte ptr cs:loc_46,	20h
seg000:4B2E		    jnz	    short loc_4B37
seg000:4B30		    mov	    ah,	byte ptr ds:Timer_init+1
seg000:4B34		    call    Vsync_wait
seg000:4B37
seg000:4B37 loc_4B37:				    ; CODE XREF: sub_4A70+BEj
seg000:4B37		    pop	    di
seg000:4B38		    pop	    si
seg000:4B39		    pop	    dx
seg000:4B3A		    pop	    cx
seg000:4B3B		    pop	    bx
seg000:4B3C		    pop	    ax
seg000:4B3D		    retn
seg000:4B3D sub_4A70	    endp
seg000:4B3D
seg000:4B3E
seg000:4B3E ; =============== S	U B R O	U T I N	E =======================================
seg000:4B3E
seg000:4B3E
seg000:4B3E sub_4B3E	    proc near		    ; CODE XREF: sub_4A70:loc_4AF9p
seg000:4B3E		    push    ax
seg000:4B3F		    push    bx
seg000:4B40		    push    cx
seg000:4B41		    push    dx
seg000:4B42		    mov	    cx,	0
seg000:4B45		    test    ah,	ah
seg000:4B47		    jz	    short loc_4B50
seg000:4B49		    mov	    ch,	byte ptr cs:loc_3B+2
seg000:4B4E		    mov	    cl,	0
seg000:4B50
seg000:4B50 loc_4B50:				    ; CODE XREF: sub_4B3E+9j
seg000:4B50		    call    sub_53B6
seg000:4B53		    mov	    al,	0
seg000:4B55		    mov	    cx,	word ptr ds:init_ram_loop
seg000:4B59		    call    sub_5527
seg000:4B5C		    mov	    bl,	byte ptr cs:loc_4+1
seg000:4B61		    mov	    bh,	0
seg000:4B63		    shl	    bx,	1
seg000:4B65		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4B6A		    jnz	    short loc_4B6F
seg000:4B6C		    mov	    bx,	10h
seg000:4B6F
seg000:4B6F loc_4B6F:				    ; CODE XREF: sub_4B3E+2Cj
seg000:4B6F		    mov	    dx,	cs:[bx+0Bh]
seg000:4B74		    test    ah,	ah
seg000:4B76		    jnz	    short loc_4B8A
seg000:4B78		    add	    dx,	word ptr cs:loc_6
seg000:4B7D		    cmp	    dx,	word ptr cs:loc_30+1
seg000:4B82		    jbe	    short loc_4B9A
seg000:4B84		    sub	    dx,	word ptr ds:loc_4C
seg000:4B88		    jmp	    short loc_4B9A
seg000:4B8A ; ---------------------------------------------------------------------------
seg000:4B8A
seg000:4B8A loc_4B8A:				    ; CODE XREF: sub_4B3E+38j
seg000:4B8A		    sub	    dx,	word ptr cs:loc_6
seg000:4B8F		    cmp	    dx,	word ptr cs:loc_2E+1
seg000:4B94		    jge	    short loc_4B9A
seg000:4B96		    add	    dx,	word ptr ds:loc_4C
seg000:4B9A
seg000:4B9A loc_4B9A:				    ; CODE XREF: sub_4B3E+44j
seg000:4B9A					    ; sub_4B3E+4Aj ...
seg000:4B9A		    mov	    cs:[bx+0Bh], dx
seg000:4B9F		    mov	    word ptr ds:loc_4E,	dx
seg000:4BA3		    mov	    bx,	dx
seg000:4BA5		    shr	    bx,	1
seg000:4BA7		    mov	    dx,	word ptr ds:loc_61+2
seg000:4BAB		    cmp	    dx,	3B4h
seg000:4BAF		    jz	    short loc_4BC4
seg000:4BB1		    add	    dx,	6
seg000:4BB4		    mov	    al,	byte ptr cs:loc_3B+1
seg000:4BB8		    cmp	    al,	byte ptr cs:loc_4+1
seg000:4BBD		    jnz	    short loc_4BC9
seg000:4BBF
seg000:4BBF loc_4BBF:				    ; CODE XREF: sub_4B3E+84j
seg000:4BBF		    in	    al,	dx
seg000:4BC0		    and	    al,	8
seg000:4BC2		    jnz	    short loc_4BBF
seg000:4BC4
seg000:4BC4 loc_4BC4:				    ; CODE XREF: sub_4B3E+71j
seg000:4BC4		    mov	    al,	0Ch
seg000:4BC6		    call    out_63h_AXwithBX
seg000:4BC9
seg000:4BC9 loc_4BC9:				    ; CODE XREF: sub_4B3E+7Fj
seg000:4BC9		    pop	    dx
seg000:4BCA		    pop	    cx
seg000:4BCB		    pop	    bx
seg000:4BCC		    pop	    ax
seg000:4BCD		    retn
seg000:4BCD sub_4B3E	    endp
seg000:4BCD
seg000:4BCE
seg000:4BCE ; =============== S	U B R O	U T I N	E =======================================
seg000:4BCE
seg000:4BCE
seg000:4BCE sub_4BCE	    proc near		    ; CODE XREF: sub_4A70:loc_4AFEp
seg000:4BCE		    push    ax
seg000:4BCF		    push    bx
seg000:4BD0		    push    cx
seg000:4BD1		    push    dx
seg000:4BD2		    push    si
seg000:4BD3		    push    bp
seg000:4BD4		    mov	    bp,	8
seg000:4BD7		    mov	    cx,	0
seg000:4BDA		    test    ah,	ah
seg000:4BDC		    jz	    short loc_4BE5
seg000:4BDE		    mov	    ch,	byte ptr cs:loc_3B+2
seg000:4BE3		    mov	    cl,	0
seg000:4BE5
seg000:4BE5 loc_4BE5:				    ; CODE XREF: sub_4BCE+Ej
seg000:4BE5		    call    sub_53B6
seg000:4BE8		    test    ah,	ah
seg000:4BEA		    jz	    short loc_4BFE
seg000:4BEC		    add	    di,	word ptr cs:loc_6
seg000:4BF1		    sub	    di,	50h ; 'P'
seg000:4BF4		    cmp	    di,	1FFFh
seg000:4BF8		    jbe	    short loc_4BFE
seg000:4BFA		    sub	    di,	2000h
seg000:4BFE
seg000:4BFE loc_4BFE:				    ; CODE XREF: sub_4BCE+1Cj
seg000:4BFE					    ; sub_4BCE+2Aj ...
seg000:4BFE		    mov	    bx,	word ptr cs:loc_B
seg000:4C03		    mov	    al,	0FFh
seg000:4C05		    mov	    cx,	word ptr ds:init_ram_loop
seg000:4C09		    call    sub_5527
seg000:4C0C		    xor	    bx,	2000h
seg000:4C10		    xor	    di,	2000h
seg000:4C14		    test    bp,	1
seg000:4C18		    jz	    short loc_4C4C
seg000:4C1A		    test    ah,	ah
seg000:4C1C		    jnz	    short loc_4C3A
seg000:4C1E		    add	    bx,	50h ; 'P'
seg000:4C21		    cmp	    bx,	1FFFh
seg000:4C25		    jbe	    short loc_4C2B
seg000:4C27		    sub	    bx,	2000h
seg000:4C2B
seg000:4C2B loc_4C2B:				    ; CODE XREF: sub_4BCE+57j
seg000:4C2B		    add	    di,	50h ; 'P'
seg000:4C2E		    cmp	    di,	1FFFh
seg000:4C32		    jbe	    short loc_4C4C
seg000:4C34		    sub	    di,	2000h
seg000:4C38		    jmp	    short loc_4C4C
seg000:4C3A ; ---------------------------------------------------------------------------
seg000:4C3A
seg000:4C3A loc_4C3A:				    ; CODE XREF: sub_4BCE+4Ej
seg000:4C3A		    sub	    bx,	50h ; 'P'
seg000:4C3D		    jnb	    short loc_4C43
seg000:4C3F		    add	    bx,	2000h
seg000:4C43
seg000:4C43 loc_4C43:				    ; CODE XREF: sub_4BCE+6Fj
seg000:4C43		    sub	    di,	50h ; 'P'
seg000:4C46		    jnb	    short loc_4C4C
seg000:4C48		    add	    di,	2000h
seg000:4C4C
seg000:4C4C loc_4C4C:				    ; CODE XREF: sub_4BCE+4Aj
seg000:4C4C					    ; sub_4BCE+64j ...
seg000:4C4C		    mov	    word ptr cs:loc_B, bx
seg000:4C51		    mov	    word ptr ds:loc_4E,	bx
seg000:4C55		    call    sub_4C8E
seg000:4C58		    shr	    bx,	1
seg000:4C5A		    mov	    al,	0Ch
seg000:4C5C		    call    out_63h_AXwithBX
seg000:4C5F		    push    ds
seg000:4C60		    mov	    dx,	3D4h
seg000:4C63		    mov	    al,	5
seg000:4C65		    out	    dx,	al	    ; Video: CRT cntrlr	addr
seg000:4C65					    ; end horizontal retrace. Data bits:
seg000:4C65					    ; 0-4: horizontal retrace width
seg000:4C65					    ; 5-6: retrace delay 0-3 character-clocks
seg000:4C65					    ; 7: 1=start panning on odd	addr; 0=even
seg000:4C66		    mov	    al,	1Dh
seg000:4C68		    call    table_lookup_ptr
seg000:4C6B		    mov	    al,	[si+5]
seg000:4C6E		    test    bp,	1
seg000:4C72		    jnz	    short loc_4C7E
seg000:4C74		    test    ah,	ah
seg000:4C76		    jnz	    short loc_4C7C
seg000:4C78		    dec	    al
seg000:4C7A		    jmp	    short loc_4C7E
seg000:4C7C ; ---------------------------------------------------------------------------
seg000:4C7C
seg000:4C7C loc_4C7C:				    ; CODE XREF: sub_4BCE+A8j
seg000:4C7C		    inc	    al
seg000:4C7E
seg000:4C7E loc_4C7E:				    ; CODE XREF: sub_4BCE+A4j
seg000:4C7E					    ; sub_4BCE+ACj
seg000:4C7E		    inc	    dx
seg000:4C7F		    out	    dx,	al
seg000:4C80		    pop	    ds
seg000:4C81		    dec	    bp
seg000:4C82		    jz	    short loc_4C87
seg000:4C84		    jmp	    loc_4BFE
seg000:4C87 ; ---------------------------------------------------------------------------
seg000:4C87
seg000:4C87 loc_4C87:				    ; CODE XREF: sub_4BCE+B4j
seg000:4C87		    pop	    bp
seg000:4C88		    pop	    si
seg000:4C89		    pop	    dx
seg000:4C8A		    pop	    cx
seg000:4C8B		    pop	    bx
seg000:4C8C		    pop	    ax
seg000:4C8D		    retn
seg000:4C8D sub_4BCE	    endp
seg000:4C8D
seg000:4C8E
seg000:4C8E ; =============== S	U B R O	U T I N	E =======================================
seg000:4C8E
seg000:4C8E
seg000:4C8E sub_4C8E	    proc near		    ; CODE XREF: sub_4BCE+87p
seg000:4C8E					    ; sub_4F2E+1Dp ...
seg000:4C8E		    push    ax
seg000:4C8F		    push    cx
seg000:4C90		    push    dx
seg000:4C91		    mov	    dx,	word ptr ds:loc_61+2
seg000:4C95		    cmp	    dx,	3B4h
seg000:4C99		    jz	    short loc_4CAD
seg000:4C9B		    add	    dx,	6
seg000:4C9E		    mov	    cx,	0FFFFh
seg000:4CA1
seg000:4CA1 loc_4CA1:				    ; CODE XREF: sub_4C8E+16j
seg000:4CA1		    in	    al,	dx
seg000:4CA2		    and	    al,	8
seg000:4CA4		    loopne  loc_4CA1
seg000:4CA6		    jcxz    short loc_4CAD
seg000:4CA8
seg000:4CA8 loc_4CA8:				    ; CODE XREF: sub_4C8E+1Dj
seg000:4CA8		    in	    al,	dx
seg000:4CA9		    and	    al,	8
seg000:4CAB		    loope   loc_4CA8
seg000:4CAD
seg000:4CAD loc_4CAD:				    ; CODE XREF: sub_4C8E+Bj
seg000:4CAD					    ; sub_4C8E+18j
seg000:4CAD		    pop	    dx
seg000:4CAE		    pop	    cx
seg000:4CAF		    pop	    ax
seg000:4CB0		    retn
seg000:4CB0 sub_4C8E	    endp
seg000:4CB0
seg000:4CB1
seg000:4CB1 ; =============== S	U B R O	U T I N	E =======================================
seg000:4CB1
seg000:4CB1
seg000:4CB1 sub_4CB1	    proc near		    ; CODE XREF: sub_4A70:loc_4B03p
seg000:4CB1		    push    ax
seg000:4CB2		    push    ax
seg000:4CB3		    test    ah,	ah
seg000:4CB5		    jnz	    short loc_4CBE
seg000:4CB7		    call    sub_53B6
seg000:4CBA		    mov	    si,	di
seg000:4CBC		    jmp	    short loc_4CC7
seg000:4CBE ; ---------------------------------------------------------------------------
seg000:4CBE
seg000:4CBE loc_4CBE:				    ; CODE XREF: sub_4CB1+4j
seg000:4CBE		    push    cx
seg000:4CBF		    mov	    ch,	dh
seg000:4CC1		    call    sub_53B6
seg000:4CC4		    mov	    si,	di
seg000:4CC6		    pop	    cx
seg000:4CC7
seg000:4CC7 loc_4CC7:				    ; CODE XREF: sub_4CB1+Bj
seg000:4CC7		    test    al,	al
seg000:4CC9		    jz	    short loc_4CF5
seg000:4CCB
seg000:4CCB loc_4CCB:				    ; CODE XREF: sub_4CB1+42j
seg000:4CCB		    test    ah,	ah
seg000:4CCD		    jnz	    short loc_4CE1
seg000:4CCF		    add	    si,	word ptr cs:loc_6
seg000:4CD4		    cmp	    si,	word ptr cs:loc_30+1
seg000:4CD9		    jbe	    short loc_4CF1
seg000:4CDB		    sub	    si,	word ptr ds:loc_4C
seg000:4CDF		    jmp	    short loc_4CF1
seg000:4CE1 ; ---------------------------------------------------------------------------
seg000:4CE1
seg000:4CE1 loc_4CE1:				    ; CODE XREF: sub_4CB1+1Cj
seg000:4CE1		    sub	    si,	word ptr cs:loc_6
seg000:4CE6		    cmp	    si,	word ptr cs:loc_2E+1
seg000:4CEB		    jge	    short loc_4CF1
seg000:4CED		    add	    si,	word ptr ds:loc_4C
seg000:4CF1
seg000:4CF1 loc_4CF1:				    ; CODE XREF: sub_4CB1+28j
seg000:4CF1					    ; sub_4CB1+2Ej ...
seg000:4CF1		    dec	    al
seg000:4CF3		    jnz	    short loc_4CCB
seg000:4CF5
seg000:4CF5 loc_4CF5:				    ; CODE XREF: sub_4CB1+18j
seg000:4CF5		    sub	    cx,	dx
seg000:4CF7		    neg	    cx
seg000:4CF9		    add	    cx,	101h
seg000:4CFD		    pop	    ax
seg000:4CFE		    sub	    ch,	al
seg000:4D00		    pop	    ax
seg000:4D01		    retn
seg000:4D01 sub_4CB1	    endp
seg000:4D01
seg000:4D02
seg000:4D02 ; =============== S	U B R O	U T I N	E =======================================
seg000:4D02
seg000:4D02
seg000:4D02 sub_4D02	    proc near		    ; CODE XREF: sub_4A70+9Ap
seg000:4D02		    push    ax
seg000:4D03		    push    cx
seg000:4D04		    push    dx
seg000:4D05		    push    si
seg000:4D06		    push    bp
seg000:4D07
seg000:4D07 loc_4D07:				    ; CODE XREF: sub_4D02+55j
seg000:4D07		    mov	    bp,	1
seg000:4D0A		    cmp	    byte ptr ds:loc_48+1, 3
seg000:4D0F		    jbe	    short loc_4D1B
seg000:4D11		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4D16		    jz	    short loc_4D1B
seg000:4D18		    mov	    bp,	8
seg000:4D1B
seg000:4D1B loc_4D1B:				    ; CODE XREF: sub_4D02+Dj
seg000:4D1B					    ; sub_4D02+14j
seg000:4D1B		    push    si
seg000:4D1C		    push    di
seg000:4D1D		    push    cx
seg000:4D1E		    mov	    ch,	0
seg000:4D20		    cmp	    word ptr cs:loc_6+2, 1
seg000:4D26		    jz	    short loc_4D2A
seg000:4D28		    shl	    cx,	1
seg000:4D2A
seg000:4D2A loc_4D2A:				    ; CODE XREF: sub_4D02+24j
seg000:4D2A					    ; sub_4D02+3Aj ...
seg000:4D2A		    call    sub_4D5F
seg000:4D2D		    dec	    bp
seg000:4D2E		    jz	    short loc_4D4A
seg000:4D30		    xor	    si,	2000h
seg000:4D34		    xor	    di,	2000h
seg000:4D38		    test    bp,	1
seg000:4D3C		    jnz	    short loc_4D2A
seg000:4D3E		    push    ax
seg000:4D3F		    mov	    ah,	0
seg000:4D41		    mov	    dx,	50h ; 'P'
seg000:4D44		    call    sub_54AA
seg000:4D47		    pop	    ax
seg000:4D48		    jmp	    short loc_4D2A
seg000:4D4A ; ---------------------------------------------------------------------------
seg000:4D4A
seg000:4D4A loc_4D4A:				    ; CODE XREF: sub_4D02+2Cj
seg000:4D4A		    pop	    cx
seg000:4D4B		    pop	    di
seg000:4D4C		    pop	    si
seg000:4D4D		    mov	    dx,	word ptr cs:loc_6
seg000:4D52		    call    sub_54AA
seg000:4D55		    dec	    ch
seg000:4D57		    jnz	    short loc_4D07
seg000:4D59		    pop	    bp
seg000:4D5A		    pop	    si
seg000:4D5B		    pop	    dx
seg000:4D5C		    pop	    cx
seg000:4D5D		    pop	    ax
seg000:4D5E		    retn
seg000:4D5E sub_4D02	    endp
seg000:4D5E
seg000:4D5F
seg000:4D5F ; =============== S	U B R O	U T I N	E =======================================
seg000:4D5F
seg000:4D5F
seg000:4D5F sub_4D5F	    proc near		    ; CODE XREF: sub_4D02:loc_4D2Ap
seg000:4D5F		    push    ax
seg000:4D60		    push    bx
seg000:4D61		    push    cx
seg000:4D62		    push    dx
seg000:4D63		    push    si
seg000:4D64		    push    di
seg000:4D65		    push    bp
seg000:4D66		    mov	    bp,	3FFFh
seg000:4D69		    cmp	    byte ptr ds:loc_48+1, 3
seg000:4D6E		    jbe	    short loc_4D80
seg000:4D70		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4D75		    jz	    short loc_4D80
seg000:4D77		    cmp	    si,	1FFFh
seg000:4D7B		    ja	    short loc_4D80
seg000:4D7D		    mov	    bp,	1FFFh
seg000:4D80
seg000:4D80 loc_4D80:				    ; CODE XREF: sub_4D5F+Fj
seg000:4D80					    ; sub_4D5F+16j ...
seg000:4D80		    mov	    dh,	0
seg000:4D82		    mov	    ax,	si
seg000:4D84		    add	    ax,	cx
seg000:4D86		    cmp	    ax,	bp
seg000:4D88		    jbe	    short loc_4D99
seg000:4D8A		    mov	    bx,	cx
seg000:4D8C		    mov	    ax,	bp
seg000:4D8E		    sub	    ax,	si
seg000:4D90		    inc	    ax
seg000:4D91		    mov	    cx,	ax
seg000:4D93		    sub	    bx,	cx
seg000:4D95		    mov	    dh,	1
seg000:4D97		    jmp	    short loc_4DAE
seg000:4D99 ; ---------------------------------------------------------------------------
seg000:4D99
seg000:4D99 loc_4D99:				    ; CODE XREF: sub_4D5F+29j
seg000:4D99		    mov	    ax,	di
seg000:4D9B		    add	    ax,	cx
seg000:4D9D		    cmp	    ax,	bp
seg000:4D9F		    jbe	    short loc_4DAE
seg000:4DA1		    mov	    bx,	cx
seg000:4DA3		    mov	    ax,	bp
seg000:4DA5		    sub	    ax,	di
seg000:4DA7		    inc	    ax
seg000:4DA8		    mov	    cx,	ax
seg000:4DAA		    sub	    bx,	cx
seg000:4DAC		    mov	    dh,	2
seg000:4DAE
seg000:4DAE loc_4DAE:				    ; CODE XREF: sub_4D5F+38j
seg000:4DAE					    ; sub_4D5F+40j
seg000:4DAE		    push    ds
seg000:4DAF		    push    es
seg000:4DB0		    pop	    ds
seg000:4DB1		    shr	    cx,	1
seg000:4DB3		    jnb	    short loc_4DB6
seg000:4DB5		    movsb
seg000:4DB6
seg000:4DB6 loc_4DB6:				    ; CODE XREF: sub_4D5F+54j
seg000:4DB6		    rep	movsw
seg000:4DB8		    pop	    ds
seg000:4DB9		    test    dh,	dh
seg000:4DBB		    jz	    short loc_4DE6
seg000:4DBD		    mov	    cx,	bx
seg000:4DBF		    mov	    ax,	0
seg000:4DC2		    cmp	    byte ptr ds:loc_48+1, 3
seg000:4DC7		    jbe	    short loc_4DD9
seg000:4DC9		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4DCE		    jz	    short loc_4DD9
seg000:4DD0		    cmp	    bp,	3FFFh
seg000:4DD4		    jb	    short loc_4DD9
seg000:4DD6		    mov	    ax,	2000h
seg000:4DD9
seg000:4DD9 loc_4DD9:				    ; CODE XREF: sub_4D5F+68j
seg000:4DD9					    ; sub_4D5F+6Fj ...
seg000:4DD9		    cmp	    dh,	1
seg000:4DDC		    jnz	    short loc_4DE2
seg000:4DDE		    mov	    si,	ax
seg000:4DE0		    jmp	    short loc_4D80
seg000:4DE2 ; ---------------------------------------------------------------------------
seg000:4DE2
seg000:4DE2 loc_4DE2:				    ; CODE XREF: sub_4D5F+7Dj
seg000:4DE2		    mov	    di,	ax
seg000:4DE4		    jmp	    short loc_4D80
seg000:4DE6 ; ---------------------------------------------------------------------------
seg000:4DE6
seg000:4DE6 loc_4DE6:				    ; CODE XREF: sub_4D5F+5Cj
seg000:4DE6		    pop	    bp
seg000:4DE7		    pop	    di
seg000:4DE8		    pop	    si
seg000:4DE9		    pop	    dx
seg000:4DEA		    pop	    cx
seg000:4DEB		    pop	    bx
seg000:4DEC		    pop	    ax
seg000:4DED		    retn
seg000:4DED sub_4D5F	    endp
seg000:4DED
seg000:4DEE
seg000:4DEE ; =============== S	U B R O	U T I N	E =======================================
seg000:4DEE
seg000:4DEE
seg000:4DEE Vsync_wait	    proc near		    ; CODE XREF: sub_4651+2Fp
seg000:4DEE					    ; sub_4651+6Ap ...
seg000:4DEE		    push    ax
seg000:4DEF		    push    cx
seg000:4DF0		    push    dx
seg000:4DF1		    cmp	    ah,	25h ; '%'
seg000:4DF4		    jnz	    short loc_4E0F
seg000:4DF6		    cmp	    byte ptr ds:loc_48+1, 1
seg000:4DFB		    jbe	    short loc_4E1C
seg000:4DFD		    cmp	    byte ptr ds:loc_48+1, 4
seg000:4E02		    jnb	    short loc_4E1C
seg000:4E04		    mov	    dx,	3DAh
seg000:4E07		    mov	    cx,	0FFFFh
seg000:4E0A
seg000:4E0A Vsync:				    ; CODE XREF: Vsync_wait+1Fj
seg000:4E0A		    in	    al,	dx	    ; Video status bits:
seg000:4E0A					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:4E0A					    ; 1: 1=light pen is	triggered; 0=armed
seg000:4E0A					    ; 2: 1=light pen switch is open; 0=closed
seg000:4E0A					    ; 3: 1=vertical sync pulse is occurring.
seg000:4E0B		    and	    al,	8
seg000:4E0D		    loope   Vsync
seg000:4E0F
seg000:4E0F loc_4E0F:				    ; CODE XREF: Vsync_wait+6j
seg000:4E0F		    mov	    dx,	3D8h
seg000:4E12		    mov	    al,	ah
seg000:4E14		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4E19		    jz	    short loc_4E1C
seg000:4E1B		    out	    dx,	al
seg000:4E1C
seg000:4E1C loc_4E1C:				    ; CODE XREF: Vsync_wait+Dj
seg000:4E1C					    ; Vsync_wait+14j ...
seg000:4E1C		    pop	    dx
seg000:4E1D		    pop	    cx
seg000:4E1E		    pop	    ax
seg000:4E1F		    retn
seg000:4E1F Vsync_wait	    endp
seg000:4E1F
seg000:4E20
seg000:4E20 ; =============== S	U B R O	U T I N	E =======================================
seg000:4E20
seg000:4E20
seg000:4E20 ret_ah1	    proc near		    ; DATA XREF: FPU_error_0+A6o
seg000:4E20		    push    ax
seg000:4E21		    push    bp
seg000:4E22		    push    es
seg000:4E23		    mov	    es,	word ptr cs:loc_38+2
seg000:4E28		    cmp	    al,	3
seg000:4E2A		    jnb	    short loc_4E3A
seg000:4E2C		    mov	    ah,	al
seg000:4E2E		    call    push_ret_ah
seg000:4E31		    jmp	    short loc_4E3A
seg000:4E33 ; ---------------------------------------------------------------------------
seg000:4E33		    nop
seg000:4E33 ; ---------------------------------------------------------------------------
seg000:4E34 ret_vectors_1   dw offset sub_4EC1
seg000:4E36		    dw offset sub_4F16
seg000:4E38		    dw offset sub_4E3E
seg000:4E3A ; ---------------------------------------------------------------------------
seg000:4E3A
seg000:4E3A loc_4E3A:				    ; CODE XREF: ret_ah1+Aj
seg000:4E3A					    ; ret_ah1+11j
seg000:4E3A		    pop	    es
seg000:4E3B		    pop	    bp
seg000:4E3C		    pop	    ax
seg000:4E3D		    retn
seg000:4E3D ret_ah1	    endp
seg000:4E3D
seg000:4E3E
seg000:4E3E ; =============== S	U B R O	U T I N	E =======================================
seg000:4E3E
seg000:4E3E
seg000:4E3E sub_4E3E	    proc near		    ; DATA XREF: ret_ah1+18o
seg000:4E3E		    push    ax
seg000:4E3F		    push    bx
seg000:4E40		    push    cx
seg000:4E41		    push    dx
seg000:4E42		    push    si
seg000:4E43		    mov	    al,	byte ptr ds:loc_48+1
seg000:4E46		    cmp	    al,	6
seg000:4E48		    jz	    short loc_4EBB
seg000:4E4A		    and	    al,	3
seg000:4E4C		    cmp	    al,	2
seg000:4E4E		    jb	    short loc_4EBB
seg000:4E50		    cmp	    byte ptr cs:loc_3B+2, 31h ;	'1'
seg000:4E56		    jz	    short loc_4EBB
seg000:4E58		    mov	    al,	0
seg000:4E5A		    call    sub_5184
seg000:4E5D		    push    es
seg000:4E5E		    mov	    ax,	cs
seg000:4E60		    mov	    es,	ax
seg000:4E62		    mov	    si,	offset out_63h_regs_1
seg000:4E65		    test    byte ptr cs:loc_46,	10h
seg000:4E6B		    jnz	    short loc_4E7B
seg000:4E6D		    mov	    si,	offset out_63h_regs_2
seg000:4E70		    test    byte ptr cs:loc_46,	8
seg000:4E76		    jz	    short loc_4E7B
seg000:4E78		    mov	    si,	offset out_63h_regs_3
seg000:4E7B
seg000:4E7B loc_4E7B:				    ; CODE XREF: sub_4E3E+2Dj
seg000:4E7B					    ; sub_4E3E+38j
seg000:4E7B		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4E80		    jnz	    short loc_4E85
seg000:4E82		    add	    si,	10h
seg000:4E85
seg000:4E85 loc_4E85:				    ; CODE XREF: sub_4E3E+42j
seg000:4E85		    call    out_63h_ESSIto0
seg000:4E88		    pop	    es
seg000:4E89		    mov	    byte ptr cs:loc_3B+2, 31h ;	'1'
seg000:4E8F		    mov	    ax,	4000h
seg000:4E92		    mov	    word ptr ds:loc_4C,	ax
seg000:4E95		    dec	    ax
seg000:4E96		    mov	    word ptr cs:loc_3E,	ax
seg000:4E9A		    mov	    bh,	0
seg000:4E9C		    mov	    ah,	8
seg000:4E9E		    int	    10h		    ; -	VIDEO -	READ ATTRIBUTES/CHARACTER AT CURSOR POSITION
seg000:4E9E					    ; BH = display page
seg000:4E9E					    ; Return: AL = character
seg000:4E9E					    ; AH = attribute of	character (alpha modes)
seg000:4EA0		    mov	    bh,	ah
seg000:4EA2		    mov	    ch,	19h
seg000:4EA4		    mov	    cl,	0
seg000:4EA6		    mov	    dh,	byte ptr cs:loc_3B+2
seg000:4EAB		    mov	    dl,	byte ptr ds:init_ram_loop
seg000:4EAF		    dec	    dl
seg000:4EB1		    mov	    ax,	600h
seg000:4EB4		    int	    10h		    ; -	VIDEO -	SCROLL PAGE UP
seg000:4EB4					    ; AL = number of lines to scroll window (0 = blank whole window)
seg000:4EB4					    ; BH = attributes to be used on blanked lines
seg000:4EB4					    ; CH,CL = row,column of upper left corner of window	to scroll
seg000:4EB4					    ; DH,DL = row,column of lower right	corner of window
seg000:4EB6		    mov	    al,	0
seg000:4EB8		    call    sub_5184
seg000:4EBB
seg000:4EBB loc_4EBB:				    ; CODE XREF: sub_4E3E+Aj
seg000:4EBB					    ; sub_4E3E+10j ...
seg000:4EBB		    pop	    si
seg000:4EBC		    pop	    dx
seg000:4EBD		    pop	    cx
seg000:4EBE		    pop	    bx
seg000:4EBF		    pop	    ax
seg000:4EC0		    retn
seg000:4EC0 sub_4E3E	    endp
seg000:4EC0
seg000:4EC1
seg000:4EC1 ; =============== S	U B R O	U T I N	E =======================================
seg000:4EC1
seg000:4EC1
seg000:4EC1 sub_4EC1	    proc near		    ; CODE XREF: sub_4F16+2p
seg000:4EC1					    ; DATA XREF: ret_ah1:ret_vectors_1o
seg000:4EC1		    push    ax
seg000:4EC2		    push    bx
seg000:4EC3		    push    cx
seg000:4EC4		    push    dx
seg000:4EC5		    push    di
seg000:4EC6		    push    es
seg000:4EC7		    call    sub_5363
seg000:4ECA		    call    out_63h_ESSIto0
seg000:4ECD		    pop	    es
seg000:4ECE		    cmp	    byte ptr cs:loc_3B+2, 31h ;	'1'
seg000:4ED4		    jnz	    short loc_4F0B
seg000:4ED6		    mov	    al,	byte ptr ds:loc_50+1
seg000:4ED9		    sub	    al,	19h
seg000:4EDB		    jb	    short loc_4EFA
seg000:4EDD		    inc	    al
seg000:4EDF		    xor	    cx,	cx
seg000:4EE1		    mov	    dh,	byte ptr cs:loc_3B+2
seg000:4EE6		    mov	    dl,	byte ptr ds:init_ram_loop
seg000:4EEA		    mov	    bh,	7
seg000:4EEC		    call    sub_4A70
seg000:4EEF		    mov	    dx,	word ptr ds:loc_50
seg000:4EF3		    mov	    dh,	18h
seg000:4EF5		    mov	    bh,	0
seg000:4EF7		    call    sub_5245
seg000:4EFA
seg000:4EFA loc_4EFA:				    ; CODE XREF: sub_4EC1+1Aj
seg000:4EFA		    mov	    byte ptr cs:loc_3B+2, 18h
seg000:4F00		    mov	    ax,	1000h
seg000:4F03		    mov	    word ptr ds:loc_4C,	ax
seg000:4F06		    dec	    ax
seg000:4F07		    mov	    word ptr cs:loc_3E,	ax
seg000:4F0B
seg000:4F0B loc_4F0B:				    ; CODE XREF: sub_4EC1+13j
seg000:4F0B		    mov	    al,	0
seg000:4F0D		    call    sub_5184
seg000:4F10		    pop	    di
seg000:4F11		    pop	    dx
seg000:4F12		    pop	    cx
seg000:4F13		    pop	    bx
seg000:4F14		    pop	    ax
seg000:4F15		    retn
seg000:4F15 sub_4EC1	    endp
seg000:4F15
seg000:4F16
seg000:4F16 ; =============== S	U B R O	U T I N	E =======================================
seg000:4F16
seg000:4F16
seg000:4F16 sub_4F16	    proc near		    ; DATA XREF: ret_ah1+16o
seg000:4F16		    push    ax
seg000:4F17		    push    dx
seg000:4F18		    call    sub_4EC1
seg000:4F1B		    mov	    dx,	word ptr ds:loc_61+2
seg000:4F1F		    mov	    al,	8
seg000:4F21		    out	    dx,	al
seg000:4F22		    inc	    dx
seg000:4F23		    mov	    al,	1
seg000:4F25		    out	    dx,	al
seg000:4F26		    pop	    dx
seg000:4F27		    pop	    ax
seg000:4F28		    retn
seg000:4F28 sub_4F16	    endp
seg000:4F28
seg000:4F29
seg000:4F29 ; =============== S	U B R O	U T I N	E =======================================
seg000:4F29
seg000:4F29
seg000:4F29 ret_ah2	    proc near		    ; DATA XREF: FPU_error_0+A8o
seg000:4F29		    mov	    byte ptr cs:loc_41,	al
seg000:4F2D		    retn
seg000:4F2D ret_ah2	    endp
seg000:4F2D
seg000:4F2E
seg000:4F2E ; =============== S	U B R O	U T I N	E =======================================
seg000:4F2E
seg000:4F2E
seg000:4F2E sub_4F2E	    proc near		    ; CODE XREF: FPU_error_0+67p
seg000:4F2E					    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:4F2E		    push    ax
seg000:4F2F		    push    bx
seg000:4F30		    push    cx
seg000:4F31		    push    dx
seg000:4F32		    push    si
seg000:4F33		    mov	    ah,	byte ptr ds:loc_E+2
seg000:4F37		    and	    ah,	30h
seg000:4F3A		    cmp	    ah,	30h ; '0'
seg000:4F3D		    jnz	    short loc_4F47
seg000:4F3F		    mov	    dx,	3B8h
seg000:4F42		    mov	    al,	1
seg000:4F44		    out	    dx,	al
seg000:4F45		    mov	    al,	7
seg000:4F47
seg000:4F47 loc_4F47:				    ; CODE XREF: sub_4F2E+Fj
seg000:4F47		    clc
seg000:4F48		    call    sub_4FC6
seg000:4F4B		    call    sub_4C8E
seg000:4F4E		    mov	    dx,	3D4h
seg000:4F51		    mov	    al,	25h ; '%'
seg000:4F53		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4F58		    jnz	    short loc_4F5F
seg000:4F5A		    mov	    dx,	3B4h
seg000:4F5D		    mov	    al,	1
seg000:4F5F
seg000:4F5F loc_4F5F:				    ; CODE XREF: sub_4F2E+2Aj
seg000:4F5F		    mov	    word ptr ds:loc_61+2, dx
seg000:4F63		    add	    dx,	4
seg000:4F66		    out	    dx,	al
seg000:4F67		    mov	    al,	0
seg000:4F69		    call    sub_55F5
seg000:4F6C		    push    es
seg000:4F6D		    call    sub_5363
seg000:4F70		    mov	    ah,	es:[si+0Ah]
seg000:4F74		    mov	    al,	es:[si+0Bh]
seg000:4F78		    mov	    word ptr ds:loc_5E+2, ax
seg000:4F7B		    call    out_63h_ESSIto0
seg000:4F7E		    pop	    es
seg000:4F7F		    call    sub_4C8E
seg000:4F82		    call    sub_5504
seg000:4F85		    mov	    al,	byte ptr ds:loc_66
seg000:4F88		    add	    dx,	1
seg000:4F8B		    out	    dx,	al
seg000:4F8C		    and	    byte ptr cs:loc_46,	0F7h
seg000:4F92		    mov	    al,	0Ch
seg000:4F94		    mov	    bx,	1234h
seg000:4F97		    call    out_63h_AXwithBX
seg000:4F9A		    mov	    al,	0Ch
seg000:4F9C		    call    in_63h_al_ahal
seg000:4F9F		    cmp	    ax,	bx
seg000:4FA1		    jnz	    short loc_4FA9
seg000:4FA3		    or	    byte ptr cs:loc_46,	8
seg000:4FA9
seg000:4FA9 loc_4FA9:				    ; CODE XREF: sub_4F2E+73j
seg000:4FA9		    mov	    al,	0
seg000:4FAB		    call    sub_5184
seg000:4FAE		    call    sub_4C8E
seg000:4FB1		    mov	    al,	0
seg000:4FB3		    call    sub_5184
seg000:4FB6		    mov	    al,	byte ptr ds:Timer_init+1
seg000:4FB9		    add	    dx,	0FFFFh
seg000:4FBC		    out	    dx,	al
seg000:4FBD		    call    sub_514A
seg000:4FC0		    pop	    si
seg000:4FC1		    pop	    dx
seg000:4FC2		    pop	    cx
seg000:4FC3		    pop	    bx
seg000:4FC4		    pop	    ax
seg000:4FC5		    retn
seg000:4FC5 sub_4F2E	    endp
seg000:4FC5
seg000:4FC6
seg000:4FC6 ; =============== S	U B R O	U T I N	E =======================================
seg000:4FC6
seg000:4FC6
seg000:4FC6 sub_4FC6	    proc near		    ; CODE XREF: FPU_error_0+83p
seg000:4FC6					    ; sub_4F2E+1Ap
seg000:4FC6		    push    ax
seg000:4FC7		    push    bx
seg000:4FC8		    push    cx
seg000:4FC9		    push    si
seg000:4FCA		    push    di
seg000:4FCB		    push    es
seg000:4FCC		    pushf
seg000:4FCD		    cmp	    al,	7
seg000:4FCF		    jbe	    short loc_4FD4
seg000:4FD1		    jmp	    loc_5086
seg000:4FD4 ; ---------------------------------------------------------------------------
seg000:4FD4
seg000:4FD4 loc_4FD4:				    ; CODE XREF: sub_4FC6+9j
seg000:4FD4		    mov	    byte ptr ds:loc_48+1, al
seg000:4FD7		    mov	    byte ptr cs:loc_2+1, al
seg000:4FDB		    cbw
seg000:4FDC		    mov	    bx,	ax
seg000:4FDE		    shr	    ax,	1
seg000:4FE0		    mov	    es,	cs:colorText
seg000:4FE5		    assume es:nothing
seg000:4FE5		    cmp	    byte ptr ds:loc_48+1, 7
seg000:4FEA		    jnz	    short loc_4FF2
seg000:4FEC		    inc	    ax
seg000:4FED		    mov	    es,	cs:monoText
seg000:4FF2		    assume es:nothing
seg000:4FF2
seg000:4FF2 loc_4FF2:				    ; CODE XREF: sub_4FC6+24j
seg000:4FF2		    mov	    word ptr cs:loc_38+2, es
seg000:4FF7		    mov	    cl,	0Ah
seg000:4FF9		    mul	    cl
seg000:4FFB		    push    ds
seg000:4FFC		    push    cs
seg000:4FFD		    pop	    ds
seg000:4FFE		    mov	    es,	word ptr cs:loc_C5+1
seg000:5003		    assume es:nothing
seg000:5003		    lea	    si,	unk_5734
seg000:5007		    add	    si,	ax
seg000:5009		    lodsb
seg000:500A		    mov	    byte ptr cs:loc_9+1, al
seg000:500E		    lodsw
seg000:500F		    mov	    word ptr es:loc_4C,	ax
seg000:5013		    dec	    ax
seg000:5014		    mov	    word ptr cs:loc_3E,	ax
seg000:5018		    lodsw
seg000:5019		    mov	    word ptr es:init_ram_loop, ax
seg000:501D		    mov	    byte ptr cs:loc_41+1, al
seg000:5021		    lodsw
seg000:5022		    mov	    word ptr cs:loc_6+2, ax
seg000:5026		    lodsw
seg000:5027		    mov	    word ptr cs:loc_6, ax
seg000:502B		    lodsb
seg000:502C		    mov	    byte ptr es:loc_66,	al
seg000:5030		    pop	    ds
seg000:5031		    mov	    al,	cs:some_table_[bx]
seg000:5036		    mov	    byte ptr ds:Timer_init+1, al
seg000:5039		    mov	    ax,	0
seg000:503C		    mov	    bx,	0
seg000:503F		    mov	    cl,	byte ptr cs:loc_9+1
seg000:5044		    mov	    ch,	0
seg000:5046
seg000:5046 loc_5046:				    ; CODE XREF: sub_4FC6+B2j
seg000:5046		    cmp	    byte ptr ds:loc_48+1, 7
seg000:504B		    jnz	    short loc_505D
seg000:504D		    mov	    word ptr cs:loc_2B+2, 0
seg000:5054		    mov	    word ptr cs:loc_19+2, 0
seg000:505B		    jmp	    short loc_5067
seg000:505D ; ---------------------------------------------------------------------------
seg000:505D
seg000:505D loc_505D:				    ; CODE XREF: sub_4FC6+85j
seg000:505D		    mov	    cs:[bx+1Dh], ax
seg000:5062		    mov	    cs:[bx+0Bh], ax
seg000:5067
seg000:5067 loc_5067:				    ; CODE XREF: sub_4FC6+95j
seg000:5067		    popf
seg000:5068		    pushf
seg000:5069		    jb	    short loc_5071
seg000:506B		    mov	    word ptr [bx+50h], 0
seg000:5071
seg000:5071 loc_5071:				    ; CODE XREF: sub_4FC6+A3j
seg000:5071		    add	    ax,	word ptr ds:loc_4C
seg000:5075		    add	    bx,	2
seg000:5078		    loop    loc_5046
seg000:507A		    mov	    al,	18h
seg000:507C		    mov	    byte ptr cs:loc_3B+2, al
seg000:5080		    mov	    byte ptr cs:loc_3E+2, 0
seg000:5086
seg000:5086 loc_5086:				    ; CODE XREF: sub_4FC6+Bj
seg000:5086		    xor	    bh,	bh
seg000:5088		    call    sub_520F
seg000:508B		    popf
seg000:508C		    pop	    es
seg000:508D		    pop	    di
seg000:508E		    pop	    si
seg000:508F		    pop	    cx
seg000:5090		    pop	    bx
seg000:5091		    pop	    ax
seg000:5092		    retn
seg000:5092 sub_4FC6	    endp ; sp-analysis failed
seg000:5092
seg000:5093
seg000:5093 ; =============== S	U B R O	U T I N	E =======================================
seg000:5093
seg000:5093
seg000:5093 sub_5093	    proc near		    ; CODE XREF: FPU_error_0:loc_43FAp
seg000:5093		    push    ax
seg000:5094		    push    cx
seg000:5095		    push    dx
seg000:5096		    mov	    word ptr cs:loc_1D,	0
seg000:509D		    mov	    byte ptr cs:loc_41+1, al
seg000:50A1		    mov	    ah,	0
seg000:50A3		    shl	    ax,	1
seg000:50A5		    mov	    word ptr cs:loc_6, ax
seg000:50A9		    mov	    cx,	19h
seg000:50AC		    mul	    cx
seg000:50AE		    mov	    word ptr ds:loc_4C,	ax
seg000:50B1		    dec	    ax
seg000:50B2		    mov	    word ptr cs:loc_30+1, ax
seg000:50B6		    mov	    word ptr cs:loc_3E,	3FFFh
seg000:50BD		    mov	    byte ptr cs:loc_41,	0FFh
seg000:50C3		    pop	    dx
seg000:50C4		    pop	    cx
seg000:50C5		    pop	    ax
seg000:50C6		    retn
seg000:50C6 sub_5093	    endp
seg000:50C6
seg000:50C7
seg000:50C7 ; =============== S	U B R O	U T I N	E =======================================
seg000:50C7
seg000:50C7
seg000:50C7 read_some_ram   proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:50C7		    mov	    al,	byte ptr ds:loc_48+1
seg000:50CA		    mov	    ah,	byte ptr ds:init_ram_loop
seg000:50CE		    mov	    bh,	byte ptr ds:loc_61+1
seg000:50D2		    retn
seg000:50D2 read_some_ram   endp
seg000:50D2
seg000:50D3
seg000:50D3 ; =============== S	U B R O	U T I N	E =======================================
seg000:50D3
seg000:50D3
seg000:50D3 ret_ah0	    proc near		    ; DATA XREF: FPU_error_0:ret_vectors_0o
seg000:50D3		    push    ax
seg000:50D4		    push    bx
seg000:50D5		    push    cx
seg000:50D6		    mov	    byte ptr cs:loc_4, al
seg000:50DA		    mov	    ah,	25h ; '%'
seg000:50DC		    call    Vsync_wait
seg000:50DF		    mov	    ax,	0
seg000:50E2		    mov	    bx,	0
seg000:50E5		    mov	    cx,	8
seg000:50E8
seg000:50E8 loc_50E8:				    ; CODE XREF: ret_ah0+2Cj
seg000:50E8		    mov	    cs:[bx+1Dh], ax
seg000:50ED		    mov	    cs:[bx+0Bh], ax
seg000:50F2		    mov	    word ptr [bx+50h], 0
seg000:50F8		    add	    ax,	word ptr ds:loc_4C
seg000:50FC		    add	    bx,	2
seg000:50FF		    loop    loc_50E8
seg000:5101		    mov	    word ptr cs:loc_2B+2, 0
seg000:5108		    mov	    word ptr cs:loc_19+2, 0
seg000:510F		    mov	    es,	cs:colorText
seg000:5114		    assume es:nothing
seg000:5114		    call    sub_5504
seg000:5117		    mov	    es,	cs:monoText
seg000:511C		    assume es:nothing
seg000:511C		    call    sub_5504
seg000:511F		    push    word ptr ds:loc_61+2
seg000:5123		    mov	    word ptr ds:loc_61+2, 3D4h
seg000:5129		    mov	    al,	byte ptr ds:loc_61+1
seg000:512C		    call    sub_5184
seg000:512F		    mov	    word ptr ds:loc_61+2, 3B4h
seg000:5135		    call    sub_5184
seg000:5138		    pop	    word ptr ds:loc_61+2
seg000:513C		    mov	    ah,	byte ptr ds:Timer_init+1
seg000:5140		    call    Vsync_wait
seg000:5143		    call    sub_514A
seg000:5146		    pop	    cx
seg000:5147		    pop	    bx
seg000:5148		    pop	    ax
seg000:5149		    retn
seg000:5149 ret_ah0	    endp
seg000:5149
seg000:514A
seg000:514A ; =============== S	U B R O	U T I N	E =======================================
seg000:514A
seg000:514A
seg000:514A sub_514A	    proc near		    ; CODE XREF: sub_4F2E+8Fp
seg000:514A					    ; ret_ah0+70p
seg000:514A		    push    ax
seg000:514B		    test    byte ptr cs:loc_46,	1
seg000:5151		    jnz	    short loc_5182
seg000:5153		    cmp	    byte ptr cs:loc_4, 0
seg000:5159		    jz	    short loc_5182
seg000:515B		    cmp	    byte ptr ds:loc_48+1, 2
seg000:5160		    jb	    short loc_5182
seg000:5162		    cmp	    byte ptr ds:loc_48+1, 7
seg000:5167		    jz	    short loc_5170
seg000:5169		    cmp	    byte ptr ds:loc_48+1, 4
seg000:516E		    jnb	    short loc_5182
seg000:5170
seg000:5170 loc_5170:				    ; CODE XREF: sub_514A+1Dj
seg000:5170		    mov	    word ptr ds:loc_4C,	offset Bios_signature ;	"12/08/89 (C)ZDS CORP3032C"
seg000:5176		    mov	    word ptr cs:loc_3E,	offset zero
seg000:517D		    mov	    al,	0
seg000:517F		    call    sub_5184
seg000:5182
seg000:5182 loc_5182:				    ; CODE XREF: sub_514A+7j
seg000:5182					    ; sub_514A+Fj ...
seg000:5182		    pop	    ax
seg000:5183		    retn
seg000:5183 sub_514A	    endp
seg000:5183
seg000:5184
seg000:5184 ; =============== S	U B R O	U T I N	E =======================================
seg000:5184
seg000:5184
seg000:5184 sub_5184	    proc near		    ; CODE XREF: sub_4E3E+1Cp
seg000:5184					    ; sub_4E3E+7Ap ...
seg000:5184		    push    ax
seg000:5185		    push    bx
seg000:5186		    push    dx
seg000:5187		    push    si
seg000:5188		    mov	    bl,	byte ptr ds:loc_48+1
seg000:518C		    cmp	    bl,	7
seg000:518F		    ja	    short loc_5198
seg000:5191		    xor	    bh,	bh
seg000:5193		    and	    al,	cs:byte_577A[bx]
seg000:5198
seg000:5198 loc_5198:				    ; CODE XREF: sub_5184+Bj
seg000:5198		    mov	    bh,	al
seg000:519A		    call    sub_520F
seg000:519D		    mov	    byte ptr ds:loc_61+1, al
seg000:51A0		    mov	    byte ptr cs:loc_3B+1, al
seg000:51A4		    cbw
seg000:51A5		    mov	    bx,	ax
seg000:51A7		    shl	    bx,	1
seg000:51A9		    mov	    si,	cs:[bx+0Bh]
seg000:51AE		    cmp	    byte ptr ds:loc_48+1, 7
seg000:51B3		    jnz	    short loc_51BA
seg000:51B5		    mov	    si,	word ptr cs:loc_19+2
seg000:51BA
seg000:51BA loc_51BA:				    ; CODE XREF: sub_5184+2Fj
seg000:51BA		    mov	    word ptr ds:loc_4E,	si
seg000:51BE		    mov	    dx,	[bx+50h]
seg000:51C2		    push    bx
seg000:51C3		    mov	    bh,	byte ptr ds:loc_61+1
seg000:51C7		    call    sub_5245
seg000:51CA		    pop	    bx
seg000:51CB		    cmp	    byte ptr ds:loc_48+1, 2
seg000:51D0		    jb	    short loc_51FC
seg000:51D2		    cmp	    byte ptr ds:loc_48+1, 3
seg000:51D7		    ja	    short loc_51FC
seg000:51D9		    cmp	    byte ptr cs:loc_4, 0
seg000:51DF		    jz	    short loc_51FC
seg000:51E1		    cmp	    byte ptr cs:loc_3B+2, 18h
seg000:51E7		    jnz	    short loc_51FC
seg000:51E9		    mov	    ax,	cs:[bx+1Dh]
seg000:51EE		    shl	    ax,	1
seg000:51F0		    shl	    ax,	1
seg000:51F2		    and	    ah,	0C0h
seg000:51F5		    or	    ah,	21h
seg000:51F8		    mov	    al,	ah
seg000:51FA		    jmp	    short loc_51FE
seg000:51FC ; ---------------------------------------------------------------------------
seg000:51FC
seg000:51FC loc_51FC:				    ; CODE XREF: sub_5184+4Cj
seg000:51FC					    ; sub_5184+53j ...
seg000:51FC		    mov	    al,	1
seg000:51FE
seg000:51FE loc_51FE:				    ; CODE XREF: sub_5184+76j
seg000:51FE		    call    sub_55F5
seg000:5201		    mov	    bx,	si
seg000:5203		    shr	    bx,	1
seg000:5205		    mov	    al,	0Ch
seg000:5207		    call    out_63h_AXwithBX
seg000:520A		    pop	    si
seg000:520B		    pop	    dx
seg000:520C		    pop	    bx
seg000:520D		    pop	    ax
seg000:520E		    retn
seg000:520E sub_5184	    endp
seg000:520E
seg000:520F
seg000:520F ; =============== S	U B R O	U T I N	E =======================================
seg000:520F
seg000:520F
seg000:520F sub_520F	    proc near		    ; CODE XREF: sub_498A+5p
seg000:520F					    ; sub_4A70+45p ...
seg000:520F		    push    bx
seg000:5210		    cmp	    byte ptr ds:loc_48+1, 3
seg000:5215		    jbe	    short loc_5219
seg000:5217		    mov	    bh,	0
seg000:5219
seg000:5219 loc_5219:				    ; CODE XREF: sub_520F+6j
seg000:5219		    mov	    byte ptr cs:loc_4+1, bh
seg000:521E		    mov	    bx,	0
seg000:5221		    cmp	    byte ptr ds:loc_48+1, 7
seg000:5226		    jz	    short loc_5234
seg000:5228		    mov	    bl,	byte ptr cs:loc_4+1
seg000:522D		    shl	    bx,	1
seg000:522F		    mov	    bx,	cs:[bx+1Dh]
seg000:5234
seg000:5234 loc_5234:				    ; CODE XREF: sub_520F+17j
seg000:5234		    mov	    word ptr cs:loc_2E+1, bx
seg000:5239		    add	    bx,	word ptr ds:loc_4C
seg000:523D		    dec	    bx
seg000:523E		    mov	    word ptr cs:loc_30+1, bx
seg000:5243		    pop	    bx
seg000:5244		    retn
seg000:5244 sub_520F	    endp
seg000:5244
seg000:5245
seg000:5245 ; =============== S	U B R O	U T I N	E =======================================
seg000:5245
seg000:5245
seg000:5245 sub_5245	    proc near		    ; CODE XREF: sub_4EC1+36p
seg000:5245					    ; sub_5184+43p ...
seg000:5245		    push    ax
seg000:5246		    push    bx
seg000:5247		    push    dx
seg000:5248		    mov	    byte ptr cs:loc_4+1, bh
seg000:524D		    mov	    bl,	bh
seg000:524F		    mov	    bh,	0
seg000:5251		    shl	    bx,	1
seg000:5253		    mov	    [bx+50h], dx
seg000:5257		    mov	    al,	byte ptr cs:loc_4+1
seg000:525B		    cmp	    al,	byte ptr ds:loc_61+1
seg000:525F		    jnz	    short loc_5291
seg000:5261		    mov	    al,	dh
seg000:5263		    mul	    byte ptr ds:init_ram_loop
seg000:5267		    add	    al,	dl
seg000:5269		    adc	    ah,	0
seg000:526C		    shl	    ax,	1
seg000:526E		    add	    ax,	word ptr ds:loc_4E
seg000:5272		    shr	    ax,	1
seg000:5274		    cmp	    ax,	2000h
seg000:5277		    jbe	    short loc_527C
seg000:5279		    sub	    ax,	4000h
seg000:527C
seg000:527C loc_527C:				    ; CODE XREF: sub_5245+32j
seg000:527C		    mov	    bx,	ax
seg000:527E		    mov	    dx,	word ptr ds:loc_61+2
seg000:5282		    mov	    al,	0Eh
seg000:5284		    out	    dx,	al
seg000:5285		    inc	    dx
seg000:5286		    mov	    al,	bh
seg000:5288		    out	    dx,	al
seg000:5289		    dec	    dx
seg000:528A		    mov	    al,	0Fh
seg000:528C		    out	    dx,	al
seg000:528D		    inc	    dx
seg000:528E		    mov	    al,	bl
seg000:5290		    out	    dx,	al
seg000:5291
seg000:5291 loc_5291:				    ; CODE XREF: sub_5245+1Aj
seg000:5291		    pop	    dx
seg000:5292		    pop	    bx
seg000:5293		    pop	    ax
seg000:5294		    retn
seg000:5294 sub_5245	    endp
seg000:5294
seg000:5295
seg000:5295 ; =============== S	U B R O	U T I N	E =======================================
seg000:5295
seg000:5295
seg000:5295 read_50h_bl_toDX proc near		    ; CODE XREF: tab_size_?+8p
seg000:5295					    ; LPT_print+35p
seg000:5295					    ; DATA XREF: ...
seg000:5295		    push    bx
seg000:5296		    mov	    bl,	bh
seg000:5298		    mov	    bh,	0
seg000:529A		    shl	    bx,	1
seg000:529C		    mov	    dx,	[bx+50h]
seg000:52A0		    mov	    cx,	word ptr ds:loc_5E+2
seg000:52A4		    pop	    bx
seg000:52A5		    retn
seg000:52A5 read_50h_bl_toDX endp
seg000:52A5
seg000:52A6
seg000:52A6 ; =============== S	U B R O	U T I N	E =======================================
seg000:52A6
seg000:52A6
seg000:52A6 write_CX_to_60h proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:52A6		    push    ax
seg000:52A7		    push    bx
seg000:52A8		    mov	    word ptr ds:loc_5E+2, cx
seg000:52AC		    mov	    al,	0Ah
seg000:52AE		    mov	    bx,	cx
seg000:52B0		    call    out_63h_AXwithBX
seg000:52B3		    pop	    bx
seg000:52B4		    pop	    ax
seg000:52B5		    retn
seg000:52B5 write_CX_to_60h endp
seg000:52B5
seg000:52B6
seg000:52B6 ; =============== S	U B R O	U T I N	E =======================================
seg000:52B6
seg000:52B6
seg000:52B6 sub_52B6	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:52B6		    push    ax
seg000:52B7		    push    bx
seg000:52B8		    push    cx
seg000:52B9		    push    dx
seg000:52BA		    mov	    al,	byte ptr ds:loc_66
seg000:52BD		    test    bh,	bh
seg000:52BF		    jnz	    short loc_52C8
seg000:52C1		    and	    al,	0E0h
seg000:52C3		    and	    bl,	1Fh
seg000:52C6		    jmp	    short loc_52D1
seg000:52C8 ; ---------------------------------------------------------------------------
seg000:52C8
seg000:52C8 loc_52C8:				    ; CODE XREF: sub_52B6+9j
seg000:52C8		    and	    al,	0DFh
seg000:52CA		    mov	    cl,	5
seg000:52CC		    shl	    bl,	cl
seg000:52CE		    and	    bl,	20h
seg000:52D1
seg000:52D1 loc_52D1:				    ; CODE XREF: sub_52B6+10j
seg000:52D1		    or	    al,	bl
seg000:52D3		    mov	    dx,	word ptr ds:loc_61+2
seg000:52D7		    add	    dx,	5
seg000:52DA		    out	    dx,	al
seg000:52DB		    mov	    byte ptr ds:loc_66,	al
seg000:52DE		    pop	    dx
seg000:52DF		    pop	    cx
seg000:52E0		    pop	    bx
seg000:52E1		    pop	    ax
seg000:52E2		    retn
seg000:52E2 sub_52B6	    endp
seg000:52E2
seg000:52E3
seg000:52E3 ; =============== S	U B R O	U T I N	E =======================================
seg000:52E3
seg000:52E3
seg000:52E3 sub_52E3	    proc near		    ; DATA XREF: FPU_error_0:video_jumptable_1o
seg000:52E3		    push    si
seg000:52E4		    push    es
seg000:52E5		    mov	    bh,	byte ptr ds:loc_61+1
seg000:52E9		    call    sub_520F
seg000:52EC		    mov	    dx,	word ptr ds:loc_61+2
seg000:52F0		    add	    dx,	6
seg000:52F3		    in	    al,	dx
seg000:52F4		    test    al,	4
seg000:52F6		    mov	    ah,	0
seg000:52F8		    jnz	    short loc_5356
seg000:52FA		    test    al,	2
seg000:52FC		    jz	    short loc_5360
seg000:52FE		    mov	    al,	10h
seg000:5300		    call    in_63h_al_ahal
seg000:5303		    mov	    cx,	ax
seg000:5305		    mov	    bl,	byte ptr ds:loc_48+1
seg000:5309		    mov	    bh,	0
seg000:530B		    sub	    cl,	cs:[bx+576Eh]
seg000:5310		    sbb	    ch,	0
seg000:5313		    shl	    cx,	1
seg000:5315		    sub	    cx,	word ptr ds:loc_4E
seg000:5319		    shr	    cx,	1
seg000:531B		    mov	    ax,	word ptr ds:loc_4C
seg000:531E		    shr	    ax,	1
seg000:5320		    dec	    ax
seg000:5321		    and	    cx,	ax
seg000:5323		    call    sub_5363
seg000:5326		    mov	    ax,	cx
seg000:5328		    div	    byte ptr es:[si+1]
seg000:532C		    mov	    cl,	3
seg000:532E		    xchg    al,	ah
seg000:5330		    mov	    ch,	ah
seg000:5332		    cmp	    byte ptr es:[si+9],	1
seg000:5337		    jnz	    short loc_534A
seg000:5339		    shl	    ch,	1
seg000:533B		    shr	    ah,	1
seg000:533D		    shr	    ah,	1
seg000:533F		    cmp	    byte ptr ds:loc_48+1, 6
seg000:5344		    jnz	    short loc_534C
seg000:5346		    shl	    al,	1
seg000:5348		    jmp	    short loc_534C
seg000:534A ; ---------------------------------------------------------------------------
seg000:534A
seg000:534A loc_534A:				    ; CODE XREF: sub_52E3+54j
seg000:534A		    shl	    ch,	cl
seg000:534C
seg000:534C loc_534C:				    ; CODE XREF: sub_52E3+61j
seg000:534C					    ; sub_52E3+65j
seg000:534C		    mov	    dx,	ax
seg000:534E		    mov	    bl,	al
seg000:5350		    mov	    bh,	0
seg000:5352		    shl	    bx,	cl
seg000:5354		    mov	    ah,	1
seg000:5356
seg000:5356 loc_5356:				    ; CODE XREF: sub_52E3+15j
seg000:5356		    push    dx
seg000:5357		    mov	    dx,	word ptr ds:loc_61+2
seg000:535B		    add	    dx,	7
seg000:535E		    out	    dx,	al
seg000:535F		    pop	    dx
seg000:5360
seg000:5360 loc_5360:				    ; CODE XREF: sub_52E3+19j
seg000:5360		    pop	    es
seg000:5361		    assume es:nothing
seg000:5361		    pop	    si
seg000:5362		    retn
seg000:5362 sub_52E3	    endp
seg000:5362
seg000:5363
seg000:5363 ; =============== S	U B R O	U T I N	E =======================================
seg000:5363
seg000:5363
seg000:5363 sub_5363	    proc near		    ; CODE XREF: sub_4EC1+6p
seg000:5363					    ; sub_4F2E+3Fp ...
seg000:5363		    push    ax
seg000:5364		    push    cx
seg000:5365		    push    ds
seg000:5366		    mov	    al,	1Dh
seg000:5368		    call    table_lookup_ptr
seg000:536B		    push    ds
seg000:536C		    pop	    es
seg000:536D		    pop	    ds
seg000:536E		    mov	    al,	byte ptr ds:loc_48+1
seg000:5371		    cbw
seg000:5372		    shr	    ax,	1
seg000:5374		    cmp	    byte ptr ds:loc_48+1, 6
seg000:5379		    jnz	    short loc_537C
seg000:537B		    dec	    ax
seg000:537C
seg000:537C loc_537C:				    ; CODE XREF: sub_5363+16j
seg000:537C		    mov	    cl,	10h
seg000:537E		    mul	    cl
seg000:5380		    add	    si,	ax
seg000:5382		    pop	    cx
seg000:5383		    pop	    ax
seg000:5384		    retn
seg000:5384 sub_5363	    endp
seg000:5384
seg000:5385
seg000:5385 ; =============== S	U B R O	U T I N	E =======================================
seg000:5385
seg000:5385
seg000:5385 out_63h_ESSIto0 proc near		    ; CODE XREF: sub_4E3E:loc_4E85p
seg000:5385					    ; sub_4EC1+9p ...
seg000:5385		    push    ax
seg000:5386		    push    cx
seg000:5387		    push    dx
seg000:5388		    mov	    dx,	word ptr ds:loc_61+2
seg000:538C		    xor	    ah,	ah
seg000:538E		    mov	    cx,	10h
seg000:5391
seg000:5391 loc_5391:				    ; CODE XREF: out_63h_ESSIto0+16j
seg000:5391		    mov	    al,	ah
seg000:5393		    out	    dx,	al
seg000:5394		    inc	    ah
seg000:5396		    lods    byte ptr es:[si]
seg000:5398		    inc	    dx
seg000:5399		    out	    dx,	al
seg000:539A		    dec	    dx
seg000:539B		    loop    loc_5391
seg000:539D		    pop	    dx
seg000:539E		    pop	    cx
seg000:539F		    pop	    ax
seg000:53A0		    retn
seg000:53A0 out_63h_ESSIto0 endp
seg000:53A0
seg000:53A1
seg000:53A1 ; =============== S	U B R O	U T I N	E =======================================
seg000:53A1
seg000:53A1
seg000:53A1 read_50h_bl_toCX proc near		    ; CODE XREF: load_some_table+17p
seg000:53A1					    ; sub_498A+8p
seg000:53A1		    push    bx
seg000:53A2		    push    cx
seg000:53A3		    mov	    bl,	byte ptr cs:loc_4+1
seg000:53A8		    mov	    bh,	0
seg000:53AA		    shl	    bx,	1
seg000:53AC		    mov	    cx,	[bx+50h]
seg000:53B0		    call    sub_53B6
seg000:53B3		    pop	    cx
seg000:53B4		    pop	    bx
seg000:53B5		    retn
seg000:53B5 read_50h_bl_toCX endp
seg000:53B5
seg000:53B6
seg000:53B6 ; =============== S	U B R O	U T I N	E =======================================
seg000:53B6
seg000:53B6
seg000:53B6 sub_53B6	    proc near		    ; CODE XREF: sub_4B3E:loc_4B50p
seg000:53B6					    ; sub_4BCE:loc_4BE5p ...
seg000:53B6		    push    ax
seg000:53B7		    push    cx
seg000:53B8		    push    dx
seg000:53B9		    mov	    dl,	ch
seg000:53BB		    mov	    dh,	0
seg000:53BD		    mov	    ch,	dh
seg000:53BF		    mov	    ah,	0FFh
seg000:53C1		    call    sub_53C8
seg000:53C4		    pop	    dx
seg000:53C5		    pop	    cx
seg000:53C6		    pop	    ax
seg000:53C7		    retn
seg000:53C7 sub_53B6	    endp
seg000:53C7
seg000:53C8
seg000:53C8 ; =============== S	U B R O	U T I N	E =======================================
seg000:53C8
seg000:53C8
seg000:53C8 sub_53C8	    proc near		    ; CODE XREF: sub_4935+7p
seg000:53C8					    ; sub_4A3E+5p ...
seg000:53C8		    push    bx
seg000:53C9		    push    cx
seg000:53CA		    push    bp
seg000:53CB		    mov	    di,	dx
seg000:53CD		    test    ah,	ah
seg000:53CF		    jnz	    short loc_53D3
seg000:53D1		    shr	    dx,	1
seg000:53D3
seg000:53D3 loc_53D3:				    ; CODE XREF: sub_53C8+7j
seg000:53D3		    mov	    al,	0
seg000:53D5		    mov	    bp,	ax
seg000:53D7		    mov	    ax,	dx
seg000:53D9		    test    bp,	bp
seg000:53DB		    jz	    short loc_53E5
seg000:53DD		    mul	    word ptr cs:loc_6
seg000:53E2		    jmp	    short loc_53EB
seg000:53E4 ; ---------------------------------------------------------------------------
seg000:53E4		    nop
seg000:53E5
seg000:53E5 loc_53E5:				    ; CODE XREF: sub_53C8+13j
seg000:53E5		    push    cx
seg000:53E6		    mov	    cl,	50h ; 'P'
seg000:53E8		    mul	    cl
seg000:53EA		    pop	    cx
seg000:53EB
seg000:53EB loc_53EB:				    ; CODE XREF: sub_53C8+1Aj
seg000:53EB		    mov	    dx,	ax
seg000:53ED		    test    bp,	bp
seg000:53EF		    jnz	    short loc_540E
seg000:53F1		    mov	    ah,	cl
seg000:53F3		    shr	    cx,	1
seg000:53F5		    shr	    cx,	1
seg000:53F7		    cmp	    byte ptr ds:loc_48+1, 6
seg000:53FC		    jnz	    short loc_5407
seg000:53FE		    and	    ah,	7
seg000:5401		    mov	    al,	1
seg000:5403		    shr	    cx,	1
seg000:5405		    jmp	    short loc_5418
seg000:5407 ; ---------------------------------------------------------------------------
seg000:5407
seg000:5407 loc_5407:				    ; CODE XREF: sub_53C8+34j
seg000:5407		    and	    ah,	3
seg000:540A		    mov	    al,	2
seg000:540C		    jmp	    short loc_5418
seg000:540E ; ---------------------------------------------------------------------------
seg000:540E
seg000:540E loc_540E:				    ; CODE XREF: sub_53C8+27j
seg000:540E		    cmp	    word ptr cs:loc_6+2, 1
seg000:5414		    jle	    short loc_5418
seg000:5416		    shl	    cx,	1
seg000:5418
seg000:5418 loc_5418:				    ; CODE XREF: sub_53C8+3Dj
seg000:5418					    ; sub_53C8+44j ...
seg000:5418		    add	    dx,	cx
seg000:541A		    mov	    bl,	byte ptr cs:loc_4+1
seg000:541F		    mov	    bh,	0
seg000:5421		    shl	    bx,	1
seg000:5423		    mov	    bx,	cs:[bx+0Bh]
seg000:5428		    cmp	    byte ptr ds:loc_48+1, 7
seg000:542D		    jnz	    short loc_5434
seg000:542F		    mov	    bx,	word ptr cs:loc_19+2
seg000:5434
seg000:5434 loc_5434:				    ; CODE XREF: sub_53C8+65j
seg000:5434		    add	    dx,	bx
seg000:5436		    cmp	    byte ptr ds:loc_48+1, 3
seg000:543B		    jbe	    short loc_5454
seg000:543D		    cmp	    byte ptr ds:loc_48+1, 7
seg000:5442		    jz	    short loc_5454
seg000:5444		    test    bp,	bp
seg000:5446		    jz	    short loc_5454
seg000:5448		    cmp	    dx,	1FFFh
seg000:544C		    jbe	    short loc_545F
seg000:544E		    sub	    dx,	2000h
seg000:5452		    jmp	    short loc_545F
seg000:5454 ; ---------------------------------------------------------------------------
seg000:5454
seg000:5454 loc_5454:				    ; CODE XREF: sub_53C8+73j
seg000:5454					    ; sub_53C8+7Aj ...
seg000:5454		    cmp	    dx,	word ptr cs:loc_30+1
seg000:5459		    jbe	    short loc_545F
seg000:545B		    sub	    dx,	word ptr ds:loc_4C
seg000:545F
seg000:545F loc_545F:				    ; CODE XREF: sub_53C8+84j
seg000:545F					    ; sub_53C8+8Aj ...
seg000:545F		    test    bp,	bp
seg000:5461		    jnz	    short loc_546D
seg000:5463		    test    di,	1
seg000:5467		    jz	    short loc_546D
seg000:5469		    xor	    dx,	2000h
seg000:546D
seg000:546D loc_546D:				    ; CODE XREF: sub_53C8+99j
seg000:546D					    ; sub_53C8+9Fj
seg000:546D		    xchg    dx,	di
seg000:546F		    pop	    bp
seg000:5470		    pop	    cx
seg000:5471		    pop	    bx
seg000:5472		    retn
seg000:5472 sub_53C8	    endp
seg000:5472
seg000:5473
seg000:5473 ; =============== S	U B R O	U T I N	E =======================================
seg000:5473
seg000:5473
seg000:5473 sub_5473	    proc near		    ; CODE XREF: sub_48C9+26p
seg000:5473		    push    bx
seg000:5474		    push    cx
seg000:5475		    mov	    cx,	8
seg000:5478
seg000:5478 loc_5478:				    ; CODE XREF: sub_5473:loc_5483j
seg000:5478		    shl	    bx,	1
seg000:547A		    shl	    bx,	1
seg000:547C		    shl	    al,	1
seg000:547E		    jnb	    short loc_5483
seg000:5480		    or	    bx,	3
seg000:5483
seg000:5483 loc_5483:				    ; CODE XREF: sub_5473+Bj
seg000:5483		    loop    loc_5478
seg000:5485		    mov	    ax,	bx
seg000:5487		    pop	    cx
seg000:5488		    pop	    bx
seg000:5489		    retn
seg000:5489 sub_5473	    endp
seg000:5489
seg000:548A
seg000:548A ; =============== S	U B R O	U T I N	E =======================================
seg000:548A
seg000:548A
seg000:548A sub_548A	    proc near		    ; CODE XREF: sub_498A+65p
seg000:548A		    push    bx
seg000:548B		    push    cx
seg000:548C		    push    dx
seg000:548D		    mov	    bx,	0C000h
seg000:5490		    mov	    cx,	8
seg000:5493
seg000:5493 loc_5493:				    ; CODE XREF: sub_548A+18j
seg000:5493		    shl	    dl,	1
seg000:5495		    push    ax
seg000:5496		    and	    ax,	bx
seg000:5498		    jz	    short loc_549D
seg000:549A		    or	    dl,	1
seg000:549D
seg000:549D loc_549D:				    ; CODE XREF: sub_548A+Ej
seg000:549D		    pop	    ax
seg000:549E		    shr	    bx,	1
seg000:54A0		    shr	    bx,	1
seg000:54A2		    loop    loc_5493
seg000:54A4		    mov	    al,	dl
seg000:54A6		    pop	    dx
seg000:54A7		    pop	    cx
seg000:54A8		    pop	    bx
seg000:54A9		    retn
seg000:54A9 sub_548A	    endp
seg000:54A9
seg000:54AA
seg000:54AA ; =============== S	U B R O	U T I N	E =======================================
seg000:54AA
seg000:54AA
seg000:54AA sub_54AA	    proc near		    ; CODE XREF: sub_4A70+B1p
seg000:54AA					    ; sub_4D02+42p ...
seg000:54AA		    push    bx
seg000:54AB		    push    cx
seg000:54AC		    push    bp
seg000:54AD		    mov	    cx,	word ptr cs:loc_2E+1
seg000:54B2		    mov	    bx,	word ptr ds:loc_4C
seg000:54B6		    mov	    bp,	word ptr cs:loc_30+1
seg000:54BB		    cmp	    byte ptr ds:loc_48+1, 3
seg000:54C0		    jbe	    short loc_54DA
seg000:54C2		    cmp	    byte ptr ds:loc_48+1, 7
seg000:54C7		    jz	    short loc_54DA
seg000:54C9		    mov	    bx,	2000h
seg000:54CC		    cmp	    si,	1FFFh
seg000:54D0		    ja	    short loc_54D7
seg000:54D2		    mov	    bp,	1FFFh
seg000:54D5		    jmp	    short loc_54DA
seg000:54D7 ; ---------------------------------------------------------------------------
seg000:54D7
seg000:54D7 loc_54D7:				    ; CODE XREF: sub_54AA+26j
seg000:54D7		    mov	    cx,	2000h
seg000:54DA
seg000:54DA loc_54DA:				    ; CODE XREF: sub_54AA+16j
seg000:54DA					    ; sub_54AA+1Dj ...
seg000:54DA		    test    ah,	ah
seg000:54DC		    jnz	    short loc_54F0
seg000:54DE		    add	    si,	dx
seg000:54E0		    cmp	    si,	bp
seg000:54E2		    jbe	    short loc_54E6
seg000:54E4		    sub	    si,	bx
seg000:54E6
seg000:54E6 loc_54E6:				    ; CODE XREF: sub_54AA+38j
seg000:54E6		    add	    di,	dx
seg000:54E8		    cmp	    di,	bp
seg000:54EA		    jbe	    short loc_5500
seg000:54EC		    sub	    di,	bx
seg000:54EE		    jmp	    short loc_5500
seg000:54F0 ; ---------------------------------------------------------------------------
seg000:54F0
seg000:54F0 loc_54F0:				    ; CODE XREF: sub_54AA+32j
seg000:54F0		    sub	    si,	dx
seg000:54F2		    cmp	    si,	cx
seg000:54F4		    jge	    short loc_54F8
seg000:54F6		    add	    si,	bx
seg000:54F8
seg000:54F8 loc_54F8:				    ; CODE XREF: sub_54AA+4Aj
seg000:54F8		    sub	    di,	dx
seg000:54FA		    cmp	    di,	cx
seg000:54FC		    jge	    short loc_5500
seg000:54FE		    add	    di,	bx
seg000:5500
seg000:5500 loc_5500:				    ; CODE XREF: sub_54AA+40j
seg000:5500					    ; sub_54AA+44j ...
seg000:5500		    pop	    bp
seg000:5501		    pop	    cx
seg000:5502		    pop	    bx
seg000:5503		    retn
seg000:5503 sub_54AA	    endp
seg000:5503
seg000:5504
seg000:5504 ; =============== S	U B R O	U T I N	E =======================================
seg000:5504
seg000:5504
seg000:5504 sub_5504	    proc near		    ; CODE XREF: sub_4F2E+54p
seg000:5504					    ; ret_ah0+41p ...
seg000:5504		    push    ax
seg000:5505		    push    cx
seg000:5506		    push    di
seg000:5507		    mov	    ax,	es
seg000:5509		    cmp	    ax,	0B000h
seg000:550C		    mov	    ax,	720h
seg000:550F		    jz	    short loc_551A
seg000:5511		    cmp	    byte ptr ds:loc_48+1, 3
seg000:5516		    jbe	    short loc_551A
seg000:5518		    xor	    ax,	ax
seg000:551A
seg000:551A loc_551A:				    ; CODE XREF: sub_5504+Bj
seg000:551A					    ; sub_5504+12j
seg000:551A		    lea	    di,	sub_0
seg000:551E		    mov	    cx,	2000h
seg000:5521		    rep	stosw
seg000:5523		    pop	    di
seg000:5524		    pop	    cx
seg000:5525		    pop	    ax
seg000:5526		    retn
seg000:5526 sub_5504	    endp
seg000:5526
seg000:5527
seg000:5527 ; =============== S	U B R O	U T I N	E =======================================
seg000:5527
seg000:5527
seg000:5527 sub_5527	    proc near		    ; CODE XREF: sub_4A70+A8p
seg000:5527					    ; sub_4B3E+1Bp ...
seg000:5527		    push    ax
seg000:5528		    push    bx
seg000:5529		    push    cx
seg000:552A		    push    dx
seg000:552B		    push    si
seg000:552C		    push    di
seg000:552D		    push    bp
seg000:552E		    mov	    bp,	1
seg000:5531		    cmp	    byte ptr ds:loc_48+1, 7
seg000:5536		    jz	    short loc_5546
seg000:5538		    cmp	    byte ptr ds:loc_48+1, 3
seg000:553D		    jbe	    short loc_5546
seg000:553F		    test    al,	al
seg000:5541		    jnz	    short loc_5546
seg000:5543		    mov	    bp,	8
seg000:5546
seg000:5546 loc_5546:				    ; CODE XREF: sub_5527+Fj
seg000:5546					    ; sub_5527+16j ...
seg000:5546		    push    di
seg000:5547		    push    cx
seg000:5548		    cmp	    word ptr cs:loc_6+2, 1
seg000:554E		    jz	    short loc_5552
seg000:5550		    shl	    cx,	1
seg000:5552
seg000:5552 loc_5552:				    ; CODE XREF: sub_5527+27j
seg000:5552					    ; sub_5527+93j ...
seg000:5552		    mov	    ah,	0
seg000:5554		    mov	    si,	di
seg000:5556		    add	    si,	cx
seg000:5558		    cmp	    byte ptr ds:loc_48+1, 7
seg000:555D		    jz	    short loc_5577
seg000:555F		    cmp	    byte ptr ds:loc_48+1, 3
seg000:5564		    jbe	    short loc_5577
seg000:5566		    cmp	    di,	1FFFh
seg000:556A		    jbe	    short loc_5577
seg000:556C		    cmp	    si,	3FFFh
seg000:5570		    jbe	    short loc_558C
seg000:5572		    mov	    dx,	4000h
seg000:5575		    jmp	    short loc_5584
seg000:5577 ; ---------------------------------------------------------------------------
seg000:5577
seg000:5577 loc_5577:				    ; CODE XREF: sub_5527+36j
seg000:5577					    ; sub_5527+3Dj ...
seg000:5577		    cmp	    si,	word ptr cs:loc_30+1
seg000:557C		    jbe	    short loc_558C
seg000:557E		    mov	    dx,	word ptr cs:loc_30+1
seg000:5583		    inc	    dx
seg000:5584
seg000:5584 loc_5584:				    ; CODE XREF: sub_5527+4Ej
seg000:5584		    sub	    dx,	di
seg000:5586		    xchg    dx,	cx
seg000:5588		    sub	    dx,	cx
seg000:558A		    mov	    ah,	0FFh
seg000:558C
seg000:558C loc_558C:				    ; CODE XREF: sub_5527+49j
seg000:558C					    ; sub_5527+55j
seg000:558C		    push    ax
seg000:558D		    mov	    ah,	bh
seg000:558F		    mov	    al,	20h ; ' '
seg000:5591		    cmp	    byte ptr ds:loc_48+1, 7
seg000:5596		    jz	    short loc_55A2
seg000:5598		    cmp	    byte ptr ds:loc_48+1, 3
seg000:559D		    jbe	    short loc_55A2
seg000:559F		    mov	    ax,	0
seg000:55A2
seg000:55A2 loc_55A2:				    ; CODE XREF: sub_5527+6Fj
seg000:55A2					    ; sub_5527+76j
seg000:55A2		    shr	    cx,	1
seg000:55A4		    jnb	    short loc_55A7
seg000:55A6		    stosb
seg000:55A7
seg000:55A7 loc_55A7:				    ; CODE XREF: sub_5527+7Dj
seg000:55A7		    rep	stosw
seg000:55A9		    pop	    ax
seg000:55AA		    test    ah,	ah
seg000:55AC		    jz	    short loc_55CE
seg000:55AE		    mov	    cx,	dx
seg000:55B0		    mov	    di,	word ptr cs:loc_2E+1
seg000:55B5		    cmp	    byte ptr ds:loc_48+1, 7
seg000:55BA		    jz	    short loc_5552
seg000:55BC		    cmp	    byte ptr ds:loc_48+1, 3
seg000:55C1		    jbe	    short loc_5552
seg000:55C3		    cmp	    si,	3FFFh
seg000:55C7		    jbe	    short loc_5552
seg000:55C9		    mov	    di,	2000h
seg000:55CC		    jmp	    short loc_5552
seg000:55CE ; ---------------------------------------------------------------------------
seg000:55CE
seg000:55CE loc_55CE:				    ; CODE XREF: sub_5527+85j
seg000:55CE		    pop	    cx
seg000:55CF		    pop	    di
seg000:55D0		    dec	    bp
seg000:55D1		    jz	    short loc_55ED
seg000:55D3		    xor	    di,	2000h
seg000:55D7		    test    bp,	1
seg000:55DB		    jnz	    short loc_55EA
seg000:55DD		    add	    di,	50h ; 'P'
seg000:55E0		    cmp	    di,	1FFFh
seg000:55E4		    jbe	    short loc_55EA
seg000:55E6		    sub	    di,	2000h
seg000:55EA
seg000:55EA loc_55EA:				    ; CODE XREF: sub_5527+B4j
seg000:55EA					    ; sub_5527+BDj
seg000:55EA		    jmp	    loc_5546
seg000:55ED ; ---------------------------------------------------------------------------
seg000:55ED
seg000:55ED loc_55ED:				    ; CODE XREF: sub_5527+AAj
seg000:55ED		    pop	    bp
seg000:55EE		    pop	    di
seg000:55EF		    pop	    si
seg000:55F0		    pop	    dx
seg000:55F1		    pop	    cx
seg000:55F2		    pop	    bx
seg000:55F3		    pop	    ax
seg000:55F4		    retn
seg000:55F4 sub_5527	    endp
seg000:55F4
seg000:55F5
seg000:55F5 ; =============== S	U B R O	U T I N	E =======================================
seg000:55F5
seg000:55F5
seg000:55F5 sub_55F5	    proc near		    ; CODE XREF: sub_4F2E+3Bp
seg000:55F5					    ; sub_5184:loc_51FEp
seg000:55F5		    push    ax
seg000:55F6		    push    dx
seg000:55F7		    test    byte ptr cs:loc_46,	1
seg000:55FD		    jz	    short loc_561B
seg000:55FF		    mov	    dx,	word ptr ds:loc_61+2
seg000:5603		    cmp	    dx,	3B4h
seg000:5607		    jz	    short loc_561B
seg000:5609		    add	    dx,	6
seg000:560C		    mov	    ah,	byte ptr cs:loc_38+1
seg000:5611		    and	    ah,	6
seg000:5614		    or	    al,	ah
seg000:5616		    out	    dx,	al
seg000:5617		    mov	    byte ptr cs:loc_38+1, al
seg000:561B
seg000:561B loc_561B:				    ; CODE XREF: sub_55F5+8j
seg000:561B					    ; sub_55F5+12j
seg000:561B		    pop	    dx
seg000:561C		    pop	    ax
seg000:561D		    retn
seg000:561D sub_55F5	    endp
seg000:561D
seg000:561E
seg000:561E ; =============== S	U B R O	U T I N	E =======================================
seg000:561E
seg000:561E
seg000:561E out_63h_AXwithBX proc near		    ; CODE XREF: sub_4B3E+88p
seg000:561E					    ; sub_4BCE+8Ep ...
seg000:561E		    push    ax
seg000:561F		    push    dx
seg000:5620		    mov	    dx,	word ptr ds:loc_61+2
seg000:5624		    mov	    ah,	al
seg000:5626		    inc	    al
seg000:5628		    out	    dx,	al
seg000:5629		    mov	    al,	bl
seg000:562B		    inc	    dx
seg000:562C		    out	    dx,	al
seg000:562D		    mov	    al,	ah
seg000:562F		    dec	    dx
seg000:5630		    out	    dx,	al
seg000:5631		    inc	    dx
seg000:5632		    mov	    al,	bh
seg000:5634		    out	    dx,	al
seg000:5635		    pop	    dx
seg000:5636		    pop	    ax
seg000:5637		    retn
seg000:5637 out_63h_AXwithBX endp
seg000:5637
seg000:5638
seg000:5638 ; =============== S	U B R O	U T I N	E =======================================
seg000:5638
seg000:5638
seg000:5638 in_63h_al_ahal  proc near		    ; CODE XREF: sub_4F2E+6Ep
seg000:5638					    ; sub_52E3+1Dp
seg000:5638		    push    cx
seg000:5639		    push    dx
seg000:563A		    mov	    dx,	word ptr ds:loc_61+2
seg000:563E		    out	    dx,	al
seg000:563F		    mov	    cl,	al
seg000:5641		    inc	    dx
seg000:5642		    in	    al,	dx
seg000:5643		    mov	    ah,	al
seg000:5645		    mov	    al,	cl
seg000:5647		    inc	    al
seg000:5649		    dec	    dx
seg000:564A		    out	    dx,	al
seg000:564B		    inc	    dx
seg000:564C		    in	    al,	dx
seg000:564D		    pop	    dx
seg000:564E		    pop	    cx
seg000:564F		    retn
seg000:564F in_63h_al_ahal  endp
seg000:564F
seg000:5650
seg000:5650 ; =============== S	U B R O	U T I N	E =======================================
seg000:5650
seg000:5650
seg000:5650 video_3DAh?	    proc near		    ; CODE XREF: Video_init_?+14p
seg000:5650		    push    ax
seg000:5651		    push    cx
seg000:5652		    push    dx
seg000:5653		    mov	    dx,	3DAh
seg000:5656		    xor	    al,	al
seg000:5658		    out	    dx,	al	    ; Video: bits 0-1 control
seg000:5658					    ; Feature Control outputs FC0 and FC1
seg000:5659		    in	    al,	dx	    ; Video status bits:
seg000:5659					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:5659					    ; 1: 1=light pen is	triggered; 0=armed
seg000:5659					    ; 2: 1=light pen switch is open; 0=closed
seg000:5659					    ; 3: 1=vertical sync pulse is occurring.
seg000:565A		    mov	    cl,	3
seg000:565C		    shr	    al,	cl
seg000:565E		    and	    al,	6
seg000:5660		    mov	    ch,	al
seg000:5662		    xor	    al,	2
seg000:5664		    out	    dx,	al	    ; Video: bits 0-1 control
seg000:5664					    ; Feature Control outputs FC0 and FC1
seg000:5665		    push    dx
seg000:5666		    pop	    dx
seg000:5667		    in	    al,	dx	    ; Video status bits:
seg000:5667					    ; 0: retrace.  1=display is	in vert	or horiz retrace.
seg000:5667					    ; 1: 1=light pen is	triggered; 0=armed
seg000:5667					    ; 2: 1=light pen switch is open; 0=closed
seg000:5667					    ; 3: 1=vertical sync pulse is occurring.
seg000:5668		    shr	    al,	cl
seg000:566A		    and	    al,	6
seg000:566C		    xor	    al,	2
seg000:566E		    out	    dx,	al	    ; Video: bits 0-1 control
seg000:566E					    ; Feature Control outputs FC0 and FC1
seg000:566F		    xor	    al,	ch
seg000:5671		    cmp	    al,	ch
seg000:5673		    mov	    al,	0
seg000:5675		    jnz	    short loc_567E
seg000:5677		    or	    ch,	21h
seg000:567A		    mov	    al,	byte ptr cs:loc_38+1
seg000:567E
seg000:567E loc_567E:				    ; CODE XREF: video_3DAh?+25j
seg000:567E		    out	    dx,	al	    ; Video: bits 0-1 control
seg000:567E					    ; Feature Control outputs FC0 and FC1
seg000:567F		    mov	    byte ptr cs:loc_38+1, al
seg000:5683		    mov	    byte ptr cs:loc_46,	ch
seg000:5688		    pop	    dx
seg000:5689		    pop	    cx
seg000:568A		    pop	    ax
seg000:568B		    retn
seg000:568B video_3DAh?	    endp
seg000:568B
seg000:568C
seg000:568C ; =============== S	U B R O	U T I N	E =======================================
seg000:568C
seg000:568C
seg000:568C Video_init_?    proc near		    ; CODE XREF: ColrWarm_Boot+3D1p
seg000:568C		    push    ax
seg000:568D		    push    bx
seg000:568E		    push    si
seg000:568F		    call    VGA_bios_init
seg000:5692		    mov	    byte ptr cs:loc_3B+2, 18h
seg000:5698		    mov	    byte ptr cs:loc_4, 0
seg000:569E		    mov	    bl,	0
seg000:56A0		    call    video_3DAh?
seg000:56A3		    push    ds
seg000:56A4		    mov	    al,	10h
seg000:56A6		    call    table_lookup_ptr
seg000:56A9		    mov	    si,	ds
seg000:56AB		    pop	    ds
seg000:56AC		    cmp	    si,	0F000h
seg000:56B0		    mov	    al,	3
seg000:56B2		    jnz	    short loc_56F4
seg000:56B4		    mov	    al,	8Eh ; ''
seg000:56B6		    call    read_cmos
seg000:56B9		    mov	    ah,	al
seg000:56BB		    mov	    al,	94h ; ''
seg000:56BD		    call    read_cmos
seg000:56C0		    xchg    al,	ah
seg000:56C2		    test    al,	20h
seg000:56C4		    jz	    short loc_56D4
seg000:56C6		    in	    al,	82h	    ; DMA page register	74LS612:
seg000:56C6					    ; Channel 3	(hard disk DMA)	(address bits 16-23)
seg000:56C8		    mov	    ah,	al
seg000:56CA		    and	    ah,	40h
seg000:56CD		    shr	    ah,	1
seg000:56CF		    shr	    ah,	1
seg000:56D1		    or	    ah,	20h
seg000:56D4
seg000:56D4 loc_56D4:				    ; CODE XREF: Video_init_?+38j
seg000:56D4					    ; Video_init_?+8Dj
seg000:56D4		    and	    ah,	30h
seg000:56D7		    mov	    al,	byte ptr ds:loc_E+2
seg000:56DA		    and	    al,	0CFh
seg000:56DC		    or	    al,	ah
seg000:56DE		    mov	    byte ptr ds:loc_E+2, al
seg000:56E1		    call    VGA_bios_init
seg000:56E4		    mov	    al,	3
seg000:56E6		    cmp	    ah,	30h ; '0'
seg000:56E9		    jnz	    short loc_56ED
seg000:56EB		    mov	    al,	7
seg000:56ED
seg000:56ED loc_56ED:				    ; CODE XREF: Video_init_?+5Dj
seg000:56ED		    cmp	    ah,	10h
seg000:56F0		    jnz	    short loc_56F4
seg000:56F2		    mov	    al,	1
seg000:56F4
seg000:56F4 loc_56F4:				    ; CODE XREF: Video_init_?+26j
seg000:56F4					    ; Video_init_?+64j
seg000:56F4		    mov	    ah,	0
seg000:56F6		    mov	    byte ptr cs:loc_2+1, al
seg000:56FA		    mov	    byte ptr ds:loc_48+1, al
seg000:56FD		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:56FD					    ; AL = mode
seg000:56FF		    mov	    ah,	8
seg000:5701		    mov	    bh,	0
seg000:5703		    int	    10h		    ; -	VIDEO -	READ ATTRIBUTES/CHARACTER AT CURSOR POSITION
seg000:5703					    ; BH = display page
seg000:5703					    ; Return: AL = character
seg000:5703					    ; AH = attribute of	character (alpha modes)
seg000:5705		    cmp	    ax,	720h
seg000:5708		    jz	    short loc_571B
seg000:570A		    mov	    ah,	byte ptr ds:loc_E+2
seg000:570E		    xor	    ah,	10h
seg000:5711		    or	    ah,	20h
seg000:5714		    inc	    bl
seg000:5716		    cmp	    bl,	2
seg000:5719		    jbe	    short loc_56D4
seg000:571B
seg000:571B loc_571B:				    ; CODE XREF: Video_init_?+7Cj
seg000:571B		    test    bl,	bl
seg000:571D		    jz	    short loc_572A
seg000:571F		    cmp	    bl,	3
seg000:5722		    jz	    short loc_572A
seg000:5724		    mov	    si,	offset aIncorrectVideo ; "Incorrect video configuration	- Please "...
seg000:5727		    call    print_?
seg000:572A
seg000:572A loc_572A:				    ; CODE XREF: Video_init_?+91j
seg000:572A					    ; Video_init_?+96j
seg000:572A		    mov	    byte ptr cs:loc_41,	0
seg000:5730		    pop	    si
seg000:5731		    pop	    bx
seg000:5732		    pop	    ax
seg000:5733		    retn
seg000:5733 Video_init_?    endp
seg000:5733
seg000:5733 ; ---------------------------------------------------------------------------
seg000:5734 unk_5734	    db	  8		    ; DATA XREF: sub_4FC6+3Do
seg000:5735		    db	  0
seg000:5736		    db	  8
seg000:5737		    db	28h ; (
seg000:5738		    db	  0
seg000:5739		    db	  2
seg000:573A		    db	  0
seg000:573B		    db	50h ; P
seg000:573C		    db	  0
seg000:573D		    db	30h ; 0
seg000:573E		    db	  4
seg000:573F		    db	  0
seg000:5740		    db	10h
seg000:5741		    db	50h ; P
seg000:5742		    db	  0
seg000:5743		    db	  2
seg000:5744		    db	  0
seg000:5745		    db 0A0h ;  
seg000:5746		    db	  0
seg000:5747		    db	30h ; 0
seg000:5748		    db	  1
seg000:5749		    db	  0
seg000:574A		    db	20h
seg000:574B		    db	28h ; (
seg000:574C		    db	  0
seg000:574D		    db	  2
seg000:574E		    db	  0
seg000:574F		    db	40h ; @
seg000:5750		    db	  1
seg000:5751		    db	30h ; 0
seg000:5752		    db	  1
seg000:5753		    db	  0
seg000:5754		    db	20h
seg000:5755		    db	50h ; P
seg000:5756		    db	  0
seg000:5757		    db	  1
seg000:5758		    db	  0
seg000:5759		    db	40h ; @
seg000:575A		    db	  1
seg000:575B		    db	3Fh ; ?
seg000:575C		    db	  1
seg000:575D		    db	  0
seg000:575E		    db	10h
seg000:575F		    db	50h ; P
seg000:5760		    db	  0
seg000:5761		    db	  2
seg000:5762		    db	  0
seg000:5763		    db 0A0h ;  
seg000:5764		    db	  0
seg000:5765		    db	30h ; 0
seg000:5766 some_table_	    db 2Ch		    ; 0	; DATA XREF: sub_4FC6+6Br
seg000:5766		    db 28h		    ; 1
seg000:5766		    db 2Dh		    ; 2
seg000:5766		    db 29h		    ; 3
seg000:5766		    db 2Ah		    ; 4
seg000:5766		    db 2Ah		    ; 5
seg000:5766		    db 1Eh		    ; 6
seg000:5766		    db 29h		    ; 7
seg000:576E		    db	  4
seg000:576F		    db	  4
seg000:5770		    db	  5
seg000:5771		    db	  5
seg000:5772		    db	  4
seg000:5773		    db	  4
seg000:5774		    db	  4
seg000:5775		    db	  4
seg000:5776 some_table_0    dd 0F000FA6Eh	    ; DATA XREF: sub_4459+40r
seg000:577A byte_577A	    db 7		    ; DATA XREF: sub_5184+Fr
seg000:577B		    db	  7
seg000:577C		    db	  3
seg000:577D		    db	  3
seg000:577E		    db	  0
seg000:577F		    db	  0
seg000:5780		    db	  0
seg000:5781		    db	  0
seg000:5782 byte_5782	    db 80h		    ; 0	; DATA XREF: sub_4A3E+18r
seg000:5782		    db 40h		    ; 1
seg000:5782		    db 20h		    ; 2
seg000:5782		    db 10h		    ; 3
seg000:5782		    db	8		    ; 4
seg000:5782		    db	4		    ; 5
seg000:5782		    db	2		    ; 6
seg000:5782		    db	1		    ; 7
seg000:578A byte_578A	    db 0C0h		    ; 0	; DATA XREF: sub_4A3E+24r
seg000:578A		    db 30h		    ; 1
seg000:578A		    db 0Ch		    ; 2
seg000:578A		    db	3		    ; 3
seg000:578A		    db 0C0h		    ; 4
seg000:578A		    db 30h		    ; 5
seg000:578A		    db 0Ch		    ; 6
seg000:578A		    db	3		    ; 7
seg000:5792 bits	    dw	0		    ; 0	; DATA XREF: sub_48C9+20r
seg000:5792		    dw 5555h		    ; 1
seg000:5792		    dw 0AAAAh		    ; 2
seg000:5792		    dw 0FFFFh		    ; 3
seg000:579A
seg000:579A ; =============== S	U B R O	U T I N	E =======================================
seg000:579A
seg000:579A
seg000:579A push_ret_ah	    proc near		    ; CODE XREF: sub_2AF4+BAp
seg000:579A					    ; FPU_error_0+9Ep ...
seg000:579A		    pop	    bp
seg000:579B		    push    bp
seg000:579C		    add	    bp,	3
seg000:579F		    push    ax
seg000:57A0		    mov	    al,	ah
seg000:57A2		    mov	    ah,	0
seg000:57A4		    shl	    ax,	1
seg000:57A6		    add	    bp,	ax
seg000:57A8		    pop	    ax
seg000:57A9		    push    word ptr cs:[bp+0]
seg000:57AD		    retn
seg000:57AD push_ret_ah	    endp ; sp-analysis failed
seg000:57AD
seg000:57AE
seg000:57AE ; =============== S	U B R O	U T I N	E =======================================
seg000:57AE
seg000:57AE
seg000:57AE Beep_long	    proc near		    ; CODE XREF: sub_2429:loc_2461p
seg000:57AE					    ; sub_4459:loc_450Cp ...
seg000:57AE		    push    cx
seg000:57AF		    mov	    cx,	0A6h ; '¦'
seg000:57B2		    call    Beep_CXdelay
seg000:57B5		    pop	    cx
seg000:57B6		    retn
seg000:57B6 Beep_long	    endp
seg000:57B6
seg000:57B7
seg000:57B7 ; =============== S	U B R O	U T I N	E =======================================
seg000:57B7
seg000:57B7
seg000:57B7 Beep_short	    proc near		    ; CODE XREF: sub_8B12+8p
seg000:57B7		    push    cx
seg000:57B8		    mov	    cx,	0Ah
seg000:57BB		    call    Beep_CXdelay
seg000:57BE		    pop	    cx
seg000:57BF		    retn
seg000:57BF Beep_short	    endp
seg000:57BF
seg000:57C0
seg000:57C0 ; =============== S	U B R O	U T I N	E =======================================
seg000:57C0
seg000:57C0
seg000:57C0 Beep_CXdelay    proc near		    ; CODE XREF: Beep_long+4p
seg000:57C0					    ; Beep_short+4p
seg000:57C0		    push    ax
seg000:57C1		    push    cx
seg000:57C2		    mov	    al,	0B6h ; '¶'
seg000:57C4		    out	    43h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:57C6		    mov	    al,	80h ; ''
seg000:57C8		    out	    42h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:57CA		    mov	    al,	6
seg000:57CC		    out	    42h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:57CE		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:57CE					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:57CE					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:57CE					    ; 3: 1=read	high switches
seg000:57CE					    ; 4: 0=enable RAM parity checking
seg000:57CE					    ; 5: 0=enable I/O channel check
seg000:57CE					    ; 6: 0=hold	keyboard clock low
seg000:57CE					    ; 7: 0=enable kbrd
seg000:57D0		    push    ax
seg000:57D1		    or	    al,	3
seg000:57D3		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:57D3					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:57D3					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:57D3					    ; 3: 1=read	high switches
seg000:57D3					    ; 4: 0=enable RAM parity checking
seg000:57D3					    ; 5: 0=enable I/O channel check
seg000:57D3					    ; 6: 0=hold	keyboard clock low
seg000:57D3					    ; 7: 0=enable kbrd
seg000:57D5		    call    delay_doubleCX
seg000:57D8		    pop	    ax
seg000:57D9		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:57D9					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:57D9					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:57D9					    ; 3: 1=read	high switches
seg000:57D9					    ; 4: 0=enable RAM parity checking
seg000:57D9					    ; 5: 0=enable I/O channel check
seg000:57D9					    ; 6: 0=hold	keyboard clock low
seg000:57D9					    ; 7: 0=enable kbrd
seg000:57DB		    pop	    cx
seg000:57DC		    pop	    ax
seg000:57DD		    retn
seg000:57DD Beep_CXdelay    endp
seg000:57DD
seg000:57DE
seg000:57DE ; =============== S	U B R O	U T I N	E =======================================
seg000:57DE
seg000:57DE
seg000:57DE delay_doubleCX  proc near		    ; CODE XREF: ColrWarm_Boot+233p
seg000:57DE					    ; timer_int_test+1Bp ...
seg000:57DE		    push    cx
seg000:57DF
seg000:57DF loc_57DF:				    ; CODE XREF: delay_doubleCX+Aj
seg000:57DF		    push    cx
seg000:57E0		    mov	    cx,	cs:RTC_test_timer ; RTC_test_timer
seg000:57E5
seg000:57E5 loc_57E5:				    ; CODE XREF: delay_doubleCX:loc_57E5j
seg000:57E5		    loop    loc_57E5
seg000:57E7		    pop	    cx
seg000:57E8		    loop    loc_57DF
seg000:57EA		    pop	    cx
seg000:57EB		    retn
seg000:57EB delay_doubleCX  endp
seg000:57EB
seg000:57EC
seg000:57EC ; =============== S	U B R O	U T I N	E =======================================
seg000:57EC
seg000:57EC
seg000:57EC table_lookup_ptr proc near		    ; CODE XREF: ColrWarm_Boot+579p
seg000:57EC					    ; VGA_bios_init+7p	...
seg000:57EC		    push    ax
seg000:57ED		    mov	    ah,	0	    ; load far pointer of AL element at	dword [0:AL x 4] into the ds:si
seg000:57ED					    ; some pointer table lookup
seg000:57EF		    shl	    ax,	1
seg000:57F1		    shl	    ax,	1
seg000:57F3		    mov	    si,	0
seg000:57F6		    mov	    ds,	si
seg000:57F8		    mov	    si,	ax
seg000:57FA		    lds	    si,	[si]
seg000:57FC		    pop	    ax
seg000:57FD		    retn
seg000:57FD table_lookup_ptr endp
seg000:57FD
seg000:57FE
seg000:57FE ; =============== S	U B R O	U T I N	E =======================================
seg000:57FE
seg000:57FE
seg000:57FE table_store	    proc near		    ; CODE XREF: hw_init:init_IVT_loopp
seg000:57FE					    ; hw_init:init_IVT_loop_2p	...
seg000:57FE		    push    ax
seg000:57FF		    push    di
seg000:5800		    push    es
seg000:5801		    mov	    ah,	0	    ; store far	pointer	ds:si into AL element at dword [0:AL x 4]
seg000:5801					    ; some pointer table store
seg000:5803		    shl	    ax,	1
seg000:5805		    shl	    ax,	1
seg000:5807		    mov	    di,	0
seg000:580A		    mov	    es,	di
seg000:580C		    mov	    di,	ax
seg000:580E		    mov	    es:[di], si
seg000:5811		    mov	    word ptr es:[di+2],	ds
seg000:5815		    pop	    es
seg000:5816		    pop	    di
seg000:5817		    pop	    ax
seg000:5818		    retn
seg000:5818 table_store	    endp
seg000:5818
seg000:5819
seg000:5819 ; =============== S	U B R O	U T I N	E =======================================
seg000:5819
seg000:5819
seg000:5819 sub_5819	    proc near
seg000:5819		    cli
seg000:581A		    push    ax
seg000:581B		    smsw    ax
seg000:581E		    test    ax,	1
seg000:5821		    pop	    ax
seg000:5822		    jnz	    short locret_584A
seg000:5824		    inc	    byte ptr cs:loc_CF+2
seg000:5829		    cmp	    byte ptr cs:loc_CF+2, 1
seg000:582F		    jnz	    short locret_584A
seg000:5831		    pop	    word ptr cs:loc_D5+1
seg000:5836		    mov	    word ptr cs:loc_D3+1, ss
seg000:583B		    mov	    word ptr cs:loc_CF+3, sp
seg000:5840		    push    cs
seg000:5841		    pop	    ss
seg000:5842		    assume ss:nothing
seg000:5842		    mov	    sp,	202h
seg000:5845		    push    word ptr cs:loc_D5+1
seg000:584A
seg000:584A locret_584A:			    ; CODE XREF: sub_5819+9j
seg000:584A					    ; sub_5819+16j
seg000:584A		    retn
seg000:584A sub_5819	    endp
seg000:584A
seg000:584B
seg000:584B ; =============== S	U B R O	U T I N	E =======================================
seg000:584B
seg000:584B
seg000:584B sub_584B	    proc near
seg000:584B		    cli
seg000:584C		    push    ax
seg000:584D		    smsw    ax
seg000:5850		    test    ax,	1
seg000:5853		    pop	    ax
seg000:5854		    jnz	    short locret_5871
seg000:5856		    dec	    byte ptr cs:loc_CF+2
seg000:585B		    jnz	    short locret_5871
seg000:585D		    pop	    word ptr cs:loc_D5+1
seg000:5862		    mov	    ss,	word ptr cs:loc_D3+1
seg000:5867		    mov	    sp,	word ptr cs:loc_CF+3
seg000:586C		    push    word ptr cs:loc_D5+1
seg000:5871
seg000:5871 locret_5871:			    ; CODE XREF: sub_584B+9j
seg000:5871					    ; sub_584B+10j
seg000:5871		    retn
seg000:5871 sub_584B	    endp
seg000:5871
seg000:5872
seg000:5872 ; =============== S	U B R O	U T I N	E =======================================
seg000:5872
seg000:5872
seg000:5872 sub_5872	    proc far
seg000:5872		    call    ide_?_1
seg000:5875		    retf
seg000:5875 sub_5872	    endp
seg000:5875
seg000:5876
seg000:5876 ; =============== S	U B R O	U T I N	E =======================================
seg000:5876
seg000:5876
seg000:5876 sub_5876	    proc far
seg000:5876		    call    ide_?_2
seg000:5879		    retf
seg000:5879 sub_5876	    endp
seg000:5879
seg000:5879 ; ---------------------------------------------------------------------------
seg000:587A DMA_PIC_reg_ini dw 1Dh		    ; DATA XREF: ColrWarm_Boot+AAo
seg000:587A					    ; sub_0:DMA_PIC_regso
seg000:587C		    port_init <61h, 0Ch>    ; 0
seg000:587C		    port_init <213h,  1>    ; 1
seg000:587C		    port_init <	8,  4>	    ; 2
seg000:587C		    port_init <0D0h,  4>    ; 3
seg000:587C		    port_init <0Dh,  0>	    ; 4
seg000:587C		    port_init <0DAh,  0>    ; 5
seg000:587C		    port_init <0Bh, 40h>    ; 6
seg000:587C		    port_init <0Bh, 41h>    ; 7
seg000:587C		    port_init <0Bh, 42h>    ; 8
seg000:587C		    port_init <0Bh, 43h>    ; 9
seg000:587C		    port_init <0D6h, 0C0h>  ; 0Ah
seg000:587C		    port_init <0D6h, 41h>   ; 0Bh
seg000:587C		    port_init <0D6h, 42h>   ; 0Ch
seg000:587C		    port_init <0D6h, 43h>   ; 0Dh
seg000:587C		    port_init <	8,  0>	    ; 0Eh
seg000:587C		    port_init <0D0h,  0>    ; 0Fh
seg000:587C		    port_init <0D4h,  0>    ; 10h
seg000:587C		    port_init <0Ch,  0>	    ; 11h
seg000:587C		    port_init <0D8h,  0>    ; 12h
seg000:587C		    port_init <43h, 54h>    ; 13h
seg000:587C		    port_init <41h, 12h>    ; 14h
seg000:587C		    port_init <43h, 36h>    ; 15h
seg000:587C		    port_init 2	dup(<40h,  0>);	16h
seg000:587C		    port_init <43h, 0B6h>   ; 18h
seg000:587C		    port_init <42h, 80h>    ; 19h
seg000:587C		    port_init <42h,  6>	    ; 1Ah
seg000:587C		    port_init <0F0h,  0>    ; 1Bh
seg000:587C		    port_init <0EDh,  0>    ; 1Ch
seg000:58D3		    db	  0
seg000:58D4
seg000:58D4 ; =============== S	U B R O	U T I N	E =======================================
seg000:58D4
seg000:58D4
seg000:58D4 sub_58D4	    proc far		    ; CODE XREF: sub_E739j
seg000:58D4		    sti
seg000:58D5		    push    ds
seg000:58D6		    push    si
seg000:58D7		    mov	    ds,	word ptr cs:loc_C5+1
seg000:58DC		    out	    0FBh, al	    ; AT 80287 data.
seg000:58DC					    ; 286 sends	opcodes	& operands and receives	results.
seg000:58DE		    pushf
seg000:58DF		    inc	    byte ptr ds:loc_BB+4
seg000:58E3		    popf
seg000:58E4		    push    ax
seg000:58E5		    mov	    al,	18h
seg000:58E7		    call    load_DSSI
seg000:58EA		    pop	    ax
seg000:58EB		    call    sub_5900
seg000:58EE		    mov	    ds,	word ptr cs:loc_C5+1
seg000:58F3		    pushf
seg000:58F4		    dec	    byte ptr ds:loc_BB+4
seg000:58F8		    jnz	    short loc_58FC
seg000:58FA		    out	    0F9h, al	    ; AT 80287 data.
seg000:58FA					    ; 286 sends	opcodes	& operands and receives	results.
seg000:58FC
seg000:58FC loc_58FC:				    ; CODE XREF: sub_58D4+24j
seg000:58FC		    popf
seg000:58FD		    pop	    si
seg000:58FE		    pop	    ds
seg000:58FF		    iret
seg000:58FF sub_58D4	    endp
seg000:58FF
seg000:5900
seg000:5900 ; =============== S	U B R O	U T I N	E =======================================
seg000:5900
seg000:5900
seg000:5900 sub_5900	    proc near		    ; CODE XREF: sub_58D4+17p
seg000:5900		    cmp	    ah,	4
seg000:5903		    jb	    short loc_590B
seg000:5905		    sub	    ah,	4
seg000:5908		    nop
seg000:5909		    jmp	    short locret_5948
seg000:590B ; ---------------------------------------------------------------------------
seg000:590B
seg000:590B loc_590B:				    ; CODE XREF: sub_5900+3j
seg000:590B		    push    es
seg000:590C		    push    di
seg000:590D		    push    si
seg000:590E		    push    dx
seg000:590F		    push    bp
seg000:5910		    push    cx
seg000:5911		    push    bx
seg000:5912		    add	    si,	0Ch
seg000:5915		    push    ax
seg000:5916		    mov	    al,	dl
seg000:5918		    mov	    ah,	8
seg000:591A		    mul	    ah
seg000:591C		    add	    si,	ax
seg000:591E		    pop	    ax
seg000:591F		    mov	    es,	word ptr cs:loc_C5+1
seg000:5924		    mov	    di,	dx
seg000:5926		    shl	    di,	1
seg000:5928		    mov	    dx,	es:[di+0]
seg000:592D		    or	    dx,	dx
seg000:592F		    jz	    short loc_5941
seg000:5931		    shr	    di,	1
seg000:5933		    call    push_ret_ah
seg000:5936		    jmp	    short loc_5941
seg000:5938 ; ---------------------------------------------------------------------------
seg000:5938		    nop
seg000:5938 ; ---------------------------------------------------------------------------
seg000:5939 ret_vectors_2   dw offset loc_5949
seg000:593B		    dw offset loc_5981
seg000:593D		    dw offset sub_5A30
seg000:593F		    dw offset sub_5A9B
seg000:5941 ; ---------------------------------------------------------------------------
seg000:5941
seg000:5941 loc_5941:				    ; CODE XREF: sub_5900+2Fj
seg000:5941					    ; sub_5900+36j
seg000:5941		    pop	    bx
seg000:5942		    pop	    cx
seg000:5943		    pop	    bp
seg000:5944		    pop	    dx
seg000:5945		    pop	    si
seg000:5946		    pop	    di
seg000:5947		    pop	    es
seg000:5948
seg000:5948 locret_5948:			    ; CODE XREF: sub_5900+9j
seg000:5948		    retn
seg000:5949 ; ---------------------------------------------------------------------------
seg000:5949
seg000:5949 loc_5949:				    ; DATA XREF: sub_5900:ret_vectors_2o
seg000:5949		    mov	    ah,	al
seg000:594B		    add	    dx,	3
seg000:594E		    mov	    al,	80h ; ''
seg000:5950		    out	    dx,	al
seg000:5951		    mov	    bl,	ah
seg000:5953		    and	    bl,	0E0h	    ; CODE XREF: tests_menu+75p
seg000:5956		    mov	    cl,	3
seg000:5958		    rol	    bl,	cl
seg000:595A		    sub	    bh,	bh
seg000:595C		    shl	    bx,	1
seg000:595E		    mov	    al,	cs:byte_E72A[bx]
seg000:5963		    sub	    dx,	2
seg000:5966		    out	    dx,	al
seg000:5967		    mov	    al,	cs:byte_E729[bx]
seg000:596C		    dec	    dx
seg000:596D		    out	    dx,	al
seg000:596E		    and	    ah,	1Fh
seg000:5971		    mov	    al,	ah
seg000:5973		    add	    dx,	3
seg000:5976		    out	    dx,	al
seg000:5977		    sub	    dx,	2
seg000:597A		    sub	    al,	al
seg000:597C		    out	    dx,	al
seg000:597D		    dec	    dx
seg000:597E		    jmp	    sub_5A9B
seg000:5981 ; ---------------------------------------------------------------------------
seg000:5981
seg000:5981 loc_5981:				    ; DATA XREF: sub_5900+3Bo
seg000:5981		    call    sub_599F
seg000:5984		    cmp	    al,	0Dh
seg000:5986		    jnz	    short locret_599E
seg000:5988		    mov	    cl,	[si+3]
seg000:598B		    sub	    ch,	ch
seg000:598D		    jcxz    short locret_599E
seg000:598F
seg000:598F loc_598F:				    ; CODE XREF: sub_5900+9Cj
seg000:598F		    test    ah,	80h
seg000:5992		    jnz	    short locret_599E
seg000:5994		    mov	    al,	[si+2]
seg000:5997		    push    cx
seg000:5998		    call    sub_599F
seg000:599B		    pop	    cx
seg000:599C		    loop    loc_598F
seg000:599E
seg000:599E locret_599E:			    ; CODE XREF: sub_5900+86j
seg000:599E					    ; sub_5900+8Dj ...
seg000:599E		    retn
seg000:599E sub_5900	    endp ; sp-analysis failed
seg000:599E
seg000:599F
seg000:599F ; =============== S	U B R O	U T I N	E =======================================
seg000:599F
seg000:599F
seg000:599F sub_599F	    proc near		    ; CODE XREF: sub_5900:loc_5981p
seg000:599F					    ; sub_5900+98p
seg000:599F		    mov	    ah,	al
seg000:59A1		    add	    dx,	4
seg000:59A4		    in	    al,	dx
seg000:59A5		    and	    al,	8
seg000:59A7		    or	    al,	3
seg000:59A9		    out	    dx,	al
seg000:59AA		    sub	    dx,	4
seg000:59AD		    mov	    al,	ah
seg000:59AF		    test    byte ptr [si], 2
seg000:59B2		    jnz	    short loc_59D1
seg000:59B4		    test    byte ptr [si], 4
seg000:59B7		    jz	    short loc_59BE
seg000:59B9		    call    sub_5B06
seg000:59BC		    jb	    short loc_59CD
seg000:59BE
seg000:59BE loc_59BE:				    ; CODE XREF: sub_599F+18j
seg000:59BE		    test    byte ptr [si], 10h
seg000:59C1		    jz	    short loc_59C8
seg000:59C3		    call    sub_5B42
seg000:59C6		    jb	    short loc_59CD
seg000:59C8
seg000:59C8 loc_59C8:				    ; CODE XREF: sub_599F+22j
seg000:59C8		    call    sub_5BC1
seg000:59CB		    jnb	    short locret_59D0
seg000:59CD
seg000:59CD loc_59CD:				    ; CODE XREF: sub_599F+1Dj
seg000:59CD					    ; sub_599F+27j
seg000:59CD		    jmp	    short loc_5A2C
seg000:59CF ; ---------------------------------------------------------------------------
seg000:59CF		    nop
seg000:59D0
seg000:59D0 locret_59D0:			    ; CODE XREF: sub_599F+2Cj
seg000:59D0		    retn
seg000:59D1 ; ---------------------------------------------------------------------------
seg000:59D1
seg000:59D1 loc_59D1:				    ; CODE XREF: sub_599F+13j
seg000:59D1		    test    byte ptr [si], 4
seg000:59D4		    jz	    short loc_59F7
seg000:59D6		    test    byte ptr [si], 8
seg000:59D9		    jz	    short loc_59E1
seg000:59DB		    call    sub_5B86
seg000:59DE		    and	    byte ptr [si], 0F7h
seg000:59E1
seg000:59E1 loc_59E1:				    ; CODE XREF: sub_599F+3Aj
seg000:59E1		    push    ax
seg000:59E2		    call    sub_5B9E
seg000:59E5		    jb	    short loc_59F0
seg000:59E7		    and	    al,	7Fh
seg000:59E9		    cmp	    al,	13h
seg000:59EB		    jnz	    short loc_59F0
seg000:59ED		    or	    byte ptr [si], 8
seg000:59F0
seg000:59F0 loc_59F0:				    ; CODE XREF: sub_599F+46j
seg000:59F0					    ; sub_599F+4Cj
seg000:59F0		    pop	    ax
seg000:59F1		    call    sub_5BC1
seg000:59F4		    jb	    short loc_5A2C
seg000:59F6		    retn
seg000:59F7 ; ---------------------------------------------------------------------------
seg000:59F7
seg000:59F7 loc_59F7:				    ; CODE XREF: sub_599F+35j
seg000:59F7		    test    byte ptr [si], 8
seg000:59FA		    jz	    short loc_5A02
seg000:59FC		    call    sub_5B7E
seg000:59FF		    and	    byte ptr [si], 0F7h
seg000:5A02
seg000:5A02 loc_5A02:				    ; CODE XREF: sub_599F+5Bj
seg000:5A02		    cmp	    al,	1Bh
seg000:5A04		    jnz	    short loc_5A10
seg000:5A06		    mov	    bl,	5
seg000:5A08		    sub	    bl,	[si+5]
seg000:5A0B		    jb	    short loc_5A10
seg000:5A0D		    add	    [si+5], bl
seg000:5A10
seg000:5A10 loc_5A10:				    ; CODE XREF: sub_599F+65j
seg000:5A10					    ; sub_599F+6Cj
seg000:5A10		    call    sub_5BC1
seg000:5A13		    jb	    short loc_5A2C
seg000:5A15		    dec	    byte ptr [si+5]
seg000:5A18		    jnz	    short locret_5A28
seg000:5A1A		    mov	    al,	[si+4]
seg000:5A1D		    mov	    [si+5], al
seg000:5A20		    mov	    al,	3
seg000:5A22		    call    sub_5BC1
seg000:5A25		    or	    byte ptr [si], 8
seg000:5A28
seg000:5A28 locret_5A28:			    ; CODE XREF: sub_599F+79j
seg000:5A28		    retn
seg000:5A28 ; ---------------------------------------------------------------------------
seg000:5A29		    db 80h
seg000:5A2A		    db 0E4h ; ä
seg000:5A2B		    db	9Fh ; 
seg000:5A2C ; ---------------------------------------------------------------------------
seg000:5A2C
seg000:5A2C loc_5A2C:				    ; CODE XREF: sub_599F:loc_59CDj
seg000:5A2C					    ; sub_599F+55j ...
seg000:5A2C		    or	    ah,	80h
seg000:5A2F		    retn
seg000:5A2F sub_599F	    endp
seg000:5A2F
seg000:5A30
seg000:5A30 ; =============== S	U B R O	U T I N	E =======================================
seg000:5A30
seg000:5A30
seg000:5A30 sub_5A30	    proc near		    ; DATA XREF: sub_5900+3Do
seg000:5A30		    add	    dx,	4
seg000:5A33		    in	    al,	dx
seg000:5A34		    and	    al,	8
seg000:5A36		    or	    al,	3
seg000:5A38		    out	    dx,	al
seg000:5A39		    sub	    dx,	4
seg000:5A3C		    test    byte ptr [si], 1
seg000:5A3F		    jz	    short loc_5A46
seg000:5A41		    call    sub_5B06
seg000:5A44		    jb	    short loc_5A2C
seg000:5A46
seg000:5A46 loc_5A46:				    ; CODE XREF: sub_5A30+Fj
seg000:5A46		    test    byte ptr [si], 2
seg000:5A49		    jz	    short loc_5A60
seg000:5A4B		    test    byte ptr [si], 8
seg000:5A4E		    jz	    short loc_5A60
seg000:5A50		    test    byte ptr [si], 4
seg000:5A53		    jnz	    short loc_5A5A
seg000:5A55		    call    sub_5B7E
seg000:5A58		    jmp	    short loc_5A5D
seg000:5A5A ; ---------------------------------------------------------------------------
seg000:5A5A
seg000:5A5A loc_5A5A:				    ; CODE XREF: sub_5A30+23j
seg000:5A5A		    call    sub_5B86
seg000:5A5D
seg000:5A5D loc_5A5D:				    ; CODE XREF: sub_5A30+28j
seg000:5A5D		    and	    byte ptr [si], 0F7h
seg000:5A60
seg000:5A60 loc_5A60:				    ; CODE XREF: sub_5A30+19j
seg000:5A60					    ; sub_5A30+1Ej
seg000:5A60		    mov	    bl,	es:[di+7Ch]
seg000:5A65
seg000:5A65 loc_5A65:				    ; CODE XREF: sub_5A30+48j
seg000:5A65		    mov	    bp,	2710h
seg000:5A68
seg000:5A68 loc_5A68:				    ; CODE XREF: sub_5A30+44j
seg000:5A68		    call    sub_5B9E
seg000:5A6B		    jnb	    short loc_5A7C
seg000:5A6D		    mov	    cx,	1
seg000:5A70		    call    delay_
seg000:5A73		    dec	    bp
seg000:5A74		    jnz	    short loc_5A68
seg000:5A76		    dec	    bl
seg000:5A78		    jnz	    short loc_5A65
seg000:5A7A		    jmp	    short loc_5A2C
seg000:5A7C ; ---------------------------------------------------------------------------
seg000:5A7C
seg000:5A7C loc_5A7C:				    ; CODE XREF: sub_5A30+3Bj
seg000:5A7C		    test    byte ptr [si], 2
seg000:5A7F		    jz	    short loc_5A97
seg000:5A81		    test    byte ptr [si], 4
seg000:5A84		    jz	    short loc_5A97
seg000:5A86		    push    ax
seg000:5A87		    and	    al,	7Fh
seg000:5A89		    cmp	    al,	13h
seg000:5A8B		    pop	    ax
seg000:5A8C		    jnz	    short loc_5A97
seg000:5A8E		    or	    byte ptr [si], 8
seg000:5A91		    or	    ah,	80h
seg000:5A94		    jmp	    short locret_5A9A
seg000:5A96 ; ---------------------------------------------------------------------------
seg000:5A96		    nop
seg000:5A97
seg000:5A97 loc_5A97:				    ; CODE XREF: sub_5A30+4Fj
seg000:5A97					    ; sub_5A30+54j ...
seg000:5A97		    and	    ah,	1Eh
seg000:5A9A
seg000:5A9A locret_5A9A:			    ; CODE XREF: sub_5A30+64j
seg000:5A9A		    retn
seg000:5A9A sub_5A30	    endp
seg000:5A9A
seg000:5A9B
seg000:5A9B ; =============== S	U B R O	U T I N	E =======================================
seg000:5A9B
seg000:5A9B
seg000:5A9B sub_5A9B	    proc near		    ; CODE XREF: sub_5900+7Ej
seg000:5A9B					    ; DATA XREF: sub_5900+3Fo
seg000:5A9B		    add	    dx,	5
seg000:5A9E		    in	    al,	dx
seg000:5A9F		    mov	    ah,	al
seg000:5AA1		    inc	    dx
seg000:5AA2		    in	    al,	dx
seg000:5AA3		    sub	    dx,	6
seg000:5AA6		    test    byte ptr [si], 2
seg000:5AA9		    jnz	    short loc_5AD7
seg000:5AAB		    test    byte ptr [si], 4
seg000:5AAE		    jz	    short loc_5AC0
seg000:5AB0		    test    al,	20h
seg000:5AB2		    pushf
seg000:5AB3		    test    byte ptr [si], 8
seg000:5AB6		    jnz	    short loc_5ABD
seg000:5AB8		    popf
seg000:5AB9		    jnz	    short loc_5B02
seg000:5ABB		    jmp	    short loc_5AC0
seg000:5ABD ; ---------------------------------------------------------------------------
seg000:5ABD
seg000:5ABD loc_5ABD:				    ; CODE XREF: sub_5A9B+1Bj
seg000:5ABD		    popf
seg000:5ABE		    jz	    short loc_5B02
seg000:5AC0
seg000:5AC0 loc_5AC0:				    ; CODE XREF: sub_5A9B+13j
seg000:5AC0					    ; sub_5A9B+20j
seg000:5AC0		    test    byte ptr [si], 10h
seg000:5AC3		    jz	    short locret_5B01
seg000:5AC5		    test    al,	10h
seg000:5AC7		    pushf
seg000:5AC8		    test    byte ptr [si], 20h
seg000:5ACB		    jnz	    short loc_5AD2
seg000:5ACD		    popf
seg000:5ACE		    jnz	    short loc_5B02
seg000:5AD0		    jmp	    short locret_5B01
seg000:5AD2 ; ---------------------------------------------------------------------------
seg000:5AD2
seg000:5AD2 loc_5AD2:				    ; CODE XREF: sub_5A9B+30j
seg000:5AD2		    popf
seg000:5AD3		    jz	    short loc_5B02
seg000:5AD5		    jmp	    short locret_5B01
seg000:5AD7 ; ---------------------------------------------------------------------------
seg000:5AD7
seg000:5AD7 loc_5AD7:				    ; CODE XREF: sub_5A9B+Ej
seg000:5AD7		    test    byte ptr [si], 8
seg000:5ADA		    jz	    short locret_5B01
seg000:5ADC		    mov	    bx,	ax
seg000:5ADE		    call    sub_5B9E
seg000:5AE1		    jnb	    short loc_5AE8
seg000:5AE3		    mov	    ax,	bx
seg000:5AE5		    jmp	    short loc_5B02
seg000:5AE7 ; ---------------------------------------------------------------------------
seg000:5AE7		    nop
seg000:5AE8
seg000:5AE8 loc_5AE8:				    ; CODE XREF: sub_5A9B+46j
seg000:5AE8		    and	    bh,	0FEh
seg000:5AEB		    and	    al,	7Fh
seg000:5AED		    test    byte ptr [si], 4
seg000:5AF0		    jnz	    short loc_5AF6
seg000:5AF2		    cmp	    al,	6
seg000:5AF4		    jmp	    short loc_5AFA
seg000:5AF6 ; ---------------------------------------------------------------------------
seg000:5AF6
seg000:5AF6 loc_5AF6:				    ; CODE XREF: sub_5A9B+55j
seg000:5AF6		    and	    al,	7Fh
seg000:5AF8		    cmp	    al,	11h
seg000:5AFA
seg000:5AFA loc_5AFA:				    ; CODE XREF: sub_5A9B+59j
seg000:5AFA		    mov	    ax,	bx
seg000:5AFC		    jnz	    short loc_5B02
seg000:5AFE		    and	    byte ptr [si], 0F7h
seg000:5B01
seg000:5B01 locret_5B01:			    ; CODE XREF: sub_5A9B+28j
seg000:5B01					    ; sub_5A9B+35j ...
seg000:5B01		    retn
seg000:5B02 ; ---------------------------------------------------------------------------
seg000:5B02
seg000:5B02 loc_5B02:				    ; CODE XREF: sub_5A9B+1Ej
seg000:5B02					    ; sub_5A9B+23j ...
seg000:5B02		    and	    ah,	9Fh
seg000:5B05		    retn
seg000:5B05 sub_5A9B	    endp
seg000:5B05
seg000:5B06
seg000:5B06 ; =============== S	U B R O	U T I N	E =======================================
seg000:5B06
seg000:5B06
seg000:5B06 sub_5B06	    proc near		    ; CODE XREF: sub_599F+1Ap
seg000:5B06					    ; sub_5A30+11p
seg000:5B06		    push    bx
seg000:5B07		    push    ax
seg000:5B08		    push    cx
seg000:5B09		    push    bp
seg000:5B0A		    mov	    bl,	es:[di+7Ch]
seg000:5B0F		    add	    dx,	6
seg000:5B12
seg000:5B12 loc_5B12:				    ; CODE XREF: sub_5B06+2Aj
seg000:5B12		    mov	    bp,	2710h
seg000:5B15
seg000:5B15 loc_5B15:				    ; CODE XREF: sub_5B06+26j
seg000:5B15		    in	    al,	dx
seg000:5B16		    mov	    ah,	al
seg000:5B18		    test    byte ptr [si], 8
seg000:5B1B		    jnz	    short loc_5B1F
seg000:5B1D		    xor	    al,	20h
seg000:5B1F
seg000:5B1F loc_5B1F:				    ; CODE XREF: sub_5B06+15j
seg000:5B1F		    test    al,	20h
seg000:5B21		    jnz	    short loc_5B35
seg000:5B23		    dec	    bp
seg000:5B24		    jz	    short loc_5B2E
seg000:5B26		    mov	    cx,	1
seg000:5B29		    call    delay_
seg000:5B2C		    jmp	    short loc_5B15
seg000:5B2E ; ---------------------------------------------------------------------------
seg000:5B2E
seg000:5B2E loc_5B2E:				    ; CODE XREF: sub_5B06+1Ej
seg000:5B2E		    dec	    bl
seg000:5B30		    jnz	    short loc_5B12
seg000:5B32		    stc
seg000:5B33		    jmp	    short loc_5B36
seg000:5B35 ; ---------------------------------------------------------------------------
seg000:5B35
seg000:5B35 loc_5B35:				    ; CODE XREF: sub_5B06+1Bj
seg000:5B35		    clc
seg000:5B36
seg000:5B36 loc_5B36:				    ; CODE XREF: sub_5B06+2Dj
seg000:5B36		    pushf
seg000:5B37		    sub	    dx,	6
seg000:5B3A		    popf
seg000:5B3B		    pop	    bp
seg000:5B3C		    pop	    cx
seg000:5B3D		    pop	    bx
seg000:5B3E		    mov	    al,	bl
seg000:5B40		    pop	    bx
seg000:5B41		    retn
seg000:5B41 sub_5B06	    endp
seg000:5B41
seg000:5B42
seg000:5B42 ; =============== S	U B R O	U T I N	E =======================================
seg000:5B42
seg000:5B42
seg000:5B42 sub_5B42	    proc near		    ; CODE XREF: sub_599F+24p
seg000:5B42		    push    bx
seg000:5B43		    push    ax
seg000:5B44		    push    cx
seg000:5B45		    push    bp
seg000:5B46		    mov	    bl,	es:[di+7Ch]
seg000:5B4B		    add	    dx,	6
seg000:5B4E
seg000:5B4E loc_5B4E:				    ; CODE XREF: sub_5B42+2Aj
seg000:5B4E		    mov	    bp,	2710h
seg000:5B51
seg000:5B51 loc_5B51:				    ; CODE XREF: sub_5B42+26j
seg000:5B51		    in	    al,	dx
seg000:5B52		    mov	    ah,	al
seg000:5B54		    test    byte ptr [si], 20h
seg000:5B57		    jnz	    short loc_5B5B
seg000:5B59		    xor	    al,	10h
seg000:5B5B
seg000:5B5B loc_5B5B:				    ; CODE XREF: sub_5B42+15j
seg000:5B5B		    test    al,	10h
seg000:5B5D		    jnz	    short loc_5B71
seg000:5B5F		    dec	    bp
seg000:5B60		    jz	    short loc_5B6A
seg000:5B62		    mov	    cx,	1
seg000:5B65		    call    delay_
seg000:5B68		    jmp	    short loc_5B51
seg000:5B6A ; ---------------------------------------------------------------------------
seg000:5B6A
seg000:5B6A loc_5B6A:				    ; CODE XREF: sub_5B42+1Ej
seg000:5B6A		    dec	    bl
seg000:5B6C		    jnz	    short loc_5B4E
seg000:5B6E		    stc
seg000:5B6F		    jmp	    short loc_5B72
seg000:5B71 ; ---------------------------------------------------------------------------
seg000:5B71
seg000:5B71 loc_5B71:				    ; CODE XREF: sub_5B42+1Bj
seg000:5B71		    clc
seg000:5B72
seg000:5B72 loc_5B72:				    ; CODE XREF: sub_5B42+2Dj
seg000:5B72		    pushf
seg000:5B73		    sub	    dx,	6
seg000:5B76		    popf
seg000:5B77		    pop	    bp
seg000:5B78		    pop	    cx
seg000:5B79		    pop	    bx
seg000:5B7A		    mov	    al,	bl
seg000:5B7C		    pop	    bx
seg000:5B7D		    retn
seg000:5B7D sub_5B42	    endp
seg000:5B7D
seg000:5B7E
seg000:5B7E ; =============== S	U B R O	U T I N	E =======================================
seg000:5B7E
seg000:5B7E
seg000:5B7E sub_5B7E	    proc near		    ; CODE XREF: sub_599F+5Dp
seg000:5B7E					    ; sub_5A30+25p
seg000:5B7E		    push    ax
seg000:5B7F		    mov	    ah,	6
seg000:5B81		    call    sub_5B8E
seg000:5B84		    pop	    ax
seg000:5B85		    retn
seg000:5B85 sub_5B7E	    endp
seg000:5B85
seg000:5B86
seg000:5B86 ; =============== S	U B R O	U T I N	E =======================================
seg000:5B86
seg000:5B86
seg000:5B86 sub_5B86	    proc near		    ; CODE XREF: sub_599F+3Cp
seg000:5B86					    ; sub_5A30:loc_5A5Ap
seg000:5B86		    push    ax
seg000:5B87		    mov	    ah,	11h
seg000:5B89		    call    sub_5B8E
seg000:5B8C		    pop	    ax
seg000:5B8D		    retn
seg000:5B8D sub_5B86	    endp
seg000:5B8D
seg000:5B8E
seg000:5B8E ; =============== S	U B R O	U T I N	E =======================================
seg000:5B8E
seg000:5B8E
seg000:5B8E sub_5B8E	    proc near		    ; CODE XREF: sub_5B7E+3p
seg000:5B8E					    ; sub_5B86+3p
seg000:5B8E		    push    bx
seg000:5B8F		    mov	    bl,	ah
seg000:5B91
seg000:5B91 loc_5B91:				    ; CODE XREF: sub_5B8E+6j
seg000:5B91					    ; sub_5B8E+Cj
seg000:5B91		    call    sub_5B9E
seg000:5B94		    jb	    short loc_5B91
seg000:5B96		    and	    al,	7Fh
seg000:5B98		    cmp	    al,	bl
seg000:5B9A		    jnz	    short loc_5B91
seg000:5B9C		    pop	    bx
seg000:5B9D		    retn
seg000:5B9D sub_5B8E	    endp
seg000:5B9D
seg000:5B9E
seg000:5B9E ; =============== S	U B R O	U T I N	E =======================================
seg000:5B9E
seg000:5B9E
seg000:5B9E sub_5B9E	    proc near		    ; CODE XREF: sub_599F+43p
seg000:5B9E					    ; sub_5A30:loc_5A68p ...
seg000:5B9E		    add	    dx,	5
seg000:5BA1		    in	    al,	dx
seg000:5BA2		    sub	    dx,	5
seg000:5BA5		    mov	    ah,	al
seg000:5BA7		    test    al,	1
seg000:5BA9		    jnz	    short loc_5BAD
seg000:5BAB		    stc
seg000:5BAC		    retn
seg000:5BAD ; ---------------------------------------------------------------------------
seg000:5BAD
seg000:5BAD loc_5BAD:				    ; CODE XREF: sub_5B9E+Bj
seg000:5BAD		    in	    al,	dx
seg000:5BAE		    test    byte ptr [si+1], 1
seg000:5BB2		    jz	    short loc_5BB6
seg000:5BB4		    and	    al,	7Fh
seg000:5BB6
seg000:5BB6 loc_5BB6:				    ; CODE XREF: sub_5B9E+14j
seg000:5BB6		    test    byte ptr [si+1], 4
seg000:5BBA		    jz	    short loc_5BBF
seg000:5BBC		    call    convert_ASCII
seg000:5BBF
seg000:5BBF loc_5BBF:				    ; CODE XREF: sub_5B9E+1Cj
seg000:5BBF		    clc
seg000:5BC0		    retn
seg000:5BC0 sub_5B9E	    endp
seg000:5BC0
seg000:5BC1
seg000:5BC1 ; =============== S	U B R O	U T I N	E =======================================
seg000:5BC1
seg000:5BC1
seg000:5BC1 sub_5BC1	    proc near		    ; CODE XREF: sub_599F:loc_59C8p
seg000:5BC1					    ; sub_599F+52p ...
seg000:5BC1		    push    bx
seg000:5BC2		    push    bp
seg000:5BC3		    mov	    bl,	es:[di+7Ch]
seg000:5BC8		    test    byte ptr [si+1], 8
seg000:5BCC		    jz	    short loc_5BD1
seg000:5BCE		    call    convert_ASCII
seg000:5BD1
seg000:5BD1 loc_5BD1:				    ; CODE XREF: sub_5BC1+Bj
seg000:5BD1		    test    byte ptr [si+1], 2
seg000:5BD5		    jz	    short loc_5BD9
seg000:5BD7		    and	    al,	7Fh
seg000:5BD9
seg000:5BD9 loc_5BD9:				    ; CODE XREF: sub_5BC1+14j
seg000:5BD9		    mov	    ah,	al
seg000:5BDB
seg000:5BDB loc_5BDB:				    ; CODE XREF: sub_5BC1+35j
seg000:5BDB		    mov	    bp,	2710h
seg000:5BDE
seg000:5BDE loc_5BDE:				    ; CODE XREF: sub_5BC1+31j
seg000:5BDE		    add	    dx,	5
seg000:5BE1		    in	    al,	dx
seg000:5BE2		    sub	    dx,	5
seg000:5BE5		    test    al,	20h
seg000:5BE7		    jnz	    short loc_5BFB
seg000:5BE9		    dec	    bp
seg000:5BEA		    jz	    short loc_5BF4
seg000:5BEC		    mov	    cx,	1
seg000:5BEF		    call    delay_
seg000:5BF2		    jmp	    short loc_5BDE
seg000:5BF4 ; ---------------------------------------------------------------------------
seg000:5BF4
seg000:5BF4 loc_5BF4:				    ; CODE XREF: sub_5BC1+29j
seg000:5BF4		    dec	    bl
seg000:5BF6		    jnz	    short loc_5BDB
seg000:5BF8		    stc
seg000:5BF9		    jmp	    short loc_5BFC
seg000:5BFB ; ---------------------------------------------------------------------------
seg000:5BFB
seg000:5BFB loc_5BFB:				    ; CODE XREF: sub_5BC1+26j
seg000:5BFB		    clc
seg000:5BFC
seg000:5BFC loc_5BFC:				    ; CODE XREF: sub_5BC1+38j
seg000:5BFC		    xchg    al,	ah
seg000:5BFE		    out	    dx,	al
seg000:5BFF		    pop	    bp
seg000:5C00		    pop	    bx
seg000:5C01		    retn
seg000:5C01 sub_5BC1	    endp
seg000:5C01
seg000:5C02
seg000:5C02 ; =============== S	U B R O	U T I N	E =======================================
seg000:5C02
seg000:5C02
seg000:5C02 printing_0	    proc far		    ; CODE XREF: printing_1j
seg000:5C02		    cmp	    ah,	3
seg000:5C05		    jnb	    short loc_5C80
seg000:5C07		    sti
seg000:5C08		    push    ds
seg000:5C09		    push    dx
seg000:5C0A		    push    bx
seg000:5C0B		    push    cx
seg000:5C0C		    push    si
seg000:5C0D		    push    di
seg000:5C0E		    push    bp
seg000:5C0F		    mov	    ds,	word ptr cs:loc_C5+1
seg000:5C14		    out	    0FBh, al	    ; AT 80287 data.
seg000:5C14					    ; 286 sends	opcodes	& operands and receives	results.
seg000:5C16		    pushf
seg000:5C17		    inc	    byte ptr ds:loc_BB+4
seg000:5C1B		    popf
seg000:5C1C		    push    ax
seg000:5C1D		    push    ax
seg000:5C1E		    mov	    al,	18h
seg000:5C20		    call    load_DSSI
seg000:5C23		    mov	    al,	dl
seg000:5C25		    mov	    ah,	4
seg000:5C27		    mul	    ah
seg000:5C29		    mov	    bx,	ax
seg000:5C2B		    pop	    ax
seg000:5C2C		    mov	    bl,	[bx+si]
seg000:5C2E		    and	    bl,	0Fh
seg000:5C31		    or	    bl,	bl
seg000:5C33		    jz	    short loc_5C40
seg000:5C35		    dec	    bl
seg000:5C37		    mov	    dl,	bl
seg000:5C39		    sub	    dh,	dh
seg000:5C3B		    call    serial_out
seg000:5C3E		    jmp	    short loc_5C63
seg000:5C40 ; ---------------------------------------------------------------------------
seg000:5C40
seg000:5C40 loc_5C40:				    ; CODE XREF: printing_0+31j
seg000:5C40		    push    ds
seg000:5C41		    mov	    ds,	word ptr cs:loc_C5+1
seg000:5C46		    mov	    di,	dx
seg000:5C48		    mov	    bl,	[di+78h]
seg000:5C4C		    shl	    di,	1
seg000:5C4E		    mov	    dx,	[di+8]
seg000:5C52		    pop	    ds
seg000:5C53		    or	    dx,	dx
seg000:5C55		    jz	    short loc_5C63
seg000:5C57		    call    push_ret_ah
seg000:5C5A		    jmp	    short loc_5C63
seg000:5C5C ; ---------------------------------------------------------------------------
seg000:5C5C		    nop
seg000:5C5C ; ---------------------------------------------------------------------------
seg000:5C5D ret_vectors_3   dw offset printing_LPT
seg000:5C5F		    dw offset portIO_DX_delay
seg000:5C61		    dw offset loc_5D11
seg000:5C63 ; ---------------------------------------------------------------------------
seg000:5C63
seg000:5C63 loc_5C63:				    ; CODE XREF: printing_0+3Cj
seg000:5C63					    ; printing_0+53j ...
seg000:5C63		    xor	    ah,	48h
seg000:5C66		    pop	    bx
seg000:5C67		    mov	    al,	bl
seg000:5C69		    mov	    ds,	word ptr cs:loc_C5+1
seg000:5C6E		    pushf
seg000:5C6F		    dec	    byte ptr ds:loc_BB+4
seg000:5C73		    jnz	    short loc_5C77
seg000:5C75		    out	    0F9h, al	    ; AT 80287 data.
seg000:5C75					    ; 286 sends	opcodes	& operands and receives	results.
seg000:5C77
seg000:5C77 loc_5C77:				    ; CODE XREF: printing_0+71j
seg000:5C77		    popf
seg000:5C78		    pop	    bp
seg000:5C79		    pop	    di
seg000:5C7A		    pop	    si
seg000:5C7B		    pop	    cx
seg000:5C7C		    pop	    bx
seg000:5C7D		    pop	    dx
seg000:5C7E		    pop	    ds
seg000:5C7F		    iret
seg000:5C80 ; ---------------------------------------------------------------------------
seg000:5C80
seg000:5C80 loc_5C80:				    ; CODE XREF: printing_0+3j
seg000:5C80		    sub	    ah,	3
seg000:5C83		    iret
seg000:5C83 printing_0	    endp ; sp-analysis failed
seg000:5C83
seg000:5C84
seg000:5C84 ; =============== S	U B R O	U T I N	E =======================================
seg000:5C84
seg000:5C84
seg000:5C84 printing_LPT    proc near		    ; DATA XREF: printing_0:ret_vectors_3o
seg000:5C84		    cmp	    al,	0Dh
seg000:5C86		    pushf
seg000:5C87		    push    bx
seg000:5C88		    call    printing
seg000:5C8B		    pop	    bx
seg000:5C8C		    popf
seg000:5C8D		    jnz	    short locret_5CA7
seg000:5C8F		    mov	    cl,	[si+2]
seg000:5C92		    sub	    ch,	ch
seg000:5C94		    jcxz    short locret_5CA7
seg000:5C96
seg000:5C96 loc_5C96:				    ; CODE XREF: printing_LPT+21j
seg000:5C96		    test    ah,	29h
seg000:5C99		    jnz	    short locret_5CA7
seg000:5C9B		    mov	    al,	[si+1]
seg000:5C9E		    push    cx
seg000:5C9F		    push    bx
seg000:5CA0		    call    printing
seg000:5CA3		    pop	    bx
seg000:5CA4		    pop	    cx
seg000:5CA5		    loop    loc_5C96
seg000:5CA7
seg000:5CA7 locret_5CA7:			    ; CODE XREF: printing_LPT+9j
seg000:5CA7					    ; printing_LPT+10j	...
seg000:5CA7		    retn
seg000:5CA7 printing_LPT    endp
seg000:5CA7
seg000:5CA8
seg000:5CA8 ; =============== S	U B R O	U T I N	E =======================================
seg000:5CA8
seg000:5CA8
seg000:5CA8 printing	    proc near		    ; CODE XREF: printing_LPT+4p
seg000:5CA8					    ; printing_LPT+1Cp
seg000:5CA8		    test    byte ptr [si], 10h
seg000:5CAB		    jz	    short loc_5CAF
seg000:5CAD		    and	    al,	7Fh
seg000:5CAF
seg000:5CAF loc_5CAF:				    ; CODE XREF: printing+3j
seg000:5CAF		    test    byte ptr [si], 40h
seg000:5CB2		    jz	    short loc_5CB7
seg000:5CB4		    call    convert_ASCII
seg000:5CB7
seg000:5CB7 loc_5CB7:				    ; CODE XREF: printing+Aj
seg000:5CB7		    out	    dx,	al
seg000:5CB8		    inc	    dx
seg000:5CB9		    in	    al,	dx
seg000:5CBA		    test    al,	80h
seg000:5CBC		    jnz	    short portIO_DX
seg000:5CBE		    mov	    ax,	90FEh
seg000:5CC1		    int	    15h		    ; OS HOOK -	DEVICE BUSY LOOP (AT,XT2,XT286,CONV,PS)
seg000:5CC1					    ; AL = printer, ES:BX -> request block for type codes 80h through BFh
seg000:5CC3
seg000:5CC3 loc_5CC3:				    ; CODE XREF: printing+30j
seg000:5CC3		    mov	    bp,	2710h
seg000:5CC6
seg000:5CC6 loc_5CC6:				    ; CODE XREF: printing+2Cj
seg000:5CC6		    in	    al,	dx
seg000:5CC7		    test    al,	80h
seg000:5CC9		    jnz	    short portIO_DX
seg000:5CCB		    dec	    bp
seg000:5CCC		    jz	    short loc_5CD6
seg000:5CCE		    mov	    cx,	1
seg000:5CD1		    call    delay_
seg000:5CD4		    jmp	    short loc_5CC6
seg000:5CD6 ; ---------------------------------------------------------------------------
seg000:5CD6
seg000:5CD6 loc_5CD6:				    ; CODE XREF: printing+24j
seg000:5CD6		    dec	    bl
seg000:5CD8		    jnz	    short loc_5CC3
seg000:5CDA		    mov	    ah,	al
seg000:5CDC		    or	    ah,	1
seg000:5CDF		    and	    ah,	0F9h
seg000:5CE2		    retn
seg000:5CE3 ; ---------------------------------------------------------------------------
seg000:5CE3
seg000:5CE3 portIO_DX:				    ; CODE XREF: printing+14j
seg000:5CE3					    ; printing+21j
seg000:5CE3		    inc	    dx
seg000:5CE4		    in	    al,	dx
seg000:5CE5		    and	    al,	20h
seg000:5CE7		    mov	    ah,	al
seg000:5CE9		    mov	    al,	0Dh
seg000:5CEB		    or	    al,	ah
seg000:5CED		    out	    dx,	al
seg000:5CEE		    mov	    al,	0Ch
seg000:5CF0		    or	    al,	ah
seg000:5CF2		    out	    dx,	al
seg000:5CF3		    sub	    dx,	2
seg000:5CF6		    jmp	    short loc_5D11
seg000:5CF8 ; ---------------------------------------------------------------------------
seg000:5CF8
seg000:5CF8 portIO_DX_delay:			    ; DATA XREF: printing_0+5Do
seg000:5CF8		    add	    dx,	2
seg000:5CFB		    in	    al,	dx
seg000:5CFC		    and	    al,	20h
seg000:5CFE		    mov	    ah,	al
seg000:5D00		    or	    al,	8
seg000:5D02		    out	    dx,	al
seg000:5D03		    mov	    cx,	14h
seg000:5D06		    call    delay_
seg000:5D09		    mov	    al,	0Ch
seg000:5D0B		    or	    al,	ah
seg000:5D0D		    out	    dx,	al
seg000:5D0E		    sub	    dx,	2
seg000:5D11
seg000:5D11 loc_5D11:				    ; CODE XREF: printing+4Ej
seg000:5D11					    ; DATA XREF: printing_0+5Fo
seg000:5D11		    inc	    dx
seg000:5D12		    in	    al,	dx
seg000:5D13		    dec	    dx
seg000:5D14		    mov	    ah,	al
seg000:5D16		    and	    ah,	0F8h
seg000:5D19		    retn
seg000:5D19 printing	    endp
seg000:5D19
seg000:5D1A
seg000:5D1A ; =============== S	U B R O	U T I N	E =======================================
seg000:5D1A
seg000:5D1A
seg000:5D1A serial_out	    proc near		    ; CODE XREF: printing_0+39p
seg000:5D1A		    push    bx
seg000:5D1B		    push    ax
seg000:5D1C		    call    push_ret_ah
seg000:5D1F		    jmp	    short loc_5D28
seg000:5D21 ; ---------------------------------------------------------------------------
seg000:5D21		    nop
seg000:5D21 ; ---------------------------------------------------------------------------
seg000:5D22 ret_vectors_4   dw offset loc_5D42
seg000:5D24		    dw offset loc_5D46
seg000:5D26		    dw offset loc_5D58
seg000:5D28 ; ---------------------------------------------------------------------------
seg000:5D28
seg000:5D28 loc_5D28:				    ; CODE XREF: serial_out+5j
seg000:5D28		    sub	    al,	al
seg000:5D2A		    xchg    al,	ah
seg000:5D2C		    test    al,	80h
seg000:5D2E		    jz	    short loc_5D33
seg000:5D30		    or	    ah,	9
seg000:5D33
seg000:5D33 loc_5D33:				    ; CODE XREF: serial_out+14j
seg000:5D33		    test    al,	60h
seg000:5D35		    jz	    short loc_5D3A
seg000:5D37		    or	    ah,	80h
seg000:5D3A
seg000:5D3A loc_5D3A:				    ; CODE XREF: serial_out+1Bj
seg000:5D3A		    xor	    ah,	18h
seg000:5D3D		    pop	    bx
seg000:5D3E		    mov	    al,	bl
seg000:5D40		    pop	    bx
seg000:5D41		    retn
seg000:5D42 ; ---------------------------------------------------------------------------
seg000:5D42
seg000:5D42 loc_5D42:				    ; DATA XREF: serial_out:ret_vectors_4o
seg000:5D42		    mov	    ah,	1
seg000:5D44		    jmp	    short loc_5D5A
seg000:5D46 ; ---------------------------------------------------------------------------
seg000:5D46
seg000:5D46 loc_5D46:				    ; DATA XREF: serial_out+Ao
seg000:5D46		    push    si
seg000:5D47		    add	    si,	0Ch
seg000:5D4A		    mov	    al,	8
seg000:5D4C		    mul	    dl
seg000:5D4E		    add	    si,	ax
seg000:5D50		    mov	    al,	[si+6]
seg000:5D53		    pop	    si
seg000:5D54		    mov	    ah,	0
seg000:5D56		    jmp	    short loc_5D5A
seg000:5D58 ; ---------------------------------------------------------------------------
seg000:5D58
seg000:5D58 loc_5D58:				    ; DATA XREF: serial_out+Co
seg000:5D58		    mov	    ah,	3
seg000:5D5A
seg000:5D5A loc_5D5A:				    ; CODE XREF: serial_out+2Aj
seg000:5D5A					    ; serial_out+3Cj
seg000:5D5A		    int	    14h		    ; SERIAL I/O - TRANSMIT CHARACTER
seg000:5D5A					    ; AL = character, DX = port	number (0-3)
seg000:5D5A					    ; Return: AH = RS-232 status code bits, AL = modem status bits
seg000:5D5C		    retn
seg000:5D5C serial_out	    endp
seg000:5D5C
seg000:5D5D
seg000:5D5D ; =============== S	U B R O	U T I N	E =======================================
seg000:5D5D
seg000:5D5D
seg000:5D5D convert_ASCII   proc near		    ; CODE XREF: sub_233C:loc_2354p
seg000:5D5D					    ; convert_hex:loc_23B0p ...
seg000:5D5D		    cmp	    al,	61h ; 'a'
seg000:5D5F		    jb	    short locret_5D67
seg000:5D61		    cmp	    al,	7Ah ; 'z'
seg000:5D63		    ja	    short locret_5D67
seg000:5D65		    sub	    al,	20h ; ' '
seg000:5D67
seg000:5D67 locret_5D67:			    ; CODE XREF: convert_ASCII+2j
seg000:5D67					    ; convert_ASCII+6j
seg000:5D67		    retn
seg000:5D67 convert_ASCII   endp
seg000:5D67
seg000:5D68
seg000:5D68 ; =============== S	U B R O	U T I N	E =======================================
seg000:5D68
seg000:5D68
seg000:5D68 init_78h7Ch	    proc near		    ; CODE XREF: ColrWarm_Boot+3FDp
seg000:5D68		    push    ax
seg000:5D69		    push    cx
seg000:5D6A		    push    si
seg000:5D6B		    push    di
seg000:5D6C		    push    es
seg000:5D6D		    push    ds
seg000:5D6E		    pop	    es
seg000:5D6F		    mov	    di,	78h ; 'x'
seg000:5D72		    mov	    si,	offset init_78h_table
seg000:5D75		    mov	    cx,	3
seg000:5D78
seg000:5D78 loc_5D78:				    ; CODE XREF: init_78h7Ch+18j
seg000:5D78		    mov	    al,	cs:[si+3]
seg000:5D7C		    stosb
seg000:5D7D		    add	    si,	4
seg000:5D80		    loop    loc_5D78
seg000:5D82		    mov	    si,	offset init_7Ch_table
seg000:5D85		    mov	    di,	7Ch ; '|'
seg000:5D88		    mov	    cx,	2
seg000:5D8B
seg000:5D8B loc_5D8B:				    ; CODE XREF: init_78h7Ch+2Bj
seg000:5D8B		    mov	    al,	cs:[si+7]
seg000:5D8F		    stosb
seg000:5D90		    add	    si,	8
seg000:5D93		    loop    loc_5D8B
seg000:5D95		    pop	    es
seg000:5D96		    pop	    di
seg000:5D97		    pop	    si
seg000:5D98		    pop	    cx
seg000:5D99		    pop	    ax
seg000:5D9A		    retn
seg000:5D9A init_78h7Ch	    endp
seg000:5D9A
seg000:5D9B
seg000:5D9B ; =============== S	U B R O	U T I N	E =======================================
seg000:5D9B
seg000:5D9B
seg000:5D9B delay_	    proc near		    ; CODE XREF: sub_5A30+40p
seg000:5D9B					    ; sub_5B06+23p ...
seg000:5D9B		    push    cx
seg000:5D9C
seg000:5D9C loc_5D9C:				    ; CODE XREF: delay_+Dj
seg000:5D9C		    push    cx
seg000:5D9D		    mov	    cx,	cs:RTC_test_timer
seg000:5DA2		    shr	    cx,	4
seg000:5DA5
seg000:5DA5 loc_5DA5:				    ; CODE XREF: delay_:loc_5DA5j
seg000:5DA5		    loop    loc_5DA5
seg000:5DA7		    pop	    cx
seg000:5DA8		    loop    loc_5D9C
seg000:5DAA		    pop	    cx
seg000:5DAB		    retn
seg000:5DAB delay_	    endp
seg000:5DAB
seg000:5DAC
seg000:5DAC ; =============== S	U B R O	U T I N	E =======================================
seg000:5DAC
seg000:5DAC
seg000:5DAC load_DSSI	    proc near		    ; CODE XREF: sub_58D4+13p
seg000:5DAC					    ; printing_0+1Ep
seg000:5DAC		    call    table_lookup_ptr
seg000:5DAF		    push    ax
seg000:5DB0		    mov	    ax,	ds
seg000:5DB2		    cmp	    ax,	0F000h
seg000:5DB5		    jz	    short loc_5DC4
seg000:5DB7		    cmp	    ax,	0A000h
seg000:5DBA		    jb	    short loc_5DC4
seg000:5DBC		    mov	    ax,	0F000h
seg000:5DBF		    mov	    ds,	ax
seg000:5DC1		    assume ds:nothing
seg000:5DC1		    mov	    si,	offset init_78h_table
seg000:5DC4
seg000:5DC4 loc_5DC4:				    ; CODE XREF: load_DSSI+9j
seg000:5DC4					    ; load_DSSI+Ej
seg000:5DC4		    pop	    ax
seg000:5DC5		    retn
seg000:5DC5 load_DSSI	    endp
seg000:5DC5
seg000:5DC5 ; ---------------------------------------------------------------------------
seg000:5DC6 init_78h_table  dw 0		    ; DATA XREF: init_78h7Ch+Ao
seg000:5DC6					    ; load_DSSI+15o ...
seg000:5DC8		    db	  0
seg000:5DC9		    db	14h
seg000:5DCA		    db	  0
seg000:5DCB		    db	  0
seg000:5DCC		    db	  0
seg000:5DCD		    db	14h
seg000:5DCE		    db	  0
seg000:5DCF		    db	  0
seg000:5DD0		    db	  0
seg000:5DD1		    db	14h
seg000:5DD2 init_7Ch_table  dw 3Dh		    ; DATA XREF: init_78h7Ch+1Ao
seg000:5DD4		    db	  0
seg000:5DD5		    db	  0
seg000:5DD6		    db	  0
seg000:5DD7		    db	  0
seg000:5DD8		    db 0C3h ; Ã
seg000:5DD9		    db	  1
seg000:5DDA		    db	3Dh ; =
seg000:5DDB		    db	  0
seg000:5DDC		    db	  0
seg000:5DDD		    db	  0
seg000:5DDE		    db	  0
seg000:5DDF		    db	  0
seg000:5DE0		    db 0C3h ; Ã
seg000:5DE1		    db	  1
seg000:5DE2
seg000:5DE2 ; =============== S	U B R O	U T I N	E =======================================
seg000:5DE2
seg000:5DE2
seg000:5DE2 GDT_init	    proc near		    ; CODE XREF: ColrWarm_Boot+321p
seg000:5DE2					    ; sub_8C1Dp
seg000:5DE2		    push    ax
seg000:5DE3		    push    bx
seg000:5DE4		    push    cx
seg000:5DE5		    push    dx
seg000:5DE6		    push    di
seg000:5DE7		    push    si
seg000:5DE8		    push    bp
seg000:5DE9		    push    es
seg000:5DEA		    mov	    bl,	byte ptr cs:loc_CA+4
seg000:5DEF		    and	    bl,	0F1h
seg000:5DF2		    mov	    al,	8
seg000:5DF4		    mov	    dx,	9F4h
seg000:5DF7		    out	    dx,	al
seg000:5DF8		    mov	    dx,	0EF4h
seg000:5DFB		    in	    al,	dx
seg000:5DFC		    test    al,	0Fh
seg000:5DFE		    jz	    short loc_5E2F
seg000:5E00		    mov	    dx,	0BF4h
seg000:5E03		    in	    al,	dx
seg000:5E04		    push    ax
seg000:5E05		    call    load_GDT
seg000:5E08		    pop	    ax
seg000:5E09		    push    dx
seg000:5E0A		    mov	    dx,	0BF4h
seg000:5E0D		    out	    dx,	al
seg000:5E0E		    pop	    dx
seg000:5E0F		    mov	    bl,	4
seg000:5E11		    jnb	    short loc_5E2F
seg000:5E13		    cmp	    bh,	1
seg000:5E16		    jnz	    short loc_5E1D
seg000:5E18		    call    tag_string
seg000:5E1B		    jmp	    short loc_5E2D
seg000:5E1D ; ---------------------------------------------------------------------------
seg000:5E1D
seg000:5E1D loc_5E1D:				    ; CODE XREF: GDT_init+34j
seg000:5E1D		    cmp	    bh,	2
seg000:5E20		    jnz	    short loc_5E27
seg000:5E22		    call    data_string
seg000:5E25		    jmp	    short loc_5E2D
seg000:5E27 ; ---------------------------------------------------------------------------
seg000:5E27
seg000:5E27 loc_5E27:				    ; CODE XREF: GDT_init+3Ej
seg000:5E27		    mov	    si,	offset aCacheCircuitCa ; "Cache	circuit	card failure! +++"
seg000:5E2A		    call    print_?
seg000:5E2D
seg000:5E2D loc_5E2D:				    ; CODE XREF: GDT_init+39j
seg000:5E2D					    ; GDT_init+43j
seg000:5E2D		    mov	    bl,	0Ch
seg000:5E2F
seg000:5E2F loc_5E2F:				    ; CODE XREF: GDT_init+1Cj
seg000:5E2F					    ; GDT_init+2Fj
seg000:5E2F		    mov	    byte ptr cs:loc_CA+4, bl
seg000:5E34		    pop	    es
seg000:5E35		    pop	    bp
seg000:5E36		    pop	    si
seg000:5E37		    pop	    di
seg000:5E38		    pop	    dx
seg000:5E39		    pop	    cx
seg000:5E3A		    pop	    bx
seg000:5E3B		    pop	    ax
seg000:5E3C		    retn
seg000:5E3C GDT_init	    endp
seg000:5E3C
seg000:5E3D
seg000:5E3D ; =============== S	U B R O	U T I N	E =======================================
seg000:5E3D
seg000:5E3D
seg000:5E3D data_string	    proc near		    ; CODE XREF: GDT_init+40p
seg000:5E3D		    bsr	    edi, edx
seg000:5E41		    shr	    di,	1
seg000:5E43		    mov	    dx,	0EF4h
seg000:5E46		    in	    al,	dx
seg000:5E47		    and	    al,	0Fh
seg000:5E49		    xor	    ah,	ah
seg000:5E4B		    imul    ax,	4
seg000:5E4E		    mov	    si,	offset data_tag_lookup
seg000:5E51		    add	    si,	ax
seg000:5E53		    mov	    ax,	cs:[si+2]
seg000:5E57		    add	    di,	ax
seg000:5E59		    mov	    si,	offset aData ; "DATA "
seg000:5E5C		    call    cache_bad
seg000:5E5F		    retn
seg000:5E5F data_string	    endp
seg000:5E5F
seg000:5E60
seg000:5E60 ; =============== S	U B R O	U T I N	E =======================================
seg000:5E60
seg000:5E60
seg000:5E60 tag_string	    proc near		    ; CODE XREF: GDT_init+36p
seg000:5E60		    xor	    cl,	ch
seg000:5E62		    xor	    ch,	ch
seg000:5E64		    bsr	    edi, ecx
seg000:5E68		    rol	    di,	1
seg000:5E6A		    mov	    dx,	0EF4h
seg000:5E6D		    in	    al,	dx
seg000:5E6E		    and	    al,	0Fh
seg000:5E70		    xor	    ah,	ah
seg000:5E72		    imul    ax,	4
seg000:5E75		    mov	    si,	offset data_tag_lookup
seg000:5E78		    add	    si,	ax
seg000:5E7A		    mov	    ax,	cs:[si]
seg000:5E7D		    add	    di,	ax
seg000:5E7F		    mov	    si,	offset aTag ; "TAG "
seg000:5E82		    call    cache_bad
seg000:5E85		    retn
seg000:5E85 tag_string	    endp
seg000:5E85
seg000:5E86
seg000:5E86 ; =============== S	U B R O	U T I N	E =======================================
seg000:5E86
seg000:5E86
seg000:5E86 load_GDT	    proc near		    ; CODE XREF: GDT_init+23p
seg000:5E86		    pushf
seg000:5E87		    call    port_FBFFF9_Out
seg000:5E8A		    cli
seg000:5E8B		    mov	    al,	28h ; '('
seg000:5E8D		    mov	    dx,	9F4h
seg000:5E90		    out	    dx,	al
seg000:5E91		    call    keyb_commands1
seg000:5E94		    mov	    cx,	0Ah
seg000:5E97		    mov	    al,	byte ptr cs:off_FEFF+1
seg000:5E9B
seg000:5E9B loc_5E9B:				    ; CODE XREF: load_GDT+19j
seg000:5E9B		    mov	    byte ptr cs:off_FEFF+1, al
seg000:5E9F		    loop    loc_5E9B
seg000:5EA1		    mov	    al,	8Fh ; ''
seg000:5EA3		    out	    70h, al	    ; CMOS Memory:
seg000:5EA3					    ;
seg000:5EA5		    mov	    ax,	0F000h
seg000:5EA8		    mov	    es,	ax
seg000:5EAA		    assume es:nothing
seg000:5EAA		    mov	    si,	offset GDT_table
seg000:5EAD		    lgdt    fword ptr es:[si+8]
seg000:5EB3		    smsw    ax
seg000:5EB6		    or	    ax,	1	    ; protected	ON
seg000:5EB9		    lmsw    ax
seg000:5EBC		    jmp	    far	ptr 20h:4CFh
seg000:5EC1 ; ---------------------------------------------------------------------------
seg000:5EC1
seg000:5EC1 loc_5EC1:				    ; CODE XREF: seg000:056Bj
seg000:5EC1					    ; seg000:07F0j
seg000:5EC1		    mov	    eax, cr0
seg000:5EC4		    and	    ax,	0FFFEh	    ; protected	OFF
seg000:5EC7		    mov	    cr0, eax
seg000:5ECA		    jmp	    far	ptr 0F000h:5ECFh
seg000:5ECA load_GDT	    endp
seg000:5ECA
seg000:5ECF ; ---------------------------------------------------------------------------
seg000:5ECF		    mov	    al,	cs:byte_FFFF
seg000:5ED3		    call    keyb_commands2
seg000:5ED6		    push    dx
seg000:5ED7		    push    ax
seg000:5ED8		    mov	    dx,	9F4h
seg000:5EDB		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:5EDB					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:5EDB					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:5EDB					    ; 3: 1=read	high switches
seg000:5EDB					    ; 4: 0=enable RAM parity checking
seg000:5EDB					    ; 5: 0=enable I/O channel check
seg000:5EDB					    ; 6: 0=hold	keyboard clock low
seg000:5EDB					    ; 7: 0=enable kbrd
seg000:5EDD		    mov	    al,	8
seg000:5EDF		    out	    dx,	al
seg000:5EE0		    pop	    ax
seg000:5EE1		    pop	    dx
seg000:5EE2		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:5EE2					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:5EE2					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:5EE2					    ; 3: 1=read	high switches
seg000:5EE2					    ; 4: 0=enable RAM parity checking
seg000:5EE2					    ; 5: 0=enable I/O channel check
seg000:5EE2					    ; 6: 0=hold	keyboard clock low
seg000:5EE2					    ; 7: 0=enable kbrd
seg000:5EE4		    or	    al,	0Ch
seg000:5EE6		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:5EE6					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:5EE6					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:5EE6					    ; 3: 1=read	high switches
seg000:5EE6					    ; 4: 0=enable RAM parity checking
seg000:5EE6					    ; 5: 0=enable I/O channel check
seg000:5EE6					    ; 6: 0=hold	keyboard clock low
seg000:5EE6					    ; 7: 0=enable kbrd
seg000:5EE8		    and	    al,	0F3h
seg000:5EEA		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:5EEA					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:5EEA					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:5EEA					    ; 3: 1=read	high switches
seg000:5EEA					    ; 4: 0=enable RAM parity checking
seg000:5EEA					    ; 5: 0=enable I/O channel check
seg000:5EEA					    ; 6: 0=hold	keyboard clock low
seg000:5EEA					    ; 7: 0=enable kbrd
seg000:5EEC		    push    dx
seg000:5EED		    mov	    dx,	9F4h
seg000:5EF0		    in	    al,	dx
seg000:5EF1		    and	    al,	0DFh
seg000:5EF3		    out	    dx,	al
seg000:5EF4		    pop	    dx
seg000:5EF5		    call    sub_71D9
seg000:5EF8		    popf
seg000:5EF9		    and	    bh,	bh
seg000:5EFB		    jnz	    short loc_5EFE
seg000:5EFD		    retn
seg000:5EFE ; ---------------------------------------------------------------------------
seg000:5EFE
seg000:5EFE loc_5EFE:				    ; CODE XREF: seg000:5EFBj
seg000:5EFE		    stc
seg000:5EFF		    retn
seg000:5F00
seg000:5F00 ; =============== S	U B R O	U T I N	E =======================================
seg000:5F00
seg000:5F00
seg000:5F00 cache_bad	    proc near		    ; CODE XREF: data_string+1Fp
seg000:5F00					    ; tag_string+22p
seg000:5F00		    push    di
seg000:5F01		    push    si
seg000:5F02		    call    VGA_bios_init
seg000:5F05		    in	    al,	88h
seg000:5F07		    cmp	    al,	19h
seg000:5F09		    jb	    short loc_5F0D
seg000:5F0B		    xor	    al,	al
seg000:5F0D
seg000:5F0D loc_5F0D:				    ; CODE XREF: cache_bad+9j
seg000:5F0D		    mov	    dh,	al
seg000:5F0F		    xor	    dl,	dl
seg000:5F11		    mov	    si,	offset aError ;	"+++ ERROR:  "
seg000:5F14		    call    Print_extended
seg000:5F17		    mov	    si,	offset aCacheCircuit_0 ; "Cache	circuit	card "
seg000:5F1A		    call    Print_extended
seg000:5F1D		    pop	    si
seg000:5F1E		    call    Print_extended
seg000:5F21		    mov	    si,	offset aRamFailureChip ; "RAM failure! Chip: U7"
seg000:5F24		    call    Print_extended
seg000:5F27		    pop	    si
seg000:5F28		    lods    byte ptr cs:[si]
seg000:5F2A		    push    si
seg000:5F2B		    call    print_CL_LF_TAB
seg000:5F2E		    pop	    si
seg000:5F2F		    mov	    al,	cs:[si]
seg000:5F32		    call    print_CL_LF_TAB
seg000:5F35		    push    si
seg000:5F36		    mov	    si,	offset plusplus	; " +++"
seg000:5F39		    call    Print_extended
seg000:5F3C		    pop	    si
seg000:5F3D		    mov	    cx,	28h ; '('
seg000:5F40		    mov	    al,	20h ; ' '
seg000:5F42
seg000:5F42 loc_5F42:				    ; CODE XREF: cache_bad+45j
seg000:5F42		    call    print_CL_LF_TAB
seg000:5F45		    loop    loc_5F42
seg000:5F47		    in	    al,	88h
seg000:5F49		    inc	    al
seg000:5F4B		    cmp	    al,	18h
seg000:5F4D		    jb	    short loc_5F54
seg000:5F4F		    call    test_print_error?
seg000:5F52		    xor	    al,	al
seg000:5F54
seg000:5F54 loc_5F54:				    ; CODE XREF: cache_bad+4Dj
seg000:5F54		    out	    88h, al
seg000:5F56		    retn
seg000:5F56 cache_bad	    endp ; sp-analysis failed
seg000:5F56
seg000:5F56 ; ---------------------------------------------------------------------------
seg000:5F57 aCacheCircuitCa db 'Cache circuit card failure! +++',0
seg000:5F57					    ; DATA XREF: GDT_init:loc_5E27o
seg000:5F77 aCacheCircuit_0 db 'Cache circuit card ',0 ; DATA XREF: cache_bad+17o
seg000:5F8B aTag	    db 'TAG ',0             ; DATA XREF: tag_string+1Fo
seg000:5F90 aData	    db 'DATA ',0            ; DATA XREF: data_string+1Co
seg000:5F96 aRamFailureChip db 'RAM failure! Chip: U7',0 ; DATA XREF: cache_bad+21o
seg000:5FAC a32		    db '32',0               ; DATA XREF: ColrWarm_Boot+52B8o
seg000:5FAF a16		    db '16',0
seg000:5FB2 a8		    db '8',0
seg000:5FB4		    db	  0
seg000:5FB5 a4		    db '4',0
seg000:5FB7		    db	  0
seg000:5FB8 cache_64	    db '64',0
seg000:5FBB cache_32	    db '32',0
seg000:5FBE cache_16	    db '16',0
seg000:5FC1 cache_8	    db '8',0
seg000:5FC3 cache_0	    db	  0
seg000:5FC4 aKCache	    db 'K Cache',0Dh,0Ah,0  ; DATA XREF: ColrWarm_Boot+52C0o
seg000:5FCE data_tag_lookup dw offset unk_600E	    ; DATA XREF: data_string+11o
seg000:5FCE					    ; tag_string+15o
seg000:5FD0		    dw offset unk_6012
seg000:5FD2		    dw offset unk_600E
seg000:5FD4		    dw offset unk_6012
seg000:5FD6		    dw offset unk_600E
seg000:5FD8		    dw offset unk_6012
seg000:5FDA		    dw offset unk_600E
seg000:5FDC		    dw offset unk_6012
seg000:5FDE		    dw offset unk_600E
seg000:5FE0		    dw offset unk_6012
seg000:5FE2		    dw offset unk_6022
seg000:5FE4		    dw offset unk_6028
seg000:5FE6		    dw offset unk_600E
seg000:5FE8		    dw offset unk_6012
seg000:5FEA		    dw offset unk_600E
seg000:5FEC		    dw offset unk_6012
seg000:5FEE		    dw offset unk_600E
seg000:5FF0		    dw offset unk_6012
seg000:5FF2		    dw offset unk_600E
seg000:5FF4		    dw offset unk_6012
seg000:5FF6		    dw offset unk_600E
seg000:5FF8		    dw offset unk_6012
seg000:5FFA		    dw offset unk_600E
seg000:5FFC		    dw offset unk_6012
seg000:5FFE		    dw offset unk_600E
seg000:6000		    dw offset unk_6012
seg000:6002		    dw offset unk_6022
seg000:6004		    dw offset unk_6028
seg000:6006		    dw offset unk_600E
seg000:6008		    dw offset unk_6012
seg000:600A		    dw offset unk_600E
seg000:600C		    dw offset unk_6012
seg000:600E unk_600E	    db	30h ; 0		    ; DATA XREF: seg000:data_tag_lookupo
seg000:600E					    ; seg000:5FD2o ...
seg000:600F		    db	36h ; 6
seg000:6010		    db	30h ; 0
seg000:6011		    db	31h ; 1
seg000:6012 unk_6012	    db	30h ; 0		    ; DATA XREF: seg000:5FD0o
seg000:6012					    ; seg000:5FD4o ...
seg000:6013		    db	39h ; 9
seg000:6014		    db	31h ; 1
seg000:6015		    db	30h ; 0
seg000:6016		    db	30h ; 0
seg000:6017		    db	37h ; 7
seg000:6018		    db	30h ; 0
seg000:6019		    db	38h ; 8
seg000:601A		    db	30h ; 0
seg000:601B		    db	34h ; 4
seg000:601C		    db	30h ; 0
seg000:601D		    db	35h ; 5
seg000:601E		    db	30h ; 0
seg000:601F		    db	33h ; 3
seg000:6020		    db	30h ; 0
seg000:6021		    db	32h ; 2
seg000:6022 unk_6022	    db	30h ; 0		    ; DATA XREF: seg000:5FE2o
seg000:6022					    ; seg000:6002o
seg000:6023		    db	39h ; 9
seg000:6024		    db	30h ; 0
seg000:6025		    db	36h ; 6
seg000:6026		    db	30h ; 0
seg000:6027		    db	33h ; 3
seg000:6028 unk_6028	    db	31h ; 1		    ; DATA XREF: seg000:5FE4o
seg000:6028					    ; seg000:6004o
seg000:6029		    db	30h ; 0
seg000:602A		    db	31h ; 1
seg000:602B		    db	31h ; 1
seg000:602C		    db	30h ; 0
seg000:602D		    db	37h ; 7
seg000:602E		    db	30h ; 0
seg000:602F		    db	38h ; 8
seg000:6030		    db	30h ; 0
seg000:6031		    db	34h ; 4
seg000:6032		    db	30h ; 0
seg000:6033		    db	35h ; 5
seg000:6034		    db	30h ; 0
seg000:6035		    db	31h ; 1
seg000:6036		    db	30h ; 0
seg000:6037		    db	32h ; 2
seg000:6038
seg000:6038 ; =============== S	U B R O	U T I N	E =======================================
seg000:6038
seg000:6038
seg000:6038 test_RTC	    proc near		    ; CODE XREF: cmos_read_4+Ep
seg000:6038					    ; cmos_write_4:loc_626Dp
seg000:6038		    push    ax
seg000:6039		    push    cx
seg000:603A		    mov	    cx,	cs:RTC_test_timer
seg000:603F		    shl	    cx,	2
seg000:6042
seg000:6042 RTC_loop:				    ; CODE XREF: test_RTC+13j
seg000:6042		    sti
seg000:6043		    mov	    al,	0Ah
seg000:6045		    cli
seg000:6046		    call    read_cmos
seg000:6049		    test    al,	80h
seg000:604B		    loopne  RTC_loop
seg000:604D		    jcxz    short RTC_bad
seg000:604F		    clc
seg000:6050		    jmp	    short RTC_ok
seg000:6052 ; ---------------------------------------------------------------------------
seg000:6052
seg000:6052 RTC_bad:				    ; CODE XREF: test_RTC+15j
seg000:6052		    mov	    ah,	4
seg000:6054		    call    cmos8E_flipON_ah
seg000:6057		    stc
seg000:6058
seg000:6058 RTC_ok:				    ; CODE XREF: test_RTC+18j
seg000:6058		    pop	    cx
seg000:6059		    pop	    ax
seg000:605A		    retn
seg000:605A test_RTC	    endp
seg000:605A
seg000:605B
seg000:605B ; =============== S	U B R O	U T I N	E =======================================
seg000:605B
seg000:605B
seg000:605B RTC_date_?	    proc near		    ; CODE XREF: ColrWarm_Boot:loc_14CAp
seg000:605B		    pushf
seg000:605C		    push    ax
seg000:605D		    push    dx
seg000:605E		    sti
seg000:605F		    mov	    ax,	260Ah	    ; RTC rate init to default
seg000:6062		    call    write_cmos
seg000:6065		    mov	    al,	0Bh
seg000:6067		    call    read_cmos
seg000:606A		    or	    al,	2
seg000:606C		    and	    al,	0FAh
seg000:606E		    mov	    ah,	al	    ; RTC Date BCD 24 hour mode
seg000:6070		    mov	    al,	0Bh
seg000:6072		    call    write_cmos
seg000:6075		    mov	    al,	0Eh
seg000:6077		    call    read_cmos
seg000:607A		    and	    al,	0C4h	    ; RTC  clock lost power | incorrect	checksum | time	invalid
seg000:607C		    jnz	    short loc_608A
seg000:607E		    call    RTC_time_convert
seg000:6081		    jb	    short loc_608A
seg000:6083		    mov	    ds:6Ch, ax
seg000:6086		    mov	    ds:6Eh, dx
seg000:608A
seg000:608A loc_608A:				    ; CODE XREF: RTC_date_?+21j
seg000:608A					    ; RTC_date_?+26j
seg000:608A		    pop	    dx
seg000:608B		    pop	    ax
seg000:608C		    popf
seg000:608D		    retn
seg000:608D RTC_date_?	    endp
seg000:608D
seg000:608E
seg000:608E ; =============== S	U B R O	U T I N	E =======================================
seg000:608E
seg000:608E
seg000:608E bcd_adjust?	    proc near		    ; CODE XREF: RTC_time_convert+Cp
seg000:608E					    ; RTC_time_convert+1Fp ...
seg000:608E		    mov	    ah,	al
seg000:6090		    rol	    ah,	4
seg000:6093		    and	    ax,	0F0Fh
seg000:6096		    aad
seg000:6098		    retn
seg000:6098 bcd_adjust?	    endp
seg000:6098
seg000:6099
seg000:6099 ; =============== S	U B R O	U T I N	E =======================================
seg000:6099
seg000:6099
seg000:6099 RTC_time_convert proc near		    ; CODE XREF: RTC_date_?+23p
seg000:6099		    push    cx
seg000:609A		    push    si
seg000:609B		    push    di
seg000:609C		    call    RTC_time_read
seg000:609F		    jb	    short loc_60DE
seg000:60A1		    xchg    dh,	ch
seg000:60A3		    mov	    al,	dh
seg000:60A5		    call    bcd_adjust?
seg000:60A8		    mov	    si,	ax
seg000:60AA		    shl	    si,	2
seg000:60AD		    mov	    dx,	1Ch
seg000:60B0		    mul	    dx
seg000:60B2		    add	    si,	dx
seg000:60B4		    mov	    di,	ax
seg000:60B6		    mov	    al,	cl
seg000:60B8		    call    bcd_adjust?
seg000:60BB		    mov	    dx,	1112h
seg000:60BE		    mul	    dx
seg000:60C0		    add	    di,	ax
seg000:60C2		    adc	    si,	dx
seg000:60C4		    mov	    al,	ch
seg000:60C6		    call    bcd_adjust?
seg000:60C9		    mov	    dx,	49h ; 'I'
seg000:60CC		    mul	    dx
seg000:60CE		    add	    ax,	di
seg000:60D0		    adc	    dx,	si
seg000:60D2		    rcr	    dx,	1
seg000:60D4		    rcr	    ax,	1
seg000:60D6		    rcr	    dx,	1
seg000:60D8		    rcr	    ax,	1
seg000:60DA		    and	    dx,	3FFFh
seg000:60DE
seg000:60DE loc_60DE:				    ; CODE XREF: RTC_time_convert+6j
seg000:60DE		    pop	    di
seg000:60DF		    pop	    si
seg000:60E0		    pop	    cx
seg000:60E1		    retn
seg000:60E1 RTC_time_convert endp
seg000:60E1
seg000:60E2
seg000:60E2 ; =============== S	U B R O	U T I N	E =======================================
seg000:60E2
seg000:60E2
seg000:60E2 sub_60E2	    proc far		    ; DATA XREF: seg000:dw_table_3o
seg000:60E2		    push    ax
seg000:60E3		    push    ds
seg000:60E4		    sti
seg000:60E5		    mov	    ds,	word ptr cs:loc_48+1
seg000:60EA		    assume ds:nothing
seg000:60EA		    mov	    al,	0Ch
seg000:60EC		    call    read_cmos
seg000:60EF		    mov	    ah,	al
seg000:60F1		    mov	    al,	0Bh
seg000:60F3		    call    read_cmos
seg000:60F6		    and	    ah,	al
seg000:60F8		    test    ah,	20h
seg000:60FB		    jz	    short loc_60FF
seg000:60FD		    int	    4Ah		    ; AT/CONV/PS - User	Alarm
seg000:60FF
seg000:60FF loc_60FF:				    ; CODE XREF: sub_60E2+19j
seg000:60FF		    test    ah,	40h
seg000:6102		    jz	    short loc_612A
seg000:6104		    cli
seg000:6105		    sub	    word ptr ds:loc_9B+1, 3CFh
seg000:610B		    sbb	    word ptr ds:loc_9D+1, 0
seg000:6110		    sti
seg000:6111		    jnb	    short loc_612A
seg000:6113		    and	    al,	0BFh
seg000:6115		    mov	    ah,	al
seg000:6117		    mov	    al,	0Bh
seg000:6119		    call    write_cmos
seg000:611C		    mov	    byte ptr ds:loc_9F+1, 0
seg000:6121		    push    bx
seg000:6122		    lds	    bx,	dword ptr ds:loc_97+1
seg000:6126		    mov	    byte ptr [bx], 80h ; ''
seg000:6129		    pop	    bx
seg000:612A
seg000:612A loc_612A:				    ; CODE XREF: sub_60E2+20j
seg000:612A					    ; sub_60E2+2Fj
seg000:612A		    mov	    al,	20h ; ' '
seg000:612C		    cli
seg000:612D		    out	    0A0h, al	    ; PIC 2  same as 0020 for PIC 1
seg000:612F		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:6131		    pop	    ds
seg000:6132		    pop	    ax
seg000:6133		    iret
seg000:6133 sub_60E2	    endp
seg000:6133
seg000:6133 ; ---------------------------------------------------------------------------
seg000:6134 call_table	    dw offset time_get?	    ; 0	; DATA XREF: sub_6144+1Fr
seg000:6134		    dw offset time_store?   ; 1
seg000:6134		    dw offset RTC_time_read ; 2
seg000:6134		    dw offset RTC_time_write; 3
seg000:6134		    dw offset RTC_time_read_0; 4
seg000:6134		    dw offset RTC_time_write_0;	5
seg000:6134		    dw offset RTC_alarm_reset?;	6
seg000:6134		    dw offset RTC_alarm_OFF ; 7
seg000:6144
seg000:6144 ; =============== S	U B R O	U T I N	E =======================================
seg000:6144
seg000:6144
seg000:6144 sub_6144	    proc far		    ; CODE XREF: sub_FE6Ej
seg000:6144		    sti
seg000:6145		    cld
seg000:6146		    cmp	    ah,	8
seg000:6149		    cmc
seg000:614A		    jb	    short locret_6176
seg000:614C		    push    bx
seg000:614D		    push    si
seg000:614E		    push    di
seg000:614F		    push    ds
seg000:6150		    mov	    ds,	word ptr cs:loc_C5+1
seg000:6155		    out	    0FBh, al	    ; AT 80287 data.
seg000:6155					    ; 286 sends	opcodes	& operands and receives	results.
seg000:6157		    pushf
seg000:6158		    inc	    byte ptr ds:loc_BB+4
seg000:615C		    popf
seg000:615D		    shl	    ah,	1
seg000:615F		    mov	    bl,	ah
seg000:6161		    xor	    bh,	bh
seg000:6163		    call    cs:call_table[bx]
seg000:6168		    pushf
seg000:6169		    dec	    byte ptr ds:loc_BB+4
seg000:616D		    jnz	    short loc_6171
seg000:616F		    out	    0F9h, al	    ; AT 80287 data.
seg000:616F					    ; 286 sends	opcodes	& operands and receives	results.
seg000:6171
seg000:6171 loc_6171:				    ; CODE XREF: sub_6144+29j
seg000:6171		    popf
seg000:6172		    pop	    ds
seg000:6173		    pop	    di
seg000:6174		    pop	    si
seg000:6175		    pop	    bx
seg000:6176
seg000:6176 locret_6176:			    ; CODE XREF: sub_6144+6j
seg000:6176		    retf    2
seg000:6176 sub_6144	    endp
seg000:6176
seg000:6179
seg000:6179 ; =============== S	U B R O	U T I N	E =======================================
seg000:6179
seg000:6179
seg000:6179 time_get?	    proc near		    ; DATA XREF: seg000:call_tableo
seg000:6179		    cli
seg000:617A		    mov	    dx,	word ptr ds:loc_6C
seg000:617E		    mov	    cx,	word ptr ds:loc_6E
seg000:6182		    mov	    al,	byte ptr ds:loc_70
seg000:6185		    mov	    byte ptr ds:loc_70,	0
seg000:618A		    xor	    ah,	ah
seg000:618C		    sti
seg000:618D		    retn
seg000:618D time_get?	    endp
seg000:618D
seg000:618E
seg000:618E ; =============== S	U B R O	U T I N	E =======================================
seg000:618E
seg000:618E
seg000:618E time_store?	    proc near		    ; DATA XREF: seg000:call_tableo
seg000:618E		    cli
seg000:618F		    mov	    word ptr ds:loc_6C,	dx
seg000:6193		    mov	    word ptr ds:loc_6E,	cx
seg000:6197		    mov	    byte ptr ds:loc_70,	0
seg000:619C		    xor	    ah,	ah
seg000:619E		    sti
seg000:619F		    retn
seg000:619F time_store?	    endp
seg000:619F
seg000:61A0
seg000:61A0 ; =============== S	U B R O	U T I N	E =======================================
seg000:61A0
seg000:61A0
seg000:61A0 RTC_time_read   proc near		    ; CODE XREF: RTC_time_convert+3p
seg000:61A0					    ; DATA XREF: seg000:call_tableo
seg000:61A0		    mov	    si,	offset RTC_table_time
seg000:61A3		    call    cmos_read_4
seg000:61A6		    mov	    al,	ch
seg000:61A8		    and	    dl,	1
seg000:61AB		    add	    bl,	0FFh
seg000:61AE		    retn
seg000:61AE RTC_time_read   endp
seg000:61AE
seg000:61AF
seg000:61AF ; =============== S	U B R O	U T I N	E =======================================
seg000:61AF
seg000:61AF
seg000:61AF RTC_time_write  proc near		    ; DATA XREF: seg000:call_tableo
seg000:61AF		    mov	    si,	offset RTC_table_time
seg000:61B2		    mov	    bl,	20h ; ' '
seg000:61B4		    or	    dl,	2
seg000:61B7		    call    cmos_write_4
seg000:61BA		    mov	    al,	3
seg000:61BC		    mov	    dl,	0Bh
seg000:61BE		    clc
seg000:61BF		    retn
seg000:61BF RTC_time_write  endp
seg000:61BF
seg000:61C0
seg000:61C0 ; =============== S	U B R O	U T I N	E =======================================
seg000:61C0
seg000:61C0
seg000:61C0 RTC_time_read_0 proc near		    ; DATA XREF: seg000:call_tableo
seg000:61C0		    mov	    si,	offset RTC_table_date
seg000:61C3		    call    cmos_read_4
seg000:61C6		    mov	    al,	ch
seg000:61C8		    clc
seg000:61C9		    add	    bl,	0FFh
seg000:61CC		    retn
seg000:61CC RTC_time_read_0 endp
seg000:61CC
seg000:61CD
seg000:61CD ; =============== S	U B R O	U T I N	E =======================================
seg000:61CD
seg000:61CD
seg000:61CD RTC_time_write_0 proc near		    ; DATA XREF: seg000:call_tableo
seg000:61CD		    mov	    si,	offset RTC_table_date
seg000:61D0		    call    cmos_write_4
seg000:61D3		    mov	    al,	ch
seg000:61D5		    mov	    dl,	32h ; '2'
seg000:61D7		    xor	    ah,	ah
seg000:61D9		    retn
seg000:61D9 RTC_time_write_0 endp
seg000:61D9
seg000:61DA
seg000:61DA ; =============== S	U B R O	U T I N	E =======================================
seg000:61DA
seg000:61DA
seg000:61DA RTC_alarm_reset? proc near		    ; DATA XREF: seg000:call_tableo
seg000:61DA		    mov	    si,	offset RTC_table_alarm
seg000:61DD		    mov	    dl,	20h ; ' '
seg000:61DF		    mov	    bl,	7Fh ; ''
seg000:61E1		    call    cmos_write_4
seg000:61E4		    jb	    short loc_61F6
seg000:61E6		    mov	    bh,	dh
seg000:61E8		    mov	    bl,	0FEh ; 'þ'
seg000:61EA		    mov	    dx,	0A1h ; '¡'
seg000:61ED		    in	    al,	dx	    ; Interrupt	Controller #2, 8259A
seg000:61EE		    and	    al,	bl
seg000:61F0		    out	    dx,	al	    ; Interrupt	Controller #2, 8259A
seg000:61F1		    mov	    al,	ch
seg000:61F3		    mov	    dh,	bh
seg000:61F5		    clc
seg000:61F6
seg000:61F6 loc_61F6:				    ; CODE XREF: RTC_alarm_reset?+Aj
seg000:61F6		    mov	    dl,	0Bh
seg000:61F8		    retn
seg000:61F8 RTC_alarm_reset? endp
seg000:61F8
seg000:61F9
seg000:61F9 ; =============== S	U B R O	U T I N	E =======================================
seg000:61F9
seg000:61F9
seg000:61F9 RTC_alarm_OFF   proc near		    ; DATA XREF: seg000:call_tableo
seg000:61F9		    mov	    al,	0Bh
seg000:61FB		    mov	    ah,	al
seg000:61FD		    call    read_cmos
seg000:6200		    and	    al,	0DFh
seg000:6202		    xchg    ah,	al
seg000:6204		    call    write_cmos
seg000:6207		    mov	    ax,	103h
seg000:620A		    clc
seg000:620B		    retn
seg000:620B RTC_alarm_OFF   endp
seg000:620B
seg000:620C
seg000:620C ; =============== S	U B R O	U T I N	E =======================================
seg000:620C
seg000:620C
seg000:620C sub_620C	    proc near		    ; CODE XREF: cmos_read_4:loc_622Fp
seg000:620C					    ; cmos_read_4+1Cp ...
seg000:620C		    lodsw
seg000:620D		    call    read_cmos
seg000:6210		    cmp	    ah,	al
seg000:6212		    jnb	    short locret_6217
seg000:6214		    or	    bl,	1
seg000:6217
seg000:6217 locret_6217:			    ; CODE XREF: sub_620C+6j
seg000:6217		    retn
seg000:6217 sub_620C	    endp
seg000:6217
seg000:6218
seg000:6218 ; =============== S	U B R O	U T I N	E =======================================
seg000:6218
seg000:6218
seg000:6218 cmos_read_4	    proc near		    ; CODE XREF: RTC_time_read+3p
seg000:6218					    ; RTC_time_read_0+3p
seg000:6218		    push    ds
seg000:6219		    mov	    ax,	cs
seg000:621B		    mov	    ds,	ax
seg000:621D		    mov	    al,	0Eh
seg000:621F		    call    read_cmos
seg000:6222		    and	    al,	0C4h
seg000:6224		    mov	    bl,	al
seg000:6226		    call    test_RTC
seg000:6229		    jnb	    short loc_622F
seg000:622B		    mov	    bl,	1
seg000:622D		    jmp	    short loc_6243
seg000:622F ; ---------------------------------------------------------------------------
seg000:622F
seg000:622F loc_622F:				    ; CODE XREF: cmos_read_4+11j
seg000:622F		    call    sub_620C
seg000:6232		    mov	    ch,	al
seg000:6234		    call    sub_620C
seg000:6237		    mov	    cl,	al
seg000:6239		    call    sub_620C
seg000:623C		    mov	    dh,	al
seg000:623E		    call    sub_620C
seg000:6241		    mov	    dl,	al
seg000:6243
seg000:6243 loc_6243:				    ; CODE XREF: cmos_read_4+15j
seg000:6243		    sti
seg000:6244		    pop	    ds
seg000:6245		    retn
seg000:6245 cmos_read_4	    endp
seg000:6245
seg000:6246
seg000:6246 ; =============== S	U B R O	U T I N	E =======================================
seg000:6246
seg000:6246
seg000:6246 sub_6246	    proc near		    ; CODE XREF: cmos_write_4+26p
seg000:6246					    ; cmos_write_4+2Bp	...
seg000:6246		    lodsw
seg000:6247		    mov	    ah,	ch
seg000:6249		    jmp	    write_cmos
seg000:6249 sub_6246	    endp
seg000:6249
seg000:624C
seg000:624C ; =============== S	U B R O	U T I N	E =======================================
seg000:624C
seg000:624C
seg000:624C cmos_write_4    proc near		    ; CODE XREF: RTC_time_write+8p
seg000:624C					    ; RTC_time_write_0+3p ...
seg000:624C		    push    cx
seg000:624D		    push    ds
seg000:624E		    mov	    ax,	cs
seg000:6250		    mov	    ds,	ax
seg000:6252		    cmp	    si,	offset RTC_table_date
seg000:6256		    jz	    short loc_626D
seg000:6258		    mov	    al,	0Bh
seg000:625A		    mov	    ah,	al
seg000:625C		    call    read_cmos
seg000:625F		    cmp	    si,	offset RTC_table_time
seg000:6263		    jz	    short loc_6269
seg000:6265		    test    al,	dl
seg000:6267		    jnz	    short loc_6286
seg000:6269
seg000:6269 loc_6269:				    ; CODE XREF: cmos_write_4+17j
seg000:6269		    and	    bl,	al
seg000:626B		    or	    dl,	bl
seg000:626D
seg000:626D loc_626D:				    ; CODE XREF: cmos_write_4+Aj
seg000:626D		    call    test_RTC
seg000:6270		    jb	    short loc_6286
seg000:6272		    call    sub_6246
seg000:6275		    mov	    ch,	cl
seg000:6277		    call    sub_6246
seg000:627A		    mov	    ch,	dh
seg000:627C		    call    sub_6246
seg000:627F		    mov	    ch,	dl
seg000:6281		    call    sub_6246
seg000:6284		    jmp	    short loc_628C
seg000:6286 ; ---------------------------------------------------------------------------
seg000:6286
seg000:6286 loc_6286:				    ; CODE XREF: cmos_write_4+1Bj
seg000:6286					    ; cmos_write_4+24j
seg000:6286		    mov	    ax,	0
seg000:6289		    stc
seg000:628A		    jmp	    short loc_628D
seg000:628C ; ---------------------------------------------------------------------------
seg000:628C
seg000:628C loc_628C:				    ; CODE XREF: cmos_write_4+38j
seg000:628C		    clc
seg000:628D
seg000:628D loc_628D:				    ; CODE XREF: cmos_write_4+3Ej
seg000:628D		    sti
seg000:628E		    pop	    ds
seg000:628F		    pop	    cx
seg000:6290		    retn
seg000:6290 cmos_write_4    endp
seg000:6290
seg000:6290 ; ---------------------------------------------------------------------------
seg000:6291 RTC_table_time  db	  4		    ; DATA XREF: RTC_time_reado
seg000:6291					    ; RTC_time_writeo ...
seg000:6292		    db	23h ; #
seg000:6293		    db	  2
seg000:6294		    db	59h ; Y
seg000:6295		    db	  0
seg000:6296		    db	59h ; Y
seg000:6297		    db	0Bh
seg000:6298		    db 0FFh
seg000:6299		    db 0FFh
seg000:629A		    db	  0
seg000:629B RTC_table_date  db	32h ; 2		    ; DATA XREF: RTC_time_read_0o
seg000:629B					    ; RTC_time_write_0o ...
seg000:629C		    db 0FFh
seg000:629D		    db	  9
seg000:629E		    db	99h ; 
seg000:629F		    db	  8
seg000:62A0		    db	12h
seg000:62A1		    db	  7
seg000:62A2		    db	31h ; 1
seg000:62A3		    db 0FFh
seg000:62A4		    db	  0
seg000:62A5 RTC_table_alarm db	  5		    ; DATA XREF: RTC_alarm_reset?o
seg000:62A6		    db	23h ; #
seg000:62A7		    db	  3
seg000:62A8		    db	59h ; Y
seg000:62A9		    db	  1
seg000:62AA		    db	59h ; Y
seg000:62AB		    db	0Bh
seg000:62AC		    db 0FFh
seg000:62AD		    db 0FFh
seg000:62AE		    db	  0
seg000:62AF		    db	  0
seg000:62B0 ; ---------------------------------------------------------------------------
seg000:62B0 ; START OF FUNCTION	CHUNK FOR ColrWarm_Boot
seg000:62B0
seg000:62B0 Monitor:				    ; CODE XREF: ColrWarm_Boot+4FBj
seg000:62B0					    ; ColrWarm_Boot+59Aj ...
seg000:62B0		    cli
seg000:62B1		    cld
seg000:62B2		    mov	    ds,	word ptr cs:loc_C5+1
seg000:62B7		    assume es:nothing
seg000:62B7		    out	    0FBh, al	    ; AT 80287 data.
seg000:62B7					    ; 286 sends	opcodes	& operands and receives	results.
seg000:62B9		    pushf
seg000:62BA		    inc	    byte ptr ds:loc_BB+4
seg000:62BE		    popf
seg000:62BF		    mov	    byte ptr ds:loc_BB+4, 1
seg000:62C4		    push    cs
seg000:62C5		    pop	    ss
seg000:62C6		    mov	    sp,	338h
seg000:62C9		    call    erase_screen
seg000:62CC		    mov	    ax,	3
seg000:62CF		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:62CF					    ; AL = mode
seg000:62D1		    mov	    si,	offset aMfm300MonitorV ; "MFM-300 Monitor, Version 3.2C\r\nMemory S"...
seg000:62D4		    call    print_null_terminated
seg000:62D7		    mov	    ax,	word ptr ds:loc_11+2
seg000:62DA		    call    print_number
seg000:62DD		    mov	    ax,	cs:stru_40E.check
seg000:62E1		    test    ax,	ax
seg000:62E3		    jz	    short loc_62EE
seg000:62E5		    mov	    si,	offset aK   ; "K + "
seg000:62E8		    call    print_null_terminated
seg000:62EB		    call    print_number
seg000:62EE
seg000:62EE loc_62EE:				    ; CODE XREF: ColrWarm_Boot+5293j
seg000:62EE		    test    byte ptr cs:loc_CA+4, 4
seg000:62F4		    jz	    short loc_631B
seg000:62F6		    mov	    si,	offset aK   ; "K + "
seg000:62F9		    call    print_null_terminated
seg000:62FC		    mov	    dx,	0EF4h
seg000:62FF		    in	    al,	dx
seg000:6300		    and	    al,	0Fh
seg000:6302		    shr	    al,	1
seg000:6304		    mov	    dl,	3
seg000:6306		    mul	    dl
seg000:6308		    mov	    si,	offset a32  ; "32"
seg000:630B		    add	    si,	ax
seg000:630D		    call    print_null_terminated
seg000:6310		    mov	    si,	offset aKCache ; "K Cache\r\n"
seg000:6313		    call    print_null_terminated
seg000:6316		    mov	    si,	offset aEnter?ForHelp_ ; "Enter	\"?\" for help.\r\n"
seg000:6319		    jmp	    short loc_631E
seg000:631B ; ---------------------------------------------------------------------------
seg000:631B
seg000:631B loc_631B:				    ; CODE XREF: ColrWarm_Boot+52A4j
seg000:631B		    mov	    si,	offset aK_0 ; "K\r\n"
seg000:631E
seg000:631E loc_631E:				    ; CODE XREF: ColrWarm_Boot+52C9j
seg000:631E		    call    print_null_terminated
seg000:6321		    mov	    byte ptr cs:loc_89+1, 0
seg000:6327		    push    cs
seg000:6328		    pop	    es
seg000:6329		    mov	    di,	8Ch ; ''
seg000:632C		    mov	    cx,	1Ch
seg000:632F		    xor	    ax,	ax
seg000:6331		    rep	stosb
seg000:6333		    mov	    word ptr cs:loc_AA+1, ax
seg000:6337		    mov	    word ptr cs:loc_AD,	ax
seg000:633B		    mov	    word ptr cs:loc_203+1, cs
seg000:6340		    mov	    word ptr cs:loc_200+2, offset Monitor
seg000:6347		    mov	    word ptr cs:loc_9B+1, cs
seg000:634C		    mov	    word ptr cs:loc_A3+1, offset Monitor
seg000:6353		    mov	    ah,	0C0h ; 'À'
seg000:6355		    call    Keyboard_command
seg000:6358		    call    Keyboard_read
seg000:635B		    test    al,	80h
seg000:635D		    jnz	    short loc_6365
seg000:635F		    mov	    si,	offset aKeyboardLockAc ; "[Keyboard lock active: the keyboard is "...
seg000:6362		    call    print_null_terminated
seg000:6365
seg000:6365 loc_6365:				    ; CODE XREF: sub_2253:loc_229Dj
seg000:6365					    ; ColrWarm_Boot+530Dj ...
seg000:6365		    sti
seg000:6366		    cld
seg000:6367		    push    cs
seg000:6368		    pop	    ss
seg000:6369		    mov	    ds,	word ptr cs:loc_C5+1
seg000:636E		    mov	    sp,	338h
seg000:6371		    mov	    word ptr cs:cmos_sum_bad, 0	; default LPT port 378h
seg000:6378
seg000:6378 loc_6378:				    ; CODE XREF: ColrWarm_Boot+533Ej
seg000:6378					    ; ColrWarm_Boot+535Fj ...
seg000:6378		    mov	    si,	offset arrow ; "->"
seg000:637B		    call    print_null_terminated
seg000:637E		    call    sub_2429
seg000:6381		    mov	    si,	0
seg000:6384		    call    count_to_space
seg000:6387		    mov	    al,	cs:[si+21Ah]
seg000:638C		    cmp	    al,	0Dh
seg000:638E		    jz	    short loc_6378
seg000:6390		    inc	    si
seg000:6391		    call    convert_ASCII
seg000:6394		    mov	    bx,	0
seg000:6397		    mov	    cx,	11h
seg000:639A		    nop
seg000:639B
seg000:639B loc_639B:				    ; CODE XREF: ColrWarm_Boot+5356j
seg000:639B		    cmp	    al,	cs:cmd_menu_key[bx]
seg000:63A0		    jz	    short loc_63AA
seg000:63A2		    add	    bx,	3
seg000:63A5		    nop
seg000:63A6		    loop    loc_639B
seg000:63A8		    jmp	    short loc_63B1
seg000:63AA ; ---------------------------------------------------------------------------
seg000:63AA
seg000:63AA loc_63AA:				    ; CODE XREF: ColrWarm_Boot+5350j
seg000:63AA		    call    cs:cmd_menu_func[bx]
seg000:63AF		    jnb	    short loc_6378
seg000:63B1
seg000:63B1 loc_63B1:				    ; CODE XREF: ColrWarm_Boot+5358j
seg000:63B1		    mov	    ax,	si
seg000:63B3		    mov	    ah,	al
seg000:63B5		    add	    ah,	byte ptr cs:loc_26B
seg000:63BA		    dec	    ah
seg000:63BC		    call    print_spaces_AH
seg000:63BF		    mov	    si,	offset aInvalidCommand ; "^ Invalid Command!\r\n"
seg000:63C2		    call    print_null_terminated
seg000:63C5		    call    Beep_long
seg000:63C8		    jmp	    short loc_6378
seg000:63C8 ; END OF FUNCTION CHUNK FOR	ColrWarm_Boot
seg000:63CA
seg000:63CA ; =============== S	U B R O	U T I N	E =======================================
seg000:63CA
seg000:63CA
seg000:63CA cmd_boot	    proc near		    ; DATA XREF: seg000:6D8Ao
seg000:63CA		    push    ax
seg000:63CB		    push    di
seg000:63CC		    call    sub_241F
seg000:63CF		    call    convert_ASCII
seg000:63D2		    mov	    ah,	byte ptr cs:loc_54+3
seg000:63D7		    cmp	    al,	46h ; 'F'
seg000:63D9		    jnz	    short loc_63E0
seg000:63DB		    and	    ah,	7Fh
seg000:63DE		    jmp	    short loc_63E7
seg000:63E0 ; ---------------------------------------------------------------------------
seg000:63E0
seg000:63E0 loc_63E0:				    ; CODE XREF: cmd_boot+Fj
seg000:63E0		    cmp	    al,	57h ; 'W'
seg000:63E2		    jnz	    short loc_63EA
seg000:63E4		    or	    ah,	80h
seg000:63E7
seg000:63E7 loc_63E7:				    ; CODE XREF: cmd_boot+14j
seg000:63E7		    call    sub_241F
seg000:63EA
seg000:63EA loc_63EA:				    ; CODE XREF: cmd_boot+18j
seg000:63EA		    cmp	    al,	30h ; '0'
seg000:63EC		    jb	    short loc_63FC
seg000:63EE		    cmp	    al,	33h ; '3'
seg000:63F0		    ja	    short loc_63FC
seg000:63F2		    sub	    al,	30h ; '0'
seg000:63F4		    and	    ah,	0FCh
seg000:63F7		    or	    ah,	al
seg000:63F9		    call    sub_241F
seg000:63FC
seg000:63FC loc_63FC:				    ; CODE XREF: cmd_boot+22j
seg000:63FC					    ; cmd_boot+26j
seg000:63FC		    mov	    byte ptr cs:loc_54+3, ah
seg000:6401		    cmp	    al,	3Ah ; ':'
seg000:6403		    jnz	    short loc_641C
seg000:6405		    call    sub_241F
seg000:6408		    mov	    byte ptr cs:loc_54+4, al
seg000:640C		    cmp	    al,	0Dh
seg000:640E		    jz	    short loc_6421
seg000:6410		    cmp	    al,	31h ; '1'
seg000:6412		    jb	    short loc_6429
seg000:6414		    cmp	    al,	35h ; '5'
seg000:6416		    cmc
seg000:6417		    jb	    short loc_6429
seg000:6419		    call    sub_241F
seg000:641C
seg000:641C loc_641C:				    ; CODE XREF: cmd_boot+39j
seg000:641C		    cmp	    al,	0Dh
seg000:641E		    stc
seg000:641F		    jnz	    short loc_6429
seg000:6421
seg000:6421 loc_6421:				    ; CODE XREF: cmd_boot+44j
seg000:6421		    mov	    byte ptr cs:loc_4C+1, 0FFh
seg000:6427		    int	    19h		    ; DISK BOOT
seg000:6427					    ; causes reboot of disk system
seg000:6429
seg000:6429 loc_6429:				    ; CODE XREF: cmd_boot+48j
seg000:6429					    ; cmd_boot+4Dj ...
seg000:6429		    pop	    di
seg000:642A		    pop	    ax
seg000:642B		    retn
seg000:642B cmd_boot	    endp
seg000:642B
seg000:642C
seg000:642C ; =============== S	U B R O	U T I N	E =======================================
seg000:642C
seg000:642C
seg000:642C cmd_colorBar    proc near		    ; DATA XREF: seg000:6D8Do
seg000:642C		    push    ax
seg000:642D		    push    bx
seg000:642E		    push    cx
seg000:642F		    push    dx
seg000:6430		    push    si
seg000:6431		    push    word ptr ds:loc_48+1
seg000:6435		    mov	    al,	3
seg000:6437		    mov	    ah,	0
seg000:6439		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:6439					    ; AL = mode
seg000:643B		    mov	    bx,	0
seg000:643E		    mov	    dx,	0
seg000:6441
seg000:6441 loc_6441:				    ; CODE XREF: cmd_colorBar+29j
seg000:6441					    ; cmd_colorBar+34j
seg000:6441		    mov	    ah,	2
seg000:6443		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:6443					    ; DH,DL = row, column (0,0 = upper left)
seg000:6443					    ; BH = page	number
seg000:6445		    mov	    cx,	5
seg000:6448		    mov	    al,	0DBh ; 'Û'
seg000:644A		    mov	    ah,	9
seg000:644C		    int	    10h		    ; -	VIDEO -	WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION
seg000:644C					    ; AL = character, BH = display page
seg000:644C					    ; BL = attributes of character (alpha modes) or color (graphics modes)
seg000:644C					    ; CX = number of times to write character
seg000:644E		    add	    dx,	cx
seg000:6450		    inc	    bl
seg000:6452		    cmp	    bl,	10h
seg000:6455		    jb	    short loc_6441
seg000:6457		    mov	    bl,	0
seg000:6459		    mov	    dl,	bl
seg000:645B		    inc	    dh
seg000:645D		    cmp	    dh,	16h
seg000:6460		    jb	    short loc_6441
seg000:6462		    pop	    cx
seg000:6463		    call    sub_2253
seg000:6466		    cmp	    cl,	7
seg000:6469		    jz	    short loc_6487
seg000:646B		    cmp	    cl,	3
seg000:646E		    jz	    short loc_6487
seg000:6470		    cmp	    cl,	2
seg000:6473		    jz	    short loc_6487
seg000:6475		    mov	    si,	offset aPressAnyKeyToCon ; "\t\t\t    -	Press any key to continue -\r\n"
seg000:6478		    call    print_null_terminated
seg000:647B		    mov	    ah,	0
seg000:647D		    int	    16h		    ; KEYBOARD - READ CHAR FROM	BUFFER,	WAIT IF	EMPTY
seg000:647D					    ; Return: AH = scan	code, AL = character
seg000:647F		    mov	    al,	cl
seg000:6481		    mov	    ah,	0
seg000:6483		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:6483					    ; AL = mode
seg000:6485		    jmp	    short $+2
seg000:6487
seg000:6487 loc_6487:				    ; CODE XREF: cmd_colorBar+3Dj
seg000:6487					    ; cmd_colorBar+42j	...
seg000:6487		    clc
seg000:6488		    pop	    si
seg000:6489		    pop	    dx
seg000:648A		    pop	    cx
seg000:648B		    pop	    bx
seg000:648C		    pop	    ax
seg000:648D		    retn
seg000:648D cmd_colorBar    endp
seg000:648D
seg000:648E
seg000:648E ; =============== S	U B R O	U T I N	E =======================================
seg000:648E
seg000:648E
seg000:648E cmd_disp_memory proc near		    ; DATA XREF: seg000:6D90o
seg000:648E		    push    ax
seg000:648F		    push    cx
seg000:6490		    push    di
seg000:6491		    push    es
seg000:6492		    les	    di,	dword ptr cs:loc_AA+1
seg000:6497		    mov	    cx,	80h ; ''
seg000:649A		    call    sub_2403
seg000:649D		    jb	    short loc_64AC
seg000:649F		    mov	    ah,	0FFh
seg000:64A1		    call    sub_233C
seg000:64A4		    jb	    short loc_650D
seg000:64A6		    call    sub_2403
seg000:64A9		    cmc
seg000:64AA		    jb	    short loc_650D
seg000:64AC
seg000:64AC loc_64AC:				    ; CODE XREF: cmd_disp_memory+Fj
seg000:64AC					    ; cmd_disp_memory+7Cj
seg000:64AC		    mov	    ax,	di
seg000:64AE		    add	    ax,	cx
seg000:64B0		    mov	    word ptr cs:loc_AA+1, ax
seg000:64B4		    mov	    word ptr cs:loc_AD,	es
seg000:64B9		    push    di
seg000:64BA		    push    cx
seg000:64BB		    call    print_HEX_ESDI
seg000:64BE		    mov	    ah,	2
seg000:64C0		    call    print_spaces_AH
seg000:64C3
seg000:64C3 loc_64C3:				    ; CODE XREF: cmd_disp_memory+52j
seg000:64C3		    mov	    al,	es:[di]
seg000:64C6		    call    print_HEX_upper
seg000:64C9		    inc	    di
seg000:64CA		    dec	    cx
seg000:64CB		    jz	    short loc_64E2
seg000:64CD		    mov	    ax,	di
seg000:64CF		    and	    al,	0Fh
seg000:64D1		    cmp	    al,	8
seg000:64D3		    mov	    al,	20h ; ' '
seg000:64D5		    jnz	    short loc_64D9
seg000:64D7		    mov	    al,	2Dh ; '-'
seg000:64D9
seg000:64D9 loc_64D9:				    ; CODE XREF: cmd_disp_memory+47j
seg000:64D9		    call    printChar_VGABIOS
seg000:64DC		    test    di,	0Fh
seg000:64E0		    jnz	    short loc_64C3
seg000:64E2
seg000:64E2 loc_64E2:				    ; CODE XREF: cmd_disp_memory+3Dj
seg000:64E2		    mov	    ah,	3Dh ; '='
seg000:64E4		    call    sub_22B5
seg000:64E7		    pop	    cx
seg000:64E8		    pop	    di
seg000:64E9
seg000:64E9 loc_64E9:				    ; CODE XREF: cmd_disp_memory+75j
seg000:64E9		    mov	    al,	es:[di]
seg000:64EC		    and	    al,	7Fh
seg000:64EE		    cmp	    al,	20h ; ' '
seg000:64F0		    jb	    short loc_64F6
seg000:64F2		    cmp	    al,	7Fh ; ''
seg000:64F4		    jnz	    short loc_64F8
seg000:64F6
seg000:64F6 loc_64F6:				    ; CODE XREF: cmd_disp_memory+62j
seg000:64F6		    mov	    al,	2Eh ; '.'
seg000:64F8
seg000:64F8 loc_64F8:				    ; CODE XREF: cmd_disp_memory+66j
seg000:64F8		    call    printChar_VGABIOS
seg000:64FB		    inc	    di
seg000:64FC		    dec	    cx
seg000:64FD		    jz	    short loc_6505
seg000:64FF		    test    di,	0Fh
seg000:6503		    jnz	    short loc_64E9
seg000:6505
seg000:6505 loc_6505:				    ; CODE XREF: cmd_disp_memory+6Fj
seg000:6505		    call    sub_2253
seg000:6508		    jcxz    short loc_650C
seg000:650A		    jmp	    short loc_64AC
seg000:650C ; ---------------------------------------------------------------------------
seg000:650C
seg000:650C loc_650C:				    ; CODE XREF: cmd_disp_memory+7Aj
seg000:650C		    clc
seg000:650D
seg000:650D loc_650D:				    ; CODE XREF: cmd_disp_memory+16j
seg000:650D					    ; cmd_disp_memory+1Cj
seg000:650D		    pop	    es
seg000:650E		    pop	    di
seg000:650F		    pop	    cx
seg000:6510		    pop	    ax
seg000:6511		    retn
seg000:6511 cmd_disp_memory endp
seg000:6511
seg000:6512
seg000:6512 ; =============== S	U B R O	U T I N	E =======================================
seg000:6512
seg000:6512
seg000:6512 cmd_examine_mem proc near		    ; DATA XREF: seg000:6D93o
seg000:6512		    push    ax
seg000:6513		    push    cx
seg000:6514		    push    di
seg000:6515		    push    es
seg000:6516		    call    sub_2377
seg000:6519		    jb	    short loc_6521
seg000:651B		    call    sub_2403
seg000:651E		    cmc
seg000:651F		    jnb	    short loc_6524
seg000:6521
seg000:6521 loc_6521:				    ; CODE XREF: cmd_examine_mem+7j
seg000:6521		    jmp	    loc_65B4
seg000:6524 ; ---------------------------------------------------------------------------
seg000:6524
seg000:6524 loc_6524:				    ; CODE XREF: cmd_examine_mem+Dj
seg000:6524					    ; cmd_examine_mem+66j
seg000:6524		    call    print_HEX_ESDI
seg000:6527		    mov	    ah,	2
seg000:6529		    call    print_spaces_AH
seg000:652C
seg000:652C loc_652C:				    ; CODE XREF: cmd_examine_mem+52j
seg000:652C		    mov	    al,	es:[di]
seg000:652F		    call    print_HEX_upper
seg000:6532		    mov	    al,	2Eh ; '.'
seg000:6534		    call    printChar_VGABIOS
seg000:6537		    mov	    cx,	0
seg000:653A
seg000:653A loc_653A:				    ; CODE XREF: cmd_examine_mem+6Fj
seg000:653A					    ; cmd_examine_mem+7Ej ...
seg000:653A		    call    keyb_menu
seg000:653D		    cmp	    al,	0Dh
seg000:653F		    jnz	    short loc_654D
seg000:6541		    call    sub_2253
seg000:6544		    test    cl,	cl
seg000:6546		    jz	    short loc_65B4
seg000:6548		    mov	    es:[di], ch
seg000:654B		    jmp	    short loc_65B4
seg000:654D ; ---------------------------------------------------------------------------
seg000:654D
seg000:654D loc_654D:				    ; CODE XREF: cmd_examine_mem+2Dj
seg000:654D		    cmp	    al,	20h ; ' '
seg000:654F		    jnz	    short loc_6566
seg000:6551		    test    cl,	cl
seg000:6553		    jz	    short loc_6558
seg000:6555		    mov	    es:[di], ch
seg000:6558
seg000:6558 loc_6558:				    ; CODE XREF: cmd_examine_mem+41j
seg000:6558		    inc	    di
seg000:6559		    test    di,	7
seg000:655D		    jz	    short loc_6575
seg000:655F		    mov	    al,	9
seg000:6561		    call    printChar_VGABIOS
seg000:6564		    jmp	    short loc_652C
seg000:6566 ; ---------------------------------------------------------------------------
seg000:6566
seg000:6566 loc_6566:				    ; CODE XREF: cmd_examine_mem+3Dj
seg000:6566		    cmp	    al,	2Dh ; '-'
seg000:6568		    jnz	    short loc_657A
seg000:656A		    call    printChar_VGABIOS
seg000:656D		    test    cl,	cl
seg000:656F		    jz	    short loc_6574
seg000:6571		    mov	    es:[di], ch
seg000:6574
seg000:6574 loc_6574:				    ; CODE XREF: cmd_examine_mem+5Dj
seg000:6574		    dec	    di
seg000:6575
seg000:6575 loc_6575:				    ; CODE XREF: cmd_examine_mem+4Bj
seg000:6575		    call    sub_2253
seg000:6578		    jmp	    short loc_6524
seg000:657A ; ---------------------------------------------------------------------------
seg000:657A
seg000:657A loc_657A:				    ; CODE XREF: cmd_examine_mem+56j
seg000:657A		    cmp	    al,	8
seg000:657C		    jnz	    short loc_6592
seg000:657E		    cmp	    cl,	0
seg000:6581		    jz	    short loc_653A
seg000:6583		    dec	    cl
seg000:6585		    call    sub_224A
seg000:6588		    shr	    ch,	1
seg000:658A		    shr	    ch,	1
seg000:658C		    shr	    ch,	1
seg000:658E		    shr	    ch,	1
seg000:6590		    jmp	    short loc_653A
seg000:6592 ; ---------------------------------------------------------------------------
seg000:6592
seg000:6592 loc_6592:				    ; CODE XREF: cmd_examine_mem+6Aj
seg000:6592		    cmp	    cl,	2
seg000:6595		    jge	    short loc_653A
seg000:6597		    mov	    ah,	al
seg000:6599		    call    convert_ASCII
seg000:659C		    call    sub_247B
seg000:659F		    jb	    short loc_653A
seg000:65A1		    shl	    ch,	1
seg000:65A3		    shl	    ch,	1
seg000:65A5		    shl	    ch,	1
seg000:65A7		    shl	    ch,	1
seg000:65A9		    or	    ch,	al
seg000:65AB		    inc	    cl
seg000:65AD		    mov	    al,	ah
seg000:65AF		    call    printChar_VGABIOS
seg000:65B2		    jmp	    short loc_653A
seg000:65B4 ; ---------------------------------------------------------------------------
seg000:65B4
seg000:65B4 loc_65B4:				    ; CODE XREF: cmd_examine_mem:loc_6521j
seg000:65B4					    ; cmd_examine_mem+34j ...
seg000:65B4		    pop	    es
seg000:65B5		    pop	    di
seg000:65B6		    pop	    cx
seg000:65B7		    pop	    ax
seg000:65B8		    retn
seg000:65B8 cmd_examine_mem endp
seg000:65B8
seg000:65B9
seg000:65B9 ; =============== S	U B R O	U T I N	E =======================================
seg000:65B9
seg000:65B9
seg000:65B9 cmd_fill_mem    proc near		    ; DATA XREF: seg000:6D96o
seg000:65B9		    push    ax
seg000:65BA		    push    bx
seg000:65BB		    push    cx
seg000:65BC		    push    dx
seg000:65BD		    push    di
seg000:65BE		    push    es
seg000:65BF		    mov	    ah,	0
seg000:65C1		    call    sub_233C
seg000:65C4		    jb	    short loc_65E6
seg000:65C6		    push    di
seg000:65C7		    mov	    di,	338h
seg000:65CA		    call    sub_22FE
seg000:65CD		    pop	    di
seg000:65CE		    jb	    short loc_65E6
seg000:65D0		    mov	    dx,	bx
seg000:65D2		    mov	    bx,	0
seg000:65D5
seg000:65D5 loc_65D5:				    ; CODE XREF: cmd_fill_mem:loc_65E3j
seg000:65D5		    mov	    al,	cs:[bx+338h]
seg000:65DA		    inc	    bx
seg000:65DB		    stosb
seg000:65DC		    cmp	    bx,	dx
seg000:65DE		    jnz	    short loc_65E3
seg000:65E0		    mov	    bx,	0
seg000:65E3
seg000:65E3 loc_65E3:				    ; CODE XREF: cmd_fill_mem+25j
seg000:65E3		    loop    loc_65D5
seg000:65E5		    clc
seg000:65E6
seg000:65E6 loc_65E6:				    ; CODE XREF: cmd_fill_mem+Bj
seg000:65E6					    ; cmd_fill_mem+15j
seg000:65E6		    pop	    es
seg000:65E7		    pop	    di
seg000:65E8		    pop	    dx
seg000:65E9		    pop	    cx
seg000:65EA		    pop	    bx
seg000:65EB		    pop	    ax
seg000:65EC		    retn
seg000:65EC cmd_fill_mem    endp
seg000:65EC
seg000:65ED
seg000:65ED ; =============== S	U B R O	U T I N	E =======================================
seg000:65ED
seg000:65ED
seg000:65ED cmd_execute	    proc far		    ; DATA XREF: seg000:6D99o
seg000:65ED		    push    ax
seg000:65EE		    push    bx
seg000:65EF		    push    di
seg000:65F0		    push    es
seg000:65F1		    call    sub_2403
seg000:65F4		    jb	    short loc_6613
seg000:65F6		    mov	    es,	word ptr cs:loc_9B+1
seg000:65FB		    cmp	    byte ptr cs:[si+21Ah], 3Dh ; '='
seg000:6601		    jnz	    short loc_6613
seg000:6603		    inc	    si
seg000:6604		    call    sub_2377
seg000:6607		    jb	    short loc_6670
seg000:6609		    mov	    word ptr cs:loc_9B+1, es
seg000:660E		    mov	    word ptr cs:loc_A3+1, di
seg000:6613
seg000:6613 loc_6613:				    ; CODE XREF: cmd_execute+7j
seg000:6613					    ; cmd_execute+14j
seg000:6613		    mov	    bx,	0
seg000:6616		    mov	    byte ptr cs:loc_89+1, 0
seg000:661C
seg000:661C loc_661C:				    ; CODE XREF: cmd_execute+79j
seg000:661C		    call    sub_2403
seg000:661F		    jb	    short loc_6668
seg000:6621		    cmp	    byte ptr cs:loc_89+1, 8
seg000:6627		    cmc
seg000:6628		    jb	    short loc_6670
seg000:662A		    call    sub_2377
seg000:662D		    jb	    short loc_6670
seg000:662F		    mov	    word ptr cs:[bx+5Ah], es
seg000:6634		    mov	    cs:[bx+5Ch], di
seg000:6639		    mov	    al,	0CCh ; 'Ì'
seg000:663B		    cmp	    byte ptr cs:loc_8B,	3
seg000:6641		    pushf
seg000:6642		    jz	    short loc_6646
seg000:6644		    mov	    al,	0CDh ; 'Í'
seg000:6646
seg000:6646 loc_6646:				    ; CODE XREF: cmd_execute+55j
seg000:6646		    xchg    al,	es:[di]
seg000:6649		    mov	    cs:[bx+5Eh], al
seg000:664E		    popf
seg000:664F		    jz	    short loc_665E
seg000:6651		    mov	    al,	byte ptr cs:loc_8B
seg000:6655		    xchg    al,	es:[di+1]
seg000:6659		    mov	    cs:[bx+5Fh], al
seg000:665E
seg000:665E loc_665E:				    ; CODE XREF: cmd_execute+62j
seg000:665E		    add	    bx,	6
seg000:6661		    inc	    byte ptr cs:loc_89+1
seg000:6666		    jmp	    short loc_661C
seg000:6668 ; ---------------------------------------------------------------------------
seg000:6668
seg000:6668 loc_6668:				    ; CODE XREF: cmd_execute+32j
seg000:6668		    call    sub_6BB3
seg000:666B		    mov	    ah,	0
seg000:666D		    jmp	    short loc_6675
seg000:666F ; ---------------------------------------------------------------------------
seg000:666F		    nop
seg000:6670
seg000:6670 loc_6670:				    ; CODE XREF: cmd_execute+1Aj
seg000:6670					    ; cmd_execute+3Bj ...
seg000:6670		    pop	    es
seg000:6671		    pop	    di
seg000:6672		    pop	    bx
seg000:6673		    pop	    ax
seg000:6674		    retn
seg000:6674 cmd_execute	    endp
seg000:6674
seg000:6675 ; ---------------------------------------------------------------------------
seg000:6675 ; START OF FUNCTION	CHUNK FOR cmd_trace
seg000:6675
seg000:6675 loc_6675:				    ; CODE XREF: cmd_execute+80j
seg000:6675					    ; cmd_trace+A2j ...
seg000:6675		    cli
seg000:6676		    mov	    byte ptr cs:loc_AA,	0FFh
seg000:667C		    and	    word ptr cs:loc_A5+1, 0FEFFh
seg000:6683		    test    ah,	ah
seg000:6685		    mov	    ax,	word ptr cs:loc_A5+1
seg000:6689		    jnz	    short loc_668E
seg000:668B		    jmp	    loc_6715
seg000:668E ; ---------------------------------------------------------------------------
seg000:668E
seg000:668E loc_668E:				    ; CODE XREF: cmd_trace-3B7j
seg000:668E		    push    ax
seg000:668F		    mov	    es,	word ptr cs:loc_9B+1
seg000:6694		    mov	    si,	word ptr cs:loc_A3+1
seg000:6699		    mov	    al,	es:[si]
seg000:669C		    push    cs
seg000:669D		    pop	    es
seg000:669E		    mov	    di,	offset word_6D83
seg000:66A1		    mov	    cx,	4
seg000:66A4		    repne scasb
seg000:66A6		    jz	    short loc_66AE
seg000:66A8		    mov	    byte ptr cs:loc_AA,	0
seg000:66AE
seg000:66AE loc_66AE:				    ; CODE XREF: cmd_trace-39Aj
seg000:66AE		    cmp	    al,	0CDh ; 'Í'
seg000:66B0		    jnz	    short loc_66E9
seg000:66B2		    mov	    ss,	word ptr cs:loc_9F+1
seg000:66B7		    mov	    sp,	word ptr cs:loc_99+1
seg000:66BC		    add	    word ptr cs:loc_A3+1, 2
seg000:66C2		    push    word ptr cs:loc_A5+1
seg000:66C7		    push    word ptr cs:loc_9B+1
seg000:66CC		    push    word ptr cs:loc_A3+1
seg000:66D1		    mov	    es,	word ptr cs:loc_9B+1
seg000:66D6		    mov	    al,	es:[si+1]
seg000:66DA		    call    table_lookup_ptr
seg000:66DD		    mov	    word ptr cs:loc_9B+1, ds
seg000:66E2		    mov	    word ptr cs:loc_A3+1, si
seg000:66E7		    jmp	    short loc_6701
seg000:66E9 ; ---------------------------------------------------------------------------
seg000:66E9
seg000:66E9 loc_66E9:				    ; CODE XREF: cmd_trace-390j
seg000:66E9		    cmp	    al,	9Ch ; ''
seg000:66EB		    jnz	    short loc_670E
seg000:66ED		    mov	    ss,	word ptr cs:loc_9F+1
seg000:66F2		    mov	    sp,	word ptr cs:loc_99+1
seg000:66F7		    push    word ptr cs:loc_A5+1
seg000:66FC		    inc	    word ptr cs:loc_A3+1
seg000:6701
seg000:6701 loc_6701:				    ; CODE XREF: cmd_trace-359j
seg000:6701		    mov	    word ptr cs:loc_9F+1, ss
seg000:6706		    mov	    word ptr cs:loc_99+1, sp
seg000:670B		    jmp	    loc_6D23
seg000:670E ; ---------------------------------------------------------------------------
seg000:670E
seg000:670E loc_670E:				    ; CODE XREF: cmd_trace-355j
seg000:670E		    pop	    ax
seg000:670F		    or	    ax,	100h
seg000:6712		    and	    ax,	0FDFFh
seg000:6715
seg000:6715 loc_6715:				    ; CODE XREF: cmd_trace-3B5j
seg000:6715		    mov	    bx,	word ptr cs:loc_8D+1
seg000:671A		    mov	    cx,	word ptr cs:loc_8F+1
seg000:671F		    mov	    dx,	word ptr cs:loc_91+1
seg000:6724		    mov	    si,	word ptr cs:loc_93+1
seg000:6729		    mov	    di,	word ptr cs:loc_95+1
seg000:672E		    mov	    bp,	word ptr cs:loc_97+1
seg000:6733		    mov	    sp,	word ptr cs:loc_99+1
seg000:6738		    mov	    ss,	word ptr cs:loc_9F+1
seg000:673D		    mov	    es,	word ptr cs:loc_A1+1
seg000:6742		    push    ax
seg000:6743		    push    word ptr cs:loc_9B+1
seg000:6748		    push    word ptr cs:loc_A3+1
seg000:674D		    mov	    ax,	word ptr cs:loc_8B+1
seg000:6751		    mov	    ds,	word ptr cs:loc_C5+1
seg000:6756		    pushf
seg000:6757		    dec	    byte ptr ds:loc_BB+4
seg000:675B		    jnz	    short loc_675F
seg000:675D		    out	    0F9h, al	    ; AT 80287 data.
seg000:675D					    ; 286 sends	opcodes	& operands and receives	results.
seg000:675F
seg000:675F loc_675F:				    ; CODE XREF: cmd_trace-2E5j
seg000:675F		    popf
seg000:6760		    mov	    ds,	word ptr cs:loc_9D+1
seg000:6765		    iret
seg000:6765 ; END OF FUNCTION CHUNK FOR	cmd_trace
seg000:6766
seg000:6766 ; =============== S	U B R O	U T I N	E =======================================
seg000:6766
seg000:6766
seg000:6766 cmd_help	    proc near		    ; CODE XREF: ColrWarm_Boot:loc_63AAp
seg000:6766					    ; DATA XREF: seg000:cmd_menu_funco
seg000:6766		    push    si
seg000:6767		    mov	    si,	offset text_help ; "\t\t- MFM-300 Command Summary -\r\n\r\nCMD:\tE"...
seg000:676A		    call    print_null_terminated
seg000:676D		    pop	    si
seg000:676E		    retn
seg000:676E cmd_help	    endp
seg000:676E
seg000:676F
seg000:676F ; =============== S	U B R O	U T I N	E =======================================
seg000:676F
seg000:676F
seg000:676F cmd_hex_math    proc near		    ; DATA XREF: seg000:6D9Co
seg000:676F		    push    ax
seg000:6770		    push    cx
seg000:6771		    push    dx
seg000:6772		    call    convert_hex
seg000:6775		    jb	    short loc_67A2
seg000:6777		    mov	    cx,	ax
seg000:6779		    call    convert_hex
seg000:677C		    jb	    short loc_67A2
seg000:677E		    call    sub_2403
seg000:6781		    cmc
seg000:6782		    jb	    short loc_67A2
seg000:6784		    mov	    dx,	ax
seg000:6786		    mov	    si,	offset aSum ; "Sum: "
seg000:6789		    call    print_null_terminated
seg000:678C		    add	    ax,	cx
seg000:678E		    call    print_HEX
seg000:6791		    mov	    si,	offset aDiff ; "  Diff:	"
seg000:6794		    call    print_null_terminated
seg000:6797		    mov	    ax,	cx
seg000:6799		    sub	    ax,	dx
seg000:679B		    call    print_HEX
seg000:679E		    call    sub_2253
seg000:67A1		    clc
seg000:67A2
seg000:67A2 loc_67A2:				    ; CODE XREF: cmd_hex_math+6j
seg000:67A2					    ; cmd_hex_math+Dj ...
seg000:67A2		    pop	    dx
seg000:67A3		    pop	    cx
seg000:67A4		    pop	    ax
seg000:67A5		    retn
seg000:67A5 cmd_hex_math    endp
seg000:67A5
seg000:67A6
seg000:67A6 ; =============== S	U B R O	U T I N	E =======================================
seg000:67A6
seg000:67A6
seg000:67A6 cmd_port_in	    proc near		    ; DATA XREF: seg000:6D9Fo
seg000:67A6		    push    ax
seg000:67A7		    push    dx
seg000:67A8		    call    convert_hex
seg000:67AB		    jb	    short loc_67BD
seg000:67AD		    call    sub_2403
seg000:67B0		    cmc
seg000:67B1		    jb	    short loc_67BD
seg000:67B3		    mov	    dx,	ax
seg000:67B5		    in	    al,	dx
seg000:67B6		    call    print_HEX_upper
seg000:67B9		    call    sub_2253
seg000:67BC		    clc
seg000:67BD
seg000:67BD loc_67BD:				    ; CODE XREF: cmd_port_in+5j
seg000:67BD					    ; cmd_port_in+Bj
seg000:67BD		    pop	    dx
seg000:67BE		    pop	    ax
seg000:67BF		    retn
seg000:67BF cmd_port_in	    endp
seg000:67BF
seg000:67C0
seg000:67C0 ; =============== S	U B R O	U T I N	E =======================================
seg000:67C0
seg000:67C0
seg000:67C0 cmd_mem_move    proc near		    ; DATA XREF: seg000:6DA2o
seg000:67C0		    push    ax
seg000:67C1		    push    bx
seg000:67C2		    push    cx
seg000:67C3		    push    si
seg000:67C4		    push    di
seg000:67C5		    push    ds
seg000:67C6		    push    es
seg000:67C7		    mov	    ah,	0
seg000:67C9		    call    sub_233C
seg000:67CC		    jb	    short loc_6803
seg000:67CE		    push    es
seg000:67CF		    push    di
seg000:67D0		    call    sub_2377
seg000:67D3		    pop	    ax
seg000:67D4		    pop	    ds
seg000:67D5		    jb	    short loc_6803
seg000:67D7		    mov	    si,	ax
seg000:67D9		    dec	    cx
seg000:67DA		    mov	    ax,	ds
seg000:67DC		    mov	    bx,	es
seg000:67DE		    cmp	    ax,	bx
seg000:67E0		    jnz	    short loc_67F4
seg000:67E2		    mov	    ax,	si
seg000:67E4		    add	    ax,	cx
seg000:67E6		    cmp	    si,	di
seg000:67E8		    jnb	    short loc_67F0
seg000:67EA		    cmp	    ax,	di
seg000:67EC		    ja	    short loc_67F9
seg000:67EE		    jmp	    short loc_67F4
seg000:67F0 ; ---------------------------------------------------------------------------
seg000:67F0
seg000:67F0 loc_67F0:				    ; CODE XREF: cmd_mem_move+28j
seg000:67F0		    cmp	    ax,	di
seg000:67F2		    jbe	    short loc_67F9
seg000:67F4
seg000:67F4 loc_67F4:				    ; CODE XREF: cmd_mem_move+20j
seg000:67F4					    ; cmd_mem_move+2Ej
seg000:67F4		    rep	movsb
seg000:67F6		    movsb
seg000:67F7		    jmp	    short loc_6801
seg000:67F9 ; ---------------------------------------------------------------------------
seg000:67F9
seg000:67F9 loc_67F9:				    ; CODE XREF: cmd_mem_move+2Cj
seg000:67F9					    ; cmd_mem_move+32j
seg000:67F9		    add	    si,	cx
seg000:67FB		    add	    di,	cx
seg000:67FD		    std
seg000:67FE		    rep	movsb
seg000:6800		    movsb
seg000:6801
seg000:6801 loc_6801:				    ; CODE XREF: cmd_mem_move+37j
seg000:6801		    cld
seg000:6802		    clc
seg000:6803
seg000:6803 loc_6803:				    ; CODE XREF: cmd_mem_move+Cj
seg000:6803					    ; cmd_mem_move+15j
seg000:6803		    pop	    es
seg000:6804		    pop	    ds
seg000:6805		    pop	    di
seg000:6806		    pop	    si
seg000:6807		    pop	    cx
seg000:6808		    pop	    bx
seg000:6809		    pop	    ax
seg000:680A		    retn
seg000:680A cmd_mem_move    endp
seg000:680A
seg000:680B
seg000:680B ; =============== S	U B R O	U T I N	E =======================================
seg000:680B
seg000:680B
seg000:680B cmd_port_out    proc near		    ; DATA XREF: seg000:6DA5o
seg000:680B		    push    ax
seg000:680C		    push    dx
seg000:680D		    call    convert_hex
seg000:6810		    jb	    short loc_6820
seg000:6812		    mov	    dx,	ax
seg000:6814		    call    convert_hex
seg000:6817		    jb	    short loc_6820
seg000:6819		    call    sub_2403
seg000:681C		    cmc
seg000:681D		    jb	    short loc_6820
seg000:681F		    out	    dx,	al
seg000:6820
seg000:6820 loc_6820:				    ; CODE XREF: cmd_port_out+5j
seg000:6820					    ; cmd_port_out+Cj ...
seg000:6820		    pop	    dx
seg000:6821		    pop	    ax
seg000:6822		    retn
seg000:6822 cmd_port_out    endp
seg000:6822
seg000:6823
seg000:6823 ; =============== S	U B R O	U T I N	E =======================================
seg000:6823
seg000:6823
seg000:6823 cmd_display_regs proc near		    ; DATA XREF: seg000:6DA8o
seg000:6823		    push    ax
seg000:6824		    push    bx
seg000:6825		    call    sub_2403
seg000:6828		    jb	    short loc_6860
seg000:682A		    call    sub_6881
seg000:682D		    jb	    short loc_687E
seg000:682F		    call    sub_2403
seg000:6832		    cmc
seg000:6833		    jb	    short loc_687E
seg000:6835		    mov	    ah,	3Ah ; ':'
seg000:6837		    call    sub_68E2
seg000:683A		    mov	    al,	2Dh ; '-'
seg000:683C		    call    printChar_VGABIOS
seg000:683F		    call    sub_2429
seg000:6842		    mov	    si,	0
seg000:6845		    call    sub_2403
seg000:6848		    jb	    short loc_687D
seg000:684A		    cmp	    bx,	1Ah
seg000:684D		    jnz	    short loc_6854
seg000:684F		    call    sub_6944
seg000:6852		    jmp	    short loc_687E
seg000:6854 ; ---------------------------------------------------------------------------
seg000:6854
seg000:6854 loc_6854:				    ; CODE XREF: cmd_display_regs+2Aj
seg000:6854		    call    convert_hex
seg000:6857		    jb	    short loc_687E
seg000:6859		    mov	    cs:[bx+8Ch], ax
seg000:685E		    jmp	    short loc_687D
seg000:6860 ; ---------------------------------------------------------------------------
seg000:6860
seg000:6860 loc_6860:				    ; CODE XREF: cmd_display_regs+5j
seg000:6860		    call    sub_68BB
seg000:6863		    mov	    es,	word ptr cs:loc_9B+1
seg000:6868		    mov	    di,	word ptr cs:loc_A3+1
seg000:686D		    mov	    word ptr cs:loc_203+1, es
seg000:6872		    mov	    word ptr cs:loc_200+2, di
seg000:6877		    mov	    cx,	1
seg000:687A		    call    print_addembler?
seg000:687D
seg000:687D loc_687D:				    ; CODE XREF: cmd_display_regs+25j
seg000:687D					    ; cmd_display_regs+3Bj
seg000:687D		    clc
seg000:687E
seg000:687E loc_687E:				    ; CODE XREF: cmd_display_regs+Aj
seg000:687E					    ; cmd_display_regs+10j ...
seg000:687E		    pop	    bx
seg000:687F		    pop	    ax
seg000:6880		    retn
seg000:6880 cmd_display_regs endp
seg000:6880
seg000:6881
seg000:6881 ; =============== S	U B R O	U T I N	E =======================================
seg000:6881
seg000:6881
seg000:6881 sub_6881	    proc near		    ; CODE XREF: convert_hex+7p
seg000:6881					    ; cmd_display_regs+7p
seg000:6881		    push    ax
seg000:6882		    push    cx
seg000:6883		    mov	    ax,	cs:[si+21Ah]
seg000:6888		    call    convert_ASCII
seg000:688B		    xchg    ah,	al
seg000:688D		    call    convert_ASCII
seg000:6890		    mov	    cx,	0Fh
seg000:6893		    mov	    bx,	0
seg000:6896
seg000:6896 loc_6896:				    ; CODE XREF: sub_6881+26j
seg000:6896		    cmp	    ah,	cs:ascii_table_?[bx]
seg000:689B		    jnz	    short loc_68A4
seg000:689D		    cmp	    al,	cs:ascii_table_2?[bx]
seg000:68A2		    jz	    short loc_68AC
seg000:68A4
seg000:68A4 loc_68A4:				    ; CODE XREF: sub_6881+1Aj
seg000:68A4		    add	    bx,	2
seg000:68A7		    loop    loc_6896
seg000:68A9		    stc
seg000:68AA		    jmp	    short loc_68B8
seg000:68AC ; ---------------------------------------------------------------------------
seg000:68AC
seg000:68AC loc_68AC:				    ; CODE XREF: sub_6881+21j
seg000:68AC		    cmp	    bx,	1Ah
seg000:68AF		    jbe	    short loc_68B4
seg000:68B1		    mov	    bx,	18h
seg000:68B4
seg000:68B4 loc_68B4:				    ; CODE XREF: sub_6881+2Ej
seg000:68B4		    add	    si,	2
seg000:68B7		    clc
seg000:68B8
seg000:68B8 loc_68B8:				    ; CODE XREF: sub_6881+29j
seg000:68B8		    pop	    cx
seg000:68B9		    pop	    ax
seg000:68BA		    retn
seg000:68BA sub_6881	    endp
seg000:68BA
seg000:68BB
seg000:68BB ; =============== S	U B R O	U T I N	E =======================================
seg000:68BB
seg000:68BB
seg000:68BB sub_68BB	    proc near		    ; CODE XREF: cmd_display_regs:loc_6860p
seg000:68BB					    ; sub_6BD0+BFp ...
seg000:68BB		    push    ax
seg000:68BC		    push    bx
seg000:68BD		    push    cx
seg000:68BE		    mov	    cx,	0Eh
seg000:68C1		    mov	    bx,	0
seg000:68C4
seg000:68C4 loc_68C4:				    ; CODE XREF: sub_68BB+1Ej
seg000:68C4		    mov	    ah,	3Dh ; '='
seg000:68C6		    call    sub_68E2
seg000:68C9		    mov	    al,	20h ; ' '
seg000:68CB		    call    printChar_VGABIOS
seg000:68CE		    cmp	    cx,	7
seg000:68D1		    jnz	    short loc_68D6
seg000:68D3		    call    sub_2253
seg000:68D6
seg000:68D6 loc_68D6:				    ; CODE XREF: sub_68BB+16j
seg000:68D6		    add	    bx,	2
seg000:68D9		    loop    loc_68C4
seg000:68DB		    call    sub_2253
seg000:68DE		    pop	    cx
seg000:68DF		    pop	    bx
seg000:68E0		    pop	    ax
seg000:68E1		    retn
seg000:68E1 sub_68BB	    endp
seg000:68E1
seg000:68E2
seg000:68E2 ; =============== S	U B R O	U T I N	E =======================================
seg000:68E2
seg000:68E2
seg000:68E2 sub_68E2	    proc near		    ; CODE XREF: cmd_display_regs+14p
seg000:68E2					    ; sub_68BB+Bp
seg000:68E2		    push    ax
seg000:68E3		    push    bx
seg000:68E4		    push    cx
seg000:68E5		    push    dx
seg000:68E6		    mov	    al,	cs:ascii_table_?[bx]
seg000:68EB		    call    printChar_VGABIOS
seg000:68EE		    mov	    al,	cs:ascii_table_2?[bx]
seg000:68F3		    call    printChar_VGABIOS
seg000:68F6		    mov	    al,	ah
seg000:68F8		    call    printChar_VGABIOS
seg000:68FB		    mov	    dx,	cs:[bx+8Ch]
seg000:6900		    cmp	    bx,	1Ah
seg000:6903		    jnz	    short loc_6937
seg000:6905		    mov	    cx,	10h
seg000:6908		    mov	    bx,	0
seg000:690B
seg000:690B loc_690B:				    ; CODE XREF: sub_68E2+51j
seg000:690B		    push    bx
seg000:690C		    shr	    dx,	1
seg000:690E		    jnb	    short loc_6913
seg000:6910		    add	    bx,	2
seg000:6913
seg000:6913 loc_6913:				    ; CODE XREF: sub_68E2+2Cj
seg000:6913		    cmp	    word ptr cs:aCnyc[bx], 0 ; "CNYC"
seg000:6919		    jz	    short loc_692F
seg000:691B		    mov	    al,	20h ; ' '
seg000:691D		    call    printChar_VGABIOS
seg000:6920		    mov	    ax,	word ptr cs:aCnyc[bx] ;	"CNYC"
seg000:6925		    xchg    al,	ah
seg000:6927		    call    printChar_VGABIOS
seg000:692A		    mov	    al,	ah
seg000:692C		    call    printChar_VGABIOS
seg000:692F
seg000:692F loc_692F:				    ; CODE XREF: sub_68E2+37j
seg000:692F		    pop	    bx
seg000:6930		    add	    bx,	4
seg000:6933		    loop    loc_690B
seg000:6935		    jmp	    short loc_693F
seg000:6937 ; ---------------------------------------------------------------------------
seg000:6937
seg000:6937 loc_6937:				    ; CODE XREF: sub_68E2+21j
seg000:6937		    mov	    ax,	cs:[bx+8Ch]
seg000:693C		    call    print_HEX
seg000:693F
seg000:693F loc_693F:				    ; CODE XREF: sub_68E2+53j
seg000:693F		    pop	    dx
seg000:6940		    pop	    cx
seg000:6941		    pop	    bx
seg000:6942		    pop	    ax
seg000:6943		    retn
seg000:6943 sub_68E2	    endp
seg000:6943
seg000:6944
seg000:6944 ; =============== S	U B R O	U T I N	E =======================================
seg000:6944
seg000:6944
seg000:6944 sub_6944	    proc near		    ; CODE XREF: cmd_display_regs+2Cp
seg000:6944		    push    ax
seg000:6945		    push    bx
seg000:6946		    push    cx
seg000:6947		    push    dx
seg000:6948
seg000:6948 loc_6948:				    ; CODE XREF: sub_6944+4Cj
seg000:6948		    mov	    cx,	1
seg000:694B		    mov	    dl,	0
seg000:694D		    mov	    bx,	0
seg000:6950		    mov	    ax,	cs:[si+21Ah]
seg000:6955		    call    convert_ASCII
seg000:6958		    xchg    ah,	al
seg000:695A		    call    convert_ASCII
seg000:695D
seg000:695D loc_695D:				    ; CODE XREF: sub_6944+29j
seg000:695D					    ; sub_6944+2Dj
seg000:695D		    call    count_to_space
seg000:6960		    cmp	    ax,	word ptr cs:aCnyc[bx] ;	"CNYC"
seg000:6965		    jz	    short loc_6975
seg000:6967		    add	    bx,	2
seg000:696A		    xor	    dl,	1
seg000:696D		    jnz	    short loc_695D
seg000:696F		    shl	    cx,	1
seg000:6971		    jnb	    short loc_695D
seg000:6973		    jmp	    short loc_6993
seg000:6975 ; ---------------------------------------------------------------------------
seg000:6975
seg000:6975 loc_6975:				    ; CODE XREF: sub_6944+21j
seg000:6975		    test    dl,	dl
seg000:6977		    jnz	    short loc_6982
seg000:6979		    not	    cx
seg000:697B		    and	    word ptr cs:loc_A5+1, cx
seg000:6980		    jmp	    short loc_6987
seg000:6982 ; ---------------------------------------------------------------------------
seg000:6982
seg000:6982 loc_6982:				    ; CODE XREF: sub_6944+33j
seg000:6982		    or	    word ptr cs:loc_A5+1, cx
seg000:6987
seg000:6987 loc_6987:				    ; CODE XREF: sub_6944+3Cj
seg000:6987		    add	    si,	2
seg000:698A		    call    count_to_space
seg000:698D		    call    sub_2403
seg000:6990		    jnb	    short loc_6948
seg000:6992		    clc
seg000:6993
seg000:6993 loc_6993:				    ; CODE XREF: sub_6944+2Fj
seg000:6993		    pop	    dx
seg000:6994		    pop	    cx
seg000:6995		    pop	    bx
seg000:6996		    pop	    ax
seg000:6997		    retn
seg000:6997 sub_6944	    endp
seg000:6997
seg000:6998
seg000:6998 ; =============== S	U B R O	U T I N	E =======================================
seg000:6998
seg000:6998
seg000:6998 cmd_mem_search  proc near		    ; DATA XREF: seg000:6DABo
seg000:6998		    mov	    al,	cs:[si+21Ah]
seg000:699D		    call    convert_ASCII
seg000:69A0		    cmp	    al,	45h ; 'E'
seg000:69A2		    jnz	    short loc_69D8
seg000:69A4		    mov	    al,	cs:[si+21Bh]
seg000:69A9		    call    convert_ASCII
seg000:69AC		    cmp	    al,	54h ; 'T'
seg000:69AE		    jnz	    short loc_69D8
seg000:69B0		    mov	    al,	cs:[si+21Ch]
seg000:69B5		    call    convert_ASCII
seg000:69B8		    cmp	    al,	55h ; 'U'
seg000:69BA		    jnz	    short loc_69D8
seg000:69BC		    mov	    al,	cs:[si+21Dh]
seg000:69C1		    call    convert_ASCII
seg000:69C4		    cmp	    al,	50h ; 'P'
seg000:69C6		    jnz	    short loc_69D8
seg000:69C8		    mov	    ds,	word ptr cs:loc_C5+1
seg000:69CD		    call    enter_BIOS?
seg000:69D0		    mov	    ds,	word ptr cs:loc_C5+1
seg000:69D5		    clc
seg000:69D6		    jmp	    short locret_69DB
seg000:69D8 ; ---------------------------------------------------------------------------
seg000:69D8
seg000:69D8 loc_69D8:				    ; CODE XREF: cmd_mem_search+Aj
seg000:69D8					    ; cmd_mem_search+16j ...
seg000:69D8		    call    sub_69DC
seg000:69DB
seg000:69DB locret_69DB:			    ; CODE XREF: cmd_mem_search+3Ej
seg000:69DB		    retn
seg000:69DB cmd_mem_search  endp
seg000:69DB
seg000:69DC
seg000:69DC ; =============== S	U B R O	U T I N	E =======================================
seg000:69DC
seg000:69DC
seg000:69DC sub_69DC	    proc near		    ; CODE XREF: cmd_mem_search:loc_69D8p
seg000:69DC		    push    ax
seg000:69DD		    push    bx
seg000:69DE		    push    cx
seg000:69DF		    push    di
seg000:69E0		    push    es
seg000:69E1		    mov	    ah,	0
seg000:69E3		    call    sub_233C
seg000:69E6		    jb	    short loc_6A06
seg000:69E8		    push    di
seg000:69E9		    mov	    di,	338h
seg000:69EC		    call    sub_22FE
seg000:69EF		    pop	    di
seg000:69F0		    jb	    short loc_6A06
seg000:69F2		    push    si
seg000:69F3		    mov	    si,	338h
seg000:69F6
seg000:69F6 loc_69F6:				    ; CODE XREF: sub_69DC+26j
seg000:69F6		    call    sub_6A0C
seg000:69F9		    jnb	    short loc_6A05
seg000:69FB		    call    print_HEX_ESDI
seg000:69FE		    call    sub_2253
seg000:6A01		    inc	    di
seg000:6A02		    loop    loc_69F6
seg000:6A04		    clc
seg000:6A05
seg000:6A05 loc_6A05:				    ; CODE XREF: sub_69DC+1Dj
seg000:6A05		    pop	    si
seg000:6A06
seg000:6A06 loc_6A06:				    ; CODE XREF: sub_69DC+Aj
seg000:6A06					    ; sub_69DC+14j
seg000:6A06		    pop	    es
seg000:6A07		    pop	    di
seg000:6A08		    pop	    cx
seg000:6A09		    pop	    bx
seg000:6A0A		    pop	    ax
seg000:6A0B		    retn
seg000:6A0B sub_69DC	    endp
seg000:6A0B
seg000:6A0C
seg000:6A0C ; =============== S	U B R O	U T I N	E =======================================
seg000:6A0C
seg000:6A0C
seg000:6A0C sub_6A0C	    proc near		    ; CODE XREF: sub_69DC:loc_69F6p
seg000:6A0C		    push    ax
seg000:6A0D		    push    bx
seg000:6A0E		    push    dx
seg000:6A0F		    push    si
seg000:6A10		    push    ds
seg000:6A11		    cld
seg000:6A12		    mov	    dx,	si
seg000:6A14		    push    cs
seg000:6A15		    pop	    ds
seg000:6A16		    dec	    cx
seg000:6A17
seg000:6A17 loc_6A17:				    ; CODE XREF: sub_6A0C+28j
seg000:6A17		    mov	    si,	dx
seg000:6A19		    mov	    al,	cs:[si]
seg000:6A1C		    repne scasb
seg000:6A1E		    jz	    short loc_6A24
seg000:6A20		    scasb
seg000:6A21		    clc
seg000:6A22		    jnz	    short loc_6A3A
seg000:6A24
seg000:6A24 loc_6A24:				    ; CODE XREF: sub_6A0C+12j
seg000:6A24		    inc	    si
seg000:6A25		    push    di
seg000:6A26		    push    cx
seg000:6A27		    mov	    cx,	bx
seg000:6A29		    dec	    cx
seg000:6A2A		    repe cmpsb
seg000:6A2C		    pop	    cx
seg000:6A2D		    pop	    di
seg000:6A2E		    stc
seg000:6A2F		    jz	    short loc_6A38
seg000:6A31		    inc	    di
seg000:6A32		    test    cx,	cx
seg000:6A34		    jnz	    short loc_6A17
seg000:6A36		    jmp	    short loc_6A3A
seg000:6A38 ; ---------------------------------------------------------------------------
seg000:6A38
seg000:6A38 loc_6A38:				    ; CODE XREF: sub_6A0C+23j
seg000:6A38		    dec	    di
seg000:6A39		    stc
seg000:6A3A
seg000:6A3A loc_6A3A:				    ; CODE XREF: sub_6A0C+16j
seg000:6A3A					    ; sub_6A0C+2Aj
seg000:6A3A		    pop	    ds
seg000:6A3B		    pop	    si
seg000:6A3C		    pop	    dx
seg000:6A3D		    pop	    bx
seg000:6A3E		    pop	    ax
seg000:6A3F		    retn
seg000:6A3F sub_6A0C	    endp
seg000:6A3F
seg000:6A40
seg000:6A40 ; =============== S	U B R O	U T I N	E =======================================
seg000:6A40
seg000:6A40
seg000:6A40 cmd_trace	    proc far		    ; DATA XREF: seg000:6DAEo
seg000:6A40
seg000:6A40 ; FUNCTION CHUNK AT	seg000:6675 SIZE 000000F1 BYTES
seg000:6A40 ; FUNCTION CHUNK AT	seg000:6D23 SIZE 00000039 BYTES
seg000:6A40
seg000:6A40		    mov	    al,	cs:[si+21Ah]
seg000:6A45		    call    convert_ASCII
seg000:6A48		    cmp	    al,	45h ; 'E'
seg000:6A4A		    jnz	    short loc_6A94
seg000:6A4C		    mov	    al,	cs:[si+21Bh]
seg000:6A51		    call    convert_ASCII
seg000:6A54		    cmp	    al,	53h ; 'S'
seg000:6A56		    jnz	    short loc_6A94
seg000:6A58		    mov	    al,	cs:[si+21Ch]
seg000:6A5D		    call    convert_ASCII
seg000:6A60		    cmp	    al,	54h ; 'T'
seg000:6A62		    jnz	    short loc_6A94
seg000:6A64		    mov	    ds,	word ptr cs:loc_C5+1
seg000:6A69		    push    word ptr ds:loc_70+2
seg000:6A6D		    mov	    word ptr ds:loc_70+2, 9999h
seg000:6A73		    call    tests_menu
seg000:6A76		    cmp	    word ptr ds:loc_70+2, 9999h
seg000:6A7C		    pop	    word ptr ds:loc_70+2
seg000:6A80		    jz	    short loc_6A91
seg000:6A82		    mov	    word ptr ds:loc_70+2, 1234h
seg000:6A88		    mov	    byte ptr cs:loc_26B+1, 0FFh
seg000:6A8E		    jmp	    near ptr ColrWarm_Boot
seg000:6A91 ; ---------------------------------------------------------------------------
seg000:6A91
seg000:6A91 loc_6A91:				    ; CODE XREF: cmd_trace+40j
seg000:6A91		    clc
seg000:6A92		    jmp	    short locret_6A97
seg000:6A94 ; ---------------------------------------------------------------------------
seg000:6A94
seg000:6A94 loc_6A94:				    ; CODE XREF: cmd_trace+Aj
seg000:6A94					    ; cmd_trace+16j ...
seg000:6A94		    call    loc_6A98
seg000:6A97
seg000:6A97 locret_6A97:			    ; CODE XREF: cmd_trace+52j
seg000:6A97		    retn
seg000:6A98 ; ---------------------------------------------------------------------------
seg000:6A98
seg000:6A98 loc_6A98:				    ; CODE XREF: cmd_trace:loc_6A94p
seg000:6A98		    push    ax
seg000:6A99		    call    sub_2403
seg000:6A9C		    jb	    short loc_6ABB
seg000:6A9E		    mov	    es,	word ptr cs:loc_9B+1
seg000:6AA3		    cmp	    byte ptr cs:[si+21Ah], 3Dh ; '='
seg000:6AA9		    jnz	    short loc_6ABB
seg000:6AAB		    inc	    si
seg000:6AAC		    call    sub_2377
seg000:6AAF		    jb	    short loc_6AE5
seg000:6AB1		    mov	    word ptr cs:loc_9B+1, es
seg000:6AB6		    mov	    word ptr cs:loc_A3+1, di
seg000:6ABB
seg000:6ABB loc_6ABB:				    ; CODE XREF: cmd_trace+5Cj
seg000:6ABB					    ; cmd_trace+69j
seg000:6ABB		    call    sub_2403
seg000:6ABE		    mov	    ax,	1
seg000:6AC1		    jb	    short loc_6ACE
seg000:6AC3		    call    convert_hex
seg000:6AC6		    jb	    short loc_6AE5
seg000:6AC8		    call    sub_2403
seg000:6ACB		    cmc
seg000:6ACC		    jb	    short loc_6AE5
seg000:6ACE
seg000:6ACE loc_6ACE:				    ; CODE XREF: cmd_trace+81j
seg000:6ACE		    mov	    word ptr cs:cmos_sum_bad, ax ; default LPT port 378h
seg000:6AD2		    push    ds
seg000:6AD3		    mov	    ax,	cs
seg000:6AD5		    mov	    ds,	ax
seg000:6AD7		    mov	    si,	offset sub_6CAF
seg000:6ADA		    mov	    al,	1
seg000:6ADC		    call    table_store
seg000:6ADF		    pop	    ds
seg000:6AE0		    mov	    ah,	0FFh
seg000:6AE2		    jmp	    loc_6675
seg000:6AE5 ; ---------------------------------------------------------------------------
seg000:6AE5
seg000:6AE5 loc_6AE5:				    ; CODE XREF: cmd_trace+6Fj
seg000:6AE5					    ; cmd_trace+86j ...
seg000:6AE5		    pop	    ax
seg000:6AE6		    retn
seg000:6AE6 cmd_trace	    endp ; sp-analysis failed
seg000:6AE6
seg000:6AE7
seg000:6AE7 ; =============== S	U B R O	U T I N	E =======================================
seg000:6AE7
seg000:6AE7
seg000:6AE7 cmd_unassemble  proc near		    ; DATA XREF: seg000:6DB1o
seg000:6AE7		    push    ax
seg000:6AE8		    push    cx
seg000:6AE9		    push    di
seg000:6AEA		    push    es
seg000:6AEB		    les	    di,	dword ptr cs:loc_200+2
seg000:6AF0		    mov	    cx,	20h ; ' '
seg000:6AF3		    call    sub_2403
seg000:6AF6		    jb	    short loc_6B05
seg000:6AF8		    mov	    ah,	0FFh
seg000:6AFA		    call    sub_233C
seg000:6AFD		    jb	    short loc_6B17
seg000:6AFF		    call    sub_2403
seg000:6B02		    cmc
seg000:6B03		    jb	    short loc_6B17
seg000:6B05
seg000:6B05 loc_6B05:				    ; CODE XREF: cmd_unassemble+Fj
seg000:6B05		    mov	    ax,	di
seg000:6B07		    add	    ax,	cx
seg000:6B09		    call    print_addembler?
seg000:6B0C		    mov	    word ptr cs:loc_200+2, di
seg000:6B11		    mov	    word ptr cs:loc_203+1, es
seg000:6B16		    clc
seg000:6B17
seg000:6B17 loc_6B17:				    ; CODE XREF: cmd_unassemble+16j
seg000:6B17					    ; cmd_unassemble+1Cj
seg000:6B17		    pop	    es
seg000:6B18		    pop	    di
seg000:6B19		    pop	    cx
seg000:6B1A		    pop	    ax
seg000:6B1B		    retn
seg000:6B1B cmd_unassemble  endp
seg000:6B1B
seg000:6B1C
seg000:6B1C ; =============== S	U B R O	U T I N	E =======================================
seg000:6B1C
seg000:6B1C
seg000:6B1C cmd_video_mode  proc near		    ; DATA XREF: seg000:6DB4o
seg000:6B1C		    push    ax
seg000:6B1D
seg000:6B1D loc_6B1D:				    ; CODE XREF: cmd_video_mode+27j
seg000:6B1D					    ; cmd_video_mode+3Cj
seg000:6B1D		    call    sub_241F
seg000:6B20		    call    convert_ASCII
seg000:6B23		    cmp	    al,	4Dh ; 'M'
seg000:6B25		    jnz	    short loc_6B45
seg000:6B27		    call    convert_hex
seg000:6B2A		    jb	    short loc_6B64
seg000:6B2C		    and	    word ptr ds:loc_E+2, 0FFCFh
seg000:6B31		    or	    word ptr ds:loc_E+2, 20h
seg000:6B36		    cmp	    al,	7
seg000:6B38		    jnz	    short loc_6B3F
seg000:6B3A		    or	    word ptr ds:loc_E+2, 30h
seg000:6B3F
seg000:6B3F loc_6B3F:				    ; CODE XREF: cmd_video_mode+1Cj
seg000:6B3F		    xor	    ah,	ah
seg000:6B41		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:6B41					    ; AL = mode
seg000:6B43		    jmp	    short loc_6B1D
seg000:6B45 ; ---------------------------------------------------------------------------
seg000:6B45
seg000:6B45 loc_6B45:				    ; CODE XREF: cmd_video_mode+9j
seg000:6B45		    cmp	    al,	53h ; 'S'
seg000:6B47		    jnz	    short loc_6B5A
seg000:6B49		    call    convert_hex
seg000:6B4C		    jb	    short loc_6B64
seg000:6B4E		    cmp	    ax,	3
seg000:6B51		    cmc
seg000:6B52		    jb	    short loc_6B64
seg000:6B54		    mov	    ah,	64h ; 'd'
seg000:6B56		    int	    10h		    ; -	VIDEO -
seg000:6B58		    jmp	    short loc_6B1D
seg000:6B5A ; ---------------------------------------------------------------------------
seg000:6B5A
seg000:6B5A loc_6B5A:				    ; CODE XREF: cmd_video_mode+2Bj
seg000:6B5A		    dec	    si
seg000:6B5B		    mov	    al,	cs:[si+21Ah]
seg000:6B60		    sub	    al,	0Dh
seg000:6B62		    add	    al,	0FFh
seg000:6B64
seg000:6B64 loc_6B64:				    ; CODE XREF: cmd_video_mode+Ej
seg000:6B64					    ; cmd_video_mode+30j ...
seg000:6B64		    pop	    ax
seg000:6B65		    retn
seg000:6B65 cmd_video_mode  endp
seg000:6B65
seg000:6B66
seg000:6B66 ; =============== S	U B R O	U T I N	E =======================================
seg000:6B66
seg000:6B66
seg000:6B66 ascii_something proc far		    ; DATA XREF: seg000:6DB7o
seg000:6B66		    push    ax
seg000:6B67		    call    count_to_space
seg000:6B6A		    mov	    al,	cs:[si+21Ah]
seg000:6B6F		    call    convert_ASCII
seg000:6B72		    cmp	    al,	49h ; 'I'
seg000:6B74		    jnz	    short loc_6B84
seg000:6B76		    inc	    si
seg000:6B77		    call    convert_hex
seg000:6B7A		    mov	    byte ptr cs:loc_8B,	al
seg000:6B7E		    call    sub_6BB3
seg000:6B81		    clc
seg000:6B82		    jmp	    short loc_6BB1
seg000:6B84 ; ---------------------------------------------------------------------------
seg000:6B84
seg000:6B84 loc_6B84:				    ; CODE XREF: ascii_something+Ej
seg000:6B84		    call    convert_hex
seg000:6B87		    cmp	    ax,	100h
seg000:6B8A		    cmc
seg000:6B8B		    jb	    short loc_6BB1
seg000:6B8D		    mov	    byte ptr cs:loc_26D, 0CDh ;	'Í'
seg000:6B93		    mov	    byte ptr cs:loc_26D+1, al
seg000:6B97		    mov	    byte ptr cs:loc_26D+2, 0CCh	; 'Ì'
seg000:6B9D		    mov	    word ptr cs:loc_A3+1, 26Dh
seg000:6BA4		    mov	    word ptr cs:loc_9B+1, cs
seg000:6BA9		    mov	    ah,	0
seg000:6BAB		    call    sub_6BB3
seg000:6BAE		    jmp	    loc_6675
seg000:6BB1 ; ---------------------------------------------------------------------------
seg000:6BB1
seg000:6BB1 loc_6BB1:				    ; CODE XREF: ascii_something+1Cj
seg000:6BB1					    ; ascii_something+25j
seg000:6BB1		    pop	    ax
seg000:6BB2		    retn
seg000:6BB2 ascii_something endp
seg000:6BB2
seg000:6BB3
seg000:6BB3 ; =============== S	U B R O	U T I N	E =======================================
seg000:6BB3
seg000:6BB3
seg000:6BB3 sub_6BB3	    proc near		    ; CODE XREF: cmd_execute:loc_6668p
seg000:6BB3					    ; ascii_something+18p ...
seg000:6BB3		    push    ax
seg000:6BB4		    push    si
seg000:6BB5		    push    ds
seg000:6BB6		    mov	    ax,	cs
seg000:6BB8		    mov	    ds,	ax
seg000:6BBA		    mov	    si,	offset sub_6BD0
seg000:6BBD		    mov	    al,	byte ptr cs:loc_8B
seg000:6BC1		    call    table_store
seg000:6BC4		    mov	    si,	offset sub_6CAF
seg000:6BC7		    mov	    al,	1
seg000:6BC9		    call    table_store
seg000:6BCC		    pop	    ds
seg000:6BCD		    pop	    si
seg000:6BCE		    pop	    ax
seg000:6BCF		    retn
seg000:6BCF sub_6BB3	    endp
seg000:6BCF
seg000:6BD0
seg000:6BD0 ; =============== S	U B R O	U T I N	E =======================================
seg000:6BD0
seg000:6BD0
seg000:6BD0 sub_6BD0	    proc far		    ; DATA XREF: sub_6BB3+7o
seg000:6BD0		    out	    0FBh, al	    ; AT 80287 data.
seg000:6BD0					    ; 286 sends	opcodes	& operands and receives	results.
seg000:6BD2		    mov	    word ptr cs:loc_9D+1, ds
seg000:6BD7		    mov	    ds,	word ptr cs:loc_C5+1
seg000:6BDC		    out	    0FBh, al	    ; AT 80287 data.
seg000:6BDC					    ; 286 sends	opcodes	& operands and receives	results.
seg000:6BDE		    pushf
seg000:6BDF		    inc	    byte ptr ds:loc_BB+4
seg000:6BE3		    popf
seg000:6BE4		    mov	    word ptr cs:loc_8B+1, ax
seg000:6BE8		    pop	    ax
seg000:6BE9		    dec	    ax
seg000:6BEA		    cmp	    byte ptr cs:loc_8B,	3
seg000:6BF0		    jz	    short loc_6BF3
seg000:6BF2		    dec	    ax
seg000:6BF3
seg000:6BF3 loc_6BF3:				    ; CODE XREF: sub_6BD0+20j
seg000:6BF3		    mov	    word ptr cs:loc_A3+1, ax
seg000:6BF7		    jmp	    short loc_6C16
seg000:6BF9 ; ---------------------------------------------------------------------------
seg000:6BF9
seg000:6BF9 loc_6BF9:				    ; AT 80287 data.
seg000:6BF9		    out	    0FBh, al	    ; 286 sends	opcodes	& operands and receives	results.
seg000:6BFB		    mov	    word ptr cs:loc_9D+1, ds
seg000:6C00		    mov	    ds,	word ptr cs:loc_C5+1
seg000:6C05		    out	    0FBh, al	    ; AT 80287 data.
seg000:6C05					    ; 286 sends	opcodes	& operands and receives	results.
seg000:6C07		    pushf
seg000:6C08		    inc	    byte ptr ds:loc_BB+4
seg000:6C0C		    popf
seg000:6C0D		    mov	    word ptr cs:loc_8B+1, ax
seg000:6C11		    pop	    ax
seg000:6C12		    mov	    word ptr cs:loc_A3+1, ax
seg000:6C16
seg000:6C16 loc_6C16:				    ; CODE XREF: sub_6BD0+27j
seg000:6C16		    pop	    ax
seg000:6C17		    mov	    word ptr cs:loc_9B+1, ax
seg000:6C1B		    mov	    word ptr cs:loc_8D+1, bx
seg000:6C20		    mov	    word ptr cs:loc_8F+1, cx
seg000:6C25		    mov	    word ptr cs:loc_91+1, dx
seg000:6C2A		    mov	    word ptr cs:loc_93+1, si
seg000:6C2F		    mov	    word ptr cs:loc_95+1, di
seg000:6C34		    mov	    word ptr cs:loc_97+1, bp
seg000:6C39		    mov	    word ptr cs:loc_A1+1, es
seg000:6C3E		    pop	    ax
seg000:6C3F		    mov	    word ptr cs:loc_A5+1, ax
seg000:6C43		    mov	    word ptr cs:loc_99+1, sp
seg000:6C48		    mov	    word ptr cs:loc_9F+1, ss
seg000:6C4D		    push    cs
seg000:6C4E		    pop	    ss
seg000:6C4F		    mov	    sp,	338h
seg000:6C52		    sti
seg000:6C53		    cld
seg000:6C54		    cmp	    byte ptr cs:loc_89+1, 0
seg000:6C5A		    jz	    short loc_6C8C
seg000:6C5C		    mov	    si,	0
seg000:6C5F
seg000:6C5F loc_6C5F:				    ; CODE XREF: sub_6BD0+BAj
seg000:6C5F		    mov	    es,	word ptr cs:[si+5Ah]
seg000:6C64		    mov	    di,	cs:[si+5Ch]
seg000:6C69		    mov	    al,	cs:[si+5Eh]
seg000:6C6E		    mov	    es:[di], al
seg000:6C71		    cmp	    byte ptr cs:loc_8B,	3
seg000:6C77		    jz	    short loc_6C82
seg000:6C79		    mov	    al,	cs:[si+5Fh]
seg000:6C7E		    mov	    es:[di+1], al
seg000:6C82
seg000:6C82 loc_6C82:				    ; CODE XREF: sub_6BD0+A7j
seg000:6C82		    add	    si,	6
seg000:6C85		    dec	    byte ptr cs:loc_89+1
seg000:6C8A		    jnz	    short loc_6C5F
seg000:6C8C
seg000:6C8C loc_6C8C:				    ; CODE XREF: sub_6BD0+8Aj
seg000:6C8C		    call    sub_2253
seg000:6C8F		    call    sub_68BB
seg000:6C92		    mov	    es,	word ptr cs:loc_9B+1
seg000:6C97		    mov	    word ptr cs:loc_203+1, es
seg000:6C9C		    mov	    di,	word ptr cs:loc_A3+1
seg000:6CA1		    mov	    word ptr cs:loc_200+2, di
seg000:6CA6		    mov	    cx,	1
seg000:6CA9		    call    print_addembler?
seg000:6CAC		    jmp	    loc_6365
seg000:6CAC sub_6BD0	    endp ; sp-analysis failed
seg000:6CAC
seg000:6CAF
seg000:6CAF ; =============== S	U B R O	U T I N	E =======================================
seg000:6CAF
seg000:6CAF
seg000:6CAF sub_6CAF	    proc near		    ; DATA XREF: cmd_trace+97o
seg000:6CAF					    ; sub_6BB3+11o
seg000:6CAF		    out	    0FBh, al	    ; AT 80287 data.
seg000:6CAF					    ; 286 sends	opcodes	& operands and receives	results.
seg000:6CB1		    mov	    word ptr cs:loc_9D+1, ds
seg000:6CB6		    mov	    ds,	word ptr cs:loc_C5+1
seg000:6CBB		    out	    0FBh, al	    ; AT 80287 data.
seg000:6CBB					    ; 286 sends	opcodes	& operands and receives	results.
seg000:6CBD		    pushf
seg000:6CBE		    inc	    byte ptr ds:loc_BB+4
seg000:6CC2		    popf
seg000:6CC3		    mov	    word ptr cs:loc_8B+1, ax
seg000:6CC7		    mov	    word ptr cs:loc_8D+1, bx
seg000:6CCC		    mov	    word ptr cs:loc_8F+1, cx
seg000:6CD1		    mov	    word ptr cs:loc_91+1, dx
seg000:6CD6		    mov	    word ptr cs:loc_93+1, si
seg000:6CDB		    mov	    word ptr cs:loc_95+1, di
seg000:6CE0		    mov	    word ptr cs:loc_97+1, bp
seg000:6CE5		    mov	    word ptr cs:loc_A1+1, es
seg000:6CEA		    pop	    di
seg000:6CEB		    mov	    word ptr cs:loc_A3+1, di
seg000:6CF0		    pop	    es
seg000:6CF1		    mov	    word ptr cs:loc_9B+1, es
seg000:6CF6		    mov	    word ptr cs:loc_203+1, es
seg000:6CFB		    mov	    word ptr cs:loc_200+2, di
seg000:6D00		    pop	    ax
seg000:6D01		    cmp	    byte ptr cs:loc_AA,	0FFh
seg000:6D07		    jz	    short loc_6D15
seg000:6D09		    and	    word ptr cs:loc_A5+1, 200h
seg000:6D10		    or	    ax,	word ptr cs:loc_A5+1
seg000:6D15
seg000:6D15 loc_6D15:				    ; CODE XREF: sub_6CAF+58j
seg000:6D15		    mov	    word ptr cs:loc_A5+1, ax
seg000:6D19		    mov	    word ptr cs:loc_99+1, sp
seg000:6D1E		    mov	    word ptr cs:loc_9F+1, ss
seg000:6D1E sub_6CAF	    endp ; sp-analysis failed
seg000:6D1E
seg000:6D23 ; START OF FUNCTION	CHUNK FOR cmd_trace
seg000:6D23
seg000:6D23 loc_6D23:				    ; CODE XREF: cmd_trace-335j
seg000:6D23		    mov	    ds,	word ptr cs:loc_C5+1
seg000:6D28		    push    cs
seg000:6D29		    pop	    ss
seg000:6D2A		    mov	    sp,	338h
seg000:6D2D		    sti
seg000:6D2E		    cld
seg000:6D2F		    call    sub_68BB
seg000:6D32		    mov	    es,	word ptr cs:loc_9B+1
seg000:6D37		    mov	    di,	word ptr cs:loc_A3+1
seg000:6D3C		    mov	    cx,	1
seg000:6D3F		    call    print_addembler?
seg000:6D42		    cmp	    word ptr cs:cmos_sum_bad, 0	; default LPT port 378h
seg000:6D48		    jz	    short loc_6D51
seg000:6D4A		    dec	    word ptr cs:cmos_sum_bad ; default LPT port	378h
seg000:6D4F		    jnz	    short loc_6D54
seg000:6D51
seg000:6D51 loc_6D51:				    ; CODE XREF: cmd_trace+308j
seg000:6D51		    jmp	    loc_6365
seg000:6D54 ; ---------------------------------------------------------------------------
seg000:6D54
seg000:6D54 loc_6D54:				    ; CODE XREF: cmd_trace+30Fj
seg000:6D54		    call    sub_2253
seg000:6D57		    mov	    ah,	0FFh
seg000:6D59		    jmp	    loc_6675
seg000:6D59 ; END OF FUNCTION CHUNK FOR	cmd_trace
seg000:6D59 ; ---------------------------------------------------------------------------
seg000:6D5C arrow	    db '->',0               ; DATA XREF: ColrWarm_Boot:loc_6378o
seg000:6D5F aSum	    db 'Sum: ',0            ; DATA XREF: cmd_hex_math+17o
seg000:6D65 aDiff	    db '  Diff: ',0         ; DATA XREF: cmd_hex_math+22o
seg000:6D6E aInvalidCommand db '^ Invalid Command!',0Dh,0Ah,0
seg000:6D6E					    ; DATA XREF: ColrWarm_Boot+536Fo
seg000:6D83 word_6D83	    dw 0FAFBh		    ; DATA XREF: cmd_trace-3A2o
seg000:6D85		    db 0CFh
seg000:6D86		    db	9Dh ; 
seg000:6D87 cmd_menu_key    db '?'                  ; DATA XREF: ColrWarm_Boot:loc_639Br
seg000:6D88 cmd_menu_func   dw offset cmd_help	    ; DATA XREF: ColrWarm_Boot:loc_63AAr
seg000:6D8A		    cmd_lookup <'B', offset cmd_boot>
seg000:6D8D		    cmd_lookup <'C', offset cmd_colorBar>
seg000:6D90		    cmd_lookup <'D', offset cmd_disp_memory>
seg000:6D93		    cmd_lookup <'E', offset cmd_examine_mem>
seg000:6D96		    cmd_lookup <'F', offset cmd_fill_mem>
seg000:6D99		    cmd_lookup <'G', offset cmd_execute>
seg000:6D9C		    cmd_lookup <'H', offset cmd_hex_math>
seg000:6D9F		    cmd_lookup <'I', offset cmd_port_in>
seg000:6DA2		    cmd_lookup <'M', offset cmd_mem_move>
seg000:6DA5		    cmd_lookup <'O', offset cmd_port_out>
seg000:6DA8		    cmd_lookup <'R', offset cmd_display_regs>
seg000:6DAB		    cmd_lookup <'S', offset cmd_mem_search>
seg000:6DAE		    cmd_lookup <'T', offset cmd_trace>
seg000:6DB1		    cmd_lookup <'U', offset cmd_unassemble>
seg000:6DB4		    cmd_lookup <'V', offset cmd_video_mode>
seg000:6DB7		    cmd_lookup <'X', offset ascii_something>
seg000:6DBA
seg000:6DBA ; =============== S	U B R O	U T I N	E =======================================
seg000:6DBA
seg000:6DBA
seg000:6DBA diag_out?	    proc near		    ; CODE XREF: sgdt_hlt?+Cp
seg000:6DBA					    ; sub_8978+12p
seg000:6DBA
seg000:6DBA ; FUNCTION CHUNK AT	seg000:6E79 SIZE 0000002A BYTES
seg000:6DBA
seg000:6DBA		    push    ax
seg000:6DBB		    xor	    al,	al
seg000:6DBD		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:6DBF		    call    port_FBFFF9_Out
seg000:6DC2		    jnb	    short loc_6DCA
seg000:6DC4		    mov	    al,	3
seg000:6DC6		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:6DC8		    pop	    ax
seg000:6DC9		    retn
seg000:6DCA ; ---------------------------------------------------------------------------
seg000:6DCA
seg000:6DCA loc_6DCA:				    ; CODE XREF: diag_out?+8j
seg000:6DCA		    push    bx
seg000:6DCB		    push    cx
seg000:6DCC		    push    dx
seg000:6DCD		    push    si
seg000:6DCE		    push    di
seg000:6DCF		    push    bp
seg000:6DD0		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:6DD2		    mov	    ah,	al
seg000:6DD4
seg000:6DD4 loc_6DD4:				    ; Interrupt	Controller #2, 8259A
seg000:6DD4		    in	    al,	0A1h
seg000:6DD6		    mov	    cs:word_462, ax
seg000:6DDA		    mov	    bx,	es
seg000:6DDC		    mov	    ax,	0F000h
seg000:6DDF		    mov	    es,	ax
seg000:6DE1		    assume es:nothing
seg000:6DE1		    mov	    di,	41Ah
seg000:6DE4		    cld
seg000:6DE5		    xor	    ax,	ax
seg000:6DE7		    mov	    cx,	4
seg000:6DEA		    rep	stosw
seg000:6DEC		    mov	    ax,	0FFFFh
seg000:6DEF		    stosw
seg000:6DF0		    mov	    ax,	es
seg000:6DF2		    call    sub_6E66
seg000:6DF5		    add	    ax,	41Ah
seg000:6DF8		    adc	    dl,	0
seg000:6DFB		    stosw
seg000:6DFC		    mov	    al,	dl
seg000:6DFE		    stosb
seg000:6DFF		    mov	    al,	93h
seg000:6E01		    stosb
seg000:6E02		    xor	    ax,	ax
seg000:6E04		    stosw
seg000:6E05		    mov	    ax,	100h
seg000:6E08		    stosw
seg000:6E09		    mov	    ax,	es
seg000:6E0B		    call    sub_6E66
seg000:6E0E		    add	    ax,	6FB8h
seg000:6E11		    adc	    dl,	0
seg000:6E14		    stosw
seg000:6E15		    mov	    al,	dl
seg000:6E17		    stosb
seg000:6E18		    xor	    ax,	ax
seg000:6E1A		    stosb
seg000:6E1B		    stosw
seg000:6E1C		    mov	    ax,	ds
seg000:6E1E		    mov	    cl,	93h
seg000:6E20		    call    sub_6E52
seg000:6E23		    mov	    ax,	bx
seg000:6E25		    mov	    cl,	93h
seg000:6E27		    call    sub_6E52
seg000:6E2A		    mov	    ax,	ss
seg000:6E2C		    mov	    cl,	93h
seg000:6E2E		    call    sub_6E52
seg000:6E31		    mov	    ax,	cs
seg000:6E33		    mov	    cl,	9Bh
seg000:6E35		    call    sub_6E52
seg000:6E38		    mov	    si,	41Ah
seg000:6E3B		    mov	    ax,	0F000h
seg000:6E3E		    mov	    es,	ax
seg000:6E40		    mov	    ax,	6E49h
seg000:6E43		    push    ax
seg000:6E44		    push    ax
seg000:6E45		    push    ax
seg000:6E46		    jmp	    short protected_?
seg000:6E46 diag_out?	    endp
seg000:6E46
seg000:6E48 ; ---------------------------------------------------------------------------
seg000:6E48		    nop
seg000:6E49		    pop	    bp
seg000:6E4A		    pop	    di
seg000:6E4B		    pop	    si
seg000:6E4C		    pop	    dx
seg000:6E4D		    pop	    cx
seg000:6E4E		    pop	    bx
seg000:6E4F		    pop	    ax
seg000:6E50		    clc
seg000:6E51		    retn
seg000:6E52
seg000:6E52 ; =============== S	U B R O	U T I N	E =======================================
seg000:6E52
seg000:6E52
seg000:6E52 sub_6E52	    proc near		    ; CODE XREF: diag_out?+66p
seg000:6E52					    ; diag_out?+6Dp ...
seg000:6E52		    push    ax
seg000:6E53		    mov	    ax,	0FFFFh
seg000:6E56		    stosw
seg000:6E57		    pop	    ax
seg000:6E58		    call    sub_6E66
seg000:6E5B		    stosw
seg000:6E5C		    mov	    al,	dl
seg000:6E5E		    stosb
seg000:6E5F		    mov	    al,	cl
seg000:6E61		    stosb
seg000:6E62		    xor	    ax,	ax
seg000:6E64		    stosw
seg000:6E65		    retn
seg000:6E65 sub_6E52	    endp
seg000:6E65
seg000:6E66
seg000:6E66 ; =============== S	U B R O	U T I N	E =======================================
seg000:6E66
seg000:6E66
seg000:6E66 sub_6E66	    proc near		    ; CODE XREF: diag_out?+38p
seg000:6E66					    ; diag_out?+51p ...
seg000:6E66		    xor	    dl,	dl
seg000:6E68		    rcl	    ax,	1
seg000:6E6A		    rcl	    dl,	1
seg000:6E6C		    rcl	    ax,	1
seg000:6E6E		    rcl	    dl,	1
seg000:6E70		    rcl	    ax,	1
seg000:6E72		    rcl	    dl,	1
seg000:6E74		    rcl	    ax,	1
seg000:6E76		    rcl	    dl,	1
seg000:6E78		    retn
seg000:6E78 sub_6E66	    endp
seg000:6E78
seg000:6E79 ; ---------------------------------------------------------------------------
seg000:6E79 ; START OF FUNCTION	CHUNK FOR diag_out?
seg000:6E79
seg000:6E79 protected_?:			    ; CODE XREF: diag_out?+8Cj
seg000:6E79		    mov	    al,	8Fh ; ''
seg000:6E7B		    out	    70h, al	    ; CMOS Memory:
seg000:6E7B					    ;
seg000:6E7D		    mov	    ax,	0F000h
seg000:6E80		    mov	    di,	si
seg000:6E82		    add	    di,	38h ; '8'
seg000:6E85		    mov	    cl,	9Bh ; ''
seg000:6E87		    call    sub_6E52
seg000:6E8A		    lgdt    fword ptr es:[si+8]
seg000:6E8F		    lidt    fword ptr es:[si+10h]
seg000:6E94		    cli
seg000:6E95		    smsw    ax
seg000:6E98		    or	    ax,	1
seg000:6E9B		    lmsw    ax
seg000:6E9E		    jmp	    far	ptr 38h:6EA3h
seg000:6E9E ; END OF FUNCTION CHUNK FOR	diag_out?
seg000:6EA3 ; ---------------------------------------------------------------------------
seg000:6EA3		    mov	    ax,	20h ; ' '
seg000:6EA6		    mov	    es,	ax
seg000:6EA8		    assume es:nothing
seg000:6EA8		    mov	    ax,	18h
seg000:6EAB		    mov	    ds,	ax
seg000:6EAD		    assume ds:nothing
seg000:6EAD		    mov	    ax,	28h ; '('
seg000:6EB0		    mov	    ss,	ax
seg000:6EB2		    assume ss:nothing
seg000:6EB2		    clc
seg000:6EB3		    pop	    dx
seg000:6EB4		    pop	    ax
seg000:6EB5		    pop	    ax
seg000:6EB6		    mov	    ax,	30h ; '0'
seg000:6EB9		    push    ax
seg000:6EBA		    push    dx
seg000:6EBB		    retf
seg000:6EBC ; ---------------------------------------------------------------------------
seg000:6EBC ; START OF FUNCTION	CHUNK FOR sub_A114
seg000:6EBC
seg000:6EBC loc_6EBC:				    ; CODE XREF: sub_A114+4Aj
seg000:6EBC					    ; sub_A114:loc_A163j
seg000:6EBC					    ; DATA XREF: ...
seg000:6EBC		    call    port_FBFFF9_Out
seg000:6EBF		    jnb	    short loc_6EC6
seg000:6EC1		    mov	    ah,	0
seg000:6EC3		    sbb	    ah,	ah
seg000:6EC5		    retn
seg000:6EC6 ; ---------------------------------------------------------------------------
seg000:6EC6
seg000:6EC6 loc_6EC6:				    ; CODE XREF: sub_A114-3255j
seg000:6EC6		    cli
seg000:6EC7		    mov	    dx,	20h ; ' '
seg000:6ECA		    mov	    al,	11h
seg000:6ECC		    out	    dx,	al	    ; Interrupt	controller, 8259A.
seg000:6ECD		    inc	    dx
seg000:6ECE		    mov	    al,	bh
seg000:6ED0		    out	    dx,	al	    ; Interrupt	controller, 8259A.
seg000:6ED1		    mov	    al,	4
seg000:6ED3		    out	    dx,	al	    ; Interrupt	controller, 8259A.
seg000:6ED4		    mov	    al,	1
seg000:6ED6		    out	    dx,	al	    ; Interrupt	controller, 8259A.
seg000:6ED7		    mov	    al,	0FFh
seg000:6ED9		    out	    dx,	al	    ; Interrupt	controller, 8259A.
seg000:6EDA		    mov	    dx,	0A0h ; ' '
seg000:6EDD		    mov	    al,	11h
seg000:6EDF		    out	    dx,	al	    ; PIC 2  same as 0020 for PIC 1
seg000:6EE0		    inc	    dx
seg000:6EE1		    mov	    al,	bl
seg000:6EE3		    out	    dx,	al	    ; Interrupt	Controller #2, 8259A
seg000:6EE4		    mov	    al,	2
seg000:6EE6		    out	    dx,	al	    ; Interrupt	Controller #2, 8259A
seg000:6EE7		    mov	    al,	1
seg000:6EE9		    out	    dx,	al	    ; Interrupt	Controller #2, 8259A
seg000:6EEA		    mov	    al,	0FFh
seg000:6EEC		    out	    dx,	al	    ; Interrupt	Controller #2, 8259A
seg000:6EED		    mov	    ax,	ss
seg000:6EEF		    clc
seg000:6EF0		    jmp	    far	ptr 0F000h:6E79h
seg000:6EF0 ; END OF FUNCTION CHUNK FOR	sub_A114
seg000:6EF5
seg000:6EF5 ; =============== S	U B R O	U T I N	E =======================================
seg000:6EF5
seg000:6EF5 ; Attributes: noreturn
seg000:6EF5
seg000:6EF5 sgdt_hlt	    proc near		    ; CODE XREF: sgdt_hlt?+A0p
seg000:6EF5					    ; sub_8978+54p
seg000:6EF5		    cli
seg000:6EF6		    push    ax
seg000:6EF7		    push    bx
seg000:6EF8		    push    cx
seg000:6EF9		    push    dx
seg000:6EFA		    push    si
seg000:6EFB		    push    di
seg000:6EFC		    push    bp
seg000:6EFD		    push    ds
seg000:6EFE		    push    es
seg000:6EFF		    mov	    ax,	8
seg000:6F02		    mov	    es,	ax
seg000:6F04		    assume es:nothing
seg000:6F04		    mov	    ax,	40h ; '@'
seg000:6F07		    mov	    di,	ax
seg000:6F09		    mov	    ax,	0F000h
seg000:6F0C		    mov	    cl,	93h ; ''
seg000:6F0E		    call    sub_6E52
seg000:6F11		    mov	    ax,	40h ; '@'
seg000:6F14		    mov	    es,	ax
seg000:6F16		    assume es:nothing
seg000:6F16		    mov	    word ptr es:410h, ss
seg000:6F1B		    mov	    es:412h, sp
seg000:6F20		    mov	    si,	414h
seg000:6F23		    sgdt    fword ptr es:[si]
seg000:6F27		    mov	    al,	8Fh ; ''
seg000:6F29		    mov	    ah,	10h
seg000:6F2B		    call    write_cmos
seg000:6F2E		    cli
seg000:6F2F		    out	    0FBh, al	    ; AT 80287 data.
seg000:6F2F					    ; 286 sends	opcodes	& operands and receives	results.
seg000:6F31		    out	    0EEh, al
seg000:6F33		    in	    al,	0EFh
seg000:6F35
seg000:6F35 loc_6F35:				    ; CODE XREF: sgdt_hlt+41j
seg000:6F35		    hlt
seg000:6F36 ; ---------------------------------------------------------------------------
seg000:6F36		    jmp	    short loc_6F35
seg000:6F36 sgdt_hlt	    endp
seg000:6F36
seg000:6F38 ; ---------------------------------------------------------------------------
seg000:6F38 ; START OF FUNCTION	CHUNK FOR ColrWarm_Boot
seg000:6F38
seg000:6F38 loc_6F38:				    ; CODE XREF: ColrWarm_Boot+51j
seg000:6F38					    ; DATA XREF: ColrWarm_Boot:jump_tableo
seg000:6F38		    mov	    ax,	word ptr cs:stru_40E.data6
seg000:6F3C		    mov	    dl,	byte ptr cs:stru_417.check+1
seg000:6F41		    call    sub_6FA2
seg000:6F44		    mov	    si,	bx
seg000:6F46		    mov	    ds,	ax
seg000:6F48		    assume ds:nothing
seg000:6F48		    mov	    di,	word ptr cs:stru_40E.data0
seg000:6F4D		    add	    di,	si
seg000:6F4F		    mov	    ax,	[di+2]
seg000:6F52		    mov	    dl,	[di+4]
seg000:6F55		    call    sub_6FA2
seg000:6F58		    add	    bx,	word ptr cs:stru_40E.data2
seg000:6F5D		    mov	    ss,	ax
seg000:6F5F		    assume ss:nothing
seg000:6F5F		    mov	    sp,	bx
seg000:6F61		    pop	    di
seg000:6F62		    add	    di,	si
seg000:6F64		    mov	    ax,	[di+2]
seg000:6F67		    mov	    dl,	[di+4]
seg000:6F6A		    call    sub_6FA2
seg000:6F6D		    mov	    es,	ax
seg000:6F6F		    assume es:nothing
seg000:6F6F		    pop	    di
seg000:6F70		    add	    di,	si
seg000:6F72		    mov	    ax,	[di+2]
seg000:6F75		    mov	    dl,	[di+4]
seg000:6F78		    call    sub_6FA2
seg000:6F7B		    mov	    ds,	ax
seg000:6F7D		    mov	    ax,	cs:word_462
seg000:6F81		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:6F83		    mov	    al,	ah
seg000:6F85		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:6F87		    mov	    al,	80h ; ''
seg000:6F89		    out	    70h, al	    ; CMOS Memory:
seg000:6F89					    ;
seg000:6F8B		    call    sub_71D9
seg000:6F8E		    jnb	    short loc_6F9A
seg000:6F90		    in	    al,	80h	    ; manufacture's diagnostic checkpoint
seg000:6F92		    test    al,	0FFh
seg000:6F94		    jz	    short loc_6F9A
seg000:6F96		    mov	    al,	3
seg000:6F98		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:6F9A
seg000:6F9A loc_6F9A:				    ; CODE XREF: ColrWarm_Boot+5F3Ej
seg000:6F9A					    ; ColrWarm_Boot+5F44j
seg000:6F9A		    pop	    bp
seg000:6F9B		    pop	    di
seg000:6F9C		    pop	    si
seg000:6F9D		    pop	    dx
seg000:6F9E		    pop	    cx
seg000:6F9F		    pop	    bx
seg000:6FA0		    pop	    ax
seg000:6FA1		    retn
seg000:6FA1 ; END OF FUNCTION CHUNK FOR	ColrWarm_Boot
seg000:6FA2
seg000:6FA2 ; =============== S	U B R O	U T I N	E =======================================
seg000:6FA2
seg000:6FA2
seg000:6FA2 sub_6FA2	    proc near		    ; CODE XREF: ColrWarm_Boot+5EF1p
seg000:6FA2					    ; ColrWarm_Boot+5F05p ...
seg000:6FA2		    mov	    bx,	ax
seg000:6FA4		    and	    bx,	0Fh
seg000:6FA7		    mov	    cx,	4
seg000:6FAA
seg000:6FAA loc_6FAA:				    ; CODE XREF: sub_6FA2+Cj
seg000:6FAA		    rcr	    dl,	1
seg000:6FAC		    rcr	    ax,	1
seg000:6FAE		    loop    loc_6FAA
seg000:6FB0		    retn
seg000:6FB0 sub_6FA2	    endp
seg000:6FB0
seg000:6FB0 ; ---------------------------------------------------------------------------
seg000:6FB1		    db 0CFh ; Ï
seg000:6FB2		    db	  0
seg000:6FB3		    db	  1
seg000:6FB4		    db 0B8h ; ¸
seg000:6FB5		    db	6Fh ; o
seg000:6FB6		    db	0Fh
seg000:6FB7		    db	  0
seg000:6FB8		    db 0B1h ; ±
seg000:6FB9		    db	6Fh ; o
seg000:6FBA		    db	38h ; 8
seg000:6FBB		    db	  0
seg000:6FBC		    db	  0
seg000:6FBD		    db	87h ; 
seg000:6FBE		    db	  0
seg000:6FBF		    db	  0
seg000:6FC0		    db 0B1h ; ±
seg000:6FC1		    db	6Fh ; o
seg000:6FC2		    db	38h ; 8
seg000:6FC3		    db	  0
seg000:6FC4		    db	  0
seg000:6FC5		    db	87h ; 
seg000:6FC6		    db	  0
seg000:6FC7		    db	  0
seg000:6FC8		    db 0B1h ; ±
seg000:6FC9		    db	6Fh ; o
seg000:6FCA		    db	38h ; 8
seg000:6FCB		    db	  0
seg000:6FCC		    db	  0
seg000:6FCD		    db	87h ; 
seg000:6FCE		    db	  0
seg000:6FCF		    db	  0
seg000:6FD0		    db 0B1h ; ±
seg000:6FD1		    db	6Fh ; o
seg000:6FD2		    db	38h ; 8
seg000:6FD3		    db	  0
seg000:6FD4		    db	  0
seg000:6FD5		    db	87h ; 
seg000:6FD6		    db	  0
seg000:6FD7		    db	  0
seg000:6FD8		    db 0B1h ; ±
seg000:6FD9		    db	6Fh ; o
seg000:6FDA		    db	38h ; 8
seg000:6FDB		    db	  0
seg000:6FDC		    db	  0
seg000:6FDD		    db	87h ; 
seg000:6FDE		    db	  0
seg000:6FDF		    db	  0
seg000:6FE0		    db 0B1h ; ±
seg000:6FE1		    db	6Fh ; o
seg000:6FE2		    db	38h ; 8
seg000:6FE3		    db	  0
seg000:6FE4		    db	  0
seg000:6FE5		    db	87h ; 
seg000:6FE6		    db	  0
seg000:6FE7		    db	  0
seg000:6FE8		    db 0B1h ; ±
seg000:6FE9		    db	6Fh ; o
seg000:6FEA		    db	38h ; 8
seg000:6FEB		    db	  0
seg000:6FEC		    db	  0
seg000:6FED		    db	87h ; 
seg000:6FEE		    db	  0
seg000:6FEF		    db	  0
seg000:6FF0		    db 0B1h ; ±
seg000:6FF1		    db	6Fh ; o
seg000:6FF2		    db	38h ; 8
seg000:6FF3		    db	  0
seg000:6FF4		    db	  0
seg000:6FF5		    db	87h ; 
seg000:6FF6		    db	  0
seg000:6FF7		    db	  0
seg000:6FF8		    db 0B1h ; ±
seg000:6FF9		    db	6Fh ; o
seg000:6FFA		    db	38h ; 8
seg000:6FFB		    db	  0
seg000:6FFC		    db	  0
seg000:6FFD		    db	87h ; 
seg000:6FFE		    db	  0
seg000:6FFF		    db	  0
seg000:7000		    db 0B1h ; ±
seg000:7001		    db	6Fh ; o
seg000:7002		    db	38h ; 8
seg000:7003		    db	  0
seg000:7004		    db	  0
seg000:7005		    db	87h ; 
seg000:7006		    db	  0
seg000:7007		    db	  0
seg000:7008		    db 0B1h ; ±
seg000:7009		    db	6Fh ; o
seg000:700A		    db	38h ; 8
seg000:700B		    db	  0
seg000:700C		    db	  0
seg000:700D		    db	87h ; 
seg000:700E		    db	  0
seg000:700F		    db	  0
seg000:7010		    db 0B1h ; ±
seg000:7011		    db	6Fh ; o
seg000:7012		    db	38h ; 8
seg000:7013		    db	  0
seg000:7014		    db	  0
seg000:7015		    db	87h ; 
seg000:7016		    db	  0
seg000:7017		    db	  0
seg000:7018		    db 0B1h ; ±
seg000:7019		    db	6Fh ; o
seg000:701A		    db	38h ; 8
seg000:701B		    db	  0
seg000:701C		    db	  0
seg000:701D		    db	87h ; 
seg000:701E		    db	  0
seg000:701F		    db	  0
seg000:7020		    db 0B1h ; ±
seg000:7021		    db	6Fh ; o
seg000:7022		    db	38h ; 8
seg000:7023		    db	  0
seg000:7024		    db	  0
seg000:7025		    db	87h ; 
seg000:7026		    db	  0
seg000:7027		    db	  0
seg000:7028		    db 0B1h ; ±
seg000:7029		    db	6Fh ; o
seg000:702A		    db	38h ; 8
seg000:702B		    db	  0
seg000:702C		    db	  0
seg000:702D		    db	87h ; 
seg000:702E		    db	  0
seg000:702F		    db	  0
seg000:7030		    db 0B1h ; ±
seg000:7031		    db	6Fh ; o
seg000:7032		    db	38h ; 8
seg000:7033		    db	  0
seg000:7034		    db	  0
seg000:7035		    db	87h ; 
seg000:7036		    db	  0
seg000:7037		    db	  0
seg000:7038		    db 0B1h ; ±
seg000:7039		    db	6Fh ; o
seg000:703A		    db	38h ; 8
seg000:703B		    db	  0
seg000:703C		    db	  0
seg000:703D		    db	87h ; 
seg000:703E		    db	  0
seg000:703F		    db	  0
seg000:7040		    db 0B1h ; ±
seg000:7041		    db	6Fh ; o
seg000:7042		    db	38h ; 8
seg000:7043		    db	  0
seg000:7044		    db	  0
seg000:7045		    db	87h ; 
seg000:7046		    db	  0
seg000:7047		    db	  0
seg000:7048		    db 0B1h ; ±
seg000:7049		    db	6Fh ; o
seg000:704A		    db	38h ; 8
seg000:704B		    db	  0
seg000:704C		    db	  0
seg000:704D		    db	87h ; 
seg000:704E		    db	  0
seg000:704F		    db	  0
seg000:7050		    db 0B1h ; ±
seg000:7051		    db	6Fh ; o
seg000:7052		    db	38h ; 8
seg000:7053		    db	  0
seg000:7054		    db	  0
seg000:7055		    db	87h ; 
seg000:7056		    db	  0
seg000:7057		    db	  0
seg000:7058		    db 0B1h ; ±
seg000:7059		    db	6Fh ; o
seg000:705A		    db	38h ; 8
seg000:705B		    db	  0
seg000:705C		    db	  0
seg000:705D		    db	87h ; 
seg000:705E		    db	  0
seg000:705F		    db	  0
seg000:7060		    db 0B1h ; ±
seg000:7061		    db	6Fh ; o
seg000:7062		    db	38h ; 8
seg000:7063		    db	  0
seg000:7064		    db	  0
seg000:7065		    db	87h ; 
seg000:7066		    db	  0
seg000:7067		    db	  0
seg000:7068		    db 0B1h ; ±
seg000:7069		    db	6Fh ; o
seg000:706A		    db	38h ; 8
seg000:706B		    db	  0
seg000:706C		    db	  0
seg000:706D		    db	87h ; 
seg000:706E		    db	  0
seg000:706F		    db	  0
seg000:7070		    db 0B1h ; ±
seg000:7071		    db	6Fh ; o
seg000:7072		    db	38h ; 8
seg000:7073		    db	  0
seg000:7074		    db	  0
seg000:7075		    db	87h ; 
seg000:7076		    db	  0
seg000:7077		    db	  0
seg000:7078		    db 0B1h ; ±
seg000:7079		    db	6Fh ; o
seg000:707A		    db	38h ; 8
seg000:707B		    db	  0
seg000:707C		    db	  0
seg000:707D		    db	87h ; 
seg000:707E		    db	  0
seg000:707F		    db	  0
seg000:7080		    db 0B1h ; ±
seg000:7081		    db	6Fh ; o
seg000:7082		    db	38h ; 8
seg000:7083		    db	  0
seg000:7084		    db	  0
seg000:7085		    db	87h ; 
seg000:7086		    db	  0
seg000:7087		    db	  0
seg000:7088		    db 0B1h ; ±
seg000:7089		    db	6Fh ; o
seg000:708A		    db	38h ; 8
seg000:708B		    db	  0
seg000:708C		    db	  0
seg000:708D		    db	87h ; 
seg000:708E		    db	  0
seg000:708F		    db	  0
seg000:7090		    db 0B1h ; ±
seg000:7091		    db	6Fh ; o
seg000:7092		    db	38h ; 8
seg000:7093		    db	  0
seg000:7094		    db	  0
seg000:7095		    db	87h ; 
seg000:7096		    db	  0
seg000:7097		    db	  0
seg000:7098		    db 0B1h ; ±
seg000:7099		    db	6Fh ; o
seg000:709A		    db	38h ; 8
seg000:709B		    db	  0
seg000:709C		    db	  0
seg000:709D		    db	87h ; 
seg000:709E		    db	  0
seg000:709F		    db	  0
seg000:70A0		    db 0B1h ; ±
seg000:70A1		    db	6Fh ; o
seg000:70A2		    db	38h ; 8
seg000:70A3		    db	  0
seg000:70A4		    db	  0
seg000:70A5		    db	87h ; 
seg000:70A6		    db	  0
seg000:70A7		    db	  0
seg000:70A8		    db 0B1h ; ±
seg000:70A9		    db	6Fh ; o
seg000:70AA		    db	38h ; 8
seg000:70AB		    db	  0
seg000:70AC		    db	  0
seg000:70AD		    db	87h ; 
seg000:70AE		    db	  0
seg000:70AF		    db	  0
seg000:70B0		    db 0B1h ; ±
seg000:70B1		    db	6Fh ; o
seg000:70B2		    db	38h ; 8
seg000:70B3		    db	  0
seg000:70B4		    db	  0
seg000:70B5		    db	87h ; 
seg000:70B6		    db	  0
seg000:70B7		    db	  0
seg000:70B8
seg000:70B8 ; =============== S	U B R O	U T I N	E =======================================
seg000:70B8
seg000:70B8
seg000:70B8 LPT_print	    proc far		    ; CODE XREF: LPT_print_0j
seg000:70B8		    push    ax
seg000:70B9		    push    bx
seg000:70BA		    push    cx
seg000:70BB		    push    dx
seg000:70BC		    push    ds
seg000:70BD		    push    es
seg000:70BE		    mov	    ds,	word ptr cs:loc_C5+1
seg000:70C3		    out	    0FBh, al	    ; AT 80287 data.
seg000:70C3					    ; 286 sends	opcodes	& operands and receives	results.
seg000:70C5		    pushf
seg000:70C6		    inc	    byte ptr ds:loc_BB+4
seg000:70CA		    popf
seg000:70CB		    cmp	    byte ptr cs:loc_3B+2, 0
seg000:70D1		    jnz	    short loc_70D9
seg000:70D3		    mov	    byte ptr cs:loc_3B+2, 19h
seg000:70D9
seg000:70D9 loc_70D9:				    ; CODE XREF: LPT_print+19j
seg000:70D9		    mov	    ax,	50h ; 'P'
seg000:70DC		    mov	    es,	ax
seg000:70DE		    assume es:nothing
seg000:70DE		    mov	    al,	1
seg000:70E0		    xchg    al,	es:0
seg000:70E5		    cmp	    al,	1
seg000:70E7		    jz	    short loc_713A
seg000:70E9		    mov	    bh,	byte ptr ds:loc_61+1
seg000:70ED		    call    read_50h_bl_toDX
seg000:70F0		    push    dx
seg000:70F1		    mov	    dx,	0
seg000:70F4
seg000:70F4 loc_70F4:				    ; CODE XREF: LPT_print+55j
seg000:70F4					    ; LPT_print+6Ej
seg000:70F4		    mov	    ah,	2
seg000:70F6		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:70F6					    ; DH,DL = row, column (0,0 = upper left)
seg000:70F6					    ; BH = page	number
seg000:70F8		    mov	    ah,	8
seg000:70FA		    int	    10h		    ; -	VIDEO -	READ ATTRIBUTES/CHARACTER AT CURSOR POSITION
seg000:70FA					    ; BH = display page
seg000:70FA					    ; Return: AL = character
seg000:70FA					    ; AH = attribute of	character (alpha modes)
seg000:70FC		    test    al,	al
seg000:70FE		    jnz	    short loc_7102
seg000:7100		    mov	    al,	20h ; ' '
seg000:7102
seg000:7102 loc_7102:				    ; CODE XREF: LPT_print+46j
seg000:7102		    call    LPT0_out
seg000:7105		    jb	    short loc_7130
seg000:7107		    inc	    dl
seg000:7109		    cmp	    dl,	byte ptr ds:init_ram_loop
seg000:710D		    jb	    short loc_70F4
seg000:710F		    mov	    al,	0Dh
seg000:7111		    call    LPT0_out
seg000:7114		    jb	    short loc_7130
seg000:7116		    mov	    al,	0Ah
seg000:7118		    call    LPT0_out
seg000:711B		    jb	    short loc_7130
seg000:711D		    mov	    dl,	0
seg000:711F		    inc	    dh
seg000:7121		    cmp	    dh,	byte ptr cs:loc_3B+2
seg000:7126		    jbe	    short loc_70F4
seg000:7128		    mov	    byte ptr es:0, 0
seg000:712E		    jmp	    short loc_7136
seg000:7130 ; ---------------------------------------------------------------------------
seg000:7130
seg000:7130 loc_7130:				    ; CODE XREF: LPT_print+4Dj
seg000:7130					    ; LPT_print+5Cj ...
seg000:7130		    mov	    byte ptr es:0, 0FFh
seg000:7136
seg000:7136 loc_7136:				    ; CODE XREF: LPT_print+76j
seg000:7136		    pop	    dx
seg000:7137		    call    sub_5245
seg000:713A
seg000:713A loc_713A:				    ; CODE XREF: LPT_print+2Fj
seg000:713A		    pushf
seg000:713B		    dec	    byte ptr ds:loc_BB+4
seg000:713F		    jnz	    short loc_7143
seg000:7141		    out	    0F9h, al	    ; AT 80287 data.
seg000:7141					    ; 286 sends	opcodes	& operands and receives	results.
seg000:7143
seg000:7143 loc_7143:				    ; CODE XREF: LPT_print+87j
seg000:7143		    popf
seg000:7144		    pop	    es
seg000:7145		    assume es:nothing
seg000:7145		    pop	    ds
seg000:7146		    pop	    dx
seg000:7147		    pop	    cx
seg000:7148		    pop	    bx
seg000:7149		    pop	    ax
seg000:714A		    iret
seg000:714A LPT_print	    endp
seg000:714A
seg000:714B
seg000:714B ; =============== S	U B R O	U T I N	E =======================================
seg000:714B
seg000:714B
seg000:714B LPT0_out	    proc near		    ; CODE XREF: LPT_print:loc_7102p
seg000:714B					    ; LPT_print+59p ...
seg000:714B		    push    ax
seg000:714C		    push    dx
seg000:714D		    mov	    ah,	0
seg000:714F		    mov	    dx,	0
seg000:7152		    int	    17h		    ; PRINTER -	OUTPUT CHARACTER
seg000:7152					    ; AL = character, DX = printer port	(0-3)
seg000:7152					    ; Return: AH = status bits
seg000:7154		    test    ah,	29h
seg000:7157		    jz	    short loc_715A
seg000:7159		    stc
seg000:715A
seg000:715A loc_715A:				    ; CODE XREF: LPT0_out+Cj
seg000:715A		    pop	    dx
seg000:715B		    pop	    ax
seg000:715C		    retn
seg000:715C LPT0_out	    endp
seg000:715C
seg000:715C ; ---------------------------------------------------------------------------
seg000:715D		    db	  0
seg000:715E
seg000:715E ; =============== S	U B R O	U T I N	E =======================================
seg000:715E
seg000:715E
seg000:715E test_PS2_ctrl   proc near		    ; CODE XREF: ColrWarm_Boot+2B5p
seg000:715E					    ; ColrWarm_Boot+3A2p ...
seg000:715E		    push    bx
seg000:715F		    push    cx
seg000:7160		    push    ax
seg000:7161		    mov	    cx,	0FFFFh
seg000:7164
seg000:7164 loc_7164:				    ; CODE XREF: test_PS2_ctrl+Ej
seg000:7164		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:7164					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:7164					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:7164					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:7164					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:7164					    ;	 +------------------------------+-----------------------------------+
seg000:7164					    ; 4:  INH	  0=keyboard communications inhibited
seg000:7164					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:7164					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:7164					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:7164					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:7166		    and	    al,	1
seg000:7168		    jz	    short loc_716E
seg000:716A		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:716C		    loop    loc_7164
seg000:716E
seg000:716E loc_716E:				    ; CODE XREF: test_PS2_ctrl+Aj
seg000:716E		    xor	    bx,	bx
seg000:7170		    mov	    ah,	0AAh	    ; Test PS/2	Controller
seg000:7172		    call    Keyboard_command
seg000:7175		    adc	    bl,	bl
seg000:7177		    call    Keyboard_read
seg000:717A		    adc	    bl,	bl
seg000:717C		    mov	    bh,	al
seg000:717E		    mov	    ah,	60h	    ; Write next byte to "byte 0" of internal RAM (Controller Configuration Byte)
seg000:7180		    call    Keyboard_command
seg000:7183		    adc	    bl,	bl
seg000:7185		    call    Keyboard_readyWait
seg000:7188		    adc	    bl,	bl
seg000:718A		    pop	    ax
seg000:718B		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:718D		    mov	    ah,	0C0h	    ; Read controller input port
seg000:718F		    call    Keyboard_command
seg000:7192		    adc	    bl,	bl
seg000:7194		    call    Keyboard_read
seg000:7197		    test    bl,	bl
seg000:7199		    stc
seg000:719A		    jnz	    short loc_71A2
seg000:719C		    cmp	    bh,	55h	    ; 0x55 test	passed
seg000:719F		    jz	    short loc_71A2
seg000:71A1		    stc
seg000:71A2
seg000:71A2 loc_71A2:				    ; CODE XREF: test_PS2_ctrl+3Cj
seg000:71A2					    ; test_PS2_ctrl+41j
seg000:71A2		    pop	    cx
seg000:71A3		    pop	    bx
seg000:71A4		    retn
seg000:71A4 test_PS2_ctrl   endp
seg000:71A4
seg000:71A5
seg000:71A5 ; =============== S	U B R O	U T I N	E =======================================
seg000:71A5
seg000:71A5
seg000:71A5 Keyboard_?	    proc near		    ; CODE XREF: ColrWarm_Boot+4F0p
seg000:71A5					    ; keyb_wait_press?+Cp
seg000:71A5		    push    ax
seg000:71A6		    push    dx
seg000:71A7		    mov	    ah,	3Ah ; ':'
seg000:71A9		    call    Keyboard_command
seg000:71AC		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:71AE		    call    Keyboard_read
seg000:71B1		    jb	    short loc_71B8
seg000:71B3		    test    al,	al
seg000:71B5		    jz	    short loc_71B8
seg000:71B7		    stc
seg000:71B8
seg000:71B8 loc_71B8:				    ; CODE XREF: Keyboard_?+Cj
seg000:71B8					    ; Keyboard_?+10j
seg000:71B8		    pop	    dx
seg000:71B9		    pop	    ax
seg000:71BA		    retn
seg000:71BA Keyboard_?	    endp
seg000:71BA
seg000:71BB
seg000:71BB ; =============== S	U B R O	U T I N	E =======================================
seg000:71BB
seg000:71BB
seg000:71BB port_FBFFF9_Out proc near		    ; CODE XREF: load_GDT+1p
seg000:71BB					    ; diag_out?+5p ...
seg000:71BB		    push    ds
seg000:71BC		    mov	    ds,	word ptr cs:loc_C5+1
seg000:71C1		    out	    0FBh, al	    ; AT 80287 data.
seg000:71C1					    ; 286 sends	opcodes	& operands and receives	results.
seg000:71C3		    pushf
seg000:71C4		    inc	    byte ptr ds:loc_BB+4
seg000:71C8		    popf
seg000:71C9		    out	    0EEh, al
seg000:71CB		    xor	    al,	al
seg000:71CD		    pushf
seg000:71CE		    dec	    byte ptr ds:loc_BB+4
seg000:71D2		    jnz	    short loc_71D6
seg000:71D4		    out	    0F9h, al	    ; AT 80287 data.
seg000:71D4					    ; 286 sends	opcodes	& operands and receives	results.
seg000:71D6
seg000:71D6 loc_71D6:				    ; CODE XREF: port_FBFFF9_Out+17j
seg000:71D6		    popf
seg000:71D7		    pop	    ds
seg000:71D8		    retn
seg000:71D8 port_FBFFF9_Out endp
seg000:71D8
seg000:71D9
seg000:71D9 ; =============== S	U B R O	U T I N	E =======================================
seg000:71D9
seg000:71D9
seg000:71D9 sub_71D9	    proc near		    ; CODE XREF: ColrWarm_Boot+486p
seg000:71D9					    ; seg000:5EF5p ...
seg000:71D9		    push    ds
seg000:71DA		    mov	    ds,	word ptr cs:loc_C5+1
seg000:71DF		    out	    0FBh, al	    ; AT 80287 data.
seg000:71DF					    ; 286 sends	opcodes	& operands and receives	results.
seg000:71E1		    pushf
seg000:71E2		    inc	    byte ptr ds:loc_BB+4
seg000:71E6		    popf
seg000:71E7		    in	    al,	0EEh
seg000:71E9		    pushf
seg000:71EA		    dec	    byte ptr ds:loc_BB+4
seg000:71EE		    jnz	    short loc_71F2
seg000:71F0		    out	    0F9h, al	    ; AT 80287 data.
seg000:71F0					    ; 286 sends	opcodes	& operands and receives	results.
seg000:71F2
seg000:71F2 loc_71F2:				    ; CODE XREF: sub_71D9+15j
seg000:71F2		    popf
seg000:71F3		    pop	    ds
seg000:71F4		    xor	    al,	al
seg000:71F6		    jmp	    short locret_7211
seg000:71F6 sub_71D9	    endp
seg000:71F6
seg000:71F8
seg000:71F8 ; =============== S	U B R O	U T I N	E =======================================
seg000:71F8
seg000:71F8
seg000:71F8 sub_71F8	    proc near		    ; CODE XREF: ColrWarm_Boot+489p
seg000:71F8					    ; ColrWarm_Boot+929Cp
seg000:71F8		    mov	    ah,	0D1h ; 'Ñ'
seg000:71FA		    call    Keyboard_command
seg000:71FD		    jb	    short loc_720F
seg000:71FF		    call    Keyboard_readyWait
seg000:7202		    jb	    short loc_720F
seg000:7204		    mov	    al,	0DDh ; 'Ý'
seg000:7206		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:7208		    call    Keyboard_readyWait
seg000:720B		    mov	    al,	0
seg000:720D		    jnb	    short locret_7211
seg000:720F
seg000:720F loc_720F:				    ; CODE XREF: sub_71F8+5j
seg000:720F					    ; sub_71F8+Aj
seg000:720F		    mov	    al,	2
seg000:7211
seg000:7211 locret_7211:			    ; CODE XREF: sub_71D9+1Dj
seg000:7211					    ; sub_71F8+15j
seg000:7211		    retn
seg000:7211 sub_71F8	    endp
seg000:7211
seg000:7212
seg000:7212 ; =============== S	U B R O	U T I N	E =======================================
seg000:7212
seg000:7212
seg000:7212 Keyboard_command proc near		    ; CODE XREF: ColrWarm_Boot+221p
seg000:7212					    ; ColrWarm_Boot+22Dp ...
seg000:7212		    push    ax
seg000:7213		    call    Keyboard_readyWait
seg000:7216		    jb	    short loc_721C
seg000:7218		    mov	    al,	ah
seg000:721A		    out	    64h, al	    ; 8042 keyboard controller command register.
seg000:721C
seg000:721C loc_721C:				    ; CODE XREF: Keyboard_command+4j
seg000:721C		    pop	    ax
seg000:721D		    retn
seg000:721D Keyboard_command endp
seg000:721D
seg000:721E
seg000:721E ; =============== S	U B R O	U T I N	E =======================================
seg000:721E
seg000:721E
seg000:721E Keyboard_data_OutIn	proc near	    ; CODE XREF: keyb_reset_PC+2Bp
seg000:721E					    ; Keyboard_init+2Dp ...
seg000:721E		    push    bp
seg000:721F		    mov	    bp,	3
seg000:7222
seg000:7222 loc_7222:				    ; CODE XREF: Keyboard_data_OutIn+18j
seg000:7222					    ; diag_out?+E4J
seg000:7222		    call    Keyboard_readyWait
seg000:7225		    mov	    al,	ah
seg000:7227		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:7229		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:722B		    call    Keyboard_read
seg000:722E		    jb	    short loc_7234
seg000:7230		    cmp	    al,	0FAh ; 'ú'
seg000:7232		    jz	    short loc_7238
seg000:7234
seg000:7234 loc_7234:				    ; CODE XREF: Keyboard_data_OutIn+10j
seg000:7234		    dec	    bp
seg000:7235		    stc
seg000:7236		    jnz	    short loc_7222
seg000:7238
seg000:7238 loc_7238:				    ; CODE XREF: Keyboard_data_OutIn+14j
seg000:7238		    pop	    bp
seg000:7239		    retn
seg000:7239 Keyboard_data_OutIn	endp
seg000:7239
seg000:723A
seg000:723A ; =============== S	U B R O	U T I N	E =======================================
seg000:723A
seg000:723A
seg000:723A Keyboard_data   proc near		    ; CODE XREF: keyb_?+1Ap
seg000:723A					    ; keyb_?+2Fp ...
seg000:723A		    push    ax
seg000:723B		    push    cx
seg000:723C		    push    bp
seg000:723D		    push    es
seg000:723E		    mov	    es,	word ptr cs:loc_48+1
seg000:7243		    mov	    bp,	3
seg000:7246
seg000:7246 loc_7246:				    ; CODE XREF: Keyboard_data+2Bj
seg000:7246		    cli
seg000:7247		    and	    byte ptr es:loc_97,	0CFh
seg000:724D		    call    Keyboard_readyWait
seg000:7250		    mov	    al,	ah
seg000:7252		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:7254		    mov	    cx,	0B400h
seg000:7257		    sti
seg000:7258
seg000:7258 loc_7258:				    ; CODE XREF: Keyboard_data+24j
seg000:7258		    mov	    al,	byte ptr es:loc_97
seg000:725C		    and	    al,	30h
seg000:725E		    loope   loc_7258
seg000:7260		    cmp	    al,	10h
seg000:7262		    jz	    short loc_7268
seg000:7264		    dec	    bp
seg000:7265		    jnz	    short loc_7246
seg000:7267		    stc
seg000:7268
seg000:7268 loc_7268:				    ; CODE XREF: Keyboard_data+28j
seg000:7268		    pop	    es
seg000:7269		    pop	    bp
seg000:726A		    pop	    cx
seg000:726B		    pop	    ax
seg000:726C		    retn
seg000:726C Keyboard_data   endp
seg000:726C
seg000:726D
seg000:726D ; =============== S	U B R O	U T I N	E =======================================
seg000:726D
seg000:726D
seg000:726D Keyboard_read   proc near		    ; CODE XREF: ColrWarm_Boot+50Ep
seg000:726D					    ; ColrWarm_Boot+5308p ...
seg000:726D		    push    cx
seg000:726E		    push    bp
seg000:726F		    mov	    bp,	5
seg000:7272
seg000:7272 loc_7272:				    ; CODE XREF: Keyboard_read+14j
seg000:7272		    mov	    cx,	0FFFFh
seg000:7275
seg000:7275 loc_7275:				    ; CODE XREF: Keyboard_read+Ej
seg000:7275		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:7275					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:7275					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:7275					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:7275					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:7275					    ;	 +------------------------------+-----------------------------------+
seg000:7275					    ; 4:  INH	  0=keyboard communications inhibited
seg000:7275					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:7275					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:7275					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:7275					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:7277		    and	    al,	1
seg000:7279		    jnz	    short loc_7283
seg000:727B		    loop    loc_7275
seg000:727D		    dec	    bp
seg000:727E		    stc
seg000:727F		    jz	    short loc_7286
seg000:7281		    jmp	    short loc_7272
seg000:7283 ; ---------------------------------------------------------------------------
seg000:7283
seg000:7283 loc_7283:				    ; CODE XREF: Keyboard_read+Cj
seg000:7283		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:7285		    clc
seg000:7286
seg000:7286 loc_7286:				    ; CODE XREF: Keyboard_read+12j
seg000:7286		    pop	    bp
seg000:7287		    pop	    cx
seg000:7288		    retn
seg000:7288 Keyboard_read   endp
seg000:7288
seg000:7289
seg000:7289 ; =============== S	U B R O	U T I N	E =======================================
seg000:7289
seg000:7289
seg000:7289 Keyboard_readyWait proc near	    ; CODE XREF: ColrWarm_Boot+224p
seg000:7289					    ; FPU_init_?+69p ...
seg000:7289		    push    ax
seg000:728A		    push    cx
seg000:728B		    cli
seg000:728C		    mov	    cx,	0FFFFh
seg000:728F
seg000:728F loc_728F:				    ; CODE XREF: Keyboard_readyWait+Cj
seg000:728F		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:728F					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:728F					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:728F					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:728F					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:728F					    ;	 +------------------------------+-----------------------------------+
seg000:728F					    ; 4:  INH	  0=keyboard communications inhibited
seg000:728F					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:728F					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:728F					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:728F					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:7291		    and	    al,	2
seg000:7293		    jz	    short loc_7298
seg000:7295		    loop    loc_728F
seg000:7297		    stc
seg000:7298
seg000:7298 loc_7298:				    ; CODE XREF: Keyboard_readyWait+Aj
seg000:7298		    pop	    cx
seg000:7299		    pop	    ax
seg000:729A		    retn
seg000:729A Keyboard_readyWait endp
seg000:729A
seg000:729A ; ---------------------------------------------------------------------------
seg000:729B		    db 0
seg000:729C
seg000:729C ; =============== S	U B R O	U T I N	E =======================================
seg000:729C
seg000:729C
seg000:729C sub_729C	    proc far		    ; CODE XREF: sub_E82Ej
seg000:729C		    push    bx
seg000:729D		    push    bp
seg000:729E		    push    ds
seg000:729F		    push    es
seg000:72A0		    mov	    ds,	word ptr cs:loc_C5+1
seg000:72A5		    out	    0FBh, al	    ; AT 80287 data.
seg000:72A5					    ; 286 sends	opcodes	& operands and receives	results.
seg000:72A7		    pushf
seg000:72A8		    inc	    byte ptr ds:loc_BB+4
seg000:72AC		    popf
seg000:72AD		    call    sub_7C15
seg000:72B0		    sti
seg000:72B1		    cmp	    ah,	13h
seg000:72B4		    nop
seg000:72B5		    jb	    short loc_72BD
seg000:72B7		    sub	    ah,	12h
seg000:72BA		    stc
seg000:72BB		    jmp	    short loc_72E9
seg000:72BD ; ---------------------------------------------------------------------------
seg000:72BD
seg000:72BD loc_72BD:				    ; CODE XREF: sub_729C+19j
seg000:72BD		    call    push_ret_ah
seg000:72C0		    jmp	    short loc_72E9
seg000:72C0 ; ---------------------------------------------------------------------------
seg000:72C2		    db	90h ; 
seg000:72C3 ret_vectors_5   dw offset keyb_menu	    ; 0
seg000:72C3		    dw offset get_key?_0    ; 1
seg000:72C3		    dw offset load_something?; 2
seg000:72C3		    dw offset keyb_?	    ; 3
seg000:72C3		    dw offset subtract_ah12h; 4
seg000:72C3		    dw offset some_compare?_0; 5
seg000:72C3		    dw offset subtract_ah12h; 6
seg000:72C3		    dw offset subtract_ah12h; 7
seg000:72C3		    dw offset subtract_ah12h; 8
seg000:72C3		    dw offset subtract_ah12h; 9
seg000:72C3		    dw offset subtract_ah12h; 0Ah
seg000:72C3		    dw offset subtract_ah12h; 0Bh
seg000:72C3		    dw offset subtract_ah12h; 0Ch
seg000:72C3		    dw offset subtract_ah12h; 0Dh
seg000:72C3		    dw offset subtract_ah12h; 0Eh
seg000:72C3		    dw offset subtract_ah12h; 0Fh
seg000:72C3		    dw offset keyb_get_wait_0; 10h
seg000:72C3		    dw offset replace_equal ; 11h
seg000:72C3		    dw offset load_something?_0; 12h
seg000:72E9 ; ---------------------------------------------------------------------------
seg000:72E9
seg000:72E9 loc_72E9:				    ; CODE XREF: sub_729C+1Fj
seg000:72E9					    ; sub_729C+24j
seg000:72E9		    pushf
seg000:72EA		    dec	    byte ptr ds:loc_BB+4
seg000:72EE		    jnz	    short loc_72F2
seg000:72F0		    out	    0F9h, al	    ; AT 80287 data.
seg000:72F0					    ; 286 sends	opcodes	& operands and receives	results.
seg000:72F2
seg000:72F2 loc_72F2:				    ; CODE XREF: sub_729C+52j
seg000:72F2		    popf
seg000:72F3		    pop	    es
seg000:72F4		    pop	    ds
seg000:72F5		    pop	    bp
seg000:72F6		    pop	    bx
seg000:72F7		    jb	    short locret_72FC
seg000:72F9		    retf    2
seg000:72FC ; ---------------------------------------------------------------------------
seg000:72FC
seg000:72FC locret_72FC:			    ; CODE XREF: sub_729C+5Bj
seg000:72FC		    iret
seg000:72FC sub_729C	    endp
seg000:72FC
seg000:72FD
seg000:72FD ; =============== S	U B R O	U T I N	E =======================================
seg000:72FD
seg000:72FD
seg000:72FD keyb_menu	    proc near		    ; CODE XREF: sub_2253+Bp
seg000:72FD					    ; sub_2253+Ep ...
seg000:72FD		    call    keyb_get_wait
seg000:7300		    call    comparison_?
seg000:7303		    jb	    short keyb_menu
seg000:7305		    stc
seg000:7306		    retn
seg000:7306 keyb_menu	    endp
seg000:7306
seg000:7307
seg000:7307 ; =============== S	U B R O	U T I N	E =======================================
seg000:7307
seg000:7307
seg000:7307 get_key?_0	    proc near		    ; CODE XREF: sub_2253+2p
seg000:7307					    ; sub_2253+2Bp ...
seg000:7307		    call    get_key?
seg000:730A		    jz	    short locret_7319
seg000:730C		    pushf
seg000:730D		    call    comparison_?
seg000:7310		    jnb	    short loc_7318
seg000:7312		    popf
seg000:7313		    call    keyb_get_wait
seg000:7316		    jmp	    short get_key?_0
seg000:7318 ; ---------------------------------------------------------------------------
seg000:7318
seg000:7318 loc_7318:				    ; CODE XREF: get_key?_0+9j
seg000:7318		    popf
seg000:7319
seg000:7319 locret_7319:			    ; CODE XREF: get_key?_0+3j
seg000:7319		    retn
seg000:7319 get_key?_0	    endp
seg000:7319
seg000:731A
seg000:731A ; =============== S	U B R O	U T I N	E =======================================
seg000:731A
seg000:731A
seg000:731A keyb_?	    proc near		    ; DATA XREF: sub_729C:ret_vectors_5o
seg000:731A		    push    es
seg000:731B		    push    cx
seg000:731C		    mov	    es,	word ptr cs:loc_48+1
seg000:7321		    xchg    al,	ah
seg000:7323		    cmp	    bl,	1Fh
seg000:7326		    ja	    short loc_7356
seg000:7328		    cmp	    bh,	3
seg000:732B		    ja	    short loc_7356
seg000:732D		    cmp	    ah,	5
seg000:7330		    jnz	    short loc_7356
seg000:7332		    mov	    ah,	0F3h ; 'ó'
seg000:7334		    call    Keyboard_data
seg000:7337		    jnb	    short loc_7341
seg000:7339		    cli
seg000:733A		    or	    byte ptr es:loc_97,	80h
seg000:7340		    sti
seg000:7341
seg000:7341 loc_7341:				    ; CODE XREF: keyb_?+1Dj
seg000:7341		    mov	    cl,	5
seg000:7343		    shl	    bh,	cl
seg000:7345		    mov	    ah,	bl
seg000:7347		    or	    ah,	bh
seg000:7349		    call    Keyboard_data
seg000:734C		    jnb	    short loc_7356
seg000:734E		    cli
seg000:734F		    or	    byte ptr es:loc_97,	80h
seg000:7355		    sti
seg000:7356
seg000:7356 loc_7356:				    ; CODE XREF: keyb_?+Cj
seg000:7356					    ; keyb_?+11j ...
seg000:7356		    xchg    al,	ah
seg000:7358		    mov	    ah,	0
seg000:735A		    pop	    cx
seg000:735B		    pop	    es
seg000:735C		    stc
seg000:735D		    retn
seg000:735D keyb_?	    endp
seg000:735D
seg000:735E
seg000:735E ; =============== S	U B R O	U T I N	E =======================================
seg000:735E
seg000:735E
seg000:735E some_compare?_0 proc near		    ; DATA XREF: sub_729C:ret_vectors_5o
seg000:735E		    push    si
seg000:735F		    push    di
seg000:7360		    push    ds
seg000:7361		    push    es
seg000:7362		    cli
seg000:7363		    mov	    ds,	word ptr cs:loc_C5+1
seg000:7368		    mov	    al,	1
seg000:736A		    mov	    si,	word ptr ds:loc_19+3
seg000:736E		    mov	    di,	si
seg000:7370		    inc	    si
seg000:7371		    inc	    si
seg000:7372		    call    some_compare?
seg000:7375		    cmp	    si,	word ptr ds:loc_19+1
seg000:7379		    jz	    short loc_7389
seg000:737B		    mov	    word ptr ds:loc_19+3, si
seg000:737F		    mov	    es,	word ptr cs:loc_C7+1
seg000:7384		    mov	    es:[di], cx
seg000:7387		    mov	    al,	0
seg000:7389
seg000:7389 loc_7389:				    ; CODE XREF: some_compare?_0+1Bj
seg000:7389		    sti
seg000:738A		    pop	    es
seg000:738B		    pop	    ds
seg000:738C		    pop	    di
seg000:738D		    pop	    si
seg000:738E		    stc
seg000:738F		    mov	    ah,	0
seg000:7391		    retn
seg000:7391 some_compare?_0 endp
seg000:7391
seg000:7392
seg000:7392 ; =============== S	U B R O	U T I N	E =======================================
seg000:7392
seg000:7392
seg000:7392 keyb_get_wait_0 proc near		    ; CODE XREF: test_keyb+1Ap
seg000:7392					    ; DATA XREF: sub_729C:ret_vectors_5o
seg000:7392		    call    keyb_get_wait
seg000:7395		    cmp	    ah,	0
seg000:7398		    jz	    short loc_73A0
seg000:739A		    cmp	    al,	0F0h ; 'ð'
seg000:739C		    jnz	    short loc_73A0
seg000:739E		    mov	    al,	0
seg000:73A0
seg000:73A0 loc_73A0:				    ; CODE XREF: keyb_get_wait_0+6j
seg000:73A0					    ; keyb_get_wait_0+Aj
seg000:73A0		    stc
seg000:73A1		    retn
seg000:73A1 keyb_get_wait_0 endp
seg000:73A1
seg000:73A2
seg000:73A2 ; =============== S	U B R O	U T I N	E =======================================
seg000:73A2
seg000:73A2
seg000:73A2 replace_equal   proc near		    ; DATA XREF: sub_729C:ret_vectors_5o
seg000:73A2		    call    get_key?
seg000:73A5		    jz	    short locret_73B4
seg000:73A7		    pushf
seg000:73A8		    cmp	    ah,	0
seg000:73AB		    jz	    short loc_73B3
seg000:73AD		    cmp	    al,	0F0h ; 'ð'
seg000:73AF		    jnz	    short loc_73B3
seg000:73B1		    mov	    al,	0
seg000:73B3
seg000:73B3 loc_73B3:				    ; CODE XREF: replace_equal+9j
seg000:73B3					    ; replace_equal+Dj
seg000:73B3		    popf
seg000:73B4
seg000:73B4 locret_73B4:			    ; CODE XREF: replace_equal+3j
seg000:73B4		    retn
seg000:73B4 replace_equal   endp
seg000:73B4
seg000:73B5
seg000:73B5 ; =============== S	U B R O	U T I N	E =======================================
seg000:73B5
seg000:73B5
seg000:73B5 keyb_get_wait   proc near		    ; CODE XREF: keyb_menup
seg000:73B5					    ; get_key?_0+Cp ...
seg000:73B5		    push    si
seg000:73B6		    call    get_key?
seg000:73B9		    jnz	    short loc_73CA
seg000:73BB		    mov	    ax,	9002h
seg000:73BE		    int	    15h		    ; OS HOOK -	DEVICE BUSY LOOP (AT,XT2,XT286,CONV,PS)
seg000:73BE					    ; AL = keyboard
seg000:73C0
seg000:73C0 loc_73C0:				    ; CODE XREF: keyb_get_wait+13j
seg000:73C0		    cli
seg000:73C1		    call    get_key?
seg000:73C4		    jnz	    short loc_73CA
seg000:73C6		    sti
seg000:73C7		    nop
seg000:73C8		    jmp	    short loc_73C0
seg000:73CA ; ---------------------------------------------------------------------------
seg000:73CA
seg000:73CA loc_73CA:				    ; CODE XREF: keyb_get_wait+4j
seg000:73CA					    ; keyb_get_wait+Fj
seg000:73CA		    cli
seg000:73CB		    mov	    si,	word ptr ds:loc_19+1
seg000:73CF		    pushf
seg000:73D0		    inc	    si
seg000:73D1		    inc	    si
seg000:73D2		    popf
seg000:73D3		    call    some_compare?
seg000:73D6		    mov	    word ptr ds:loc_19+1, si
seg000:73DA		    sti
seg000:73DB		    pop	    si
seg000:73DC		    retn
seg000:73DC keyb_get_wait   endp
seg000:73DC
seg000:73DD
seg000:73DD ; =============== S	U B R O	U T I N	E =======================================
seg000:73DD
seg000:73DD
seg000:73DD get_key?	    proc near		    ; CODE XREF: get_key?_0p
seg000:73DD					    ; replace_equalp ...
seg000:73DD		    push    bx
seg000:73DE		    push    si
seg000:73DF		    push    es
seg000:73E0		    pushf
seg000:73E1		    cli
seg000:73E2		    mov	    es,	word ptr cs:loc_C7+1
seg000:73E7		    mov	    si,	word ptr ds:loc_19+1
seg000:73EB		    cmp	    si,	word ptr ds:loc_19+3
seg000:73EF		    mov	    ax,	es:[si]
seg000:73F2		    mov	    bx,	ax
seg000:73F4		    lahf
seg000:73F5		    mov	    al,	0
seg000:73F7		    call    sub_7994
seg000:73FA		    popf
seg000:73FB		    sahf
seg000:73FC		    mov	    ax,	bx
seg000:73FE		    pop	    es
seg000:73FF		    pop	    si
seg000:7400		    pop	    bx
seg000:7401		    clc
seg000:7402		    retn
seg000:7402 get_key?	    endp
seg000:7402
seg000:7403
seg000:7403 ; =============== S	U B R O	U T I N	E =======================================
seg000:7403
seg000:7403
seg000:7403 load_something? proc near		    ; DATA XREF: sub_729C:ret_vectors_5o
seg000:7403		    mov	    al,	byte ptr ds:loc_16+1
seg000:7406		    mov	    ah,	0
seg000:7408		    stc
seg000:7409		    retn
seg000:7409 load_something? endp
seg000:7409
seg000:740A
seg000:740A ; =============== S	U B R O	U T I N	E =======================================
seg000:740A
seg000:740A
seg000:740A load_something?_0 proc near		    ; DATA XREF: sub_729C:ret_vectors_5o
seg000:740A		    push    bx
seg000:740B		    push    es
seg000:740C		    mov	    es,	word ptr cs:loc_48+1
seg000:7411		    mov	    bh,	byte ptr ds:loc_16+2
seg000:7415		    and	    bh,	73h
seg000:7418		    test    byte ptr ds:loc_16+2, 4
seg000:741D		    jz	    short loc_7422
seg000:741F		    or	    bh,	80h
seg000:7422
seg000:7422 loc_7422:				    ; CODE XREF: load_something?_0+13j
seg000:7422		    mov	    bl,	byte ptr es:loc_95+1
seg000:7427		    and	    bl,	0Ch
seg000:742A		    or	    bh,	bl
seg000:742C		    mov	    bl,	byte ptr ds:loc_16+1
seg000:7430		    mov	    ax,	bx
seg000:7432		    stc
seg000:7433		    pop	    es
seg000:7434		    pop	    bx
seg000:7435		    retn
seg000:7435 load_something?_0 endp
seg000:7435
seg000:7436
seg000:7436 ; =============== S	U B R O	U T I N	E =======================================
seg000:7436
seg000:7436
seg000:7436 comparison_?    proc near		    ; CODE XREF: keyb_menu+3p
seg000:7436					    ; get_key?_0+6p
seg000:7436		    push    bx
seg000:7437		    mov	    bx,	ax
seg000:7439		    cmp	    bh,	0E0h ; 'à'
seg000:743C		    jnz	    short loc_744E
seg000:743E		    mov	    bh,	1Ch
seg000:7440		    cmp	    bl,	0Ah
seg000:7443		    jz	    short loc_746C
seg000:7445		    cmp	    bl,	0Dh
seg000:7448		    jz	    short loc_746C
seg000:744A		    mov	    bh,	35h ; '5'
seg000:744C		    jmp	    short loc_746C
seg000:744E ; ---------------------------------------------------------------------------
seg000:744E
seg000:744E loc_744E:				    ; CODE XREF: comparison_?+6j
seg000:744E		    cmp	    bh,	84h ; ''
seg000:7451		    ja	    short loc_745D
seg000:7453		    cmp	    bl,	0F0h ; 'ð'
seg000:7456		    jnz	    short loc_7460
seg000:7458		    cmp	    bh,	0
seg000:745B		    jz	    short loc_746C
seg000:745D
seg000:745D loc_745D:				    ; CODE XREF: comparison_?+1Bj
seg000:745D		    stc
seg000:745E		    jmp	    short loc_746D
seg000:7460 ; ---------------------------------------------------------------------------
seg000:7460
seg000:7460 loc_7460:				    ; CODE XREF: comparison_?+20j
seg000:7460		    cmp	    bl,	0E0h ; 'à'
seg000:7463		    jnz	    short loc_746C
seg000:7465		    cmp	    bh,	0
seg000:7468		    jz	    short loc_746C
seg000:746A		    mov	    bl,	0
seg000:746C
seg000:746C loc_746C:				    ; CODE XREF: comparison_?+Dj
seg000:746C					    ; comparison_?+12j	...
seg000:746C		    clc
seg000:746D
seg000:746D loc_746D:				    ; CODE XREF: comparison_?+28j
seg000:746D		    mov	    ax,	bx
seg000:746F		    pop	    bx
seg000:7470		    retn
seg000:7470 comparison_?    endp
seg000:7470
seg000:7471
seg000:7471 ; =============== S	U B R O	U T I N	E =======================================
seg000:7471
seg000:7471
seg000:7471 sub_7471	    proc far		    ; CODE XREF: sub_FF40j
seg000:7471		    push    ds
seg000:7472		    mov	    ds,	word ptr cs:loc_C5+1
seg000:7477		    out	    0FBh, al	    ; AT 80287 data.
seg000:7477					    ; 286 sends	opcodes	& operands and receives	results.
seg000:7479		    pushf
seg000:747A		    inc	    byte ptr ds:loc_BB+4
seg000:747E		    popf
seg000:747F		    or	    byte ptr cs:loc_CA+4, 80h
seg000:7485		    pop	    ds
seg000:7486		    jmp	    short loc_7497
seg000:7488 ; ---------------------------------------------------------------------------
seg000:7488
seg000:7488 loc_7488:				    ; CODE XREF: sub_E987j
seg000:7488					    ; seg000:E999j
seg000:7488		    push    ds
seg000:7489		    mov	    ds,	word ptr cs:loc_C5+1
seg000:748E		    out	    0FBh, al	    ; AT 80287 data.
seg000:748E					    ; 286 sends	opcodes	& operands and receives	results.
seg000:7490		    pushf
seg000:7491		    inc	    byte ptr ds:loc_BB+4
seg000:7495		    popf
seg000:7496		    pop	    ds
seg000:7497
seg000:7497 loc_7497:				    ; CODE XREF: sub_7471+15j
seg000:7497		    push    ax
seg000:7498		    push    bx
seg000:7499		    push    cx
seg000:749A		    push    dx
seg000:749B		    push    si
seg000:749C		    push    di
seg000:749D		    push    ds
seg000:749E		    push    es
seg000:749F		    mov	    ds,	word ptr cs:loc_C5+1
seg000:74A4		    mov	    es,	word ptr cs:loc_48+1
seg000:74A9		    call    sub_7C15
seg000:74AC		    mov	    si,	0
seg000:74AF		    mov	    dx,	0
seg000:74B2		    test    byte ptr cs:loc_CA+4, 80h
seg000:74B8		    jnz	    short loc_74C6
seg000:74BA		    mov	    ah,	0ADh ; '­'
seg000:74BC		    call    Keyboard_command
seg000:74BF		    call    Keyboard_readyWait
seg000:74C2		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:74C4		    jmp	    short loc_74CF
seg000:74C6 ; ---------------------------------------------------------------------------
seg000:74C6
seg000:74C6 loc_74C6:				    ; CODE XREF: sub_7471+47j
seg000:74C6		    and	    byte ptr cs:loc_CA+4, 7Fh
seg000:74CC		    mov	    si,	0FFFFh
seg000:74CF
seg000:74CF loc_74CF:				    ; CODE XREF: sub_7471+53j
seg000:74CF		    stc
seg000:74D0		    mov	    ah,	4Fh ; 'O'
seg000:74D2		    int	    15h		    ; OS HOOK -	KEYBOARD INTERCEPT (AT model 3x9,XT2,XT286,CONV,PS)
seg000:74D2					    ; AL = scan	code, CF set
seg000:74D2					    ; Return: CF set - AL = scan code
seg000:74D2					    ; CF clear - scan code should be ignored
seg000:74D4		    jnb	    short loc_74FD
seg000:74D6		    sti
seg000:74D7		    mov	    ah,	al
seg000:74D9		    call    Keyb_??
seg000:74DC		    jb	    short loc_74FD
seg000:74DE		    mov	    al,	0FFh
seg000:74E0		    call    sub_7994
seg000:74E3		    mov	    al,	ah
seg000:74E5		    test    byte ptr es:loc_95+1, 80h
seg000:74EB		    jz	    short loc_7500
seg000:74ED		    and	    byte ptr es:loc_95+1, 7Fh ;	CODE XREF: sub_985B+26p
seg000:74F3		    cmp	    al,	0ABh ; '«'
seg000:74F5		    jnz	    short loc_74FD
seg000:74F7		    or	    byte ptr es:loc_95+1, 40h
seg000:74FD
seg000:74FD loc_74FD:				    ; CODE XREF: sub_7471+63j
seg000:74FD					    ; sub_7471+6Bj ...
seg000:74FD		    jmp	    loc_75B8
seg000:7500 ; ---------------------------------------------------------------------------
seg000:7500
seg000:7500 loc_7500:				    ; CODE XREF: sub_7471+7Aj
seg000:7500		    test    byte ptr es:loc_95+1, 40h
seg000:7506		    jz	    short loc_7531
seg000:7508		    and	    byte ptr es:loc_95+1, 0BFh
seg000:750E		    cmp	    al,	85h ; ''
seg000:7510		    jz	    short loc_7528
seg000:7512		    cmp	    al,	41h ; 'A'
seg000:7514		    jnz	    short loc_74FD
seg000:7516		    test    byte ptr es:loc_95+1, 20h
seg000:751C		    jz	    short loc_7528
seg000:751E		    or	    byte ptr ds:loc_16+1, 20h
seg000:7523		    mov	    al,	0FFh
seg000:7525		    call    sub_7994
seg000:7528
seg000:7528 loc_7528:				    ; CODE XREF: sub_7471+9Fj
seg000:7528					    ; sub_7471+ABj
seg000:7528		    or	    byte ptr es:loc_95+1, 10h
seg000:752E		    jmp	    loc_75B8
seg000:7531 ; ---------------------------------------------------------------------------
seg000:7531
seg000:7531 loc_7531:				    ; CODE XREF: sub_7471+95j
seg000:7531		    cmp	    al,	0E0h ; 'à'
seg000:7533		    jnz	    short loc_753E
seg000:7535		    or	    byte ptr es:loc_95+1, 12h
seg000:753B		    jmp	    loc_764F
seg000:753E ; ---------------------------------------------------------------------------
seg000:753E
seg000:753E loc_753E:				    ; CODE XREF: sub_7471+C2j
seg000:753E		    cmp	    al,	0E1h ; 'á'
seg000:7540		    jnz	    short loc_754B
seg000:7542		    or	    byte ptr es:loc_95+1, 11h
seg000:7548
seg000:7548 loc_7548:				    ; CODE XREF: sub_7471+FCj
seg000:7548					    ; sub_7471+100j ...
seg000:7548		    jmp	    loc_764F
seg000:754B ; ---------------------------------------------------------------------------
seg000:754B
seg000:754B loc_754B:				    ; CODE XREF: sub_7471+CFj
seg000:754B		    test    byte ptr es:loc_95+1, 2
seg000:7551		    jz	    short loc_7561
seg000:7553		    and	    al,	7Fh
seg000:7555		    cmp	    al,	36h ; '6'
seg000:7557		    jz	    short loc_74FD
seg000:7559		    cmp	    al,	2Ah ; '*'
seg000:755B		    jz	    short loc_75B8
seg000:755D		    mov	    al,	ah
seg000:755F		    jmp	    short loc_7591
seg000:7561 ; ---------------------------------------------------------------------------
seg000:7561
seg000:7561 loc_7561:				    ; CODE XREF: sub_7471+E0j
seg000:7561		    test    byte ptr es:loc_95+1, 1
seg000:7567		    jz	    short loc_7591
seg000:7569		    and	    al,	7Fh
seg000:756B		    cmp	    al,	1Dh
seg000:756D		    jz	    short loc_7548
seg000:756F		    cmp	    al,	38h ; '8'
seg000:7571		    jz	    short loc_7548
seg000:7573		    cmp	    al,	36h ; '6'
seg000:7575		    jz	    short loc_7548
seg000:7577		    cmp	    al,	2Ah ; '*'
seg000:7579		    jz	    short loc_7548
seg000:757B		    cmp	    al,	45h ; 'E'
seg000:757D		    jnz	    short loc_75B8
seg000:757F		    test    ah,	80h
seg000:7582		    jnz	    short loc_75B8
seg000:7584		    test    byte ptr ds:loc_16+2, 8
seg000:7589		    jnz	    short loc_75B8
seg000:758B		    call    sub_7A91
seg000:758E		    jmp	    loc_766B
seg000:7591 ; ---------------------------------------------------------------------------
seg000:7591
seg000:7591 loc_7591:				    ; CODE XREF: sub_7471+EEj
seg000:7591					    ; sub_7471+F6j
seg000:7591		    sti
seg000:7592		    push    dx
seg000:7593		    mov	    dh,	0FFh
seg000:7595		    call    sub_76DA
seg000:7598		    pop	    dx
seg000:7599		    mov	    ch,	al
seg000:759B		    jb	    short loc_75B8
seg000:759D		    test    al,	80h
seg000:759F		    jnz	    short loc_75B8
seg000:75A1		    test    byte ptr ds:loc_16+2, 8
seg000:75A6		    jz	    short loc_75BB
seg000:75A8		    test    byte ptr ds:loc_16+1, 4
seg000:75AD		    jz	    short loc_75B3
seg000:75AF		    cmp	    al,	45h ; 'E'
seg000:75B1		    jz	    short loc_75B8
seg000:75B3
seg000:75B3 loc_75B3:				    ; CODE XREF: sub_7471+13Cj
seg000:75B3		    and	    byte ptr ds:loc_16+2, 0F7h
seg000:75B8
seg000:75B8 loc_75B8:				    ; CODE XREF: sub_7471:loc_74FDj
seg000:75B8					    ; sub_7471+BDj ...
seg000:75B8		    jmp	    loc_7649
seg000:75BB ; ---------------------------------------------------------------------------
seg000:75BB
seg000:75BB loc_75BB:				    ; CODE XREF: sub_7471+135j
seg000:75BB		    test    byte ptr ds:loc_16+1, 8
seg000:75C0		    jz	    short loc_75D7
seg000:75C2		    test    byte ptr es:loc_95+1, 10h
seg000:75C8		    jz	    short loc_75D1
seg000:75CA		    test    byte ptr ds:loc_16+2, 4
seg000:75CF		    jnz	    short loc_75D7
seg000:75D1
seg000:75D1 loc_75D1:				    ; CODE XREF: sub_7471+157j
seg000:75D1		    call    near ptr sub_785E
seg000:75D4		    jmp	    short loc_7649
seg000:75D4 ; ---------------------------------------------------------------------------
seg000:75D6		    db	90h ; 
seg000:75D7 ; ---------------------------------------------------------------------------
seg000:75D7
seg000:75D7 loc_75D7:				    ; CODE XREF: sub_7471+14Fj
seg000:75D7					    ; sub_7471+15Ej
seg000:75D7		    test    byte ptr ds:loc_16+1, 4
seg000:75DC		    jz	    short loc_75E4
seg000:75DE		    call    sub_793D
seg000:75E1		    jmp	    short loc_7649
seg000:75E1 ; ---------------------------------------------------------------------------
seg000:75E3		    db	90h ; 
seg000:75E4 ; ---------------------------------------------------------------------------
seg000:75E4
seg000:75E4 loc_75E4:				    ; CODE XREF: sub_7471+16Bj
seg000:75E4		    test    byte ptr es:loc_95+1, 2
seg000:75EA		    jnz	    short loc_763F
seg000:75EC		    mov	    cl,	0
seg000:75EE		    test    ah,	10h
seg000:75F1		    jz	    short loc_75FC
seg000:75F3		    test    byte ptr ds:loc_16+1, 20h
seg000:75F8		    jz	    short loc_760A
seg000:75FA		    jmp	    short loc_7608
seg000:75FC ; ---------------------------------------------------------------------------
seg000:75FC
seg000:75FC loc_75FC:				    ; CODE XREF: sub_7471+180j
seg000:75FC		    test    ah,	2
seg000:75FF		    jz	    short loc_760A
seg000:7601		    test    byte ptr ds:loc_16+1, 40h
seg000:7606		    jz	    short loc_760A
seg000:7608
seg000:7608 loc_7608:				    ; CODE XREF: sub_7471+189j
seg000:7608		    mov	    cl,	0FFh
seg000:760A
seg000:760A loc_760A:				    ; CODE XREF: sub_7471+187j
seg000:760A					    ; sub_7471+18Ej ...
seg000:760A		    test    byte ptr ds:loc_16+1, 3
seg000:760F		    jz	    short loc_7614
seg000:7611		    xor	    cl,	0FFh
seg000:7614
seg000:7614 loc_7614:				    ; CODE XREF: sub_7471+19Ej
seg000:7614		    mov	    bx,	0EA50h
seg000:7617		    test    cl,	cl
seg000:7619		    jnz	    short loc_7620
seg000:761B		    mov	    bx,	0E9F7h
seg000:761E		    jmp	    short loc_7646
seg000:7620 ; ---------------------------------------------------------------------------
seg000:7620
seg000:7620 loc_7620:				    ; CODE XREF: sub_7471+1A8j
seg000:7620		    cmp	    al,	37h ; '7'
seg000:7622		    jnz	    short loc_7646
seg000:7624		    test    byte ptr es:loc_95+1, 10h
seg000:762A		    jnz	    short loc_7646
seg000:762C
seg000:762C loc_762C:				    ; CODE XREF: sub_7471+1D0j
seg000:762C		    mov	    al,	20h ; ' '
seg000:762E		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:7630		    mov	    ah,	0AEh ; '®'
seg000:7632		    call    Keyboard_command
seg000:7635		    int	    5		    ;  - PRINT-SCREEN KEY
seg000:7635					    ; automatically called by keyboard scanner when print-screen key is	pressed
seg000:7637		    and	    byte ptr es:loc_95+1, 0FCh
seg000:763D		    jmp	    short loc_766B
seg000:763F ; ---------------------------------------------------------------------------
seg000:763F
seg000:763F loc_763F:				    ; CODE XREF: sub_7471+179j
seg000:763F		    cmp	    al,	37h ; '7'
seg000:7641		    jz	    short loc_762C
seg000:7643		    mov	    bx,	0E9F7h
seg000:7646
seg000:7646 loc_7646:				    ; CODE XREF: sub_7471+1ADj
seg000:7646					    ; sub_7471+1B1j ...
seg000:7646		    call    sub_79F8
seg000:7649
seg000:7649 loc_7649:				    ; CODE XREF: sub_7471:loc_75B8j
seg000:7649					    ; sub_7471+163j ...
seg000:7649		    and	    byte ptr es:loc_95+1, 0FCh
seg000:764F
seg000:764F loc_764F:				    ; CODE XREF: sub_7471+CAj
seg000:764F					    ; sub_7471:loc_7548j
seg000:764F		    cmp	    si,	0FFFFh
seg000:7652		    jz	    short loc_765F
seg000:7654		    mov	    al,	20h ; ' '
seg000:7656		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:7658		    push    ax
seg000:7659		    mov	    ah,	0AEh ; '®'
seg000:765B		    call    Keyboard_command
seg000:765E		    pop	    ax
seg000:765F
seg000:765F loc_765F:				    ; CODE XREF: sub_7471+1E1j
seg000:765F		    cmp	    dx,	0
seg000:7662		    jz	    short loc_766B
seg000:7664		    push    ax
seg000:7665		    mov	    ax,	9102h
seg000:7668		    int	    15h		    ; OS HOOK -	SET FLAG AND COMPLETE INTERRUPT	(AT,XT2,XT286,CONV,PS)
seg000:7668					    ; AL = type	code, ES:BX -> request block for type codes 80h	through	BFh
seg000:766A		    pop	    ax
seg000:766B
seg000:766B loc_766B:				    ; CODE XREF: sub_7471+11Dj
seg000:766B					    ; sub_7471+1CCj ...
seg000:766B		    pushf
seg000:766C		    dec	    byte ptr ds:loc_BB+4
seg000:7670		    jnz	    short loc_7674
seg000:7672		    out	    0F9h, al	    ; AT 80287 data.
seg000:7672					    ; 286 sends	opcodes	& operands and receives	results.
seg000:7674
seg000:7674 loc_7674:				    ; CODE XREF: sub_7471+1FFj
seg000:7674		    popf
seg000:7675		    cmp	    ah,	0FFh
seg000:7678		    pop	    es
seg000:7679		    pop	    ds
seg000:767A		    pop	    di
seg000:767B		    pop	    si
seg000:767C		    pop	    dx
seg000:767D		    pop	    cx
seg000:767E		    pop	    bx
seg000:767F		    pop	    ax
seg000:7680		    jnz	    short locret_7687
seg000:7682		    jmp	    far	ptr 0F000h:6BF9h
seg000:7687 ; ---------------------------------------------------------------------------
seg000:7687
seg000:7687 locret_7687:			    ; CODE XREF: sub_7471+20Fj
seg000:7687		    iret
seg000:7687 sub_7471	    endp ; sp-analysis failed
seg000:7687
seg000:7688
seg000:7688 ; =============== S	U B R O	U T I N	E =======================================
seg000:7688
seg000:7688
seg000:7688 Keyb_??	    proc near		    ; CODE XREF: keyb_??+20p
seg000:7688					    ; sub_7471+68p
seg000:7688		    push    ax
seg000:7689		    push    bx
seg000:768A		    cli
seg000:768B		    cmp	    al,	0FEh ; 'þ'
seg000:768D		    jnz	    short loc_7697
seg000:768F		    or	    byte ptr es:loc_97,	20h
seg000:7695		    jmp	    short loc_76D6
seg000:7697 ; ---------------------------------------------------------------------------
seg000:7697
seg000:7697 loc_7697:				    ; CODE XREF: Keyb_??+5j
seg000:7697		    cmp	    al,	0FAh ; 'ú'
seg000:7699		    jnz	    short loc_76A3
seg000:769B		    or	    byte ptr es:loc_97,	10h
seg000:76A1		    jmp	    short loc_76D6
seg000:76A3 ; ---------------------------------------------------------------------------
seg000:76A3
seg000:76A3 loc_76A3:				    ; CODE XREF: Keyb_??+11j
seg000:76A3		    cmp	    al,	54h ; 'T'
seg000:76A5		    jnz	    short loc_76B8
seg000:76A7		    test    byte ptr ds:loc_16+2, 4
seg000:76AC		    jnz	    short loc_76D6
seg000:76AE		    or	    byte ptr ds:loc_16+2, 4
seg000:76B3		    mov	    bx,	8500h	    ; SysReq Key 00H = key make	(pressed down)
seg000:76B6		    jmp	    short loc_76C5
seg000:76B8 ; ---------------------------------------------------------------------------
seg000:76B8
seg000:76B8 loc_76B8:				    ; CODE XREF: Keyb_??+1Dj
seg000:76B8		    cmp	    al,	0D4h ; 'Ô'
seg000:76BA		    clc
seg000:76BB		    jnz	    short loc_76D7
seg000:76BD		    and	    byte ptr ds:loc_16+2, 0FBh
seg000:76C2		    mov	    bx,	8501h	    ; SysReq Key 01H = key break (released)
seg000:76C5
seg000:76C5 loc_76C5:				    ; CODE XREF: Keyb_??+2Ej
seg000:76C5		    mov	    al,	20h ; ' '
seg000:76C7		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:76C9		    sti
seg000:76CA		    mov	    ah,	0AEh ; '®'  ; Enable keyboard. Same operation as clearing bit four of the command register.
seg000:76CC		    call    Keyboard_command
seg000:76CF		    mov	    ax,	bx
seg000:76D1		    int	    15h
seg000:76D3		    mov	    si,	0FFFFh
seg000:76D6
seg000:76D6 loc_76D6:				    ; CODE XREF: Keyb_??+Dj
seg000:76D6					    ; Keyb_??+19j ...
seg000:76D6		    stc
seg000:76D7
seg000:76D7 loc_76D7:				    ; CODE XREF: Keyb_??+33j
seg000:76D7		    pop	    bx
seg000:76D8		    pop	    ax
seg000:76D9		    retn
seg000:76D9 Keyb_??	    endp
seg000:76D9
seg000:76DA
seg000:76DA ; =============== S	U B R O	U T I N	E =======================================
seg000:76DA
seg000:76DA
seg000:76DA sub_76DA	    proc near		    ; CODE XREF: sub_7471+124p
seg000:76DA		    push    bx
seg000:76DB		    push    cx
seg000:76DC		    push    dx
seg000:76DD		    mov	    ch,	al
seg000:76DF		    and	    al,	7Fh
seg000:76E1		    cmp	    al,	58h ; 'X'
seg000:76E3		    jbe	    short loc_771C
seg000:76E5		    cmp	    ch,	0FFh
seg000:76E8		    jnz	    short loc_76EF
seg000:76EA		    mov	    ah,	0
seg000:76EC		    jmp	    loc_7857
seg000:76EF ; ---------------------------------------------------------------------------
seg000:76EF
seg000:76EF loc_76EF:				    ; CODE XREF: sub_76DA+Ej
seg000:76EF		    cmp	    ch,	1Bh
seg000:76F2		    jnz	    short loc_76FD
seg000:76F4		    or	    byte ptr cs:loc_CA+4, 1
seg000:76FA		    jmp	    loc_7857
seg000:76FD ; ---------------------------------------------------------------------------
seg000:76FD
seg000:76FD loc_76FD:				    ; CODE XREF: sub_76DA+18j
seg000:76FD		    cmp	    ch,	14h
seg000:7700		    jnz	    short loc_7713
seg000:7702		    test    byte ptr cs:loc_CA+4, 1
seg000:7708		    jz	    short loc_7713
seg000:770A		    call    sub_7B03
seg000:770D		    mov	    ax,	0FFh
seg000:7710		    jmp	    loc_7857
seg000:7713 ; ---------------------------------------------------------------------------
seg000:7713
seg000:7713 loc_7713:				    ; CODE XREF: sub_76DA+26j
seg000:7713					    ; sub_76DA+2Ej
seg000:7713		    and	    byte ptr cs:loc_CA+4, 0FEh
seg000:7719		    jmp	    loc_7857
seg000:771C ; ---------------------------------------------------------------------------
seg000:771C
seg000:771C loc_771C:				    ; CODE XREF: sub_76DA+9j
seg000:771C		    mov	    bx,	0EB5Bh
seg000:771F		    xlat    byte ptr cs:[bx]
seg000:7721		    mov	    ah,	al
seg000:7723		    mov	    al,	ch
seg000:7725		    test    byte ptr ds:loc_16+1, 4
seg000:772A		    jz	    short loc_7734
seg000:772C		    test    ah,	40h
seg000:772F		    jz	    short loc_7734
seg000:7731
seg000:7731 loc_7731:				    ; CODE XREF: sub_76DA+7Fj
seg000:7731		    jmp	    loc_7858
seg000:7734 ; ---------------------------------------------------------------------------
seg000:7734
seg000:7734 loc_7734:				    ; CODE XREF: sub_76DA+50j
seg000:7734					    ; sub_76DA+55j
seg000:7734		    mov	    cl,	byte ptr ds:loc_16+1
seg000:7738		    mov	    bl,	cl
seg000:773A		    and	    cl,	3
seg000:773D		    add	    cl,	0FFh
seg000:7740		    sbb	    cl,	cl
seg000:7742		    and	    bl,	20h
seg000:7745		    add	    bl,	0FFh
seg000:7748		    sbb	    bl,	bl
seg000:774A		    xor	    cl,	bl
seg000:774C		    jz	    short loc_775B
seg000:774E		    test    byte ptr es:loc_95+1, 2
seg000:7754		    jnz	    short loc_775B
seg000:7756		    test    ah,	20h
seg000:7759		    jnz	    short loc_7731
seg000:775B
seg000:775B loc_775B:				    ; CODE XREF: sub_76DA+72j
seg000:775B					    ; sub_76DA+7Aj
seg000:775B		    cmp	    al,	0B8h ; '¸'
seg000:775D		    jnz	    short loc_7775
seg000:775F		    cmp	    byte ptr ds:loc_19,	0
seg000:7764		    jz	    short loc_7775
seg000:7766		    push    ax
seg000:7767		    mov	    al,	byte ptr ds:loc_19
seg000:776A		    mov	    ah,	0
seg000:776C		    call    sub_7A53
seg000:776F		    pop	    ax
seg000:7770		    mov	    byte ptr ds:loc_19,	0
seg000:7775
seg000:7775 loc_7775:				    ; CODE XREF: sub_76DA+83j
seg000:7775					    ; sub_76DA+8Aj
seg000:7775		    test    byte ptr ds:loc_16+1, 8
seg000:777A		    jz	    short loc_7784
seg000:777C		    cmp	    al,	52h ; 'R'
seg000:777E		    jz	    short loc_779B
seg000:7780		    cmp	    al,	46h ; 'F'
seg000:7782		    jz	    short loc_779B
seg000:7784
seg000:7784 loc_7784:				    ; CODE XREF: sub_76DA+A0j
seg000:7784		    mov	    bx,	0E9F7h
seg000:7787		    and	    al,	7Fh
seg000:7789		    xlat    byte ptr cs:[bx]
seg000:778B		    mov	    bx,	18h
seg000:778E		    test    ah,	8
seg000:7791		    jnz	    short loc_77FC
seg000:7793		    mov	    bx,	17h
seg000:7796		    test    ah,	4
seg000:7799		    jnz	    short loc_779E
seg000:779B
seg000:779B loc_779B:				    ; CODE XREF: sub_76DA+A4j
seg000:779B					    ; sub_76DA+A8j
seg000:779B		    jmp	    loc_7858
seg000:779E ; ---------------------------------------------------------------------------
seg000:779E
seg000:779E loc_779E:				    ; CODE XREF: sub_76DA+BFj
seg000:779E		    test    byte ptr es:loc_95+1, 10h
seg000:77A4		    jz	    short loc_77FC
seg000:77A6		    test    al,	3
seg000:77A8		    jnz	    short loc_77FC
seg000:77AA		    or	    byte ptr ds:loc_16+1, al
seg000:77AE		    test    byte ptr es:loc_95+1, 2
seg000:77B4		    jnz	    short loc_77CB
seg000:77B6		    mov	    cl,	2
seg000:77B8		    shr	    al,	cl
seg000:77BA		    or	    byte ptr ds:loc_16+2, al
seg000:77BE		    test    ch,	80h
seg000:77C1		    jz	    short loc_77F8
seg000:77C3		    not	    al
seg000:77C5		    and	    byte ptr ds:loc_16+2, al
seg000:77C9		    jmp	    short loc_77DC
seg000:77CB ; ---------------------------------------------------------------------------
seg000:77CB
seg000:77CB loc_77CB:				    ; CODE XREF: sub_76DA+DAj
seg000:77CB		    or	    byte ptr es:loc_95+1, al
seg000:77D0		    test    ch,	80h
seg000:77D3		    jz	    short loc_77F8
seg000:77D5		    not	    al
seg000:77D7		    and	    byte ptr es:loc_95+1, al
seg000:77DC
seg000:77DC loc_77DC:				    ; CODE XREF: sub_76DA+EFj
seg000:77DC		    mov	    cl,	2
seg000:77DE		    mov	    al,	byte ptr ds:loc_16+2
seg000:77E1		    and	    al,	3
seg000:77E3		    shl	    al,	cl
seg000:77E5		    mov	    cl,	byte ptr es:loc_95+1
seg000:77EA		    and	    cl,	0Ch
seg000:77ED		    or	    al,	cl
seg000:77EF		    and	    byte ptr ds:loc_16+1, 0F3h
seg000:77F4		    or	    byte ptr ds:loc_16+1, al
seg000:77F8
seg000:77F8 loc_77F8:				    ; CODE XREF: sub_76DA+E7j
seg000:77F8					    ; sub_76DA+F9j
seg000:77F8		    mov	    al,	ch
seg000:77FA		    jmp	    short loc_7857
seg000:77FC ; ---------------------------------------------------------------------------
seg000:77FC
seg000:77FC loc_77FC:				    ; CODE XREF: sub_76DA+B7j
seg000:77FC					    ; sub_76DA+CAj ...
seg000:77FC		    rol	    ch,	1
seg000:77FE		    cmc
seg000:77FF		    sbb	    cl,	cl
seg000:7801		    ror	    ch,	1
seg000:7803		    xor	    cl,	[bx]
seg000:7805		    and	    cl,	al
seg000:7807		    jz	    short loc_7857
seg000:7809		    xor	    [bx], al
seg000:780B		    test    ah,	8
seg000:780E		    jnz	    short loc_782E
seg000:7810		    test    byte ptr es:loc_95+1, 10h
seg000:7816		    jnz	    short loc_7857
seg000:7818		    and	    byte ptr ds:loc_16+2, 0FCh
seg000:781D		    push    ax
seg000:781E		    mov	    al,	byte ptr ds:loc_16+1
seg000:7821		    and	    al,	0Ch
seg000:7823		    mov	    cl,	2
seg000:7825		    shr	    al,	cl
seg000:7827		    or	    byte ptr ds:loc_16+2, al
seg000:782B		    pop	    ax
seg000:782C		    jmp	    short loc_7857
seg000:782E ; ---------------------------------------------------------------------------
seg000:782E
seg000:782E loc_782E:				    ; CODE XREF: sub_76DA+134j
seg000:782E		    test    ch,	80h
seg000:7831		    jnz	    short loc_7857
seg000:7833		    xor	    byte ptr ds:loc_16+1, al
seg000:7837		    mov	    al,	0FFh
seg000:7839		    cmp	    dh,	0FFh
seg000:783C		    jnz	    short loc_7841
seg000:783E		    call    sub_7994
seg000:7841
seg000:7841 loc_7841:				    ; CODE XREF: sub_76DA+162j
seg000:7841		    cmp	    ch,	52h ; 'R'
seg000:7844		    jnz	    short loc_7857
seg000:7846		    test    byte ptr es:loc_95+1, 2
seg000:784C		    mov	    ax,	52E0h
seg000:784F		    jnz	    short loc_7854
seg000:7851		    mov	    ax,	5200h
seg000:7854
seg000:7854 loc_7854:				    ; CODE XREF: sub_76DA+175j
seg000:7854		    call    sub_7A53
seg000:7857
seg000:7857 loc_7857:				    ; CODE XREF: sub_76DA+12j
seg000:7857					    ; sub_76DA+20j ...
seg000:7857		    stc
seg000:7858
seg000:7858 loc_7858:				    ; CODE XREF: sub_76DA:loc_7731j
seg000:7858					    ; sub_76DA:loc_779Bj
seg000:7858		    mov	    al,	ch
seg000:785A		    pop	    dx
seg000:785B		    pop	    cx
seg000:785C		    pop	    bx
seg000:785D		    retn
seg000:785D sub_76DA	    endp
seg000:785D
seg000:785E
seg000:785E ; =============== S	U B R O	U T I N	E =======================================
seg000:785E
seg000:785E
seg000:785E sub_785E	    proc far		    ; CODE XREF: sub_7471:loc_75D1p
seg000:785E		    push    bx
seg000:785F		    push    cx
seg000:7860		    test    byte ptr ds:loc_16+1, 4
seg000:7865		    jz	    short loc_78D5
seg000:7867		    cmp	    al,	2
seg000:7869		    jb	    short loc_7880
seg000:786B		    cmp	    al,	9
seg000:786D		    ja	    short loc_7880
seg000:786F		    cmp	    byte ptr cs:loc_3E+2, 0
seg000:7875		    jnz	    short loc_787D
seg000:7877		    sub	    al,	2
seg000:7879		    mov	    ah,	5
seg000:787B		    int	    10h		    ; -	VIDEO -	SELECT DISPLAY PAGE
seg000:787B					    ; AL = display page, 0-7  for modes	0 & 1, 0-3  for	modes 2	& 3
seg000:787D
seg000:787D loc_787D:				    ; CODE XREF: sub_785E+17j
seg000:787D					    ; sub_785E+68j ...
seg000:787D		    jmp	    loc_793A
seg000:7880 ; ---------------------------------------------------------------------------
seg000:7880
seg000:7880 loc_7880:				    ; CODE XREF: sub_785E+Bj
seg000:7880					    ; sub_785E+Fj
seg000:7880		    cmp	    al,	53h ; 'S'
seg000:7882		    jz	    short loc_788E
seg000:7884		    cmp	    al,	52h ; 'R'
seg000:7886		    jnz	    short loc_789D
seg000:7888		    mov	    byte ptr cs:loc_26B+1, 0FFh
seg000:788E
seg000:788E loc_788E:				    ; CODE XREF: sub_785E+24j
seg000:788E		    mov	    ax,	40h ; '@'
seg000:7891		    mov	    ds,	ax
seg000:7893		    assume ds:nothing
seg000:7893		    mov	    word ptr ds:72h, 1234h
seg000:7899		    push    cs
seg000:789A		    jmp	    near ptr ColrWarm_Boot
seg000:789D ; ---------------------------------------------------------------------------
seg000:789D
seg000:789D loc_789D:				    ; CODE XREF: sub_785E+28j
seg000:789D		    mov	    bh,	0
seg000:789F		    cmp	    al,	31h ; '1'
seg000:78A1		    jz	    short loc_78AF
seg000:78A3		    cmp	    al,	21h ; '!'
seg000:78A5		    jz	    short loc_78AD
seg000:78A7		    cmp	    al,	17h
seg000:78A9		    jnz	    short loc_78BA
seg000:78AB		    inc	    bh
seg000:78AD
seg000:78AD loc_78AD:				    ; CODE XREF: sub_785E+47j
seg000:78AD		    inc	    bh
seg000:78AF
seg000:78AF loc_78AF:				    ; CODE XREF: sub_785E+43j
seg000:78AF		    xchg    al,	bh
seg000:78B1		    mov	    ah,	65h ; 'e'
seg000:78B3		    int	    10h		    ; -	VIDEO -
seg000:78B5		    xchg    bh,	al
seg000:78B7		    jmp	    loc_793A
seg000:78BA ; ---------------------------------------------------------------------------
seg000:78BA
seg000:78BA loc_78BA:				    ; CODE XREF: sub_785E+4Bj
seg000:78BA		    cmp	    al,	1Ch
seg000:78BC		    jnz	    short loc_78D5
seg000:78BE		    mov	    ah,	0
seg000:78C0		    cmp	    byte ptr cs:loc_505+3, 0FEh	; 'þ'
seg000:78C6		    jz	    short loc_787D
seg000:78C8		    mov	    ah,	ds:65h
seg000:78CC		    call    Vsync_wait
seg000:78CF		    xor	    si,	si
seg000:78D1		    mov	    ah,	0FFh
seg000:78D3		    jmp	    short loc_787D
seg000:78D5 ; ---------------------------------------------------------------------------
seg000:78D5
seg000:78D5 loc_78D5:				    ; CODE XREF: sub_785E+7j
seg000:78D5					    ; sub_785E+5Ej
seg000:78D5		    cmp	    al,	46h ; 'F'
seg000:78D7		    jnz	    short loc_78DF
seg000:78D9		    call    sub_7B2D
seg000:78DC		    jmp	    short loc_793A
seg000:78DC ; ---------------------------------------------------------------------------
seg000:78DE		    db	90h ; 
seg000:78DF ; ---------------------------------------------------------------------------
seg000:78DF
seg000:78DF loc_78DF:				    ; CODE XREF: sub_785E+79j
seg000:78DF		    cmp	    al,	35h ; '5'
seg000:78E1		    jz	    short loc_78E7
seg000:78E3		    cmp	    al,	47h ; 'G'
seg000:78E5		    jb	    short loc_78F2
seg000:78E7
seg000:78E7 loc_78E7:				    ; CODE XREF: sub_785E+83j
seg000:78E7		    jmp	    short loc_78F2
seg000:78E7 ; ---------------------------------------------------------------------------
seg000:78E9		    db	8Ah ; 
seg000:78EA		    db 0E0h ; à
seg000:78EB		    db 0B0h ; °
seg000:78EC		    db	  0
seg000:78ED		    db 0E8h ; è
seg000:78EE		    db	63h ; c
seg000:78EF		    db	  1
seg000:78F0		    db 0EBh ; ë
seg000:78F1		    db	48h ; H
seg000:78F2 ; ---------------------------------------------------------------------------
seg000:78F2
seg000:78F2 loc_78F2:				    ; CODE XREF: sub_785E+87j
seg000:78F2					    ; sub_785E:loc_78E7j
seg000:78F2		    test    byte ptr es:loc_95+1, 2
seg000:78F8		    jz	    short loc_7914
seg000:78FA		    cmp	    al,	1Ch
seg000:78FC		    jnz	    short loc_7907
seg000:78FE		    mov	    ah,	0A6h ; '¦'
seg000:7900		    mov	    al,	0
seg000:7902		    call    sub_7A53
seg000:7905		    jmp	    short loc_793A
seg000:7907 ; ---------------------------------------------------------------------------
seg000:7907
seg000:7907 loc_7907:				    ; CODE XREF: sub_785E+9Ej
seg000:7907		    cmp	    al,	35h ; '5'
seg000:7909		    jnz	    short loc_7934
seg000:790B		    mov	    ah,	0A4h ; '¤'
seg000:790D		    mov	    al,	0
seg000:790F		    call    sub_7A53
seg000:7912		    jmp	    short loc_793A
seg000:7914 ; ---------------------------------------------------------------------------
seg000:7914
seg000:7914 loc_7914:				    ; CODE XREF: sub_785E+9Aj
seg000:7914		    cmp	    al,	53h ; 'S'
seg000:7916		    jz	    short loc_793A
seg000:7918		    test    ah,	1
seg000:791B		    jz	    short loc_7934
seg000:791D		    mov	    bx,	0EA50h
seg000:7920		    xlat    byte ptr cs:[bx]
seg000:7922		    sub	    al,	30h ; '0'
seg000:7924		    mov	    cl,	al
seg000:7926		    mov	    al,	ds:19h
seg000:7929		    mov	    ch,	0Ah
seg000:792B		    mul	    ch
seg000:792D		    add	    al,	cl
seg000:792F		    mov	    ds:19h, al
seg000:7932		    jmp	    short loc_793A
seg000:7934 ; ---------------------------------------------------------------------------
seg000:7934
seg000:7934 loc_7934:				    ; CODE XREF: sub_785E+ABj
seg000:7934					    ; sub_785E+BDj
seg000:7934		    mov	    bx,	0EB02h
seg000:7937		    call    sub_79F8
seg000:793A
seg000:793A loc_793A:				    ; CODE XREF: sub_785E:loc_787Dj
seg000:793A					    ; sub_785E+59j ...
seg000:793A		    pop	    cx
seg000:793B		    pop	    bx
seg000:793C		    retn
seg000:793C sub_785E	    endp
seg000:793C
seg000:793D
seg000:793D ; =============== S	U B R O	U T I N	E =======================================
seg000:793D
seg000:793D
seg000:793D sub_793D	    proc near		    ; CODE XREF: sub_7471+16Dp
seg000:793D		    push    bx
seg000:793E		    test    byte ptr es:loc_95+1, 10h
seg000:7944		    jnz	    short loc_794F
seg000:7946		    cmp	    al,	45h ; 'E'
seg000:7948		    jnz	    short loc_7964
seg000:794A		    call    sub_7A91
seg000:794D		    jmp	    short loc_7992
seg000:794F ; ---------------------------------------------------------------------------
seg000:794F
seg000:794F loc_794F:				    ; CODE XREF: sub_793D+7j
seg000:794F		    test    byte ptr es:loc_95+1, 2
seg000:7955		    jz	    short loc_798C
seg000:7957		    cmp	    al,	35h ; '5'
seg000:7959		    jnz	    short loc_7964
seg000:795B		    mov	    al,	0
seg000:795D		    mov	    ah,	95h ; ''
seg000:795F		    call    sub_7A53
seg000:7962		    jmp	    short loc_7992
seg000:7964 ; ---------------------------------------------------------------------------
seg000:7964
seg000:7964 loc_7964:				    ; CODE XREF: sub_793D+Bj
seg000:7964					    ; sub_793D+1Cj
seg000:7964		    cmp	    al,	46h ; 'F'
seg000:7966		    jnz	    short loc_797F
seg000:7968		    call    sub_7B2D
seg000:796B		    mov	    ah,	0AEh ; '®'
seg000:796D		    call    Keyboard_command
seg000:7970		    mov	    byte ptr ds:71h, 80h ; ''
seg000:7975		    int	    1Bh		    ; CTRL-BREAK KEY
seg000:7977		    mov	    ax,	0
seg000:797A		    call    sub_7A53
seg000:797D		    jmp	    short loc_7992
seg000:797F ; ---------------------------------------------------------------------------
seg000:797F
seg000:797F loc_797F:				    ; CODE XREF: sub_793D+29j
seg000:797F		    cmp	    al,	37h ; '7'
seg000:7981		    jnz	    short loc_798C
seg000:7983		    mov	    ah,	72h ; 'r'
seg000:7985		    mov	    al,	0
seg000:7987		    call    sub_7A53
seg000:798A		    jmp	    short loc_7992
seg000:798C ; ---------------------------------------------------------------------------
seg000:798C
seg000:798C loc_798C:				    ; CODE XREF: sub_793D+18j
seg000:798C					    ; sub_793D+44j
seg000:798C		    mov	    bx,	0EAA9h
seg000:798F		    call    sub_79F8
seg000:7992
seg000:7992 loc_7992:				    ; CODE XREF: sub_793D+10j
seg000:7992					    ; sub_793D+25j ...
seg000:7992		    pop	    bx
seg000:7993		    retn
seg000:7993 sub_793D	    endp
seg000:7993
seg000:7994
seg000:7994 ; =============== S	U B R O	U T I N	E =======================================
seg000:7994
seg000:7994
seg000:7994 sub_7994	    proc near		    ; CODE XREF: get_key?+1Ap
seg000:7994					    ; sub_7471+6Fp ...
seg000:7994		    push    ax
seg000:7995		    push    bx
seg000:7996		    push    cx
seg000:7997		    push    es
seg000:7998		    pushf
seg000:7999		    cli
seg000:799A		    mov	    es,	word ptr cs:loc_48+1
seg000:799F		    mov	    bl,	al
seg000:79A1		    test    byte ptr es:loc_97,	40h
seg000:79A7		    jnz	    short loc_79F2
seg000:79A9		    mov	    al,	ds:17h
seg000:79AC		    mov	    cl,	4
seg000:79AE		    shr	    al,	cl
seg000:79B0		    and	    al,	7
seg000:79B2		    mov	    ah,	al
seg000:79B4		    xor	    al,	byte ptr es:loc_97
seg000:79B9		    test    al,	7
seg000:79BB		    jz	    short loc_79F2
seg000:79BD		    and	    al,	0F8h
seg000:79BF		    or	    al,	ah
seg000:79C1		    or	    al,	40h
seg000:79C3		    mov	    byte ptr es:loc_97,	al
seg000:79C7		    and	    al,	7
seg000:79C9		    mov	    ah,	0EDh ; 'í'  ; LEDs on the keyboard
seg000:79CB		    test    bl,	bl
seg000:79CD		    jz	    short loc_79D5
seg000:79CF		    push    ax
seg000:79D0		    mov	    al,	20h ; ' '
seg000:79D2		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:79D4		    pop	    ax
seg000:79D5
seg000:79D5 loc_79D5:				    ; CODE XREF: sub_7994+39j
seg000:79D5		    call    Keyboard_data
seg000:79D8		    jb	    short loc_79E1
seg000:79DA		    mov	    ah,	al
seg000:79DC		    call    Keyboard_data
seg000:79DF		    jnb	    short loc_79EC
seg000:79E1
seg000:79E1 loc_79E1:				    ; CODE XREF: sub_7994+44j
seg000:79E1		    or	    byte ptr es:loc_97,	80h
seg000:79E7		    mov	    ah,	0F4h ; 'ô'  ; Enable keyboard
seg000:79E9		    call    Keyboard_data
seg000:79EC
seg000:79EC loc_79EC:				    ; CODE XREF: sub_7994+4Bj
seg000:79EC		    and	    byte ptr es:loc_97,	3Fh
seg000:79F2
seg000:79F2 loc_79F2:				    ; CODE XREF: sub_7994+13j
seg000:79F2					    ; sub_7994+27j
seg000:79F2		    popf
seg000:79F3		    pop	    es
seg000:79F4		    pop	    cx
seg000:79F5		    pop	    bx
seg000:79F6		    pop	    ax
seg000:79F7		    retn
seg000:79F7 sub_7994	    endp
seg000:79F7
seg000:79F8
seg000:79F8 ; =============== S	U B R O	U T I N	E =======================================
seg000:79F8
seg000:79F8
seg000:79F8 sub_79F8	    proc near		    ; CODE XREF: sub_7471:loc_7646p
seg000:79F8					    ; sub_785E+D9p ...
seg000:79F8		    push    ax
seg000:79F9		    push    bx
seg000:79FA		    push    cx
seg000:79FB		    mov	    cl,	al
seg000:79FD		    xlat    byte ptr cs:[bx]
seg000:79FF		    cmp	    al,	0
seg000:7A01		    jz	    short loc_7A4F
seg000:7A03		    mov	    ah,	al
seg000:7A05		    mov	    al,	cl
seg000:7A07		    push    bx
seg000:7A08		    mov	    bx,	0EBB4h
seg000:7A0B		    xlat    byte ptr cs:[bx]
seg000:7A0D		    pop	    bx
seg000:7A0E		    cmp	    bx,	0EB02h
seg000:7A12		    jnz	    short loc_7A20
seg000:7A14		    test    al,	8
seg000:7A16		    mov	    al,	0
seg000:7A18		    jnz	    short loc_7A4C
seg000:7A1A		    mov	    al,	ah
seg000:7A1C		    mov	    ah,	cl
seg000:7A1E		    jmp	    short loc_7A4C
seg000:7A20 ; ---------------------------------------------------------------------------
seg000:7A20
seg000:7A20 loc_7A20:				    ; CODE XREF: sub_79F8+1Aj
seg000:7A20		    mov	    ch,	0
seg000:7A22		    test    byte ptr es:loc_95+1, 2
seg000:7A28		    jz	    short loc_7A2E
seg000:7A2A		    mov	    ch,	0E0h ; 'à'
seg000:7A2C		    mov	    cl,	ch
seg000:7A2E
seg000:7A2E loc_7A2E:				    ; CODE XREF: sub_79F8+30j
seg000:7A2E		    cmp	    bx,	0E9F7h
seg000:7A32		    jnz	    short loc_7A38
seg000:7A34		    test    al,	1
seg000:7A36		    jmp	    short loc_7A44
seg000:7A38 ; ---------------------------------------------------------------------------
seg000:7A38
seg000:7A38 loc_7A38:				    ; CODE XREF: sub_79F8+3Aj
seg000:7A38		    cmp	    bx,	0EA50h
seg000:7A3C		    jnz	    short loc_7A42
seg000:7A3E		    test    al,	2
seg000:7A40		    jmp	    short loc_7A44
seg000:7A42 ; ---------------------------------------------------------------------------
seg000:7A42
seg000:7A42 loc_7A42:				    ; CODE XREF: sub_79F8+44j
seg000:7A42		    test    al,	4
seg000:7A44
seg000:7A44 loc_7A44:				    ; CODE XREF: sub_79F8+3Ej
seg000:7A44					    ; sub_79F8+48j
seg000:7A44		    mov	    al,	ch
seg000:7A46		    jnz	    short loc_7A4C
seg000:7A48		    mov	    al,	ah
seg000:7A4A		    mov	    ah,	cl
seg000:7A4C
seg000:7A4C loc_7A4C:				    ; CODE XREF: sub_79F8+20j
seg000:7A4C					    ; sub_79F8+26j ...
seg000:7A4C		    call    sub_7A53
seg000:7A4F
seg000:7A4F loc_7A4F:				    ; CODE XREF: sub_79F8+9j
seg000:7A4F		    pop	    cx
seg000:7A50		    pop	    bx
seg000:7A51		    pop	    ax
seg000:7A52		    retn
seg000:7A52 sub_79F8	    endp
seg000:7A52
seg000:7A53
seg000:7A53 ; =============== S	U B R O	U T I N	E =======================================
seg000:7A53
seg000:7A53
seg000:7A53 sub_7A53	    proc near		    ; CODE XREF: sub_76DA+92p
seg000:7A53					    ; sub_76DA:loc_7854p ...
seg000:7A53		    push    cs
seg000:7A54		    call    near ptr sub_7A58
seg000:7A57		    retn
seg000:7A57 sub_7A53	    endp
seg000:7A57
seg000:7A58
seg000:7A58 ; =============== S	U B R O	U T I N	E =======================================
seg000:7A58
seg000:7A58
seg000:7A58 sub_7A58	    proc far		    ; CODE XREF: sub_7A53+1p
seg000:7A58		    push    ax
seg000:7A59		    push    si
seg000:7A5A		    push    di
seg000:7A5B		    push    ds
seg000:7A5C		    push    es
seg000:7A5D		    mov	    ds,	word ptr cs:loc_C5+1
seg000:7A62		    assume ds:nothing
seg000:7A62		    mov	    si,	word ptr ds:loc_19+3
seg000:7A66		    mov	    di,	si
seg000:7A68		    inc	    si
seg000:7A69		    inc	    si
seg000:7A6A		    call    some_compare?
seg000:7A6D		    cmp	    si,	word ptr ds:loc_19+1
seg000:7A71		    jz	    short loc_7A88
seg000:7A73		    mov	    word ptr ds:loc_19+3, si
seg000:7A77		    mov	    es,	word ptr cs:loc_C7+1
seg000:7A7C		    mov	    es:[di], al
seg000:7A7F		    mov	    es:[di+1], ah
seg000:7A83		    mov	    dx,	0FFFFh
seg000:7A86		    jmp	    short loc_7A8B
seg000:7A88 ; ---------------------------------------------------------------------------
seg000:7A88
seg000:7A88 loc_7A88:				    ; CODE XREF: sub_7A58+19j
seg000:7A88		    call    Beep_long
seg000:7A8B
seg000:7A8B loc_7A8B:				    ; CODE XREF: sub_7A58+2Ej
seg000:7A8B		    pop	    es
seg000:7A8C		    pop	    ds
seg000:7A8D		    pop	    di
seg000:7A8E		    pop	    si
seg000:7A8F		    pop	    ax
seg000:7A90		    retf
seg000:7A90 sub_7A58	    endp
seg000:7A90
seg000:7A91
seg000:7A91 ; =============== S	U B R O	U T I N	E =======================================
seg000:7A91
seg000:7A91
seg000:7A91 sub_7A91	    proc near		    ; CODE XREF: sub_7471+11Ap
seg000:7A91					    ; sub_793D+Dp
seg000:7A91		    push    ax
seg000:7A92		    or	    byte ptr ds:loc_16+2, 8
seg000:7A97		    mov	    al,	20h ; ' '
seg000:7A99		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:7A9B		    mov	    ah,	0AEh ; '®'
seg000:7A9D		    call    Keyboard_command
seg000:7AA0		    mov	    ah,	byte ptr ds:Timer_init+1
seg000:7AA4		    call    Vsync_wait
seg000:7AA7		    sti
seg000:7AA8
seg000:7AA8 loc_7AA8:				    ; CODE XREF: sub_7A91+1Cj
seg000:7AA8		    test    byte ptr ds:loc_16+2, 8
seg000:7AAD		    jnz	    short loc_7AA8
seg000:7AAF		    mov	    si,	0FFFFh
seg000:7AB2		    pop	    ax
seg000:7AB3		    retn
seg000:7AB3 sub_7A91	    endp
seg000:7AB3
seg000:7AB4
seg000:7AB4 ; =============== S	U B R O	U T I N	E =======================================
seg000:7AB4
seg000:7AB4
seg000:7AB4 some_compare?   proc near		    ; CODE XREF: some_compare?_0+14p
seg000:7AB4					    ; keyb_get_wait+1Ep ...
seg000:7AB4		    push    es
seg000:7AB5		    mov	    es,	word ptr cs:loc_48+1
seg000:7ABA		    cmp	    si,	word ptr es:loc_82
seg000:7ABF		    jb	    short loc_7AC6
seg000:7AC1		    mov	    si,	word ptr es:loc_80
seg000:7AC6
seg000:7AC6 loc_7AC6:				    ; CODE XREF: some_compare?+Bj
seg000:7AC6		    pop	    es
seg000:7AC7		    retn
seg000:7AC7 some_compare?   endp
seg000:7AC7
seg000:7AC8
seg000:7AC8 ; =============== S	U B R O	U T I N	E =======================================
seg000:7AC8
seg000:7AC8
seg000:7AC8 Keyboard_waitChar proc near		    ; CODE XREF: keyb_wait_press?+18p
seg000:7AC8		    test    al,	al
seg000:7ACA		    jz	    short loc_7AD6
seg000:7ACC
seg000:7ACC loc_7ACC:				    ; CODE XREF: Keyboard_waitChar+Cj
seg000:7ACC		    mov	    al,	0Ah
seg000:7ACE		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:7AD0		    in	    al,	20h	    ; Interrupt	controller, 8259A.
seg000:7AD2		    test    al,	2
seg000:7AD4		    jz	    short loc_7ACC
seg000:7AD6
seg000:7AD6 loc_7AD6:				    ; CODE XREF: Keyboard_waitChar+2j
seg000:7AD6		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:7AD8		    mov	    ah,	al
seg000:7ADA		    retn
seg000:7ADA Keyboard_waitChar endp
seg000:7ADA
seg000:7ADB
seg000:7ADB ; =============== S	U B R O	U T I N	E =======================================
seg000:7ADB
seg000:7ADB
seg000:7ADB sub_7ADB	    proc near		    ; CODE XREF: sub_7B03+Dp
seg000:7ADB					    ; sub_7B03+12p ...
seg000:7ADB		    push    cx
seg000:7ADC		    mov	    ah,	0AEh ; '®'
seg000:7ADE		    call    Keyboard_command
seg000:7AE1		    mov	    cx,	3E8h
seg000:7AE4
seg000:7AE4 loc_7AE4:				    ; CODE XREF: sub_7ADB+17j
seg000:7AE4		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:7AE4					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:7AE4					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:7AE4					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:7AE4					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:7AE4					    ;	 +------------------------------+-----------------------------------+
seg000:7AE4					    ; 4:  INH	  0=keyboard communications inhibited
seg000:7AE4					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:7AE4					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:7AE4					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:7AE4					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:7AE6		    test    al,	1
seg000:7AE8		    jnz	    short loc_7AF7
seg000:7AEA		    push    cx
seg000:7AEB		    mov	    cx,	1
seg000:7AEE		    call    delay_doubleCX
seg000:7AF1		    pop	    cx
seg000:7AF2		    loop    loc_7AE4
seg000:7AF4		    stc
seg000:7AF5		    jmp	    short loc_7B01
seg000:7AF7 ; ---------------------------------------------------------------------------
seg000:7AF7
seg000:7AF7 loc_7AF7:				    ; CODE XREF: sub_7ADB+Dj
seg000:7AF7		    mov	    ah,	0ADh ; '­'
seg000:7AF9		    call    Keyboard_command
seg000:7AFC		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:7AFE		    mov	    ah,	al
seg000:7B00		    clc
seg000:7B01
seg000:7B01 loc_7B01:				    ; CODE XREF: sub_7ADB+1Aj
seg000:7B01		    pop	    cx
seg000:7B02		    retn
seg000:7B02 sub_7ADB	    endp
seg000:7B02
seg000:7B03
seg000:7B03 ; =============== S	U B R O	U T I N	E =======================================
seg000:7B03
seg000:7B03
seg000:7B03 sub_7B03	    proc near		    ; CODE XREF: sub_76DA+30p
seg000:7B03
seg000:7B03 ; FUNCTION CHUNK AT	seg000:0500 SIZE 00000005 BYTES
seg000:7B03
seg000:7B03		    cli
seg000:7B04		    mov	    ah,	60h ; '`'
seg000:7B06		    call    Keyboard_command
seg000:7B09		    call    Keyboard_readyWait
seg000:7B0C		    mov	    al,	5
seg000:7B0E		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:7B10		    call    sub_7ADB
seg000:7B13		    mov	    cl,	al
seg000:7B15		    call    sub_7ADB
seg000:7B18		    mov	    ch,	al
seg000:7B1A		    mov	    ax,	0
seg000:7B1D		    mov	    es,	ax
seg000:7B1F		    mov	    di,	500h
seg000:7B22
seg000:7B22 loc_7B22:				    ; CODE XREF: sub_7B03+23j
seg000:7B22		    call    sub_7ADB
seg000:7B25		    stosb
seg000:7B26		    loop    loc_7B22
seg000:7B28		    jmp	    far	ptr loc_500
seg000:7B28 sub_7B03	    endp
seg000:7B28
seg000:7B2D
seg000:7B2D ; =============== S	U B R O	U T I N	E =======================================
seg000:7B2D
seg000:7B2D
seg000:7B2D sub_7B2D	    proc near		    ; CODE XREF: sub_785E+7Bp
seg000:7B2D					    ; sub_793D+2Bp ...
seg000:7B2D		    push    ax
seg000:7B2E		    push    es
seg000:7B2F		    pushf
seg000:7B30		    cli
seg000:7B31		    mov	    es,	word ptr cs:loc_48+1
seg000:7B36		    mov	    ax,	word ptr es:loc_80
seg000:7B3A		    mov	    word ptr ds:loc_19+1, ax
seg000:7B3D		    mov	    word ptr ds:loc_19+3, ax
seg000:7B40		    popf
seg000:7B41		    pop	    es
seg000:7B42		    pop	    ax
seg000:7B43		    retn
seg000:7B43 sub_7B2D	    endp
seg000:7B43
seg000:7B44
seg000:7B44 ; =============== S	U B R O	U T I N	E =======================================
seg000:7B44
seg000:7B44
seg000:7B44 sub_7B44	    proc near		    ; CODE XREF: init_lpt_ser+17p
seg000:7B44					    ; Keyboard_init+Ap
seg000:7B44		    push    ax
seg000:7B45		    push    es
seg000:7B46		    mov	    es,	word ptr cs:loc_48+1
seg000:7B4B		    mov	    word ptr cs:loc_C7+1, ds
seg000:7B50		    mov	    ax,	1Eh
seg000:7B53		    mov	    word ptr es:loc_80,	ax
seg000:7B57		    mov	    word ptr cs:loc_CA,	ax
seg000:7B5B		    mov	    cs:word_4C5+1, ax
seg000:7B5F		    add	    ax,	20h ; ' '
seg000:7B62		    mov	    word ptr es:loc_82,	ax
seg000:7B66		    mov	    word ptr cs:loc_CA+2, ax
seg000:7B6A		    mov	    word ptr cs:unk_4C8, ax
seg000:7B6E		    call    sub_7B2D
seg000:7B71		    mov	    byte ptr ds:loc_16+2, 0
seg000:7B76		    mov	    byte ptr ds:loc_19,	0
seg000:7B7B		    pop	    es
seg000:7B7C		    pop	    ax
seg000:7B7D		    retn
seg000:7B7D sub_7B44	    endp
seg000:7B7D
seg000:7B7E
seg000:7B7E ; =============== S	U B R O	U T I N	E =======================================
seg000:7B7E
seg000:7B7E
seg000:7B7E Keyboard_init   proc near		    ; CODE XREF: ColrWarm_Boot+3E6p
seg000:7B7E					    ; keyb_wait_press?+7p
seg000:7B7E		    push    ax
seg000:7B7F		    push    bx
seg000:7B80		    push    cx
seg000:7B81		    push    bp
seg000:7B82		    push    es
seg000:7B83		    mov	    es,	word ptr cs:loc_48+1
seg000:7B88		    call    sub_7B44
seg000:7B8B		    mov	    byte ptr ds:loc_16+1, 0
seg000:7B90		    mov	    byte ptr es:loc_97,	0
seg000:7B96		    mov	    byte ptr es:loc_95+1, 0
seg000:7B9C		    mov	    cx,	0FFFFh
seg000:7B9F
seg000:7B9F loc_7B9F:				    ; CODE XREF: Keyboard_init+29j
seg000:7B9F		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:7B9F					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:7B9F					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:7B9F					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:7B9F					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:7B9F					    ;	 +------------------------------+-----------------------------------+
seg000:7B9F					    ; 4:  INH	  0=keyboard communications inhibited
seg000:7B9F					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:7B9F					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:7B9F					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:7B9F					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:7BA1		    and	    al,	1
seg000:7BA3		    jz	    short loc_7BA9
seg000:7BA5		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:7BA7		    loop    loc_7B9F
seg000:7BA9
seg000:7BA9 loc_7BA9:				    ; CODE XREF: Keyboard_init+25j
seg000:7BA9		    mov	    ah,	0FFh	    ; Reset keyboard to	power on state and start the self-test.
seg000:7BAB		    call    Keyboard_data_OutIn
seg000:7BAE		    call    Keyboard_read
seg000:7BB1		    mov	    bp,	ax
seg000:7BB3		    mov	    ah,	60h ; '`'
seg000:7BB5		    call    Keyboard_command
seg000:7BB8		    jb	    short loc_7BC1
seg000:7BBA		    call    Keyboard_readyWait
seg000:7BBD		    mov	    al,	45h ; 'E'
seg000:7BBF		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:7BC1
seg000:7BC1 loc_7BC1:				    ; CODE XREF: Keyboard_init+3Aj
seg000:7BC1		    mov	    ax,	bp
seg000:7BC3		    jb	    short loc_7BCE
seg000:7BC5		    cmp	    al,	0AAh ; 'ª'
seg000:7BC7		    jz	    short loc_7BD0
seg000:7BC9		    cmp	    al,	0EAh ; 'ê'
seg000:7BCB		    jz	    short loc_7BD0
seg000:7BCD		    stc
seg000:7BCE
seg000:7BCE loc_7BCE:				    ; CODE XREF: Keyboard_init+45j
seg000:7BCE		    jmp	    short loc_7BFE
seg000:7BD0 ; ---------------------------------------------------------------------------
seg000:7BD0
seg000:7BD0 loc_7BD0:				    ; CODE XREF: Keyboard_init+49j
seg000:7BD0					    ; Keyboard_init+4Dj
seg000:7BD0		    mov	    bl,	byte ptr es:loc_95+1
seg000:7BD5		    or	    bl,	0A0h
seg000:7BD8		    mov	    byte ptr es:loc_95+1, bl
seg000:7BDD		    mov	    ah,	0F2h ; 'ò'  ; Send two-byte keyboard ID code as the next two bytes read from port 60h (PS/2 only).
seg000:7BDF		    call    Keyboard_data
seg000:7BE2		    jnb	    short loc_7BEA
seg000:7BE4		    or	    byte ptr es:loc_97,	80h
seg000:7BEA
seg000:7BEA loc_7BEA:				    ; CODE XREF: Keyboard_init+64j
seg000:7BEA		    mov	    cx,	19h
seg000:7BED		    call    delay_doubleCX
seg000:7BF0		    mov	    bl,	byte ptr es:loc_95+1
seg000:7BF5		    and	    bl,	1Fh
seg000:7BF8		    mov	    byte ptr es:loc_95+1, bl
seg000:7BFD		    clc
seg000:7BFE
seg000:7BFE loc_7BFE:				    ; CODE XREF: Keyboard_init:loc_7BCEj
seg000:7BFE		    pop	    es
seg000:7BFF		    pop	    bp
seg000:7C00
seg000:7C00 loc_7C00:				    ; CODE XREF: sub_350D+B0J
seg000:7C00		    pop	    cx
seg000:7C01		    pop	    bx
seg000:7C02		    pop	    ax
seg000:7C03		    retn
seg000:7C03 Keyboard_init   endp
seg000:7C03
seg000:7C04 ; ---------------------------------------------------------------------------
seg000:7C04		    mov	    ah,	0F4h ; 'ô'
seg000:7C06		    call    Keyboard_data
seg000:7C09		    retn
seg000:7C0A ; ---------------------------------------------------------------------------
seg000:7C0A		    mov	    ah,	0F5h ; 'õ'
seg000:7C0C		    call    Keyboard_data_OutIn
seg000:7C0F		    retn
seg000:7C10
seg000:7C10 ; =============== S	U B R O	U T I N	E =======================================
seg000:7C10
seg000:7C10
seg000:7C10 subtract_ah12h  proc near		    ; DATA XREF: sub_729C:ret_vectors_5o
seg000:7C10		    sub	    ah,	12h
seg000:7C13		    stc
seg000:7C14		    retn
seg000:7C14 subtract_ah12h  endp
seg000:7C14
seg000:7C15
seg000:7C15 ; =============== S	U B R O	U T I N	E =======================================
seg000:7C15
seg000:7C15
seg000:7C15 sub_7C15	    proc near		    ; CODE XREF: sub_729C+11p
seg000:7C15					    ; sub_7471+38p
seg000:7C15		    push    ax
seg000:7C16		    push    bx
seg000:7C17		    smsw    ax
seg000:7C1A		    test    ax,	1
seg000:7C1D		    jz	    short loc_7C22
seg000:7C1F
seg000:7C1F loc_7C1F:				    ; CODE XREF: sub_7C15+20j
seg000:7C1F					    ; sub_7C15+4Bj
seg000:7C1F		    pop	    bx
seg000:7C20		    pop	    ax
seg000:7C21		    retn
seg000:7C22 ; ---------------------------------------------------------------------------
seg000:7C22
seg000:7C22 loc_7C22:				    ; CODE XREF: sub_7C15+8j
seg000:7C22		    mov	    ax,	word ptr ds:loc_80
seg000:7C25		    mov	    bx,	word ptr ds:loc_82
seg000:7C29		    cmp	    ax,	word ptr cs:loc_CA
seg000:7C2E		    jnz	    short loc_7C37
seg000:7C30		    cmp	    bx,	word ptr cs:loc_CA+2
seg000:7C35		    jz	    short loc_7C1F
seg000:7C37
seg000:7C37 loc_7C37:				    ; CODE XREF: sub_7C15+19j
seg000:7C37		    cmp	    ax,	cs:word_4C5+1
seg000:7C3C		    jnz	    short loc_7C47
seg000:7C3E		    mov	    ax,	word ptr cs:loc_CA
seg000:7C42		    mov	    bx,	word ptr cs:loc_CA+2
seg000:7C47
seg000:7C47 loc_7C47:				    ; CODE XREF: sub_7C15+27j
seg000:7C47		    mov	    word ptr cs:loc_CA,	ax
seg000:7C4B		    mov	    word ptr cs:loc_CA+2, bx
seg000:7C50		    mov	    cs:word_4C5+1, ax
seg000:7C54		    mov	    word ptr cs:unk_4C8, bx
seg000:7C59		    mov	    word ptr ds:loc_80,	ax
seg000:7C5C		    mov	    word ptr ds:loc_82,	bx
seg000:7C60		    jmp	    short loc_7C1F
seg000:7C60 sub_7C15	    endp
seg000:7C60
seg000:7C62
seg000:7C62 ; =============== S	U B R O	U T I N	E =======================================
seg000:7C62
seg000:7C62
seg000:7C62 test_cmos	    proc near		    ; CODE XREF: ColrWarm_Boot+3BAp
seg000:7C62		    push    ax
seg000:7C63		    push    bx
seg000:7C64		    push    cx
seg000:7C65		    push    si
seg000:7C66		    xor	    bx,	bx
seg000:7C68		    mov	    cx,	8
seg000:7C6B
seg000:7C6B bits_loop:				    ; CODE XREF: test_cmos+1Ej
seg000:7C6B		    mov	    al,	8Eh ; ''
seg000:7C6D		    mov	    ah,	cs:table_bits[bx]
seg000:7C72		    call    write_cmos
seg000:7C75		    call    read_cmos
seg000:7C78		    cmp	    al,	cs:table_bits[bx]
seg000:7C7D		    jnz	    short bits_error
seg000:7C7F		    inc	    bx
seg000:7C80		    loop    bits_loop
seg000:7C82		    jmp	    short bits_ok
seg000:7C84 ; ---------------------------------------------------------------------------
seg000:7C84
seg000:7C84 bits_error:				    ; CODE XREF: test_cmos+1Bj
seg000:7C84		    mov	    si,	offset aCmosMemoryFail ; "CMOS Memory Failure! +++"
seg000:7C87		    call    print_?
seg000:7C8A		    mov	    ax,	208Eh
seg000:7C8D		    call    write_cmos
seg000:7C90		    jmp	    short cmos_batt_test
seg000:7C92 ; ---------------------------------------------------------------------------
seg000:7C92
seg000:7C92 bits_ok:				    ; CODE XREF: test_cmos+20j
seg000:7C92		    mov	    ax,	8Eh ; ''
seg000:7C95		    call    write_cmos
seg000:7C98
seg000:7C98 cmos_batt_test:			    ; CODE XREF: test_cmos+2Ej
seg000:7C98		    mov	    al,	8Dh ; ''
seg000:7C9A		    call    read_cmos
seg000:7C9D		    and	    al,	80h
seg000:7C9F		    jnz	    short batt_ok
seg000:7CA1		    mov	    si,	offset aPleaseReplaceT ; "Please replace the back-up battery! +++"...
seg000:7CA4		    call    print_?
seg000:7CA7		    mov	    ah,	0A0h ; ' '
seg000:7CA9		    call    cmos8E_flipON_ah
seg000:7CAC
seg000:7CAC batt_ok:				    ; CODE XREF: test_cmos+3Dj
seg000:7CAC		    mov	    cx,	1Eh
seg000:7CAF		    mov	    bx,	0
seg000:7CB2		    mov	    ah,	90h ; ''
seg000:7CB4
seg000:7CB4 checksum_loop:			    ; CODE XREF: test_cmos+5Ej
seg000:7CB4		    mov	    al,	ah
seg000:7CB6		    call    read_cmos
seg000:7CB9		    add	    bl,	al
seg000:7CBB		    adc	    bh,	0
seg000:7CBE		    inc	    ah
seg000:7CC0		    loop    checksum_loop
seg000:7CC2		    test    bx,	bx
seg000:7CC4		    jz	    short checksum_bad
seg000:7CC6		    mov	    al,	ah
seg000:7CC8		    call    read_cmos_word
seg000:7CCB		    xchg    al,	ah
seg000:7CCD		    cmp	    ax,	bx
seg000:7CCF		    jz	    short checksum_ok
seg000:7CD1
seg000:7CD1 checksum_bad:			    ; CODE XREF: test_cmos+62j
seg000:7CD1		    mov	    si,	offset aBadConfigurati ; "Bad configuration information	found in "...
seg000:7CD4		    call    print_?
seg000:7CD7		    mov	    ah,	60h ; '`'
seg000:7CD9		    call    cmos8E_flipON_ah
seg000:7CDC
seg000:7CDC checksum_ok:			    ; CODE XREF: test_cmos+6Dj
seg000:7CDC		    mov	    al,	8Eh ; ''
seg000:7CDE		    call    read_cmos
seg000:7CE1		    add	    al,	0FFh
seg000:7CE3		    pop	    si
seg000:7CE4		    pop	    dx
seg000:7CE5		    pop	    cx
seg000:7CE6		    pop	    ax
seg000:7CE7		    retn
seg000:7CE7 test_cmos	    endp
seg000:7CE7
seg000:7CE8
seg000:7CE8 ; =============== S	U B R O	U T I N	E =======================================
seg000:7CE8
seg000:7CE8
seg000:7CE8 cmos8E_flipON_ah proc near		    ; CODE XREF: test_RTC+1Cp
seg000:7CE8					    ; test_cmos+47p ...
seg000:7CE8		    push    ax
seg000:7CE9		    mov	    al,	8Eh ; ''   ; 8Eh Error:
seg000:7CE9					    ;	4h - RTC not running
seg000:7CE9					    ; 60h - Bad	configuration information found	in CMOS
seg000:7CE9					    ; A0h - Please replace the back-up battery!
seg000:7CEB		    call    read_cmos
seg000:7CEE		    or	    ah,	al
seg000:7CF0		    mov	    al,	8Eh ; ''
seg000:7CF2		    call    write_cmos
seg000:7CF5		    pop	    ax
seg000:7CF6		    retn
seg000:7CF6 cmos8E_flipON_ah endp
seg000:7CF6
seg000:7CF7
seg000:7CF7 ; =============== S	U B R O	U T I N	E =======================================
seg000:7CF7
seg000:7CF7
seg000:7CF7 read_cmos	    proc near		    ; CODE XREF: ColrWarm_Boot+423p
seg000:7CF7					    ; ColrWarm_Boot+42Cp ...
seg000:7CF7		    pushf
seg000:7CF8		    cli
seg000:7CF9		    out	    70h, al	    ; CMOS Memory:
seg000:7CF9					    ; used by real-time	clock
seg000:7CFB		    jmp	    short $+2
seg000:7CFD		    in	    al,	71h	    ; CMOS Memory
seg000:7CFF		    popf
seg000:7D00		    retn
seg000:7D00 read_cmos	    endp
seg000:7D00
seg000:7D01
seg000:7D01 ; =============== S	U B R O	U T I N	E =======================================
seg000:7D01
seg000:7D01
seg000:7D01 write_cmos	    proc near		    ; CODE XREF: ram_cmos_same_size?+33p
seg000:7D01					    ; FPU_init+41p ...
seg000:7D01		    push    ax
seg000:7D02		    pushf
seg000:7D03		    cli
seg000:7D04		    out	    70h, al	    ; CMOS Memory:
seg000:7D04					    ; used by real-time	clock
seg000:7D06		    jmp	    short $+2
seg000:7D08		    mov	    al,	ah
seg000:7D0A		    out	    71h, al	    ; CMOS Memory:
seg000:7D0A					    ; used by real-time	clock
seg000:7D0C		    popf
seg000:7D0D		    pop	    ax
seg000:7D0E		    retn
seg000:7D0E write_cmos	    endp
seg000:7D0E
seg000:7D0F
seg000:7D0F ; =============== S	U B R O	U T I N	E =======================================
seg000:7D0F
seg000:7D0F
seg000:7D0F read_cmos_word  proc near		    ; CODE XREF: ram_cmos_same_size?+Ep
seg000:7D0F					    ; ram_cmos_same_size?+38p ...
seg000:7D0F		    mov	    ah,	al
seg000:7D11		    inc	    al
seg000:7D13		    call    read_cmos
seg000:7D16		    xchg    al,	ah
seg000:7D18		    call    read_cmos
seg000:7D1B		    retn
seg000:7D1B read_cmos_word  endp
seg000:7D1B
seg000:7D1C
seg000:7D1C ; =============== S	U B R O	U T I N	E =======================================
seg000:7D1C
seg000:7D1C
seg000:7D1C write_cmos_word proc near		    ; CODE XREF: ColrWarm_Boot+2D1p
seg000:7D1C					    ; cmos_checksum+1Dp
seg000:7D1C		    push    ax
seg000:7D1D		    mov	    ah,	bl
seg000:7D1F		    call    write_cmos
seg000:7D22		    inc	    al
seg000:7D24		    mov	    ah,	bh
seg000:7D26		    call    write_cmos
seg000:7D29		    pop	    ax
seg000:7D2A		    retn
seg000:7D2A write_cmos_word endp
seg000:7D2A
seg000:7D2B
seg000:7D2B ; =============== S	U B R O	U T I N	E =======================================
seg000:7D2B
seg000:7D2B
seg000:7D2B cmos_readALcond proc near		    ; CODE XREF: ColrWarm_Boot+4CDp
seg000:7D2B					    ; FPU_init_?+5p ...
seg000:7D2B		    push    bx
seg000:7D2C		    push    cx
seg000:7D2D		    push    dx
seg000:7D2E		    mov	    dx,	ax
seg000:7D30		    and	    al,	80h
seg000:7D32		    or	    al,	0Eh
seg000:7D34		    call    read_cmos	    ; read 0Eh or 8Eh
seg000:7D37		    test    al,	0E0h
seg000:7D39		    jnz	    short loc_7D43
seg000:7D3B		    mov	    al,	dl
seg000:7D3D		    call    read_cmos
seg000:7D40		    clc
seg000:7D41		    jmp	    short loc_7D46
seg000:7D43 ; ---------------------------------------------------------------------------
seg000:7D43
seg000:7D43 loc_7D43:				    ; CODE XREF: cmos_readALcond+Ej
seg000:7D43		    mov	    al,	dh
seg000:7D45		    stc
seg000:7D46
seg000:7D46 loc_7D46:				    ; CODE XREF: cmos_readALcond+16j
seg000:7D46		    mov	    ah,	dh
seg000:7D48		    pop	    dx
seg000:7D49		    pop	    cx
seg000:7D4A		    pop	    bx
seg000:7D4B		    retn
seg000:7D4B cmos_readALcond endp
seg000:7D4B
seg000:7D4C
seg000:7D4C ; =============== S	U B R O	U T I N	E =======================================
seg000:7D4C
seg000:7D4C
seg000:7D4C cmos_checksum   proc near		    ; CODE XREF: FPU_init+44p
seg000:7D4C		    push    ax
seg000:7D4D		    push    bx
seg000:7D4E		    push    cx
seg000:7D4F		    mov	    cx,	1Eh
seg000:7D52		    mov	    bx,	0
seg000:7D55		    mov	    ah,	90h ; ''
seg000:7D57
seg000:7D57 loc_7D57:				    ; CODE XREF: cmos_checksum+17j
seg000:7D57		    mov	    al,	ah
seg000:7D59		    call    read_cmos
seg000:7D5C		    add	    bl,	al
seg000:7D5E		    adc	    bh,	0
seg000:7D61		    inc	    ah
seg000:7D63		    loop    loc_7D57
seg000:7D65		    xchg    bl,	bh
seg000:7D67		    mov	    al,	ah
seg000:7D69		    call    write_cmos_word ; checksum at AEh
seg000:7D6C		    pop	    cx
seg000:7D6D		    pop	    bx
seg000:7D6E		    pop	    ax
seg000:7D6F		    retn
seg000:7D6F cmos_checksum   endp
seg000:7D6F
seg000:7D6F ; ---------------------------------------------------------------------------
seg000:7D70		    db	  0
seg000:7D71		    db	  0
seg000:7D72		    db	  0
seg000:7D73		    db	  0
seg000:7D74		    db	  0
seg000:7D75		    db	  0
seg000:7D76		    db	  0
seg000:7D77		    db	  0
seg000:7D78		    db	  0
seg000:7D79		    db	  0
seg000:7D7A		    db	  0
seg000:7D7B		    db	  0
seg000:7D7C		    db	  0
seg000:7D7D		    db	  0
seg000:7D7E		    db	  0
seg000:7D7F		    db	  0
seg000:7D80		    db	  0
seg000:7D81		    db	  0
seg000:7D82		    db	  0
seg000:7D83		    db	  0
seg000:7D84		    db	  0
seg000:7D85		    db	  0
seg000:7D86		    db	  0
seg000:7D87		    db	  0
seg000:7D88		    db	  0
seg000:7D89		    db	  0
seg000:7D8A		    db	  0
seg000:7D8B		    db	  0
seg000:7D8C		    db	  0
seg000:7D8D		    db	  0
seg000:7D8E		    db	  0
seg000:7D8F		    db	  0
seg000:7D90		    db	  0
seg000:7D91		    db	  0
seg000:7D92		    db	  0
seg000:7D93		    db	  0
seg000:7D94		    db	  0
seg000:7D95		    db	  0
seg000:7D96		    db	  0
seg000:7D97		    db	  0
seg000:7D98		    db	  0
seg000:7D99		    db	  0
seg000:7D9A		    db	  0
seg000:7D9B		    db	  0
seg000:7D9C		    db	  0
seg000:7D9D		    db	  0
seg000:7D9E		    db	  0
seg000:7D9F		    db	  0
seg000:7DA0		    db	  0
seg000:7DA1		    db	  0
seg000:7DA2		    db	  0
seg000:7DA3		    db	  0
seg000:7DA4		    db	  0
seg000:7DA5		    db	  0
seg000:7DA6		    db	  0
seg000:7DA7		    db	  0
seg000:7DA8		    db	  0
seg000:7DA9		    db	  0
seg000:7DAA		    db	  0
seg000:7DAB		    db	  0
seg000:7DAC		    db	  0
seg000:7DAD		    db	  0
seg000:7DAE		    db	  0
seg000:7DAF		    db	  0
seg000:7DB0		    db	  0
seg000:7DB1		    db	  0
seg000:7DB2		    db	  0
seg000:7DB3		    db	  0
seg000:7DB4		    db	  0
seg000:7DB5		    db	  0
seg000:7DB6		    db	  0
seg000:7DB7		    db	  0
seg000:7DB8		    db	  0
seg000:7DB9		    db	  0
seg000:7DBA		    db	  0
seg000:7DBB		    db	  0
seg000:7DBC		    db	  0
seg000:7DBD		    db	  0
seg000:7DBE		    db	  0
seg000:7DBF		    db	  0
seg000:7DC0		    db	  0
seg000:7DC1		    db	  0
seg000:7DC2		    db	  0
seg000:7DC3		    db	  0
seg000:7DC4		    db	  0
seg000:7DC5		    db	  0
seg000:7DC6		    db	  0
seg000:7DC7		    db	  0
seg000:7DC8		    db	  0
seg000:7DC9		    db	  0
seg000:7DCA		    db	  0
seg000:7DCB		    db	  0
seg000:7DCC		    db	  0
seg000:7DCD		    db	  0
seg000:7DCE		    db	  0
seg000:7DCF		    db	  0
seg000:7DD0		    db	  0
seg000:7DD1		    db	  0
seg000:7DD2		    db	  0
seg000:7DD3		    db	  0
seg000:7DD4		    db	  0
seg000:7DD5		    db	  0
seg000:7DD6		    db	  0
seg000:7DD7		    db	  0
seg000:7DD8		    db	  0
seg000:7DD9		    db	  0
seg000:7DDA		    db	  0
seg000:7DDB		    db	  0
seg000:7DDC		    db	  0
seg000:7DDD		    db	  0
seg000:7DDE		    db	  0
seg000:7DDF		    db	  0
seg000:7DE0		    db	  0
seg000:7DE1		    db	  0
seg000:7DE2		    db	  0
seg000:7DE3		    db	  0
seg000:7DE4		    db	  0
seg000:7DE5		    db	  0
seg000:7DE6		    db	  0
seg000:7DE7		    db	  0
seg000:7DE8		    db	  0
seg000:7DE9		    db	  0
seg000:7DEA		    db	  0
seg000:7DEB		    db	  0
seg000:7DEC		    db	  0
seg000:7DED		    db	  0
seg000:7DEE		    db	  0
seg000:7DEF		    db	  0
seg000:7DF0		    db	  0
seg000:7DF1		    db	  0
seg000:7DF2		    db	  0
seg000:7DF3		    db	  0
seg000:7DF4		    db	  0
seg000:7DF5		    db	  0
seg000:7DF6		    db	  0
seg000:7DF7		    db	  0
seg000:7DF8		    db	  0
seg000:7DF9		    db	  0
seg000:7DFA		    db	  0
seg000:7DFB		    db	  0
seg000:7DFC		    db	  0
seg000:7DFD		    db	  0
seg000:7DFE word_7DFE	    dw 0		    ; DATA XREF: sub_350D+65r
seg000:7E00		    db	  0
seg000:7E01		    db	  0
seg000:7E02		    db	  0
seg000:7E03		    db	  0
seg000:7E04		    db	  0
seg000:7E05		    db	  0
seg000:7E06		    db	  0
seg000:7E07		    db	  0
seg000:7E08		    db	  0
seg000:7E09		    db	  0
seg000:7E0A		    db	  0
seg000:7E0B		    db	  0
seg000:7E0C		    db	  0
seg000:7E0D		    db	  0
seg000:7E0E		    db	  0
seg000:7E0F		    db	  0
seg000:7E10		    db	  0
seg000:7E11		    db	  0
seg000:7E12		    db	  0
seg000:7E13		    db	  0
seg000:7E14		    db	  0
seg000:7E15		    db	  0
seg000:7E16		    db	  0
seg000:7E17		    db	  0
seg000:7E18		    db	  0
seg000:7E19		    db	  0
seg000:7E1A		    db	  0
seg000:7E1B		    db	  0
seg000:7E1C		    db	  0
seg000:7E1D		    db	  0
seg000:7E1E		    db	  0
seg000:7E1F		    db	  0
seg000:7E20		    db	  0
seg000:7E21		    db	  0
seg000:7E22		    db	  0
seg000:7E23		    db	  0
seg000:7E24		    db	  0
seg000:7E25		    db	  0
seg000:7E26		    db	  0
seg000:7E27		    db	  0
seg000:7E28		    db	  0
seg000:7E29		    db	  0
seg000:7E2A		    db	  0
seg000:7E2B		    db	  0
seg000:7E2C		    db	  0
seg000:7E2D		    db	  0
seg000:7E2E		    db	  0
seg000:7E2F		    db	  0
seg000:7E30		    db	  0
seg000:7E31		    db	  0
seg000:7E32		    db	  0
seg000:7E33		    db	  0
seg000:7E34		    db	  0
seg000:7E35		    db	  0
seg000:7E36		    db	  0
seg000:7E37		    db	  0
seg000:7E38		    db	  0
seg000:7E39		    db	  0
seg000:7E3A		    db	  0
seg000:7E3B		    db	  0
seg000:7E3C		    db	  0
seg000:7E3D		    db	  0
seg000:7E3E		    db	  0
seg000:7E3F		    db	  0
seg000:7E40		    db	  0
seg000:7E41		    db	  0
seg000:7E42		    db	  0
seg000:7E43		    db	  0
seg000:7E44		    db	  0
seg000:7E45		    db	  0
seg000:7E46		    db	  0
seg000:7E47		    db	  0
seg000:7E48		    db	  0
seg000:7E49		    db	  0
seg000:7E4A		    db	  0
seg000:7E4B		    db	  0
seg000:7E4C		    db	  0
seg000:7E4D		    db	  0
seg000:7E4E		    db	  0
seg000:7E4F		    db	  0
seg000:7E50		    db	  0
seg000:7E51		    db	  0
seg000:7E52		    db	  0
seg000:7E53		    db	  0
seg000:7E54		    db	  0
seg000:7E55		    db	  0
seg000:7E56		    db	  0
seg000:7E57		    db	  0
seg000:7E58		    db	  0
seg000:7E59		    db	  0
seg000:7E5A		    db	  0
seg000:7E5B		    db	  0
seg000:7E5C		    db	  0
seg000:7E5D		    db	  0
seg000:7E5E		    db	  0
seg000:7E5F		    db	  0
seg000:7E60		    db	  0
seg000:7E61		    db	  0
seg000:7E62		    db	  0
seg000:7E63		    db	  0
seg000:7E64		    db	  0
seg000:7E65		    db	  0
seg000:7E66		    db	  0
seg000:7E67		    db	  0
seg000:7E68		    db	  0
seg000:7E69		    db	  0
seg000:7E6A		    db	  0
seg000:7E6B		    db	  0
seg000:7E6C		    db	  0
seg000:7E6D		    db	  0
seg000:7E6E		    db	  0
seg000:7E6F		    db	  0
seg000:7E70		    db	  0
seg000:7E71		    db	  0
seg000:7E72		    db	  0
seg000:7E73		    db	  0
seg000:7E74		    db	  0
seg000:7E75		    db	  0
seg000:7E76		    db	  0
seg000:7E77		    db	  0
seg000:7E78		    db	  0
seg000:7E79		    db	  0
seg000:7E7A		    db	  0
seg000:7E7B		    db	  0
seg000:7E7C		    db	  0
seg000:7E7D		    db	  0
seg000:7E7E		    db	  0
seg000:7E7F		    db	  0
seg000:7E80		    db	  0
seg000:7E81		    db	  0
seg000:7E82		    db	  0
seg000:7E83		    db	  0
seg000:7E84		    db	  0
seg000:7E85		    db	  0
seg000:7E86		    db	  0
seg000:7E87		    db	  0
seg000:7E88		    db	  0
seg000:7E89		    db	  0
seg000:7E8A		    db	  0
seg000:7E8B		    db	  0
seg000:7E8C		    db	  0
seg000:7E8D		    db	  0
seg000:7E8E		    db	  0
seg000:7E8F		    db	  0
seg000:7E90		    db	  0
seg000:7E91		    db	  0
seg000:7E92		    db	  0
seg000:7E93		    db	  0
seg000:7E94		    db	  0
seg000:7E95		    db	  0
seg000:7E96		    db	  0
seg000:7E97		    db	  0
seg000:7E98		    db	  0
seg000:7E99		    db	  0
seg000:7E9A		    db	  0
seg000:7E9B		    db	  0
seg000:7E9C		    db	  0
seg000:7E9D		    db	  0
seg000:7E9E		    db	  0
seg000:7E9F		    db	  0
seg000:7EA0		    db	  0
seg000:7EA1		    db	  0
seg000:7EA2		    db	  0
seg000:7EA3		    db	  0
seg000:7EA4		    db	  0
seg000:7EA5		    db	  0
seg000:7EA6		    db	  0
seg000:7EA7		    db	  0
seg000:7EA8		    db	  0
seg000:7EA9		    db	  0
seg000:7EAA		    db	  0
seg000:7EAB		    db	  0
seg000:7EAC		    db	  0
seg000:7EAD		    db	  0
seg000:7EAE		    db	  0
seg000:7EAF		    db	  0
seg000:7EB0		    db	  0
seg000:7EB1		    db	  0
seg000:7EB2		    db	  0
seg000:7EB3		    db	  0
seg000:7EB4		    db	  0
seg000:7EB5		    db	  0
seg000:7EB6		    db	  0
seg000:7EB7		    db	  0
seg000:7EB8		    db	  0
seg000:7EB9		    db	  0
seg000:7EBA		    db	  0
seg000:7EBB		    db	  0
seg000:7EBC		    db	  0
seg000:7EBD		    db	  0
seg000:7EBE		    db	  0
seg000:7EBF		    db	  0
seg000:7EC0		    db	  0
seg000:7EC1		    db	  0
seg000:7EC2		    db	  0
seg000:7EC3		    db	  0
seg000:7EC4		    db	  0
seg000:7EC5		    db	  0
seg000:7EC6		    db	  0
seg000:7EC7		    db	  0
seg000:7EC8		    db	  0
seg000:7EC9		    db	  0
seg000:7ECA		    db	  0
seg000:7ECB		    db	  0
seg000:7ECC		    db	  0
seg000:7ECD		    db	  0
seg000:7ECE		    db	  0
seg000:7ECF		    db	  0
seg000:7ED0		    db	  0
seg000:7ED1		    db	  0
seg000:7ED2		    db	  0
seg000:7ED3		    db	  0
seg000:7ED4		    db	  0
seg000:7ED5		    db	  0
seg000:7ED6		    db	  0
seg000:7ED7		    db	  0
seg000:7ED8		    db	  0
seg000:7ED9		    db	  0
seg000:7EDA		    db	  0
seg000:7EDB		    db	  0
seg000:7EDC		    db	  0
seg000:7EDD		    db	  0
seg000:7EDE		    db	  0
seg000:7EDF		    db	  0
seg000:7EE0		    db	  0
seg000:7EE1		    db	  0
seg000:7EE2		    db	  0
seg000:7EE3		    db	  0
seg000:7EE4		    db	  0
seg000:7EE5		    db	  0
seg000:7EE6		    db	  0
seg000:7EE7		    db	  0
seg000:7EE8		    db	  0
seg000:7EE9		    db	  0
seg000:7EEA		    db	  0
seg000:7EEB		    db	  0
seg000:7EEC		    db	  0
seg000:7EED		    db	  0
seg000:7EEE		    db	  0
seg000:7EEF		    db	  0
seg000:7EF0		    db	  0
seg000:7EF1		    db	  0
seg000:7EF2		    db	  0
seg000:7EF3		    db	  0
seg000:7EF4		    db	  0
seg000:7EF5		    db	  0
seg000:7EF6		    db	  0
seg000:7EF7		    db	  0
seg000:7EF8		    db	  0
seg000:7EF9		    db	  0
seg000:7EFA		    db	  0
seg000:7EFB		    db	  0
seg000:7EFC		    db	  0
seg000:7EFD		    db	  0
seg000:7EFE		    db	  0
seg000:7EFF		    db	  0
seg000:7F00		    db	  0
seg000:7F01		    db	  0
seg000:7F02		    db	  0
seg000:7F03		    db	  0
seg000:7F04		    db	  0
seg000:7F05		    db	  0
seg000:7F06		    db	  0
seg000:7F07		    db	  0
seg000:7F08		    db	  0
seg000:7F09		    db	  0
seg000:7F0A		    db	  0
seg000:7F0B		    db	  0
seg000:7F0C		    db	  0
seg000:7F0D		    db	  0
seg000:7F0E		    db	  0
seg000:7F0F		    db	  0
seg000:7F10		    db	  0
seg000:7F11		    db	  0
seg000:7F12		    db	  0
seg000:7F13		    db	  0
seg000:7F14		    db	  0
seg000:7F15		    db	  0
seg000:7F16		    db	  0
seg000:7F17		    db	  0
seg000:7F18		    db	  0
seg000:7F19		    db	  0
seg000:7F1A		    db	  0
seg000:7F1B		    db	  0
seg000:7F1C		    db	  0
seg000:7F1D		    db	  0
seg000:7F1E		    db	  0
seg000:7F1F		    db	  0
seg000:7F20		    db	  0
seg000:7F21		    db	  0
seg000:7F22		    db	  0
seg000:7F23		    db	  0
seg000:7F24		    db	  0
seg000:7F25		    db	  0
seg000:7F26		    db	  0
seg000:7F27		    db	  0
seg000:7F28		    db	  0
seg000:7F29		    db	  0
seg000:7F2A		    db	  0
seg000:7F2B		    db	  0
seg000:7F2C		    db	  0
seg000:7F2D		    db	  0
seg000:7F2E		    db	  0
seg000:7F2F		    db	  0
seg000:7F30		    db	  0
seg000:7F31		    db	  0
seg000:7F32		    db	  0
seg000:7F33		    db	  0
seg000:7F34		    db	  0
seg000:7F35		    db	  0
seg000:7F36		    db	  0
seg000:7F37		    db	  0
seg000:7F38		    db	  0
seg000:7F39		    db	  0
seg000:7F3A		    db	  0
seg000:7F3B		    db	  0
seg000:7F3C		    db	  0
seg000:7F3D		    db	  0
seg000:7F3E		    db	  0
seg000:7F3F		    db	  0
seg000:7F40		    db	  0
seg000:7F41		    db	  0
seg000:7F42		    db	  0
seg000:7F43		    db	  0
seg000:7F44		    db	  0
seg000:7F45		    db	  0
seg000:7F46		    db	  0
seg000:7F47		    db	  0
seg000:7F48		    db	  0
seg000:7F49		    db	  0
seg000:7F4A		    db	  0
seg000:7F4B		    db	  0
seg000:7F4C		    db	  0
seg000:7F4D		    db	  0
seg000:7F4E		    db	  0
seg000:7F4F		    db	  0
seg000:7F50		    db	  0
seg000:7F51		    db	  0
seg000:7F52		    db	  0
seg000:7F53		    db	  0
seg000:7F54		    db	  0
seg000:7F55		    db	  0
seg000:7F56		    db	  0
seg000:7F57		    db	  0
seg000:7F58		    db	  0
seg000:7F59		    db	  0
seg000:7F5A		    db	  0
seg000:7F5B		    db	  0
seg000:7F5C		    db	  0
seg000:7F5D		    db	  0
seg000:7F5E		    db	  0
seg000:7F5F		    db	  0
seg000:7F60		    db	  0
seg000:7F61		    db	  0
seg000:7F62		    db	  0
seg000:7F63		    db	  0
seg000:7F64		    db	  0
seg000:7F65		    db	  0
seg000:7F66		    db	  0
seg000:7F67		    db	  0
seg000:7F68		    db	  0
seg000:7F69		    db	  0
seg000:7F6A		    db	  0
seg000:7F6B		    db	  0
seg000:7F6C		    db	  0
seg000:7F6D		    db	  0
seg000:7F6E		    db	  0
seg000:7F6F		    db	  0
seg000:7F70		    db	  0
seg000:7F71		    db	  0
seg000:7F72		    db	  0
seg000:7F73		    db	  0
seg000:7F74		    db	  0
seg000:7F75		    db	  0
seg000:7F76		    db	  0
seg000:7F77		    db	  0
seg000:7F78		    db	  0
seg000:7F79		    db	  0
seg000:7F7A		    db	  0
seg000:7F7B		    db	  0
seg000:7F7C		    db	  0
seg000:7F7D		    db	  0
seg000:7F7E		    db	  0
seg000:7F7F		    db	  0
seg000:7F80		    db	  0
seg000:7F81		    db	  0
seg000:7F82		    db	  0
seg000:7F83		    db	  0
seg000:7F84		    db	  0
seg000:7F85		    db	  0
seg000:7F86		    db	  0
seg000:7F87		    db	  0
seg000:7F88		    db	  0
seg000:7F89		    db	  0
seg000:7F8A		    db	  0
seg000:7F8B		    db	  0
seg000:7F8C		    db	  0
seg000:7F8D		    db	  0
seg000:7F8E		    db	  0
seg000:7F8F		    db	  0
seg000:7F90		    db	  0
seg000:7F91		    db	  0
seg000:7F92		    db	  0
seg000:7F93		    db	  0
seg000:7F94		    db	  0
seg000:7F95		    db	  0
seg000:7F96		    db	  0
seg000:7F97		    db	  0
seg000:7F98		    db	  0
seg000:7F99		    db	  0
seg000:7F9A		    db	  0
seg000:7F9B		    db	  0
seg000:7F9C		    db	  0
seg000:7F9D		    db	  0
seg000:7F9E		    db	  0
seg000:7F9F		    db	  0
seg000:7FA0		    db	  0
seg000:7FA1		    db	  0
seg000:7FA2		    db	  0
seg000:7FA3		    db	  0
seg000:7FA4		    db	  0
seg000:7FA5		    db	  0
seg000:7FA6		    db	  0
seg000:7FA7		    db	  0
seg000:7FA8		    db	  0
seg000:7FA9		    db	  0
seg000:7FAA		    db	  0
seg000:7FAB		    db	  0
seg000:7FAC		    db	  0
seg000:7FAD		    db	  0
seg000:7FAE		    db	  0
seg000:7FAF		    db	  0
seg000:7FB0		    db	  0
seg000:7FB1		    db	  0
seg000:7FB2		    db	  0
seg000:7FB3		    db	  0
seg000:7FB4		    db	  0
seg000:7FB5		    db	  0
seg000:7FB6		    db	  0
seg000:7FB7		    db	  0
seg000:7FB8		    db	  0
seg000:7FB9		    db	  0
seg000:7FBA		    db	  0
seg000:7FBB		    db	  0
seg000:7FBC		    db	  0
seg000:7FBD		    db	  0
seg000:7FBE		    db	  0
seg000:7FBF		    db	  0
seg000:7FC0		    db	  0
seg000:7FC1		    db	  0
seg000:7FC2		    db	  0
seg000:7FC3		    db	  0
seg000:7FC4		    db	  0
seg000:7FC5		    db	  0
seg000:7FC6		    db	  0
seg000:7FC7		    db	  0
seg000:7FC8		    db	  0
seg000:7FC9		    db	  0
seg000:7FCA		    db	  0
seg000:7FCB		    db	  0
seg000:7FCC		    db	  0
seg000:7FCD		    db	  0
seg000:7FCE		    db	  0
seg000:7FCF		    db	  0
seg000:7FD0		    db	  0
seg000:7FD1		    db	  0
seg000:7FD2		    db	  0
seg000:7FD3		    db	  0
seg000:7FD4		    db	  0
seg000:7FD5		    db	  0
seg000:7FD6		    db	  0
seg000:7FD7		    db	  0
seg000:7FD8		    db	  0
seg000:7FD9		    db	  0
seg000:7FDA		    db	  0
seg000:7FDB		    db	  0
seg000:7FDC		    db	  0
seg000:7FDD		    db	  0
seg000:7FDE		    db	  0
seg000:7FDF		    db	  0
seg000:7FE0		    db	  0
seg000:7FE1		    db	  0
seg000:7FE2		    db	  0
seg000:7FE3		    db	  0
seg000:7FE4		    db	  0
seg000:7FE5		    db	  0
seg000:7FE6		    db	  0
seg000:7FE7		    db	  0
seg000:7FE8		    db	  0
seg000:7FE9		    db	  0
seg000:7FEA		    db	  0
seg000:7FEB		    db	  0
seg000:7FEC		    db	  0
seg000:7FED		    db	  0
seg000:7FEE		    db	  0
seg000:7FEF		    db	  0
seg000:7FF0		    db	  0
seg000:7FF1		    db	  0
seg000:7FF2		    db	  0
seg000:7FF3		    db	  0
seg000:7FF4		    db	  0
seg000:7FF5		    db	  0
seg000:7FF6		    db	  0
seg000:7FF7		    db	  0
seg000:7FF8		    db	  0
seg000:7FF9		    db	  0
seg000:7FFA		    db	  0
seg000:7FFB		    db	  0
seg000:7FFC		    db	  0
seg000:7FFD		    db	  0
seg000:7FFE		    db	  0
seg000:7FFF zero	    db	  0		    ; DATA XREF: sub_514A+2Co
seg000:8000 Bios_signature  db '12/08/89 (C)ZDS CORP3032C' ; DATA XREF: sub_514A:loc_5170o
seg000:8019		    db	  4
seg000:801A number_letter   db '0123456789ABCDEF',0 ; DATA XREF: hex_2_ascii+Dr
seg000:801A					    ; hex_2_ascii+1Br
seg000:802B zero_0	    db	  0		    ; DATA XREF: addembler?+6o
seg000:802B					    ; addembler?+Do
seg000:802C comma	    db ',',0                ; DATA XREF: addembler?+A4o
seg000:802E a1		    db '1',0                ; DATA XREF: sub_8174:loc_81B6o
seg000:8030 left_bracket    db '[',0                ; DATA XREF: assembler_?:loc_840Do
seg000:8030					    ; hex_math+87o
seg000:8032 minus	    db '-',0                ; DATA XREF: assembler_?+96o
seg000:8032					    ; hex_math+D7o
seg000:8034 plus	    db '+',0                ; DATA XREF: assembler_?:loc_8426o
seg000:8034					    ; assembler_?+AEo ...
seg000:8036 right_bracket   db ']',0                ; DATA XREF: assembler_?:loc_8442o
seg000:8036					    ; hex_math+9Co
seg000:8038 H_string	    db 'H',0                ; DATA XREF: hex_math+41o
seg000:803A colon_string    db ':',0                ; DATA XREF: hex_math+AFo
seg000:803C
seg000:803C ; =============== S	U B R O	U T I N	E =======================================
seg000:803C
seg000:803C
seg000:803C print_addembler? proc near		    ; CODE XREF: cmd_display_regs+57p
seg000:803C					    ; cmd_unassemble+22p ...
seg000:803C		    push    ax
seg000:803D		    push    bx
seg000:803E		    push    cx
seg000:803F		    push    dx
seg000:8040		    push    si
seg000:8041
seg000:8041 loc_8041:				    ; CODE XREF: print_addembler?+52j
seg000:8041					    ; print_addembler?+67j
seg000:8041		    call    print_HEX_ESDI
seg000:8044		    mov	    ah,	2
seg000:8046		    call    print_spaces_AH
seg000:8049		    mov	    word ptr cs:loc_205+1, es
seg000:804E		    mov	    word ptr cs:loc_207+1, di
seg000:8053		    push    es
seg000:8054		    push    di
seg000:8055		    push    cx
seg000:8056		    call    addembler?
seg000:8059		    pop	    cx
seg000:805A		    pop	    di
seg000:805B		    pop	    es
seg000:805C		    mov	    si,	ax
seg000:805E		    mov	    ax,	word ptr cs:loc_207+1
seg000:8062		    sub	    ax,	di
seg000:8064		    mov	    dx,	ax
seg000:8066		    mov	    bx,	ax
seg000:8068		    mov	    al,	es:[di]
seg000:806B		    push    ax
seg000:806C
seg000:806C loc_806C:				    ; CODE XREF: print_addembler?+38j
seg000:806C		    mov	    al,	es:[di]
seg000:806F		    call    print_HEX_upper
seg000:8072		    inc	    di
seg000:8073		    dec	    bx
seg000:8074		    jnz	    short loc_806C
seg000:8076		    mov	    bx,	dx
seg000:8078
seg000:8078 loc_8078:				    ; CODE XREF: print_addembler?+47j
seg000:8078		    cmp	    bx,	7
seg000:807B		    jge	    short loc_8085
seg000:807D		    mov	    ah,	2
seg000:807F		    call    print_spaces_AH
seg000:8082		    inc	    bx
seg000:8083		    jmp	    short loc_8078
seg000:8085 ; ---------------------------------------------------------------------------
seg000:8085
seg000:8085 loc_8085:				    ; CODE XREF: print_addembler?+3Fj
seg000:8085		    call    print_null_terminated
seg000:8088		    call    sub_2253
seg000:808B		    pop	    ax
seg000:808C		    sub	    cx,	dx
seg000:808E		    ja	    short loc_8041
seg000:8090		    push    di
seg000:8091		    push    es
seg000:8092		    mov	    di,	cs
seg000:8094		    mov	    es,	di
seg000:8096		    mov	    di,	offset compare_char
seg000:8099		    mov	    cx,	7
seg000:809C		    repne scasb
seg000:809E		    pop	    es
seg000:809F		    pop	    di
seg000:80A0		    mov	    cx,	1
seg000:80A3		    jz	    short loc_8041
seg000:80A5		    pop	    si
seg000:80A6		    pop	    dx
seg000:80A7		    pop	    cx
seg000:80A8		    pop	    bx
seg000:80A9		    pop	    ax
seg000:80AA		    retn
seg000:80AA print_addembler? endp
seg000:80AA
seg000:80AB
seg000:80AB ; =============== S	U B R O	U T I N	E =======================================
seg000:80AB
seg000:80AB
seg000:80AB addembler?	    proc near		    ; CODE XREF: print_addembler?+1Ap
seg000:80AB		    mov	    cs:regs_7273_2.byte.data+14h, 0
seg000:80B1		    mov	    word ptr cs:loc_20C, offset	zero_0
seg000:80B8		    mov	    word ptr cs:loc_20C+2, offset zero_0
seg000:80BF		    mov	    si,	word ptr cs:loc_207+1
seg000:80C4		    inc	    word ptr cs:loc_207+1
seg000:80C9		    mov	    al,	es:[si]
seg000:80CC		    xor	    ah,	ah
seg000:80CE		    mov	    word ptr cs:loc_211+1, ax
seg000:80D2		    shl	    ax,	1
seg000:80D4		    shl	    ax,	1
seg000:80D6		    mov	    si,	ax
seg000:80D8		    add	    si,	offset menmonics_table
seg000:80DC		    mov	    ax,	cs:[si]
seg000:80DF		    mov	    word ptr cs:loc_20A, ax
seg000:80E3		    mov	    ax,	cs:[si+2]
seg000:80E7		    mov	    word ptr cs:loc_20F+1, ax
seg000:80EB		    call    sub_8174
seg000:80EE		    call    registers_?
seg000:80F1		    call    assembler_?_0
seg000:80F4		    call    near ptr hex_math
seg000:80F7		    mov	    si,	word ptr cs:loc_20A
seg000:80FC		    mov	    di,	360h
seg000:80FF
seg000:80FF loc_80FF:				    ; CODE XREF: addembler?+5Ej
seg000:80FF		    lods    byte ptr cs:[si]
seg000:8101		    test    al,	80h
seg000:8103		    jnz	    short loc_810B
seg000:8105		    mov	    cs:[di], al
seg000:8108		    inc	    di
seg000:8109		    jmp	    short loc_80FF
seg000:810B ; ---------------------------------------------------------------------------
seg000:810B
seg000:810B loc_810B:				    ; CODE XREF: addembler?+58j
seg000:810B		    and	    al,	7Fh
seg000:810D		    mov	    cs:[di], al
seg000:8110		    mov	    byte ptr cs:[di+1],	9
seg000:8115		    mov	    byte ptr cs:[di+2],	0
seg000:811A		    mov	    di,	360h
seg000:811D		    mov	    si,	word ptr cs:loc_20C+2
seg000:8122		    cmp	    byte ptr cs:[si], 0
seg000:8126		    jz	    short loc_8144
seg000:8128		    cmp	    cs:init_ram_table.byte.offset+26h, 0
seg000:812E		    jnz	    short loc_813C
seg000:8130		    test    word ptr cs:loc_20F+1, 8000h
seg000:8137		    jz	    short loc_813C
seg000:8139		    call    sub_8548
seg000:813C
seg000:813C loc_813C:				    ; CODE XREF: addembler?+83j
seg000:813C					    ; addembler?+8Cj
seg000:813C		    mov	    si,	word ptr cs:loc_20C+2
seg000:8141		    call    sub_85CE
seg000:8144
seg000:8144 loc_8144:				    ; CODE XREF: addembler?+7Bj
seg000:8144		    mov	    si,	word ptr cs:loc_20C
seg000:8149		    cmp	    byte ptr cs:[si], 0
seg000:814D		    jz	    short loc_8171
seg000:814F		    mov	    si,	offset comma ; ","
seg000:8152		    call    sub_85CE
seg000:8155		    cmp	    cs:init_ram_table.byte.offset+26h, 0
seg000:815B		    jnz	    short loc_8169
seg000:815D		    test    word ptr cs:loc_20F+1, 8000h
seg000:8164		    jnz	    short loc_8169
seg000:8166		    call    sub_8548
seg000:8169
seg000:8169 loc_8169:				    ; CODE XREF: addembler?+B0j
seg000:8169					    ; addembler?+B9j
seg000:8169		    mov	    si,	word ptr cs:loc_20C
seg000:816E		    call    sub_85CE
seg000:8171
seg000:8171 loc_8171:				    ; CODE XREF: addembler?+A2j
seg000:8171		    mov	    ax,	di
seg000:8173		    retn
seg000:8173 addembler?	    endp ; sp-analysis failed
seg000:8173
seg000:8174
seg000:8174 ; =============== S	U B R O	U T I N	E =======================================
seg000:8174
seg000:8174
seg000:8174 sub_8174	    proc near		    ; CODE XREF: addembler?+40p
seg000:8174		    mov	    cs:init_ram_table.byte.offset+26h, 0
seg000:817A
seg000:817A loc_817A:
seg000:817A		    mov	    word ptr cs:loc_215+1, 1
seg000:8181		    mov	    word ptr cs:loc_218, 0
seg000:8188		    mov	    ax,	word ptr cs:loc_20F+1
seg000:818C		    and	    ax,	1C0h
seg000:818F		    cmp	    ax,	1C0h
seg000:8192		    jz	    short loc_81AF
seg000:8194		    cmp	    ax,	180h
seg000:8197		    jz	    short loc_81B6
seg000:8199		    cmp	    ax,	80h ; ''
seg000:819C		    jz	    short loc_81BF
seg000:819E		    cmp	    ax,	0C0h ; 'À'
seg000:81A1		    jz	    short loc_81C8
seg000:81A3		    cmp	    ax,	100h
seg000:81A6		    jz	    short loc_81D1
seg000:81A8		    cmp	    ax,	140h
seg000:81AB		    jz	    short loc_81DA
seg000:81AD		    jmp	    short loc_81E1
seg000:81AF ; ---------------------------------------------------------------------------
seg000:81AF
seg000:81AF loc_81AF:				    ; CODE XREF: sub_8174+1Ej
seg000:81AF		    mov	    word ptr cs:loc_215+1, 2
seg000:81B6
seg000:81B6 loc_81B6:				    ; CODE XREF: sub_8174+23j
seg000:81B6		    mov	    word ptr cs:loc_20C, offset	a1 ; "1"
seg000:81BD		    jmp	    short loc_81E1
seg000:81BF ; ---------------------------------------------------------------------------
seg000:81BF
seg000:81BF loc_81BF:				    ; CODE XREF: sub_8174+28j
seg000:81BF		    mov	    word ptr cs:loc_215+1, 2
seg000:81C6		    jmp	    short loc_81E1
seg000:81C8 ; ---------------------------------------------------------------------------
seg000:81C8
seg000:81C8 loc_81C8:				    ; CODE XREF: sub_8174+2Dj
seg000:81C8		    mov	    word ptr cs:loc_215+1, 3
seg000:81CF		    jmp	    short loc_81E1
seg000:81D1 ; ---------------------------------------------------------------------------
seg000:81D1
seg000:81D1 loc_81D1:				    ; CODE XREF: sub_8174+32j
seg000:81D1		    mov	    word ptr cs:loc_215+1, 4
seg000:81D8		    jmp	    short loc_81E1
seg000:81DA ; ---------------------------------------------------------------------------
seg000:81DA
seg000:81DA loc_81DA:				    ; CODE XREF: sub_8174+37j
seg000:81DA		    mov	    word ptr cs:loc_215+1, 5
seg000:81E1
seg000:81E1 loc_81E1:				    ; CODE XREF: sub_8174+39j
seg000:81E1					    ; sub_8174+49j ...
seg000:81E1		    cmp	    word ptr cs:loc_215+1, 2
seg000:81E7		    jb	    short locret_81F8
seg000:81E9		    cmp	    word ptr cs:loc_215+1, 4
seg000:81EF		    jz	    short locret_81F8
seg000:81F1		    mov	    word ptr cs:loc_218, 8
seg000:81F8
seg000:81F8 locret_81F8:			    ; CODE XREF: sub_8174+73j
seg000:81F8					    ; sub_8174+7Bj
seg000:81F8		    retn
seg000:81F8 sub_8174	    endp
seg000:81F8
seg000:81F9
seg000:81F9 ; =============== S	U B R O	U T I N	E =======================================
seg000:81F9
seg000:81F9
seg000:81F9 registers_?	    proc near		    ; CODE XREF: addembler?+43p
seg000:81F9		    test    word ptr cs:loc_20F+1, 2000h
seg000:8200		    jz	    short loc_8227
seg000:8202		    mov	    cs:init_ram_table.byte.offset+26h, 1
seg000:8208		    mov	    si,	word ptr cs:loc_218
seg000:820D		    shl	    si,	1
seg000:820F		    mov	    ax,	cs:registers_table[si]
seg000:8214		    test    word ptr cs:loc_20F+1, 8000h
seg000:821B		    jz	    short loc_8223
seg000:821D		    mov	    word ptr cs:loc_20C+2, ax
seg000:8221		    jmp	    short loc_8227
seg000:8223 ; ---------------------------------------------------------------------------
seg000:8223
seg000:8223 loc_8223:				    ; CODE XREF: registers_?+22j
seg000:8223		    mov	    word ptr cs:loc_20C, ax
seg000:8227
seg000:8227 loc_8227:				    ; CODE XREF: registers_?+7j
seg000:8227					    ; registers_?+28j
seg000:8227		    mov	    si,	word ptr cs:loc_20F+1
seg000:822C		    and	    si,	1Fh
seg000:822F		    jz	    short locret_8266
seg000:8231		    mov	    cs:init_ram_table.byte.offset+26h, 1
seg000:8237		    dec	    si
seg000:8238		    shl	    si,	1
seg000:823A		    mov	    ax,	cs:registers_table[si]
seg000:823F		    mov	    bx,	word ptr cs:loc_20C+2
seg000:8244		    cmp	    byte ptr cs:[bx], 0
seg000:8248		    jnz	    short loc_825C
seg000:824A		    cmp	    word ptr cs:loc_211+1, 0D2h	; 'Ò'
seg000:8251		    jz	    short loc_825C
seg000:8253		    cmp	    word ptr cs:loc_211+1, 0D3h	; 'Ó'
seg000:825A		    jnz	    short loc_8262
seg000:825C
seg000:825C loc_825C:				    ; CODE XREF: registers_?+4Fj
seg000:825C					    ; registers_?+58j
seg000:825C		    mov	    word ptr cs:loc_20C, ax
seg000:8260		    jmp	    short locret_8266
seg000:8262 ; ---------------------------------------------------------------------------
seg000:8262
seg000:8262 loc_8262:				    ; CODE XREF: registers_?+61j
seg000:8262		    mov	    word ptr cs:loc_20C+2, ax
seg000:8266
seg000:8266 locret_8266:			    ; CODE XREF: registers_?+36j
seg000:8266					    ; registers_?+67j
seg000:8266		    retn
seg000:8266 registers_?	    endp
seg000:8266
seg000:8267
seg000:8267 ; =============== S	U B R O	U T I N	E =======================================
seg000:8267
seg000:8267
seg000:8267 assembler_?_0   proc near		    ; CODE XREF: addembler?+46p
seg000:8267		    test    word ptr cs:loc_20F+1, 1800h
seg000:826E		    jz	    short loc_82AE
seg000:8270		    mov	    si,	word ptr cs:loc_207+1
seg000:8275		    inc	    word ptr cs:loc_207+1
seg000:827A		    mov	    al,	es:[si]
seg000:827D		    xor	    ah,	ah
seg000:827F		    mov	    word ptr cs:loc_213+1, ax
seg000:8283		    mov	    cl,	3
seg000:8285		    shr	    ax,	cl
seg000:8287		    and	    ax,	7
seg000:828A		    mov	    bx,	ax
seg000:828C		    add	    ax,	word ptr cs:loc_218
seg000:8291		    mov	    dx,	ax
seg000:8293		    mov	    ax,	word ptr cs:loc_211+1
seg000:8297		    and	    al,	0FEh
seg000:8299		    cmp	    al,	0FEh ; 'þ'
seg000:829B		    jnz	    short loc_82AE
seg000:829D		    cmp	    bx,	3
seg000:82A0		    jz	    short loc_82A7
seg000:82A2		    cmp	    bx,	5
seg000:82A5		    jnz	    short loc_82AE
seg000:82A7
seg000:82A7 loc_82A7:				    ; CODE XREF: assembler_?_0+39j
seg000:82A7		    mov	    word ptr cs:loc_215+1, 3
seg000:82AE
seg000:82AE loc_82AE:				    ; CODE XREF: assembler_?_0+7j
seg000:82AE					    ; assembler_?_0+34j ...
seg000:82AE		    mov	    bx,	word ptr cs:loc_20F+1
seg000:82B3		    and	    bx,	1800h
seg000:82B7		    mov	    cl,	0Ah
seg000:82B9		    shr	    bx,	cl
seg000:82BB		    jmp	    cs:off_82C0[bx]
seg000:82BB ; ---------------------------------------------------------------------------
seg000:82C0 off_82C0	    dw offset loc_82C8	    ; DATA XREF: assembler_?_0+54r
seg000:82C2		    dw offset loc_82CB
seg000:82C4		    dw offset loc_82E6
seg000:82C6		    dw offset loc_8326
seg000:82C8 ; ---------------------------------------------------------------------------
seg000:82C8
seg000:82C8 loc_82C8:				    ; CODE XREF: assembler_?_0+54j
seg000:82C8					    ; DATA XREF: assembler_?_0:off_82C0o
seg000:82C8		    jmp	    locret_8388
seg000:82CB ; ---------------------------------------------------------------------------
seg000:82CB
seg000:82CB loc_82CB:				    ; CODE XREF: assembler_?_0+54j
seg000:82CB					    ; DATA XREF: assembler_?_0+5Bo
seg000:82CB		    call    assembler_?
seg000:82CE		    mov	    si,	word ptr cs:loc_20C+2
seg000:82D3		    cmp	    byte ptr cs:[si], 0
seg000:82D7		    jz	    short loc_82DF
seg000:82D9		    mov	    word ptr cs:loc_20C, ax
seg000:82DD		    jmp	    short loc_82E3
seg000:82DF ; ---------------------------------------------------------------------------
seg000:82DF
seg000:82DF loc_82DF:				    ; CODE XREF: assembler_?_0+70j
seg000:82DF		    mov	    word ptr cs:loc_20C+2, ax
seg000:82E3
seg000:82E3 loc_82E3:				    ; CODE XREF: assembler_?_0+76j
seg000:82E3		    jmp	    locret_8388
seg000:82E6 ; ---------------------------------------------------------------------------
seg000:82E6
seg000:82E6 loc_82E6:				    ; CODE XREF: assembler_?_0+54j
seg000:82E6					    ; DATA XREF: assembler_?_0+5Do
seg000:82E6		    mov	    cs:init_ram_table.byte.offset+26h, 1
seg000:82EC		    test    word ptr cs:loc_20F+1, 20h
seg000:82F3		    jz	    short loc_82FB
seg000:82F5		    and	    dx,	3
seg000:82F8		    add	    dx,	10h
seg000:82FB
seg000:82FB loc_82FB:				    ; CODE XREF: assembler_?_0+8Cj
seg000:82FB		    call    assembler_?
seg000:82FE		    mov	    si,	dx
seg000:8300		    shl	    si,	1
seg000:8302		    mov	    si,	cs:registers_table[si]
seg000:8307		    test    word ptr cs:loc_20F+1, 8000h
seg000:830E		    jz	    short loc_831B
seg000:8310		    mov	    word ptr cs:loc_20C, ax
seg000:8314		    mov	    word ptr cs:loc_20C+2, si
seg000:8319		    jmp	    short loc_8324
seg000:831B ; ---------------------------------------------------------------------------
seg000:831B
seg000:831B loc_831B:				    ; CODE XREF: assembler_?_0+A7j
seg000:831B		    mov	    word ptr cs:loc_20C, si
seg000:8320		    mov	    word ptr cs:loc_20C+2, ax
seg000:8324
seg000:8324 loc_8324:				    ; CODE XREF: assembler_?_0+B2j
seg000:8324		    jmp	    short locret_8388
seg000:8326 ; ---------------------------------------------------------------------------
seg000:8326
seg000:8326 loc_8326:				    ; CODE XREF: assembler_?_0+54j
seg000:8326					    ; DATA XREF: assembler_?_0+5Fo
seg000:8326		    mov	    ax,	word ptr cs:loc_211+1
seg000:832A		    and	    ax,	0F8h
seg000:832D		    cmp	    ax,	0D8h ; 'Ø'
seg000:8330		    jnz	    short loc_833B
seg000:8332		    call    assembler_?
seg000:8335		    mov	    word ptr cs:loc_20C, ax
seg000:8339		    jmp	    short locret_8388
seg000:833B ; ---------------------------------------------------------------------------
seg000:833B
seg000:833B loc_833B:				    ; CODE XREF: assembler_?_0+C9j
seg000:833B		    mov	    si,	dx
seg000:833D		    and	    si,	7
seg000:8340		    mov	    cl,	3
seg000:8342		    mov	    ax,	word ptr cs:loc_20A
seg000:8346		    shl	    ax,	cl
seg000:8348		    add	    si,	ax
seg000:834A		    shl	    si,	1
seg000:834C		    mov	    si,	cs:ass_string_table[si]
seg000:8351		    mov	    word ptr cs:loc_20A, si
seg000:8356		    call    assembler_?
seg000:8359		    mov	    si,	word ptr cs:loc_20C+2
seg000:835E		    cmp	    byte ptr cs:[si], 0
seg000:8362		    jz	    short loc_836A
seg000:8364		    mov	    word ptr cs:loc_20C, ax
seg000:8368		    jmp	    short loc_836E
seg000:836A ; ---------------------------------------------------------------------------
seg000:836A
seg000:836A loc_836A:				    ; CODE XREF: assembler_?_0+FBj
seg000:836A		    mov	    word ptr cs:loc_20C+2, ax
seg000:836E
seg000:836E loc_836E:				    ; CODE XREF: assembler_?_0+101j
seg000:836E		    mov	    ax,	word ptr cs:loc_211+1
seg000:8372		    and	    ax,	0FEh
seg000:8375		    cmp	    ax,	0F6h ; 'ö'
seg000:8378		    jnz	    short locret_8388
seg000:837A		    mov	    ax,	dx
seg000:837C		    and	    ax,	7
seg000:837F		    jnz	    short locret_8388
seg000:8381		    or	    word ptr cs:loc_20F+1, 400h
seg000:8388
seg000:8388 locret_8388:			    ; CODE XREF: assembler_?_0:loc_82C8j
seg000:8388					    ; assembler_?_0:loc_82E3j ...
seg000:8388		    retn
seg000:8388 assembler_?_0   endp
seg000:8388
seg000:8389
seg000:8389 ; =============== S	U B R O	U T I N	E =======================================
seg000:8389
seg000:8389
seg000:8389 assembler_?	    proc near		    ; CODE XREF: assembler_?_0:loc_82CBp
seg000:8389					    ; assembler_?_0:loc_82FBp ...
seg000:8389		    push    dx
seg000:838A		    mov	    di,	380h
seg000:838D		    mov	    dl,	1
seg000:838F		    mov	    dh,	1
seg000:8391		    xor	    ch,	ch
seg000:8393		    mov	    cs:init_ram_table.byte.data+0Ch, 0
seg000:8399		    mov	    bx,	word ptr cs:loc_213+1
seg000:839E		    and	    bx,	0C0h
seg000:83A2		    mov	    cl,	5
seg000:83A4		    shr	    bx,	cl
seg000:83A6		    jmp	    cs:off_83AB[bx]
seg000:83A6 ; ---------------------------------------------------------------------------
seg000:83AB off_83AB	    dw offset loc_83B3	    ; DATA XREF: assembler_?+1Dr
seg000:83AD		    dw offset loc_83CC
seg000:83AF		    dw offset loc_83D5
seg000:83B1		    dw offset loc_83DC
seg000:83B3 ; ---------------------------------------------------------------------------
seg000:83B3
seg000:83B3 loc_83B3:				    ; CODE XREF: assembler_?+1Dj
seg000:83B3					    ; DATA XREF: assembler_?:off_83ABo
seg000:83B3		    mov	    ax,	word ptr cs:loc_213+1
seg000:83B7		    and	    ax,	7
seg000:83BA		    cmp	    ax,	6
seg000:83BD		    jnz	    short loc_83C8
seg000:83BF		    call    sub_857D
seg000:83C2		    mov	    bx,	ax
seg000:83C4		    xor	    dl,	dl
seg000:83C6		    jmp	    short loc_83F8
seg000:83C8 ; ---------------------------------------------------------------------------
seg000:83C8
seg000:83C8 loc_83C8:				    ; CODE XREF: assembler_?+34j
seg000:83C8		    xor	    dh,	dh
seg000:83CA		    jmp	    short loc_83F8
seg000:83CC ; ---------------------------------------------------------------------------
seg000:83CC
seg000:83CC loc_83CC:				    ; CODE XREF: assembler_?+1Dj
seg000:83CC					    ; DATA XREF: assembler_?+24o
seg000:83CC		    mov	    ch,	1
seg000:83CE		    call    sub_855B
seg000:83D1		    mov	    bx,	ax
seg000:83D3		    jmp	    short loc_83F8
seg000:83D5 ; ---------------------------------------------------------------------------
seg000:83D5
seg000:83D5 loc_83D5:				    ; CODE XREF: assembler_?+1Dj
seg000:83D5					    ; DATA XREF: assembler_?+26o
seg000:83D5		    call    sub_857D
seg000:83D8		    mov	    bx,	ax
seg000:83DA		    jmp	    short loc_83F8
seg000:83DC ; ---------------------------------------------------------------------------
seg000:83DC
seg000:83DC loc_83DC:				    ; CODE XREF: assembler_?+1Dj
seg000:83DC					    ; DATA XREF: assembler_?+28o
seg000:83DC		    mov	    cs:init_ram_table.byte.offset+26h, 1
seg000:83E2		    mov	    si,	word ptr cs:loc_213+1
seg000:83E7		    and	    si,	7
seg000:83EA		    add	    si,	word ptr cs:loc_218
seg000:83EF		    shl	    si,	1
seg000:83F1		    mov	    ax,	cs:registers_table[si]
seg000:83F6		    jmp	    short loc_844A
seg000:83F8 ; ---------------------------------------------------------------------------
seg000:83F8
seg000:83F8 loc_83F8:				    ; CODE XREF: assembler_?+3Dj
seg000:83F8					    ; assembler_?+41j ...
seg000:83F8		    test    dl,	dl
seg000:83FA		    jz	    short loc_840D
seg000:83FC		    mov	    si,	word ptr cs:loc_213+1
seg000:8401		    and	    si,	7
seg000:8404		    shl	    si,	1
seg000:8406		    mov	    si,	cs:off_F7B1[si]
seg000:840B		    jmp	    short loc_8410
seg000:840D ; ---------------------------------------------------------------------------
seg000:840D
seg000:840D loc_840D:				    ; CODE XREF: assembler_?+71j
seg000:840D		    mov	    si,	offset left_bracket ; "["
seg000:8410
seg000:8410 loc_8410:				    ; CODE XREF: assembler_?+82j
seg000:8410		    call    sub_85CE
seg000:8413		    test    dh,	dh
seg000:8415		    jz	    short loc_8442
seg000:8417		    test    ch,	ch
seg000:8419		    jz	    short loc_8433
seg000:841B		    test    bx,	bx
seg000:841D		    jge	    short loc_8426
seg000:841F		    mov	    si,	offset minus ; "-"
seg000:8422		    neg	    bx
seg000:8424		    jmp	    short loc_8429
seg000:8426 ; ---------------------------------------------------------------------------
seg000:8426
seg000:8426 loc_8426:				    ; CODE XREF: assembler_?+94j
seg000:8426		    mov	    si,	offset plus ; "+"
seg000:8429
seg000:8429 loc_8429:				    ; CODE XREF: assembler_?+9Bj
seg000:8429		    call    sub_85CE
seg000:842C		    mov	    ax,	bx
seg000:842E		    call    hex_2_ascii
seg000:8431		    jmp	    short loc_8442
seg000:8433 ; ---------------------------------------------------------------------------
seg000:8433
seg000:8433 loc_8433:				    ; CODE XREF: assembler_?+90j
seg000:8433		    test    dl,	dl
seg000:8435		    jz	    short loc_843D
seg000:8437		    mov	    si,	offset plus ; "+"
seg000:843A		    call    sub_85CE
seg000:843D
seg000:843D loc_843D:				    ; CODE XREF: assembler_?+ACj
seg000:843D		    mov	    ax,	bx
seg000:843F		    call    hex_2_ascii_x2
seg000:8442
seg000:8442 loc_8442:				    ; CODE XREF: assembler_?+8Cj
seg000:8442					    ; assembler_?+A8j
seg000:8442		    mov	    si,	offset right_bracket ; "]"
seg000:8445		    call    sub_85CE
seg000:8448		    mov	    ax,	di
seg000:844A
seg000:844A loc_844A:				    ; CODE XREF: assembler_?+6Dj
seg000:844A		    pop	    dx
seg000:844B		    retn
seg000:844B assembler_?	    endp ; sp-analysis failed
seg000:844B
seg000:844C
seg000:844C ; =============== S	U B R O	U T I N	E =======================================
seg000:844C
seg000:844C
seg000:844C hex_math	    proc far		    ; CODE XREF: addembler?+49p
seg000:844C		    mov	    di,	38Fh
seg000:844F		    mov	    ax,	2
seg000:8452		    test    word ptr cs:loc_20F+1, 200h
seg000:8459		    jnz	    short loc_845F
seg000:845B		    mov	    ax,	word ptr cs:loc_215+1
seg000:845F
seg000:845F loc_845F:				    ; CODE XREF: hex_math+Dj
seg000:845F		    mov	    dx,	ax
seg000:8461		    mov	    cs:init_ram_table.byte.offset+1Ch, 0
seg000:8467		    mov	    ax,	word ptr cs:loc_211+1
seg000:846B		    and	    ax,	0F8h
seg000:846E		    cmp	    ax,	0D8h ; 'Ø'
seg000:8471		    jnz	    short loc_8498
seg000:8473		    mov	    ax,	word ptr cs:loc_211+1
seg000:8477		    and	    ax,	7
seg000:847A		    mov	    cl,	3
seg000:847C		    shl	    ax,	cl
seg000:847E		    mov	    bx,	word ptr cs:loc_213+1
seg000:8483		    and	    bx,	38h
seg000:8486		    shr	    bx,	cl
seg000:8488		    add	    ax,	bx
seg000:848A		    call    hex_2_ascii
seg000:848D		    mov	    si,	offset H_string	; "H"
seg000:8490		    call    sub_85CE
seg000:8493		    mov	    word ptr cs:loc_20C+2, di
seg000:8498
seg000:8498 loc_8498:				    ; CODE XREF: hex_math+25j
seg000:8498		    test    word ptr cs:loc_20F+1, 600h
seg000:849F		    jnz	    short loc_84A4
seg000:84A1		    jmp	    locret_8547
seg000:84A4 ; ---------------------------------------------------------------------------
seg000:84A4
seg000:84A4 loc_84A4:				    ; CODE XREF: hex_math+53j
seg000:84A4		    mov	    si,	dx
seg000:84A6		    cmp	    si,	5
seg000:84A9		    jg	    short loc_84B2
seg000:84AB		    shl	    si,	1
seg000:84AD		    jmp	    cs:off_84B5[si]
seg000:84B2 ; ---------------------------------------------------------------------------
seg000:84B2
seg000:84B2 loc_84B2:				    ; CODE XREF: hex_math+5Dj
seg000:84B2		    jmp	    short loc_8530
seg000:84B4 ; ---------------------------------------------------------------------------
seg000:84B4		    nop
seg000:84B4 ; ---------------------------------------------------------------------------
seg000:84B5 off_84B5	    dw offset loc_8530	    ; DATA XREF: hex_math+61r
seg000:84B7		    dw offset loc_84C1
seg000:84B9		    dw offset loc_84CA
seg000:84BB		    dw offset loc_84F0
seg000:84BD		    dw offset loc_8530
seg000:84BF		    dw offset loc_8508
seg000:84C1 ; ---------------------------------------------------------------------------
seg000:84C1
seg000:84C1 loc_84C1:				    ; CODE XREF: hex_math+61j
seg000:84C1					    ; DATA XREF: hex_math+6Bo
seg000:84C1		    call    sub_855B
seg000:84C4		    call    hex_2_ascii
seg000:84C7		    jmp	    short loc_8530
seg000:84C9 ; ---------------------------------------------------------------------------
seg000:84C9		    nop
seg000:84CA
seg000:84CA loc_84CA:				    ; CODE XREF: hex_math+61j
seg000:84CA					    ; DATA XREF: hex_math+6Do
seg000:84CA		    test    word ptr cs:loc_20F+1, 200h
seg000:84D1		    jz	    short loc_84D9
seg000:84D3		    mov	    si,	offset left_bracket ; "["
seg000:84D6		    call    sub_85CE
seg000:84D9
seg000:84D9 loc_84D9:				    ; CODE XREF: hex_math+85j
seg000:84D9		    call    sub_857D
seg000:84DC		    call    hex_2_ascii_x2
seg000:84DF		    test    word ptr cs:loc_20F+1, 200h
seg000:84E6		    jz	    short loc_84EE
seg000:84E8		    mov	    si,	offset right_bracket ; "]"
seg000:84EB		    call    sub_85CE
seg000:84EE
seg000:84EE loc_84EE:				    ; CODE XREF: hex_math+9Aj
seg000:84EE		    jmp	    short loc_8530
seg000:84F0 ; ---------------------------------------------------------------------------
seg000:84F0
seg000:84F0 loc_84F0:				    ; CODE XREF: hex_math+61j
seg000:84F0					    ; DATA XREF: hex_math+6Fo
seg000:84F0		    call    sub_857D
seg000:84F3		    mov	    bx,	ax
seg000:84F5		    call    sub_857D
seg000:84F8		    call    hex_2_ascii_x2
seg000:84FB		    mov	    si,	offset colon_string ; ":"
seg000:84FE		    call    sub_85CE
seg000:8501		    mov	    ax,	bx
seg000:8503		    call    hex_2_ascii_x2
seg000:8506		    jmp	    short loc_8530
seg000:8508 ; ---------------------------------------------------------------------------
seg000:8508
seg000:8508 loc_8508:				    ; CODE XREF: hex_math+61j
seg000:8508					    ; DATA XREF: hex_math+73o
seg000:8508		    test    word ptr cs:loc_20F+1, 4000h
seg000:850F		    jz	    short loc_8519
seg000:8511		    call    sub_855B
seg000:8514		    call    hex_2_ascii_x2
seg000:8517		    jmp	    short loc_8530
seg000:8519 ; ---------------------------------------------------------------------------
seg000:8519
seg000:8519 loc_8519:				    ; CODE XREF: hex_math+C3j
seg000:8519		    call    sub_855B
seg000:851C		    test    ax,	ax
seg000:851E		    mov	    si,	offset plus ; "+"
seg000:8521		    jge	    short loc_8528
seg000:8523		    mov	    si,	offset minus ; "-"
seg000:8526		    neg	    ax
seg000:8528
seg000:8528 loc_8528:				    ; CODE XREF: hex_math+D5j
seg000:8528		    push    ax
seg000:8529		    call    sub_85CE
seg000:852C		    pop	    ax
seg000:852D		    call    hex_2_ascii
seg000:8530
seg000:8530 loc_8530:				    ; CODE XREF: hex_math+61j
seg000:8530					    ; hex_math:loc_84B2j ...
seg000:8530		    mov	    si,	word ptr cs:loc_20C+2
seg000:8535		    cmp	    byte ptr cs:[si], 0
seg000:8539		    jz	    short loc_8542
seg000:853B		    mov	    word ptr cs:loc_20C, di
seg000:8540		    jmp	    short locret_8547
seg000:8542 ; ---------------------------------------------------------------------------
seg000:8542
seg000:8542 loc_8542:				    ; CODE XREF: hex_math+EDj
seg000:8542		    mov	    word ptr cs:loc_20C+2, di
seg000:8547
seg000:8547 locret_8547:			    ; CODE XREF: hex_math+55j
seg000:8547					    ; hex_math+F4j
seg000:8547		    retn
seg000:8547 hex_math	    endp
seg000:8547
seg000:8548
seg000:8548 ; =============== S	U B R O	U T I N	E =======================================
seg000:8548
seg000:8548
seg000:8548 sub_8548	    proc near		    ; CODE XREF: addembler?+8Ep
seg000:8548					    ; addembler?+BBp
seg000:8548		    mov	    si,	word ptr cs:loc_215+1
seg000:854D		    shl	    si,	1
seg000:854F		    mov	    si,	cs:Ptr_size_string[si]
seg000:8554		    mov	    di,	360h
seg000:8557		    call    sub_85CE
seg000:855A		    retn
seg000:855A sub_8548	    endp
seg000:855A
seg000:855B
seg000:855B ; =============== S	U B R O	U T I N	E =======================================
seg000:855B
seg000:855B
seg000:855B sub_855B	    proc near		    ; CODE XREF: assembler_?+45p
seg000:855B					    ; hex_math:loc_84C1p ...
seg000:855B		    mov	    si,	word ptr cs:loc_207+1
seg000:8560		    mov	    es,	word ptr cs:loc_205+1
seg000:8565		    mov	    al,	es:[si]
seg000:8568		    inc	    word ptr cs:loc_207+1
seg000:856D		    cbw
seg000:856E		    test    word ptr cs:loc_20F+1, 4000h
seg000:8575		    jz	    short locret_857C
seg000:8577		    add	    ax,	word ptr cs:loc_207+1
seg000:857C
seg000:857C locret_857C:			    ; CODE XREF: sub_855B+1Aj
seg000:857C		    retn
seg000:857C sub_855B	    endp
seg000:857C
seg000:857D
seg000:857D ; =============== S	U B R O	U T I N	E =======================================
seg000:857D
seg000:857D
seg000:857D sub_857D	    proc near		    ; CODE XREF: assembler_?+36p
seg000:857D					    ; assembler_?:loc_83D5p ...
seg000:857D		    mov	    si,	word ptr cs:loc_207+1
seg000:8582		    mov	    es,	word ptr cs:loc_205+1
seg000:8587		    lods    word ptr es:[si]
seg000:8589		    mov	    word ptr cs:loc_207+1, si
seg000:858E		    test    word ptr cs:loc_20F+1, 4000h
seg000:8595		    jz	    short locret_859C
seg000:8597		    add	    ax,	word ptr cs:loc_207+1
seg000:859C
seg000:859C locret_859C:			    ; CODE XREF: sub_857D+18j
seg000:859C		    retn
seg000:859C sub_857D	    endp
seg000:859C
seg000:859D
seg000:859D ; =============== S	U B R O	U T I N	E =======================================
seg000:859D
seg000:859D
seg000:859D hex_2_ascii_x2  proc near		    ; CODE XREF: assembler_?+B6p
seg000:859D					    ; hex_math+90p ...
seg000:859D		    push    ax
seg000:859E		    mov	    al,	ah
seg000:85A0		    call    hex_2_ascii
seg000:85A3		    pop	    ax
seg000:85A4		    call    hex_2_ascii
seg000:85A7		    retn
seg000:85A7 hex_2_ascii_x2  endp
seg000:85A7
seg000:85A8
seg000:85A8 ; =============== S	U B R O	U T I N	E =======================================
seg000:85A8
seg000:85A8
seg000:85A8 hex_2_ascii	    proc near		    ; CODE XREF: assembler_?+A5p
seg000:85A8					    ; hex_math+3Ep ...
seg000:85A8		    push    si
seg000:85A9		    push    di
seg000:85AA		    call    find_string_end
seg000:85AD		    xor	    ah,	ah
seg000:85AF		    mov	    si,	ax
seg000:85B1		    mov	    cl,	4
seg000:85B3		    shr	    si,	cl
seg000:85B5		    mov	    cl,	byte ptr cs:number_letter[si] ;	"0123456789ABCDEF"
seg000:85BA		    mov	    cs:[di], cl
seg000:85BD		    inc	    di
seg000:85BE		    and	    ax,	0Fh
seg000:85C1		    mov	    si,	ax
seg000:85C3		    mov	    al,	byte ptr cs:number_letter[si] ;	"0123456789ABCDEF"
seg000:85C8		    mov	    cs:[di], ax
seg000:85CB		    pop	    di
seg000:85CC		    pop	    si
seg000:85CD		    retn
seg000:85CD hex_2_ascii	    endp
seg000:85CD
seg000:85CE
seg000:85CE ; =============== S	U B R O	U T I N	E =======================================
seg000:85CE
seg000:85CE
seg000:85CE sub_85CE	    proc near		    ; CODE XREF: addembler?+96p
seg000:85CE					    ; addembler?+A7p ...
seg000:85CE		    push    di
seg000:85CF		    call    find_string_end
seg000:85D2
seg000:85D2 loc_85D2:				    ; CODE XREF: sub_85CE+Cj
seg000:85D2		    lods    byte ptr cs:[si]
seg000:85D4		    mov	    cs:[di], al
seg000:85D7		    inc	    di
seg000:85D8		    test    al,	al
seg000:85DA		    jnz	    short loc_85D2
seg000:85DC		    pop	    di
seg000:85DD		    retn
seg000:85DD sub_85CE	    endp
seg000:85DD
seg000:85DE
seg000:85DE ; =============== S	U B R O	U T I N	E =======================================
seg000:85DE
seg000:85DE
seg000:85DE find_string_end proc near		    ; CODE XREF: hex_2_ascii+2p
seg000:85DE					    ; sub_85CE+1p ...
seg000:85DE		    cmp	    byte ptr cs:[di], 0
seg000:85E2		    jz	    short locret_85E7
seg000:85E4		    inc	    di
seg000:85E5		    jmp	    short find_string_end
seg000:85E7 ; ---------------------------------------------------------------------------
seg000:85E7
seg000:85E7 locret_85E7:			    ; CODE XREF: find_string_end+4j
seg000:85E7		    retn
seg000:85E7 find_string_end endp
seg000:85E7
seg000:85E8
seg000:85E8 ; =============== S	U B R O	U T I N	E =======================================
seg000:85E8
seg000:85E8
seg000:85E8 tests_menu	    proc near		    ; CODE XREF: cmd_trace+33p
seg000:85E8		    push    ax
seg000:85E9		    push    bx
seg000:85EA		    push    cx
seg000:85EB		    push    dx
seg000:85EC		    push    si
seg000:85ED		    push    bp
seg000:85EE		    push    es
seg000:85EF		    mov	    ah,	0E6h ; 'æ'
seg000:85F1		    int	    15h
seg000:85F3		    push    ax
seg000:85F4		    pushf
seg000:85F5		    mov	    ax,	0E500h
seg000:85F8		    int	    15h
seg000:85FA		    mov	    al,	1
seg000:85FC		    out	    88h, al
seg000:85FE		    mov	    cl,	byte ptr ds:loc_48+1
seg000:8602		    mov	    ch,	byte ptr cs:loc_4
seg000:8607		    call    set_80x25
seg000:860A		    mov	    ax,	6400h	    ; Backlight	level????
seg000:860D		    int	    10h		    ; -	VIDEO -
seg000:860F		    mov	    bx,	0B800h	    ; Color text
seg000:8612		    mov	    al,	byte ptr ds:loc_E+2
seg000:8615		    and	    al,	30h
seg000:8617		    cmp	    al,	30h ; '0'
seg000:8619		    jnz	    short loc_861E
seg000:861B		    mov	    bx,	0B000h	    ; Monochrome text
seg000:861E
seg000:861E loc_861E:				    ; CODE XREF: tests_menu+31j
seg000:861E		    mov	    es,	bx
seg000:8620		    assume es:nothing
seg000:8620
seg000:8620 loc_8620:				    ; CODE XREF: tests_menu+7Aj
seg000:8620		    sti
seg000:8621		    call    erase_screen
seg000:8624		    mov	    dx,	0
seg000:8627		    mov	    bp,	dx
seg000:8629		    mov	    si,	offset aChooseOneOfTheFo ; "\r\n\n\n\n\n\n\t\t\tCHOOSE ONE OF THE FOLLOWING:\r"...
seg000:862C		    call    Print_extended
seg000:862F
seg000:862F loc_862F:				    ; CODE XREF: tests_menu+51j
seg000:862F					    ; tests_menu+5Aj
seg000:862F		    call    keyb_menu
seg000:8632		    cmp	    al,	31h ; '1'
seg000:8634		    jnb	    short over_1
seg000:8636		    call    Beep_long
seg000:8639		    jmp	    short loc_862F
seg000:863B ; ---------------------------------------------------------------------------
seg000:863B
seg000:863B over_1:				    ; CODE XREF: tests_menu+4Cj
seg000:863B		    cmp	    al,	37h ; '7'
seg000:863D		    jb	    short under_7
seg000:863F		    call    Beep_long
seg000:8642		    jmp	    short loc_862F
seg000:8644 ; ---------------------------------------------------------------------------
seg000:8644
seg000:8644 under_7:				    ; CODE XREF: tests_menu+55j
seg000:8644		    call    print_CL_LF_TAB
seg000:8647		    cmp	    al,	36h ; '6'
seg000:8649		    jz	    short menu_exit
seg000:864B		    cmp	    al,	33h ; '3'
seg000:864D		    jb	    short under_3
seg000:864F		    mov	    word ptr ds:loc_70+2, 0
seg000:8655
seg000:8655 under_3:				    ; CODE XREF: tests_menu+65j
seg000:8655		    sub	    al,	31h ; '1'
seg000:8657		    mov	    bh,	0
seg000:8659		    mov	    bl,	al
seg000:865B		    shl	    bx,	1
seg000:865D		    call    cs:tests_vectors[bx]
seg000:8662		    jmp	    short loc_8620
seg000:8664 ; ---------------------------------------------------------------------------
seg000:8664
seg000:8664 menu_exit:				    ; CODE XREF: tests_menu+61j
seg000:8664		    mov	    al,	cl
seg000:8666		    mov	    ah,	0
seg000:8668		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:8668					    ; AL = mode
seg000:866A		    mov	    al,	ch
seg000:866C		    mov	    ah,	64h ; 'd'
seg000:866E		    int	    10h		    ; -	VIDEO -
seg000:8670		    popf
seg000:8671		    pop	    ax
seg000:8672		    jb	    short loc_8678
seg000:8674		    mov	    ah,	0E5h ; 'å'
seg000:8676		    int	    15h
seg000:8678
seg000:8678 loc_8678:				    ; CODE XREF: tests_menu+8Aj
seg000:8678		    pop	    es
seg000:8679		    assume es:nothing
seg000:8679		    pop	    bp
seg000:867A		    pop	    si
seg000:867B		    pop	    dx
seg000:867C		    pop	    cx
seg000:867D		    pop	    bx
seg000:867E		    pop	    ax
seg000:867F		    retn
seg000:867F tests_menu	    endp
seg000:867F
seg000:8680
seg000:8680 ; =============== S	U B R O	U T I N	E =======================================
seg000:8680
seg000:8680
seg000:8680 test_keyb	    proc near		    ; DATA XREF: seg000:tests_vectorso
seg000:8680		    push    ax
seg000:8681		    push    bx
seg000:8682		    push    cx
seg000:8683		    push    dx
seg000:8684		    push    si
seg000:8685		    call    erase_screen
seg000:8688		    mov	    si,	cs:keyb_test_text
seg000:868D		    call    Print_extended
seg000:8690		    call    request_ESC
seg000:8693		    mov	    bx,	730h
seg000:8696
seg000:8696 loc_8696:				    ; CODE XREF: test_keyb+54j
seg000:8696		    mov	    cx,	bx
seg000:8698		    mov	    ax,	di
seg000:869A		    call    keyb_get_wait_0
seg000:869D		    cmp	    ax,	0
seg000:86A0		    jz	    short loc_86D6
seg000:86A2		    cmp	    ax,	11Bh
seg000:86A5		    jz	    short loc_86D6
seg000:86A7		    mov	    dx,	0
seg000:86AA		    mov	    si,	cs:keyb_test_text
seg000:86AF		    call    Print_extended
seg000:86B2		    mov	    si,	offset aCharacterCode ;	"\t\t\t\t\t\t  CHARACTER CODE =	"
seg000:86B5		    call    Print_extended
seg000:86B8		    push    ax
seg000:86B9		    call    sub_20E3
seg000:86BC		    mov	    al,	48h ; 'H'
seg000:86BE		    call    PutChar_cursor
seg000:86C1		    pop	    ax
seg000:86C2		    cmp	    al,	0E0h ; 'à'
seg000:86C4		    jnz	    short loc_86C8
seg000:86C6		    mov	    al,	0
seg000:86C8
seg000:86C8 loc_86C8:				    ; CODE XREF: test_keyb+44j
seg000:86C8		    mov	    dh,	1
seg000:86CA		    mov	    dl,	0
seg000:86CC
seg000:86CC loc_86CC:				    ; CODE XREF: test_keyb+4Fj
seg000:86CC		    call    PutChar_cursor
seg000:86CF		    loop    loc_86CC
seg000:86D1		    call    request_ESC
seg000:86D4		    jmp	    short loc_8696
seg000:86D6 ; ---------------------------------------------------------------------------
seg000:86D6
seg000:86D6 loc_86D6:				    ; CODE XREF: test_keyb+20j
seg000:86D6					    ; test_keyb+25j
seg000:86D6		    pop	    si
seg000:86D7		    pop	    dx
seg000:86D8		    pop	    cx
seg000:86D9		    pop	    bx
seg000:86DA		    pop	    ax
seg000:86DA test_keyb	    endp ; sp-analysis failed
seg000:86DA
seg000:86DB
seg000:86DB ; =============== S	U B R O	U T I N	E =======================================
seg000:86DB
seg000:86DB
seg000:86DB request_ESC	    proc near		    ; CODE XREF: test_keyb+10p
seg000:86DB					    ; test_keyb+51p ...
seg000:86DB		    push    dx
seg000:86DC		    push    si
seg000:86DD		    mov	    dl,	0
seg000:86DF		    mov	    dh,	18h
seg000:86E1		    mov	    si,	offset aTypeEscToExit ;	"TYPE  <ESC>  TO EXIT"
seg000:86E4		    call    Print_extended
seg000:86E7		    pop	    si
seg000:86E8		    pop	    dx
seg000:86E9		    retn
seg000:86E9 request_ESC	    endp
seg000:86E9
seg000:86EA
seg000:86EA ; =============== S	U B R O	U T I N	E =======================================
seg000:86EA
seg000:86EA
seg000:86EA test_printBX    proc near		    ; CODE XREF: test_ram_base+10p
seg000:86EA					    ; sub_885C+62p ...
seg000:86EA		    push    bx
seg000:86EB		    push    dx
seg000:86EC		    push    si
seg000:86ED		    mov	    dx,	0
seg000:86F0		    shl	    bx,	1
seg000:86F2		    mov	    si,	cs:DiskTest_point[bx] ;	8DA2 DiskTest_point  dw	offset aDiskReadTest ; "DISK READ TEST"
seg000:86F7		    call    Print_extended
seg000:86FA		    mov	    dl,	0
seg000:86FC		    mov	    dh,	18h
seg000:86FE		    mov	    si,	offset aTypeEscToAbort ; "TYPE <ESC>  TO ABORT"
seg000:8701		    call    Print_extended
seg000:8704		    mov	    dl,	20h ; ' '
seg000:8706		    mov	    dh,	0Ah
seg000:8708		    mov	    si,	offset aTestCount ; "TEST COUNT	= "
seg000:870B		    call    Print_extended
seg000:870E		    pop	    si
seg000:870F		    pop	    dx
seg000:8710		    pop	    bx
seg000:8711		    retn
seg000:8711 test_printBX    endp
seg000:8711
seg000:8712
seg000:8712 ; =============== S	U B R O	U T I N	E =======================================
seg000:8712
seg000:8712
seg000:8712 sub_8712	    proc near		    ; CODE XREF: test_ram_base:loc_8740p
seg000:8712					    ; sub_885C+67p ...
seg000:8712		    push    ax
seg000:8713		    push    cx
seg000:8714		    push    dx
seg000:8715		    mov	    dl,	2Dh ; '-'
seg000:8717		    mov	    dh,	0Ah
seg000:8719		    inc	    bp
seg000:871A		    mov	    ax,	bp
seg000:871C		    call    print_hex?
seg000:871F		    mov	    cx,	5
seg000:8722		    mov	    al,	20h ; ' '
seg000:8724
seg000:8724 loc_8724:				    ; CODE XREF: sub_8712+15j
seg000:8724		    call    PutChar_cursor
seg000:8727		    loop    loc_8724
seg000:8729		    pop	    dx
seg000:872A		    pop	    cx
seg000:872B		    pop	    ax
seg000:872C		    retn
seg000:872C sub_8712	    endp
seg000:872C
seg000:872D
seg000:872D ; =============== S	U B R O	U T I N	E =======================================
seg000:872D
seg000:872D
seg000:872D test_ram_base   proc near		    ; DATA XREF: seg000:tests_vectorso
seg000:872D		    push    ax
seg000:872E		    push    bx
seg000:872F		    cli
seg000:8730		    mov	    al,	80h ; ''
seg000:8732		    out	    70h, al	    ; CMOS Memory:
seg000:8732					    ;
seg000:8734		    mov	    bp,	0
seg000:8737		    call    erase_screen
seg000:873A		    mov	    bx,	2
seg000:873D		    call    test_printBX
seg000:8740
seg000:8740 loc_8740:				    ; CODE XREF: test_ram_base+21j
seg000:8740		    call    sub_8712
seg000:8743		    call    near ptr test_parity
seg000:8746		    call    near ptr sub_877A
seg000:8749		    jb	    short loc_8750
seg000:874B		    call    near ptr sub_885C
seg000:874E		    jnb	    short loc_8740
seg000:8750
seg000:8750 loc_8750:				    ; CODE XREF: test_ram_base+1Cj
seg000:8750		    call    request_ESC
seg000:8753		    call    keyb_wait_press?
seg000:8756		    push    ds
seg000:8757		    push    es
seg000:8758		    pusha
seg000:8759		    call    VGA_bios_init
seg000:875C		    mov	    bx,	0C800h
seg000:875F		    mov	    cx,	30h ; '0'
seg000:8762		    mov	    ah,	0
seg000:8764		    call    Exec_Option_roms
seg000:8767		    call    ide_detect_init?
seg000:876A		    popa
seg000:876B		    pop	    es
seg000:876C		    pop	    ds
seg000:876D		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:876F		    and	    al,	0FEh
seg000:8771		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:8773		    mov	    al,	7Fh ; ''
seg000:8775		    out	    70h, al	    ; CMOS Memory:
seg000:8775					    ;
seg000:8777		    pop	    bx
seg000:8778		    pop	    ax
seg000:8779		    retn
seg000:8779 test_ram_base   endp ; sp-analysis failed
seg000:8779
seg000:877A
seg000:877A ; =============== S	U B R O	U T I N	E =======================================
seg000:877A
seg000:877A
seg000:877A sub_877A	    proc far		    ; CODE XREF: test_ram_base+19p
seg000:877A		    push    ax
seg000:877B		    push    bx
seg000:877C		    push    cx
seg000:877D		    push    dx
seg000:877E		    push    si
seg000:877F		    push    di
seg000:8780		    push    es
seg000:8781		    cld
seg000:8782		    mov	    dx,	es
seg000:8784		    mov	    bx,	word ptr ds:loc_11+2 ; Bios_settings_len
seg000:8788		    sub	    bx,	40h ; '@'
seg000:878B		    mov	    cl,	6
seg000:878D		    shl	    bx,	cl
seg000:878F		    cli
seg000:8790		    mov	    ax,	offset word_F060
seg000:8793		    mov	    es,	ax
seg000:8795		    assume es:nothing
seg000:8795		    mov	    di,	0
seg000:8798		    mov	    si,	40h ; '@'
seg000:879B		    mov	    ds,	si
seg000:879D		    assume ds:nothing
seg000:879D		    mov	    si,	0
seg000:87A0		    mov	    cx,	0C0h ; 'À'
seg000:87A3		    rep	movsb
seg000:87A5		    mov	    word ptr cs:loc_C5+1, offset word_F060
seg000:87AC		    mov	    word ptr cs:sub_0+1, offset	word_F060
seg000:87B3		    mov	    word ptr cs:loc_48+1, offset word_F060
seg000:87BA		    mov	    si,	0
seg000:87BD		    mov	    es,	dx
seg000:87BF		    assume es:nothing
seg000:87BF
seg000:87BF loc_87BF:				    ; CODE XREF: sub_877A+6Dj
seg000:87BF					    ; sub_877A+71j
seg000:87BF		    push    es
seg000:87C0		    call    ram_bank_print
seg000:87C3		    mov	    es,	si
seg000:87C5		    mov	    cx,	0FFFFh
seg000:87C8		    mov	    dx,	(offset	off_FEFF+1)
seg000:87CB		    mov	    ah,	10h
seg000:87CD		    call    sub_8A58
seg000:87D0		    jb	    short loc_87ED
seg000:87D2		    mov	    ah,	10h
seg000:87D4		    mov	    dx,	100h
seg000:87D7		    call    sub_8A58
seg000:87DA		    jb	    short loc_87ED
seg000:87DC		    cmp	    si,	bx
seg000:87DE		    jz	    short loc_87ED
seg000:87E0		    pop	    es
seg000:87E1		    add	    si,	1000h
seg000:87E5		    cmp	    si,	bx
seg000:87E7		    jbe	    short loc_87BF
seg000:87E9		    mov	    si,	bx
seg000:87EB		    jmp	    short loc_87BF
seg000:87ED ; ---------------------------------------------------------------------------
seg000:87ED
seg000:87ED loc_87ED:				    ; CODE XREF: sub_877A+56j
seg000:87ED					    ; sub_877A+60j ...
seg000:87ED		    pop	    cx
seg000:87EE		    push    ax
seg000:87EF		    push    cx
seg000:87F0		    push    ds
seg000:87F1		    lahf
seg000:87F2		    cli
seg000:87F3		    push    es
seg000:87F4		    push    di
seg000:87F5		    cld
seg000:87F6		    mov	    bx,	0F060h
seg000:87F9		    mov	    ds,	bx
seg000:87FB		    assume ds:nothing
seg000:87FB		    mov	    si,	0
seg000:87FE		    mov	    di,	40h ; '@'
seg000:8801		    mov	    es,	di
seg000:8803		    assume es:nothing
seg000:8803		    mov	    di,	0
seg000:8806		    mov	    cx,	0C0h ; 'À'
seg000:8809		    rep	movsb
seg000:880B		    mov	    word ptr cs:loc_C5+1, 40h ;	'@'
seg000:8812		    mov	    word ptr cs:sub_0+1, 40h ; '@'
seg000:8819		    mov	    word ptr cs:loc_48+1, 40h ;	'@'
seg000:8820		    call    near ptr hw_init
seg000:8823		    sahf
seg000:8824		    pop	    di
seg000:8825		    pop	    es
seg000:8826		    assume es:nothing
seg000:8826		    pop	    ds
seg000:8827		    assume ds:nothing
seg000:8827		    pop	    cx
seg000:8828		    pop	    ax
seg000:8829		    jnb	    short loc_8831
seg000:882B		    cmp	    ah,	2
seg000:882E		    jb	    short loc_8839
seg000:8830		    stc
seg000:8831
seg000:8831 loc_8831:				    ; CODE XREF: sub_877A+AFj
seg000:8831		    pop	    es
seg000:8832		    pop	    di
seg000:8833		    pop	    si
seg000:8834		    pop	    dx
seg000:8835		    pop	    cx
seg000:8836		    pop	    bx
seg000:8837		    pop	    ax
seg000:8838		    retn
seg000:8839 ; ---------------------------------------------------------------------------
seg000:8839
seg000:8839 loc_8839:				    ; CODE XREF: sub_877A+B4j
seg000:8839		    mov	    si,	es
seg000:883B		    mov	    es,	cx
seg000:883D		    call    request_ESC
seg000:8840		    xchg    cx,	si
seg000:8842		    mov	    es,	cx
seg000:8844		    xor	    cl,	cl
seg000:8846		    or	    ah,	ah
seg000:8848		    jnz	    short loc_8853
seg000:884A		    call    print_bad_ram
seg000:884D		    call    keyb_wait_press?
seg000:8850		    jmp	    Monitor
seg000:8853 ; ---------------------------------------------------------------------------
seg000:8853
seg000:8853 loc_8853:				    ; CODE XREF: sub_877A+CEj
seg000:8853		    call    print_bad_parity
seg000:8856		    call    keyb_wait_press?
seg000:8859		    jmp	    Monitor
seg000:8859 sub_877A	    endp
seg000:8859
seg000:885C
seg000:885C ; =============== S	U B R O	U T I N	E =======================================
seg000:885C
seg000:885C
seg000:885C sub_885C	    proc far		    ; CODE XREF: test_ram_base+1Ep
seg000:885C		    push    ax
seg000:885D		    push    bx
seg000:885E		    push    cx
seg000:885F		    push    dx
seg000:8860		    push    si
seg000:8861		    push    di
seg000:8862		    push    es
seg000:8863		    cld
seg000:8864		    mov	    dx,	es
seg000:8866		    cli
seg000:8867		    push    ds
seg000:8868		    mov	    bx,	cs
seg000:886A		    mov	    ds,	bx
seg000:886C		    mov	    si,	0
seg000:886F		    mov	    bx,	1000h
seg000:8872		    sub	    bx,	80h ; ''
seg000:8876		    mov	    es,	bx
seg000:8878		    assume es:nothing
seg000:8878		    mov	    ss,	bx
seg000:887A		    assume ss:nothing
seg000:887A		    mov	    di,	0
seg000:887D		    mov	    cx,	800h
seg000:8880		    rep	movsb
seg000:8882		    pop	    ds
seg000:8883		    mov	    es,	dx
seg000:8885		    assume es:nothing
seg000:8885		    mov	    si,	cs
seg000:8887		    call    ram_bank_print
seg000:888A		    push    es
seg000:888B		    mov	    es,	si
seg000:888D		    mov	    cx,	7FFh
seg000:8890		    mov	    dx,	0FF00h
seg000:8893		    mov	    ah,	0Bh
seg000:8895		    call    sub_8A58
seg000:8898		    pop	    cx
seg000:8899		    jb	    short loc_88C8
seg000:889B		    mov	    es,	cx
seg000:889D		    mov	    dx,	cx
seg000:889F		    mov	    cx,	3FFFh
seg000:88A2		    mov	    ah,	0Eh
seg000:88A4		    cmp	    dx,	0B800h
seg000:88A8		    jz	    short loc_88AF
seg000:88AA		    mov	    cx,	0FFFh
seg000:88AD		    mov	    ah,	0Ch
seg000:88AF
seg000:88AF loc_88AF:				    ; CODE XREF: sub_885C+4Cj
seg000:88AF		    mov	    dx,	0FF00h
seg000:88B2		    call    sub_8A58
seg000:88B5		    push    ax
seg000:88B6		    lahf
seg000:88B7		    call    erase_screen
seg000:88BA		    push    bx
seg000:88BB		    mov	    bx,	2
seg000:88BE		    call    test_printBX
seg000:88C1		    pop	    bx
seg000:88C2		    dec	    bp
seg000:88C3		    call    sub_8712
seg000:88C6		    sahf
seg000:88C7		    pop	    ax
seg000:88C8
seg000:88C8 loc_88C8:				    ; CODE XREF: sub_885C+3Dj
seg000:88C8		    push    ax
seg000:88C9		    lahf
seg000:88CA		    push    ds
seg000:88CB		    push    es
seg000:88CC		    push    di
seg000:88CD		    mov	    ds,	bx
seg000:88CF		    mov	    si,	0
seg000:88D2		    mov	    bx,	cs
seg000:88D4		    mov	    es,	bx
seg000:88D6		    mov	    ss,	bx
seg000:88D8		    assume ss:nothing
seg000:88D8		    mov	    di,	0
seg000:88DB		    mov	    cx,	800h
seg000:88DE		    rep	movsb
seg000:88E0		    pop	    di
seg000:88E1		    pop	    es
seg000:88E2		    pop	    ds
seg000:88E3		    sahf
seg000:88E4		    pop	    ax
seg000:88E5		    jnb	    short loc_88ED
seg000:88E7		    cmp	    ah,	2
seg000:88EA		    jb	    short loc_88F5
seg000:88EC		    stc
seg000:88ED
seg000:88ED loc_88ED:				    ; CODE XREF: sub_885C+89j
seg000:88ED		    pop	    es
seg000:88EE		    pop	    di
seg000:88EF		    pop	    si
seg000:88F0		    pop	    dx
seg000:88F1		    pop	    cx
seg000:88F2		    pop	    bx
seg000:88F3		    pop	    ax
seg000:88F4		    retn
seg000:88F5 ; ---------------------------------------------------------------------------
seg000:88F5
seg000:88F5 loc_88F5:				    ; CODE XREF: sub_885C+8Ej
seg000:88F5		    mov	    si,	es
seg000:88F7		    mov	    es,	cx
seg000:88F9		    call    request_ESC
seg000:88FC		    xchg    cx,	si
seg000:88FE		    mov	    es,	cx
seg000:8900		    or	    ah,	ah
seg000:8902		    jnz	    short loc_890D
seg000:8904		    call    print_bad_ram
seg000:8907		    call    keyb_wait_press?
seg000:890A		    jmp	    Monitor
seg000:890D ; ---------------------------------------------------------------------------
seg000:890D
seg000:890D loc_890D:				    ; CODE XREF: sub_885C+A6j
seg000:890D		    call    print_bad_parity
seg000:8910		    call    keyb_wait_press?
seg000:8913		    jmp	    Monitor
seg000:8913 sub_885C	    endp
seg000:8913
seg000:8916
seg000:8916 ; =============== S	U B R O	U T I N	E =======================================
seg000:8916
seg000:8916
seg000:8916 test_ram_ext    proc near		    ; DATA XREF: seg000:tests_vectorso
seg000:8916		    pusha
seg000:8917		    push    ds
seg000:8918		    push    es
seg000:8919		    cli
seg000:891A		    mov	    al,	80h ; ''
seg000:891C		    out	    70h, al	    ; CMOS Memory:
seg000:891C					    ;
seg000:891E		    call    erase_screen
seg000:8921		    mov	    bx,	3
seg000:8924		    call    test_printBX
seg000:8927		    xor	    bp,	bp
seg000:8929		    cmp	    cs:stru_40E.check, 0
seg000:892F		    jnz	    short loc_893E
seg000:8931		    mov	    dl,	19h
seg000:8933		    mov	    dh,	0Ah
seg000:8935		    mov	    si,	offset aNoExtendedMemory ; "NO EXTENDED	MEMORY INSTALLED"
seg000:8938		    call    Print_extended
seg000:893B		    jmp	    short loc_894B
seg000:893D ; ---------------------------------------------------------------------------
seg000:893D		    nop
seg000:893E
seg000:893E loc_893E:				    ; CODE XREF: test_ram_ext+19j
seg000:893E					    ; test_ram_ext+33j
seg000:893E		    call    sub_8712
seg000:8941		    call    near ptr sub_8978
seg000:8944		    jb	    short loc_894B
seg000:8946		    call    keyb_??
seg000:8949		    jnb	    short loc_893E
seg000:894B
seg000:894B loc_894B:				    ; CODE XREF: test_ram_ext+25j
seg000:894B					    ; test_ram_ext+2Ej
seg000:894B		    cmp	    al,	53h ; 'S'
seg000:894D		    jz	    short loc_8959
seg000:894F		    cmp	    al,	52h ; 'R'
seg000:8951		    jnz	    short loc_8969
seg000:8953		    mov	    byte ptr cs:loc_26B+1, 0FFh
seg000:8959
seg000:8959 loc_8959:				    ; CODE XREF: test_ram_ext+37j
seg000:8959		    mov	    ax,	40h ; '@'
seg000:895C		    mov	    ds,	ax
seg000:895E		    assume ds:nothing
seg000:895E		    mov	    word ptr ds:72h, 1234h
seg000:8964		    jmp	    far	ptr 0F000h:1050h
seg000:8969 ; ---------------------------------------------------------------------------
seg000:8969
seg000:8969 loc_8969:				    ; CODE XREF: test_ram_ext+3Bj
seg000:8969		    call    request_ESC
seg000:896C		    call    keyb_wait_press?
seg000:896F		    sti
seg000:8970		    mov	    al,	7Fh ; ''
seg000:8972		    out	    70h, al	    ; CMOS Memory:
seg000:8972					    ;
seg000:8974		    pop	    es
seg000:8975		    pop	    ds
seg000:8976		    assume ds:nothing
seg000:8976		    popa
seg000:8977		    retn
seg000:8977 test_ram_ext    endp
seg000:8977
seg000:8978
seg000:8978 ; =============== S	U B R O	U T I N	E =======================================
seg000:8978
seg000:8978
seg000:8978 sub_8978	    proc far		    ; CODE XREF: test_ram_ext+2Bp
seg000:8978		    xor	    bx,	bx
seg000:897A
seg000:897A loc_897A:				    ; CODE XREF: sub_8978+5Dj
seg000:897A		    mov	    ax,	cs:stru_40E.check
seg000:897E		    shl	    ax,	1
seg000:8980		    shl	    ax,	1
seg000:8982		    cmp	    bx,	ax
seg000:8984		    jb	    short loc_8987
seg000:8986		    retn
seg000:8987 ; ---------------------------------------------------------------------------
seg000:8987
seg000:8987 loc_8987:				    ; CODE XREF: sub_8978+Cj
seg000:8987		    call    ram_bank_print_0
seg000:898A		    call    diag_out?
seg000:898D		    push    es
seg000:898E		    mov	    ax,	8
seg000:8991		    mov	    es,	ax
seg000:8993		    assume es:nothing
seg000:8993		    mov	    si,	20h ; ' '
seg000:8996		    mov	    word ptr es:[si], 0FFFFh
seg000:899B		    mov	    word ptr es:[si+2],	0
seg000:89A1		    mov	    es:[si+3], bx
seg000:89A5		    add	    word ptr es:[si+3],	1000h
seg000:89AB		    mov	    byte ptr es:[si+5],	93h ; ''
seg000:89B0		    mov	    es,	si
seg000:89B2		    assume es:nothing
seg000:89B2		    xor	    di,	di
seg000:89B4		    mov	    cx,	0FFFFh
seg000:89B7		    mov	    ah,	10h
seg000:89B9		    mov	    dx,	0FF00h
seg000:89BC		    call    sub_8A58
seg000:89BF		    jb	    short loc_89CB
seg000:89C1		    xor	    di,	di
seg000:89C3		    mov	    ah,	10h
seg000:89C5		    mov	    dx,	100h
seg000:89C8		    call    sub_8A58
seg000:89CB
seg000:89CB loc_89CB:				    ; CODE XREF: sub_8978+47j
seg000:89CB		    pushf
seg000:89CC		    call    sgdt_hlt
seg000:89CF ; ---------------------------------------------------------------------------
seg000:89CF
seg000:89CF loc_89CF:
seg000:89CF		    add	    bx,	100h
seg000:89D3		    popf
seg000:89D4		    pop	    es
seg000:89D5		    assume es:nothing
seg000:89D5		    jnb	    short loc_897A
seg000:89D7		    cmp	    ah,	2
seg000:89DA		    jnz	    short loc_89DE
seg000:89DC		    stc
seg000:89DD		    retn
seg000:89DE ; ---------------------------------------------------------------------------
seg000:89DE
seg000:89DE loc_89DE:				    ; CODE XREF: sub_8978+62j
seg000:89DE		    mov	    bx,	word ptr cs:unk_43D
seg000:89E3		    mov	    cl,	bh
seg000:89E5		    shr	    cl,	1
seg000:89E7		    shr	    cl,	1
seg000:89E9		    shr	    cl,	1
seg000:89EB		    shr	    cl,	1
seg000:89ED		    and	    cl,	0Fh
seg000:89F0		    shl	    bx,	1
seg000:89F2		    shl	    bx,	1
seg000:89F4		    shl	    bx,	1
seg000:89F6		    shl	    bx,	1
seg000:89F8		    and	    bx,	0FFF0h
seg000:89FB		    mov	    es,	bx
seg000:89FD		    assume es:nothing
seg000:89FD		    call    print_bad_ram
seg000:8A00		    call    keyb_wait_press?
seg000:8A03		    jmp	    Monitor
seg000:8A03 sub_8978	    endp
seg000:8A03
seg000:8A06
seg000:8A06 ; =============== S	U B R O	U T I N	E =======================================
seg000:8A06
seg000:8A06
seg000:8A06 ram_bank_print  proc near		    ; CODE XREF: sub_877A+46p
seg000:8A06					    ; sub_885C+2Bp
seg000:8A06		    push    ax
seg000:8A07		    push    dx
seg000:8A08		    push    si
seg000:8A09		    push    si
seg000:8A0A		    mov	    dh,	0
seg000:8A0C		    mov	    dl,	33h ; '3'
seg000:8A0E		    mov	    si,	offset aTestingMemoryBan ; "TESTING MEMORY BANK	AT "
seg000:8A11		    call    Print_extended
seg000:8A14		    sub	    al,	al
seg000:8A16		    call    sub_20F5
seg000:8A19		    pop	    ax
seg000:8A1A		    call    sub_20E3
seg000:8A1D		    mov	    al,	48h ; 'H'
seg000:8A1F
seg000:8A1F loc_8A1F:
seg000:8A1F		    call    PutChar_cursor
seg000:8A22		    pop	    si
seg000:8A23		    pop	    dx
seg000:8A24		    pop	    ax
seg000:8A25		    retn
seg000:8A25 ram_bank_print  endp
seg000:8A25
seg000:8A26
seg000:8A26 ; =============== S	U B R O	U T I N	E =======================================
seg000:8A26
seg000:8A26
seg000:8A26 ram_bank_print_0 proc near		    ; CODE XREF: sub_8978:loc_8987p
seg000:8A26		    push    ax
seg000:8A27		    push    dx
seg000:8A28		    push    si
seg000:8A29		    push    bx
seg000:8A2A		    push    bx
seg000:8A2B		    mov	    dh,	0
seg000:8A2D		    mov	    dl,	33h ; '3'
seg000:8A2F		    mov	    si,	offset aTestingMemoryBan ; "TESTING MEMORY BANK	AT "
seg000:8A32		    call    Print_extended
seg000:8A35		    pop	    bx
seg000:8A36		    mov	    cx,	4
seg000:8A39
seg000:8A39 loc_8A39:				    ; CODE XREF: ram_bank_print_0+17j
seg000:8A39		    rcl	    bx,	1
seg000:8A3B		    rcl	    al,	1
seg000:8A3D		    loop    loc_8A39
seg000:8A3F		    and	    bx,	0FFF0h
seg000:8A42		    and	    al,	0Fh
seg000:8A44		    push    bx
seg000:8A45		    inc	    al
seg000:8A47		    call    sub_20F5
seg000:8A4A		    pop	    ax
seg000:8A4B		    call    sub_20E3
seg000:8A4E		    mov	    al,	48h ; 'H'
seg000:8A50		    call    PutChar_cursor
seg000:8A53		    pop	    bx
seg000:8A54		    pop	    si
seg000:8A55		    pop	    dx
seg000:8A56		    pop	    ax
seg000:8A57		    retn
seg000:8A57 ram_bank_print_0 endp
seg000:8A57
seg000:8A58
seg000:8A58 ; =============== S	U B R O	U T I N	E =======================================
seg000:8A58
seg000:8A58
seg000:8A58 sub_8A58	    proc near		    ; CODE XREF: sub_877A+53p
seg000:8A58					    ; sub_877A+5Dp ...
seg000:8A58		    push    bx
seg000:8A59		    push    cx
seg000:8A5A		    push    si
seg000:8A5B		    out	    0F7h, al
seg000:8A5D		    mov	    di,	0
seg000:8A60		    mov	    bx,	1
seg000:8A63		    mov	    si,	cx
seg000:8A65		    call    keyb_??
seg000:8A68		    jb	    short loc_8AE9
seg000:8A6A		    cld
seg000:8A6B		    mov	    al,	dl
seg000:8A6D		    rep	stosb
seg000:8A6F		    stosb
seg000:8A70		    call    sub_8B12
seg000:8A73		    call    keyb_??
seg000:8A76		    jb	    short loc_8AE9
seg000:8A78
seg000:8A78 loc_8A78:				    ; CODE XREF: sub_8A58+71j
seg000:8A78		    mov	    cx,	si
seg000:8A7A		    inc	    cx
seg000:8A7B		    mov	    di,	0
seg000:8A7E
seg000:8A7E loc_8A7E:				    ; CODE XREF: sub_8A58:loc_8A93j
seg000:8A7E		    mov	    al,	es:[di]
seg000:8A81		    cmp	    al,	dl
seg000:8A83		    jnz	    short loc_8AE2
seg000:8A85		    mov	    es:[di], dh
seg000:8A88		    add	    di,	bx
seg000:8A8A		    adc	    di,	0
seg000:8A8D		    cmp	    di,	si
seg000:8A8F		    jbe	    short loc_8A93
seg000:8A91		    sub	    di,	si
seg000:8A93
seg000:8A93 loc_8A93:				    ; CODE XREF: sub_8A58+37j
seg000:8A93		    loop    loc_8A7E
seg000:8A95		    call    sub_8B12
seg000:8A98		    call    keyb_??
seg000:8A9B		    jb	    short loc_8AE9
seg000:8A9D		    mov	    di,	si
seg000:8A9F		    mov	    cx,	si
seg000:8AA1		    inc	    cx
seg000:8AA2		    xchg    dh,	dl
seg000:8AA4
seg000:8AA4 loc_8AA4:				    ; CODE XREF: sub_8A58:loc_8AB9j
seg000:8AA4		    mov	    al,	es:[di]
seg000:8AA7		    cmp	    al,	dl
seg000:8AA9		    jnz	    short loc_8AE2
seg000:8AAB		    mov	    es:[di], dh
seg000:8AAE		    sub	    di,	bx
seg000:8AB0		    sbb	    di,	0
seg000:8AB3		    cmp	    di,	si
seg000:8AB5		    jbe	    short loc_8AB9
seg000:8AB7		    and	    di,	si
seg000:8AB9
seg000:8AB9 loc_8AB9:				    ; CODE XREF: sub_8A58+5Dj
seg000:8AB9		    loop    loc_8AA4
seg000:8ABB		    call    sub_8B12
seg000:8ABE		    call    keyb_??
seg000:8AC1		    jb	    short loc_8AE9
seg000:8AC3		    xchg    dh,	dl
seg000:8AC5		    shl	    bx,	1
seg000:8AC7		    dec	    ah
seg000:8AC9		    jnz	    short loc_8A78
seg000:8ACB		    mov	    di,	si
seg000:8ACD		    mov	    cx,	si
seg000:8ACF		    mov	    al,	dl
seg000:8AD1		    std
seg000:8AD2		    repe scasb
seg000:8AD4		    jnz	    short loc_8ADE
seg000:8AD6		    scasb
seg000:8AD7		    jz	    short loc_8AEE
seg000:8AD9		    call    keyb_??
seg000:8ADC		    jb	    short loc_8AE9
seg000:8ADE
seg000:8ADE loc_8ADE:				    ; CODE XREF: sub_8A58+7Cj
seg000:8ADE		    inc	    di
seg000:8ADF		    mov	    al,	es:[di]
seg000:8AE2
seg000:8AE2 loc_8AE2:				    ; CODE XREF: sub_8A58+2Bj
seg000:8AE2					    ; sub_8A58+51j
seg000:8AE2		    mov	    ah,	0
seg000:8AE4		    mov	    dh,	ah
seg000:8AE6		    stc
seg000:8AE7		    jmp	    short loc_8B0D
seg000:8AE9 ; ---------------------------------------------------------------------------
seg000:8AE9
seg000:8AE9 loc_8AE9:				    ; CODE XREF: sub_8A58+10j
seg000:8AE9					    ; sub_8A58+1Ej ...
seg000:8AE9		    mov	    ah,	2
seg000:8AEB		    stc
seg000:8AEC		    jmp	    short loc_8B0D
seg000:8AEE ; ---------------------------------------------------------------------------
seg000:8AEE
seg000:8AEE loc_8AEE:				    ; CODE XREF: sub_8A58+7Fj
seg000:8AEE		    mov	    bx,	ax
seg000:8AF0		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:8AF0					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8AF0					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8AF0					    ; 3: 1=read	high switches
seg000:8AF0					    ; 4: 0=enable RAM parity checking
seg000:8AF0					    ; 5: 0=enable I/O channel check
seg000:8AF0					    ; 6: 0=hold	keyboard clock low
seg000:8AF0					    ; 7: 0=enable kbrd
seg000:8AF2		    push    ax
seg000:8AF3		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:8AF3					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8AF3					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8AF3					    ; 3: 1=read	high switches
seg000:8AF3					    ; 4: 0=enable RAM parity checking
seg000:8AF3					    ; 5: 0=enable I/O channel check
seg000:8AF3					    ; 6: 0=hold	keyboard clock low
seg000:8AF3					    ; 7: 0=enable kbrd
seg000:8AF5		    or	    al,	0Ch
seg000:8AF7		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:8AF7					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8AF7					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8AF7					    ; 3: 1=read	high switches
seg000:8AF7					    ; 4: 0=enable RAM parity checking
seg000:8AF7					    ; 5: 0=enable I/O channel check
seg000:8AF7					    ; 6: 0=hold	keyboard clock low
seg000:8AF7					    ; 7: 0=enable kbrd
seg000:8AF9		    out	    0F7h, al
seg000:8AFB		    and	    al,	0F3h
seg000:8AFD		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:8AFD					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8AFD					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8AFD					    ; 3: 1=read	high switches
seg000:8AFD					    ; 4: 0=enable RAM parity checking
seg000:8AFD					    ; 5: 0=enable I/O channel check
seg000:8AFD					    ; 6: 0=hold	keyboard clock low
seg000:8AFD					    ; 7: 0=enable kbrd
seg000:8AFF		    pop	    ax
seg000:8B00		    test    al,	0C0h
seg000:8B02		    mov	    ax,	bx
seg000:8B04		    clc
seg000:8B05		    jz	    short loc_8B0D
seg000:8B07		    mov	    ah,	1
seg000:8B09		    mov	    di,	0
seg000:8B0C		    stc
seg000:8B0D
seg000:8B0D loc_8B0D:				    ; CODE XREF: sub_8A58+8Fj
seg000:8B0D					    ; sub_8A58+94j ...
seg000:8B0D		    cld
seg000:8B0E		    pop	    si
seg000:8B0F		    pop	    cx
seg000:8B10		    pop	    bx
seg000:8B11		    retn
seg000:8B11 sub_8A58	    endp
seg000:8B11
seg000:8B12
seg000:8B12 ; =============== S	U B R O	U T I N	E =======================================
seg000:8B12
seg000:8B12
seg000:8B12 sub_8B12	    proc near		    ; CODE XREF: sub_8A58+18p
seg000:8B12					    ; sub_8A58+3Dp ...
seg000:8B12		    push    ax
seg000:8B13		    mov	    ax,	es
seg000:8B15		    cmp	    ax,	0A000h
seg000:8B18		    ja	    short loc_8B1D
seg000:8B1A		    call    Beep_short
seg000:8B1D
seg000:8B1D loc_8B1D:				    ; CODE XREF: sub_8B12+6j
seg000:8B1D		    pop	    ax
seg000:8B1E		    retn
seg000:8B1E sub_8B12	    endp
seg000:8B1E
seg000:8B1F
seg000:8B1F ; =============== S	U B R O	U T I N	E =======================================
seg000:8B1F
seg000:8B1F
seg000:8B1F test_parity	    proc far		    ; CODE XREF: test_ram_base+16p
seg000:8B1F		    push    ax
seg000:8B20		    push    bx
seg000:8B21		    push    cx
seg000:8B22		    push    dx
seg000:8B23		    push    si
seg000:8B24		    push    es
seg000:8B25		    mov	    ax,	0
seg000:8B28		    mov	    es,	ax
seg000:8B2A		    assume es:nothing
seg000:8B2A		    mov	    bx,	word ptr es:sub_0
seg000:8B2F		    mov	    si,	offset ram_test_spots
seg000:8B32		    mov	    dx,	0F2h ; 'ò'
seg000:8B35		    cli
seg000:8B36		    mov	    al,	0BFh ; '¿'
seg000:8B38		    out	    dx,	al
seg000:8B39		    mov	    cx,	9
seg000:8B3C
seg000:8B3C loc_8B3C:				    ; CODE XREF: test_parity+3Aj
seg000:8B3C		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:8B3C					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8B3C					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8B3C					    ; 3: 1=read	high switches
seg000:8B3C					    ; 4: 0=enable RAM parity checking
seg000:8B3C					    ; 5: 0=enable I/O channel check
seg000:8B3C					    ; 6: 0=hold	keyboard clock low
seg000:8B3C					    ; 7: 0=enable kbrd
seg000:8B3E		    or	    al,	0Ch	    ;				    Enable Parity
seg000:8B40		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:8B40					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8B40					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8B40					    ; 3: 1=read	high switches
seg000:8B40					    ; 4: 0=enable RAM parity checking
seg000:8B40					    ; 5: 0=enable I/O channel check
seg000:8B40					    ; 6: 0=hold	keyboard clock low
seg000:8B40					    ; 7: 0=enable kbrd
seg000:8B42		    nop
seg000:8B43		    and	    al,	0F3h
seg000:8B45		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:8B45					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8B45					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8B45					    ; 3: 1=read	high switches
seg000:8B45					    ; 4: 0=enable RAM parity checking
seg000:8B45					    ; 5: 0=enable I/O channel check
seg000:8B45					    ; 6: 0=hold	keyboard clock low
seg000:8B45					    ; 7: 0=enable kbrd
seg000:8B47		    lods    byte ptr cs:[si]
seg000:8B49		    mov	    ah,	al
seg000:8B4B		    mov	    word ptr es:sub_0, ax
seg000:8B4F		    mov	    ax,	word ptr es:sub_0
seg000:8B53		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:8B53					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8B53					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8B53					    ; 3: 1=read	high switches
seg000:8B53					    ; 4: 0=enable RAM parity checking
seg000:8B53					    ; 5: 0=enable I/O channel check
seg000:8B53					    ; 6: 0=hold	keyboard clock low
seg000:8B53					    ; 7: 0=enable kbrd
seg000:8B55		    test    al,	0C0h
seg000:8B57		    jz	    short ram_test_error
seg000:8B59		    loop    loc_8B3C
seg000:8B5B		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:8B5B					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8B5B					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8B5B					    ; 3: 1=read	high switches
seg000:8B5B					    ; 4: 0=enable RAM parity checking
seg000:8B5B					    ; 5: 0=enable I/O channel check
seg000:8B5B					    ; 6: 0=hold	keyboard clock low
seg000:8B5B					    ; 7: 0=enable kbrd
seg000:8B5D		    or	    al,	0Ch
seg000:8B5F		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:8B5F					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8B5F					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8B5F					    ; 3: 1=read	high switches
seg000:8B5F					    ; 4: 0=enable RAM parity checking
seg000:8B5F					    ; 5: 0=enable I/O channel check
seg000:8B5F					    ; 6: 0=hold	keyboard clock low
seg000:8B5F					    ; 7: 0=enable kbrd
seg000:8B61		    nop
seg000:8B62		    and	    al,	0F3h
seg000:8B64		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:8B64					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:8B64					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:8B64					    ; 3: 1=read	high switches
seg000:8B64					    ; 4: 0=enable RAM parity checking
seg000:8B64					    ; 5: 0=enable I/O channel check
seg000:8B64					    ; 6: 0=hold	keyboard clock low
seg000:8B64					    ; 7: 0=enable kbrd
seg000:8B66		    out	    dx,	al
seg000:8B67		    mov	    al,	7Fh ; ''
seg000:8B69		    out	    dx,	al
seg000:8B6A		    mov	    word ptr es:sub_0, bx
seg000:8B6F		    pop	    es
seg000:8B70		    pop	    si
seg000:8B71		    pop	    dx
seg000:8B72		    pop	    cx
seg000:8B73		    pop	    bx
seg000:8B74		    pop	    ax
seg000:8B75		    retn
seg000:8B76 ; ---------------------------------------------------------------------------
seg000:8B76
seg000:8B76 ram_test_error:			    ; CODE XREF: test_parity+38j
seg000:8B76		    mov	    cx,	es
seg000:8B78		    pop	    es
seg000:8B79		    mov	    al,	7Fh ; ''
seg000:8B7B		    out	    dx,	al
seg000:8B7C		    out	    0F7h, al
seg000:8B7E		    call    request_ESC
seg000:8B81		    mov	    es,	cx
seg000:8B83		    mov	    word ptr es:sub_0, bx
seg000:8B88		    mov	    di,	0
seg000:8B8B		    call    print_bad_parity
seg000:8B8E		    call    keyb_wait_press?
seg000:8B91		    jmp	    Monitor
seg000:8B91 test_parity	    endp
seg000:8B91
seg000:8B94
seg000:8B94 ; =============== S	U B R O	U T I N	E =======================================
seg000:8B94
seg000:8B94
seg000:8B94 test_disk	    proc near		    ; CODE XREF: tests_menu+75p
seg000:8B94					    ; DATA XREF: seg000:tests_vectorso
seg000:8B94		    push    ax
seg000:8B95		    push    bx
seg000:8B96		    push    si
seg000:8B97		    mov	    bp,	0
seg000:8B9A		    call    erase_screen
seg000:8B9D		    mov	    bx,	0
seg000:8BA0		    call    test_printBX
seg000:8BA3
seg000:8BA3 loc_8BA3:				    ; CODE XREF: test_disk+16j
seg000:8BA3		    call    sub_8712
seg000:8BA6		    sti
seg000:8BA7
seg000:8BA7 loc_8BA7:				    ; CODE XREF: test_disk+25j
seg000:8BA7		    call    sub_361C
seg000:8BAA		    jnb	    short loc_8BA3
seg000:8BAC		    test    ah,	ah
seg000:8BAE		    jz	    short loc_8BBB
seg000:8BB0		    mov	    dx,	100h
seg000:8BB3		    mov	    si,	offset aDeviceError ; "DEVICE ERROR"
seg000:8BB6		    call    Print_extended
seg000:8BB9		    jmp	    short loc_8BA7
seg000:8BBB ; ---------------------------------------------------------------------------
seg000:8BBB
seg000:8BBB loc_8BBB:				    ; CODE XREF: test_disk+1Aj
seg000:8BBB		    call    request_ESC
seg000:8BBE		    call    sub_8BC5
seg000:8BC1		    pop	    si
seg000:8BC2		    pop	    bx
seg000:8BC3		    pop	    ax
seg000:8BC4		    retn
seg000:8BC4 test_disk	    endp
seg000:8BC4
seg000:8BC5
seg000:8BC5 ; =============== S	U B R O	U T I N	E =======================================
seg000:8BC5
seg000:8BC5
seg000:8BC5 sub_8BC5	    proc near		    ; CODE XREF: test_disk+2Ap
seg000:8BC5					    ; test_powerUp+35p
seg000:8BC5		    push    ax
seg000:8BC6
seg000:8BC6 loc_8BC6:				    ; CODE XREF: sub_8BC5+Cj
seg000:8BC6		    call    keyb_menu
seg000:8BC9		    cmp	    ax,	0
seg000:8BCC		    jz	    short loc_8BD3
seg000:8BCE		    cmp	    ax,	11Bh
seg000:8BD1		    jnz	    short loc_8BC6
seg000:8BD3
seg000:8BD3 loc_8BD3:				    ; CODE XREF: sub_8BC5+7j
seg000:8BD3		    pop	    ax
seg000:8BD4		    retn
seg000:8BD4 sub_8BC5	    endp
seg000:8BD4
seg000:8BD5
seg000:8BD5 ; =============== S	U B R O	U T I N	E =======================================
seg000:8BD5
seg000:8BD5
seg000:8BD5 test_powerUp    proc far		    ; DATA XREF: seg000:tests_vectorso
seg000:8BD5		    push    ax
seg000:8BD6		    push    bx
seg000:8BD7		    push    si
seg000:8BD8		    mov	    bp,	0
seg000:8BDB		    call    erase_screen
seg000:8BDE		    mov	    bx,	4
seg000:8BE1		    call    test_printBX
seg000:8BE4
seg000:8BE4 loc_8BE4:				    ; CODE XREF: test_powerUp+23j
seg000:8BE4					    ; test_powerUp+30j
seg000:8BE4		    call    sub_8712
seg000:8BE7		    call    near ptr sub_8C2F
seg000:8BEA		    call    near ptr sub_8C7B
seg000:8BED		    call    timer_int_test
seg000:8BF0		    jb	    short timer_failure
seg000:8BF2		    call    near ptr sub_8C1D
seg000:8BF5		    call    get_key?_0
seg000:8BF8		    jz	    short loc_8BE4
seg000:8BFA		    call    keyb_menu
seg000:8BFD		    cmp	    ax,	0
seg000:8C00		    jz	    short loc_8C07
seg000:8C02		    cmp	    ax,	11Bh
seg000:8C05		    jnz	    short loc_8BE4
seg000:8C07
seg000:8C07 loc_8C07:				    ; CODE XREF: test_powerUp+2Bj
seg000:8C07		    call    request_ESC
seg000:8C0A		    call    sub_8BC5
seg000:8C0D		    pop	    si
seg000:8C0E		    pop	    bx
seg000:8C0F		    pop	    ax
seg000:8C10		    retn
seg000:8C11 ; ---------------------------------------------------------------------------
seg000:8C11
seg000:8C11 timer_failure:			    ; CODE XREF: test_powerUp+1Bj
seg000:8C11		    mov	    si,	offset aTimerInterrupt ; "Timer	interrupt failure! +++"
seg000:8C14		    call    print_?
seg000:8C17		    call    test_print_error?
seg000:8C1A		    jmp	    Monitor
seg000:8C1A test_powerUp    endp ; sp-analysis failed
seg000:8C1A
seg000:8C1D
seg000:8C1D ; =============== S	U B R O	U T I N	E =======================================
seg000:8C1D
seg000:8C1D
seg000:8C1D sub_8C1D	    proc far		    ; CODE XREF: test_powerUp+1Dp
seg000:8C1D		    call    GDT_init
seg000:8C20		    test    byte ptr cs:loc_CA+4, 8
seg000:8C26		    jz	    short locret_8C2E
seg000:8C28		    call    test_print_error?
seg000:8C2B		    jmp	    Monitor
seg000:8C2E ; ---------------------------------------------------------------------------
seg000:8C2E
seg000:8C2E locret_8C2E:			    ; CODE XREF: sub_8C1D+9j
seg000:8C2E		    retn
seg000:8C2E sub_8C1D	    endp
seg000:8C2E
seg000:8C2F
seg000:8C2F ; =============== S	U B R O	U T I N	E =======================================
seg000:8C2F
seg000:8C2F
seg000:8C2F sub_8C2F	    proc far		    ; CODE XREF: test_powerUp+12p
seg000:8C2F		    push    ax
seg000:8C30		    push    bx
seg000:8C31		    push    cx
seg000:8C32		    push    dx
seg000:8C33		    push    si
seg000:8C34		    push    di
seg000:8C35		    push    bp
seg000:8C36		    push    es
seg000:8C37		    push    ds
seg000:8C38		    stc
seg000:8C39		    jnb	    short loc_8C6D
seg000:8C3B		    clc
seg000:8C3C		    jb	    short loc_8C6D
seg000:8C3E		    xor	    ax,	ax
seg000:8C40		    jnz	    short loc_8C6D
seg000:8C42
seg000:8C42 loc_8C42:				    ; CODE XREF: sub_8C2F+28j
seg000:8C42		    mov	    ds,	ax
seg000:8C44		    mov	    bx,	ds
seg000:8C46		    mov	    cx,	bx
seg000:8C48		    mov	    es,	cx
seg000:8C4A		    mov	    dx,	es
seg000:8C4C		    mov	    bp,	dx
seg000:8C4E		    mov	    si,	bp
seg000:8C50		    mov	    di,	si
seg000:8C52		    cmp	    ax,	di
seg000:8C54		    jnz	    short loc_8C6D
seg000:8C56		    dec	    ax
seg000:8C57		    jb	    short loc_8C42
seg000:8C59		    test    ax,	ax
seg000:8C5B		    jns	    short loc_8C6D
seg000:8C5D		    jz	    short loc_8C6D
seg000:8C5F		    neg	    ax
seg000:8C61		    js	    short loc_8C6D
seg000:8C63		    pop	    ds
seg000:8C64		    pop	    es
seg000:8C65		    pop	    bp
seg000:8C66		    pop	    di
seg000:8C67		    pop	    si
seg000:8C68		    pop	    dx
seg000:8C69		    pop	    cx
seg000:8C6A		    pop	    bx
seg000:8C6B		    pop	    ax
seg000:8C6C		    retn
seg000:8C6D ; ---------------------------------------------------------------------------
seg000:8C6D
seg000:8C6D loc_8C6D:				    ; CODE XREF: sub_8C2F+Aj
seg000:8C6D					    ; sub_8C2F+Dj ...
seg000:8C6D		    pop	    ds
seg000:8C6E		    pop	    es
seg000:8C6F		    call    request_ESC
seg000:8C72		    call    CPU_test
seg000:8C75		    call    keyb_wait_press?
seg000:8C78		    jmp	    Monitor
seg000:8C78 sub_8C2F	    endp
seg000:8C78
seg000:8C7B
seg000:8C7B ; =============== S	U B R O	U T I N	E =======================================
seg000:8C7B
seg000:8C7B
seg000:8C7B sub_8C7B	    proc far		    ; CODE XREF: test_powerUp+15p
seg000:8C7B		    push    ax
seg000:8C7C		    push    bx
seg000:8C7D		    push    cx
seg000:8C7E		    mov	    ax,	0
seg000:8C81		    mov	    bx,	1000h
seg000:8C84		    mov	    cx,	7800h
seg000:8C87
seg000:8C87 loc_8C87:				    ; CODE XREF: sub_8C7B+15j
seg000:8C87		    add	    ax,	cs:[bx]
seg000:8C8A		    adc	    ax,	0
seg000:8C8D		    add	    bx,	2
seg000:8C90		    loop    loc_8C87
seg000:8C92		    cmp	    ax,	1
seg000:8C95		    jnz	    short loc_8C9B
seg000:8C97		    pop	    cx
seg000:8C98		    pop	    bx
seg000:8C99		    pop	    ax
seg000:8C9A		    retn
seg000:8C9B ; ---------------------------------------------------------------------------
seg000:8C9B
seg000:8C9B loc_8C9B:				    ; CODE XREF: sub_8C7B+1Aj
seg000:8C9B		    call    request_ESC
seg000:8C9E		    call    loc_125F
seg000:8CA1		    call    keyb_wait_press?
seg000:8CA4		    jmp	    Monitor
seg000:8CA4 sub_8C7B	    endp
seg000:8CA4
seg000:8CA4 ; ---------------------------------------------------------------------------
seg000:8CA7 tests_vectors   dw offset test_disk	    ; 0	; DATA XREF: tests_menu+75r
seg000:8CA7		    dw offset test_keyb	    ; 1
seg000:8CA7		    dw offset test_ram_base ; 2
seg000:8CA7		    dw offset test_ram_ext  ; 3
seg000:8CA7		    dw offset test_powerUp  ; 4
seg000:8CB1 aTypeEscToExit  db 'TYPE  <ESC>  TO EXIT',0 ; DATA XREF: request_ESC+6o
seg000:8CC6 aTypeEscToAbort db 'TYPE <ESC>  TO ABORT',0 ; DATA XREF: test_printBX+14o
seg000:8CDB aDiskReadTest   db 'DISK READ TEST',0   ; DATA XREF: seg000:DiskTest_pointo
seg000:8CEA aDeviceError    db 'DEVICE ERROR',0     ; DATA XREF: test_disk+1Fo
seg000:8CF7 aKeyboardTest   db 'KEYBOARD TEST',0    ; DATA XREF: seg000:keyb_test_texto
seg000:8D05 aCharacterCode  db 9,9,9,9,9,9,'  CHARACTER CODE = ',0
seg000:8D05					    ; DATA XREF: test_keyb+32o
seg000:8D1F aSystemAndVideoMe db 'SYSTEM AND VIDEO MEMORY TEST',0 ; DATA XREF: seg000:8DA6o
seg000:8D3C aExtendedMemoryTe db 'EXTENDED MEMORY TEST',0 ; DATA XREF: seg000:8DA8o
seg000:8D51 aTestingMemoryBan db 'TESTING MEMORY BANK AT ',0 ; DATA XREF: ram_bank_print+8o
seg000:8D51					    ; ram_bank_print_0+9o
seg000:8D69 aNoExtendedMemory db 'NO EXTENDED MEMORY INSTALLED',0
seg000:8D69					    ; DATA XREF: test_ram_ext+1Fo
seg000:8D86 aPowerUpTest    db 'POWER-UP TEST',0    ; DATA XREF: seg000:8DAAo
seg000:8D94 aTestCount	    db 'TEST COUNT = ',0    ; DATA XREF: test_printBX+1Eo
seg000:8DA2 DiskTest_point  dw offset aDiskReadTest ; DATA XREF: test_printBX+8r
seg000:8DA2					    ; "DISK READ TEST"
seg000:8DA4 keyb_test_text  dw offset aKeyboardTest ; DATA XREF: test_keyb+8r
seg000:8DA4					    ; test_keyb+2Ar
seg000:8DA4					    ; "KEYBOARD	TEST"
seg000:8DA6		    dw offset aSystemAndVideoMe	; "SYSTEM AND VIDEO MEMORY TEST"
seg000:8DA8		    dw offset aExtendedMemoryTe	; "EXTENDED MEMORY TEST"
seg000:8DAA		    dw offset aPowerUpTest  ; "POWER-UP	TEST"
seg000:8DAC ram_test_spots  db	6Ch ; l		    ; DATA XREF: test_parity+10o
seg000:8DAD		    db	90h ; 
seg000:8DAE		    db 0EEh ; î
seg000:8DAF		    db 0FFh
seg000:8DB0		    db	  0
seg000:8DB1		    db	76h ; v
seg000:8DB2		    db 0C4h ; Ä
seg000:8DB3		    db	20h
seg000:8DB4		    db 0BFh ; ¿
seg000:8DB5		    db	  0
seg000:8DB6
seg000:8DB6 ; =============== S	U B R O	U T I N	E =======================================
seg000:8DB6
seg000:8DB6
seg000:8DB6 test_print_error? proc near		    ; CODE XREF: ColrWarm_Boot:error?p
seg000:8DB6					    ; ColrWarm_Boot+3C8p ...
seg000:8DB6		    in	    al,	88h
seg000:8DB8		    test    al,	al
seg000:8DBA		    jz	    short locret_8DE1
seg000:8DBC		    mov	    dx,	1800h
seg000:8DBF		    mov	    si,	offset aErrorsFoundP_0 ; "--- Errors found!  Please press <Esc>	t"...
seg000:8DC2		    mov	    ah,	0C0h ; 'À'
seg000:8DC4		    call    Keyboard_command
seg000:8DC7		    call    Keyboard_read
seg000:8DCA		    test    al,	80h
seg000:8DCC		    jnz	    short loc_8DD1
seg000:8DCE		    mov	    si,	offset aErrorsFoundPle ; "--- Errors found!  Please unlock keyboa"...
seg000:8DD1
seg000:8DD1 loc_8DD1:				    ; CODE XREF: test_print_error?+16j
seg000:8DD1		    call    Print_extended
seg000:8DD4		    call    Beep_long
seg000:8DD7		    call    keyb_wait_press?
seg000:8DDA		    call    erase_screen
seg000:8DDD		    xor	    al,	al
seg000:8DDF		    out	    88h, al
seg000:8DE1
seg000:8DE1 locret_8DE1:			    ; CODE XREF: test_print_error?+4j
seg000:8DE1		    retn
seg000:8DE1 test_print_error? endp
seg000:8DE1
seg000:8DE2
seg000:8DE2 ; =============== S	U B R O	U T I N	E =======================================
seg000:8DE2
seg000:8DE2
seg000:8DE2 print_AX?	    proc near		    ; CODE XREF: ram_cmos_same_size?+18p
seg000:8DE2					    ; ram_cmos_same_size?+4Dp
seg000:8DE2		    push    ax
seg000:8DE3		    push    dx
seg000:8DE4		    push    si
seg000:8DE5		    push    ax
seg000:8DE6		    mov	    ah,	10h
seg000:8DE8		    call    cmos8E_flipON_ah
seg000:8DEB		    mov	    al,	0Eh
seg000:8DED		    call    read_cmos
seg000:8DF0		    test    al,	20h
seg000:8DF2		    jz	    short loc_8DF7
seg000:8DF4		    pop	    ax
seg000:8DF5		    jmp	    short loc_8E26
seg000:8DF7 ; ---------------------------------------------------------------------------
seg000:8DF7
seg000:8DF7 loc_8DF7:				    ; CODE XREF: print_AX?+10j
seg000:8DF7		    in	    al,	88h
seg000:8DF9		    cmp	    al,	19h
seg000:8DFB		    jb	    short loc_8DFF
seg000:8DFD		    xor	    al,	al
seg000:8DFF
seg000:8DFF loc_8DFF:				    ; CODE XREF: print_AX?+19j
seg000:8DFF		    mov	    dh,	al
seg000:8E01		    xor	    dl,	dl
seg000:8E03		    push    si
seg000:8E04		    mov	    si,	offset aError ;	"+++ ERROR:  "
seg000:8E07		    call    Print_extended
seg000:8E0A		    pop	    si
seg000:8E0B		    call    Print_extended
seg000:8E0E		    pop	    ax
seg000:8E0F		    call    print_hex?
seg000:8E12		    mov	    si,	offset aKActual	; "K  ACTUAL: "
seg000:8E15		    call    Print_extended
seg000:8E18		    mov	    ax,	bx
seg000:8E1A		    call    print_hex?
seg000:8E1D		    mov	    si,	offset aK_1 ; "K +++"
seg000:8E20		    call    Print_extended
seg000:8E23		    call    print_40_spaces
seg000:8E26
seg000:8E26 loc_8E26:				    ; CODE XREF: print_AX?+13j
seg000:8E26		    pop	    si
seg000:8E27		    pop	    dx
seg000:8E28		    pop	    ax
seg000:8E29		    retn
seg000:8E29 print_AX?	    endp
seg000:8E29
seg000:8E2A
seg000:8E2A ; =============== S	U B R O	U T I N	E =======================================
seg000:8E2A
seg000:8E2A
seg000:8E2A print_bad_ram   proc near		    ; CODE XREF: ColrWarm_Boot+62Dp
seg000:8E2A					    ; sub_877A+D0p ...
seg000:8E2A		    pusha
seg000:8E2B		    push    es
seg000:8E2C		    mov	    bx,	es
seg000:8E2E		    xor	    ax,	dx
seg000:8E30		    test    al,	al
seg000:8E32		    jnz	    short loc_8E37
seg000:8E34		    inc	    di
seg000:8E35		    mov	    al,	ah
seg000:8E37
seg000:8E37 loc_8E37:				    ; CODE XREF: print_bad_ram+8j
seg000:8E37		    mov	    si,	offset aRamFailureAddr ; "RAM failure!	Address: "
seg000:8E3A		    call    print_?_0
seg000:8E3D		    mov	    si,	offset aBit ; ", Bit: "
seg000:8E40		    call    Print_extended
seg000:8E43		    mov	    ch,	7
seg000:8E45
seg000:8E45 loc_8E45:				    ; CODE XREF: print_bad_ram+2Cj
seg000:8E45		    shl	    al,	1
seg000:8E47		    jnb	    short loc_8E52
seg000:8E49		    mov	    al,	ch
seg000:8E4B		    add	    al,	30h ; '0'
seg000:8E4D		    call    print_CL_LF_TAB
seg000:8E50		    jmp	    short loc_8E58
seg000:8E52 ; ---------------------------------------------------------------------------
seg000:8E52
seg000:8E52 loc_8E52:				    ; CODE XREF: print_bad_ram+1Dj
seg000:8E52		    dec	    ch
seg000:8E54		    test    al,	al
seg000:8E56		    jnz	    short loc_8E45
seg000:8E58
seg000:8E58 loc_8E58:				    ; CODE XREF: print_bad_ram+26j
seg000:8E58		    test    cl,	cl
seg000:8E5A		    jnz	    short loc_8E6C
seg000:8E5C		    push    cx
seg000:8E5D		    mov	    si,	offset aChipU ;	", Chip: U"
seg000:8E60		    call    Print_extended
seg000:8E63		    mov	    ax,	di
seg000:8E65		    mov	    ax,	7Bh ; '{'
seg000:8E68		    call    print_hex?
seg000:8E6B		    pop	    cx
seg000:8E6C
seg000:8E6C loc_8E6C:				    ; CODE XREF: print_bad_ram+30j
seg000:8E6C		    mov	    si,	offset plusplus	; " +++"
seg000:8E6F		    call    Print_extended
seg000:8E72		    test    cl,	cl
seg000:8E74		    jnz	    short loc_8E83
seg000:8E76		    jmp	    short $+2
seg000:8E78		    mov	    dx,	1800h
seg000:8E7B		    mov	    si,	offset aFatalErrorCann ; "--- Fatal Error: Cannot Continue! ---"
seg000:8E7E		    call    Print_extended
seg000:8E81
seg000:8E81 loc_8E81:				    ; CODE XREF: print_bad_ram:loc_8E81j
seg000:8E81		    jmp	    short loc_8E81
seg000:8E83 ; ---------------------------------------------------------------------------
seg000:8E83
seg000:8E83 loc_8E83:				    ; CODE XREF: print_bad_ram+4Aj
seg000:8E83		    call    print_40_spaces
seg000:8E86		    pop	    es
seg000:8E87		    popa
seg000:8E88		    retn
seg000:8E88 print_bad_ram   endp
seg000:8E88
seg000:8E89
seg000:8E89 ; =============== S	U B R O	U T I N	E =======================================
seg000:8E89
seg000:8E89
seg000:8E89 print_bad_parity proc near		    ; CODE XREF: ColrWarm_Boot+619p
seg000:8E89					    ; sub_877A:loc_8853p ...
seg000:8E89		    pusha
seg000:8E8A		    push    es
seg000:8E8B		    out	    0F7h, al
seg000:8E8D		    mov	    bx,	es
seg000:8E8F		    mov	    si,	offset aParityHardware ; "Parity hardware failure!  Address: "
seg000:8E92		    call    print_?_0
seg000:8E95		    test    cl,	cl
seg000:8E97		    jnz	    short loc_8EAC
seg000:8E99		    mov	    si,	offset aChipU ;	", Chip: U"
seg000:8E9C		    call    Print_extended
seg000:8E9F		    and	    di,	3
seg000:8EA2		    shl	    di,	1
seg000:8EA4		    mov	    ax,	cs:bad_chip_nr[di]
seg000:8EA9		    call    print_hex?
seg000:8EAC
seg000:8EAC loc_8EAC:				    ; CODE XREF: print_bad_parity+Ej
seg000:8EAC		    mov	    si,	offset plusplus	; " +++"
seg000:8EAF		    call    Print_extended
seg000:8EB2		    call    print_40_spaces
seg000:8EB5		    pop	    es
seg000:8EB6		    popa
seg000:8EB7		    retn
seg000:8EB7 print_bad_parity endp
seg000:8EB7
seg000:8EB7 ; ---------------------------------------------------------------------------
seg000:8EB8 bad_chip_nr	    dw 1A2h		    ; 0	; DATA XREF: print_bad_parity+1Br
seg000:8EB8		    dw 1B4h		    ; 1
seg000:8EB8		    dw 191h		    ; 2
seg000:8EB8		    dw 1A3h		    ; 3
seg000:8EC0
seg000:8EC0 ; =============== S	U B R O	U T I N	E =======================================
seg000:8EC0
seg000:8EC0
seg000:8EC0 print_?_0	    proc near		    ; CODE XREF: print_bad_ram+10p
seg000:8EC0					    ; print_bad_parity+9p
seg000:8EC0		    push    ax
seg000:8EC1		    push    si
seg000:8EC2		    call    VGA_bios_init
seg000:8EC5		    in	    al,	88h
seg000:8EC7		    cmp	    al,	19h
seg000:8EC9		    jb	    short loc_8ECD
seg000:8ECB		    xor	    al,	al
seg000:8ECD
seg000:8ECD loc_8ECD:				    ; CODE XREF: print_?_0+9j
seg000:8ECD		    mov	    dh,	al
seg000:8ECF		    xor	    dl,	dl
seg000:8ED1		    push    si
seg000:8ED2		    mov	    si,	offset aError ;	"+++ ERROR:  "
seg000:8ED5		    call    Print_extended
seg000:8ED8		    pop	    si
seg000:8ED9		    call    Print_extended
seg000:8EDC		    mov	    al,	cl
seg000:8EDE		    call    sub_20F5
seg000:8EE1		    mov	    ax,	bx
seg000:8EE3		    call    sub_20E3
seg000:8EE6		    mov	    al,	3Ah ; ':'
seg000:8EE8		    call    print_CL_LF_TAB
seg000:8EEB		    mov	    ax,	di
seg000:8EED		    call    sub_20E3
seg000:8EF0		    pop	    si
seg000:8EF1		    pop	    ax
seg000:8EF2		    retn
seg000:8EF2 print_?_0	    endp
seg000:8EF2
seg000:8EF3
seg000:8EF3 ; =============== S	U B R O	U T I N	E =======================================
seg000:8EF3
seg000:8EF3
seg000:8EF3 disk_erro_print proc near		    ; CODE XREF: ColrWarm_Boot+58Ep
seg000:8EF3					    ; sub_350D:loc_354Bp
seg000:8EF3		    mov	    si,	offset aDiskError ; "+++ DISK ERROR:  "
seg000:8EF6		    call    print_null_terminated
seg000:8EF9		    mov	    si,	offset disk_Error_table
seg000:8EFC
seg000:8EFC loc_8EFC:				    ; CODE XREF: disk_erro_print+17j
seg000:8EFC		    cmp	    byte ptr cs:[si], 0
seg000:8F00		    jz	    short table_end
seg000:8F02		    cmp	    ah,	cs:[si]
seg000:8F05		    jz	    short table_end
seg000:8F07		    add	    si,	3
seg000:8F0A		    jmp	    short loc_8EFC
seg000:8F0C ; ---------------------------------------------------------------------------
seg000:8F0C
seg000:8F0C table_end:				    ; CODE XREF: disk_erro_print+Dj
seg000:8F0C					    ; disk_erro_print+12j
seg000:8F0C		    inc	    si
seg000:8F0D		    call    Beep_long
seg000:8F10		    mov	    si,	cs:[si]
seg000:8F13		    call    print_null_terminated
seg000:8F16		    mov	    si,	offset plus_newline ; "! +++"
seg000:8F19		    call    print_null_terminated
seg000:8F1C		    call    keyb_wait_press?
seg000:8F1F		    retn
seg000:8F1F disk_erro_print endp
seg000:8F1F
seg000:8F20
seg000:8F20 ; =============== S	U B R O	U T I N	E =======================================
seg000:8F20
seg000:8F20
seg000:8F20 print_DiskError proc near		    ; CODE XREF: ColrWarm_Boot+43Cp
seg000:8F20					    ; ide_detect_init?+1A0p
seg000:8F20		    in	    al,	88h
seg000:8F22		    cmp	    al,	19h
seg000:8F24		    jb	    short loc_8F28
seg000:8F26		    xor	    al,	al
seg000:8F28
seg000:8F28 loc_8F28:				    ; CODE XREF: print_DiskError+4j
seg000:8F28		    mov	    dh,	al
seg000:8F2A		    xor	    dl,	dl
seg000:8F2C		    mov	    si,	offset aDiskError ; "+++ DISK ERROR:  "
seg000:8F2F		    call    Print_extended
seg000:8F32		    mov	    si,	offset disk_Error_table
seg000:8F35
seg000:8F35 loc_8F35:				    ; CODE XREF: print_DiskError+23j
seg000:8F35		    cmp	    byte ptr cs:[si], 0
seg000:8F39		    jz	    short loc_8F45
seg000:8F3B		    cmp	    ah,	cs:[si]
seg000:8F3E		    jz	    short loc_8F45
seg000:8F40		    add	    si,	3
seg000:8F43		    jmp	    short loc_8F35
seg000:8F45 ; ---------------------------------------------------------------------------
seg000:8F45
seg000:8F45 loc_8F45:				    ; CODE XREF: print_DiskError+19j
seg000:8F45					    ; print_DiskError+1Ej
seg000:8F45		    inc	    si
seg000:8F46		    mov	    si,	cs:[si]
seg000:8F49
seg000:8F49 loc_8F49:
seg000:8F49		    call    Print_extended
seg000:8F4C		    mov	    si,	offset plus_newline ; "! +++"
seg000:8F4F		    call    Print_extended
seg000:8F52		    call    print_40_spaces
seg000:8F55		    retn
seg000:8F55 print_DiskError endp
seg000:8F55
seg000:8F56
seg000:8F56 ; =============== S	U B R O	U T I N	E =======================================
seg000:8F56
seg000:8F56
seg000:8F56 print_?	    proc near		    ; CODE XREF: ColrWarm_Boot+1D5p
seg000:8F56					    ; ColrWarm_Boot+212p ...
seg000:8F56		    push    bx
seg000:8F57		    mov	    word ptr cs:loc_C5+1, 40h ;	'@'
seg000:8F5E		    call    VGA_bios_init
seg000:8F61		    in	    al,	88h
seg000:8F63		    cmp	    al,	19h
seg000:8F65		    jb	    short loc_8F69
seg000:8F67		    xor	    al,	al
seg000:8F69
seg000:8F69 loc_8F69:				    ; CODE XREF: print_?+Fj
seg000:8F69		    mov	    dh,	al
seg000:8F6B		    xor	    dl,	dl
seg000:8F6D		    push    si
seg000:8F6E		    mov	    si,	offset aError ;	"+++ ERROR:  "
seg000:8F71		    call    Print_extended
seg000:8F74		    pop	    si
seg000:8F75		    call    Print_extended
seg000:8F78		    pop	    bx
seg000:8F79
seg000:8F79 print_40_spaces:			    ; CODE XREF: print_AX?+41p
seg000:8F79					    ; print_bad_ram:loc_8E83p ...
seg000:8F79		    mov	    cx,	28h ; '('
seg000:8F7C		    mov	    al,	20h ; ' '
seg000:8F7E
seg000:8F7E loc_8F7E:				    ; CODE XREF: print_?+2Bj
seg000:8F7E		    call    print_CL_LF_TAB
seg000:8F81		    loop    loc_8F7E
seg000:8F83		    in	    al,	88h
seg000:8F85		    inc	    al
seg000:8F87		    cmp	    al,	18h
seg000:8F89		    jb	    short loc_8F90
seg000:8F8B		    call    test_print_error?
seg000:8F8E		    xor	    al,	al
seg000:8F90
seg000:8F90 loc_8F90:				    ; CODE XREF: print_?+33j
seg000:8F90		    out	    88h, al
seg000:8F92		    retn
seg000:8F92 print_?	    endp ; sp-analysis failed
seg000:8F92
seg000:8F92 ; ---------------------------------------------------------------------------
seg000:8F93		    db 0
seg000:8F94
seg000:8F94 ; =============== S	U B R O	U T I N	E =======================================
seg000:8F94
seg000:8F94
seg000:8F94 ide_?_16	    proc near		    ; DATA XREF: sub_2AF4:ret_vectorso
seg000:8F94		    test    cs:byte_4EE, 80h
seg000:8F9A		    jnz	    short loc_8F9F
seg000:8F9C
seg000:8F9C loc_8F9C:				    ; CODE XREF: ide_?_16+Fj
seg000:8F9C		    jmp	    ax100_stc
seg000:8F9F ; ---------------------------------------------------------------------------
seg000:8F9F
seg000:8F9F loc_8F9F:				    ; CODE XREF: ide_?_16+6j
seg000:8F9F		    cmp	    al,	4
seg000:8FA1		    nop
seg000:8FA2		    nop
seg000:8FA3		    jnb	    short loc_8F9C
seg000:8FA5		    push    bp
seg000:8FA6		    push    bx
seg000:8FA7		    push    cx
seg000:8FA8		    push    di
seg000:8FA9		    push    dx
seg000:8FAA		    mov	    dx,	di
seg000:8FAC		    mov	    ah,	al
seg000:8FAE		    call    push_ret_ah
seg000:8FB1		    jmp	    short loc_8FBC
seg000:8FB3 ; ---------------------------------------------------------------------------
seg000:8FB3		    nop
seg000:8FB3 ; ---------------------------------------------------------------------------
seg000:8FB4 ret_vectors_6   dw offset loc_8FC2	    ; 0
seg000:8FB4		    dw offset loc_9018	    ; 1
seg000:8FB4		    dw offset loc_9072	    ; 2
seg000:8FB4		    dw offset loc_9079	    ; 3
seg000:8FBC ; ---------------------------------------------------------------------------
seg000:8FBC
seg000:8FBC loc_8FBC:				    ; CODE XREF: ide_?_16+1Dj
seg000:8FBC		    pop	    dx
seg000:8FBD		    pop	    di
seg000:8FBE		    pop	    cx
seg000:8FBF		    pop	    bx
seg000:8FC0		    pop	    bp
seg000:8FC1		    retn
seg000:8FC2 ; ---------------------------------------------------------------------------
seg000:8FC2
seg000:8FC2 loc_8FC2:				    ; DATA XREF: ide_?_16:ret_vectors_6o
seg000:8FC2		    push    si
seg000:8FC3		    cmp	    cs:byte_4EF, 65h ; 'e'
seg000:8FC9		    jz	    short loc_8FCF
seg000:8FCB		    clc
seg000:8FCC		    jmp	    short loc_9016
seg000:8FCE ; ---------------------------------------------------------------------------
seg000:8FCE		    nop
seg000:8FCF
seg000:8FCF loc_8FCF:				    ; CODE XREF: ide_?_16+35j
seg000:8FCF		    mov	    dx,	80h ; ''
seg000:8FD2		    mov	    ah,	0E1h ; 'á'
seg000:8FD4		    xor	    bx,	bx
seg000:8FD6		    call    ide_?_1
seg000:8FD9		    jnb	    short loc_8FDE
seg000:8FDB		    jmp	    short loc_9016
seg000:8FDD ; ---------------------------------------------------------------------------
seg000:8FDD		    nop
seg000:8FDE
seg000:8FDE loc_8FDE:				    ; CODE XREF: ide_?_16+45j
seg000:8FDE		    mov	    si,	offset word_4CE
seg000:8FE1		    mov	    al,	41h ; 'A'
seg000:8FE3		    call    store_ide_result?
seg000:8FE6		    jnb	    short loc_8FEB
seg000:8FE8		    jmp	    short loc_9016
seg000:8FEA ; ---------------------------------------------------------------------------
seg000:8FEA		    nop
seg000:8FEB
seg000:8FEB loc_8FEB:				    ; CODE XREF: ide_?_16+52j
seg000:8FEB		    cmp	    byte ptr cs:unk_4F0, 65h ; 'e'
seg000:8FF1		    jz	    short loc_8FF7
seg000:8FF3		    clc
seg000:8FF4		    jmp	    short loc_9010
seg000:8FF6 ; ---------------------------------------------------------------------------
seg000:8FF6		    nop
seg000:8FF7
seg000:8FF7 loc_8FF7:				    ; CODE XREF: ide_?_16+5Dj
seg000:8FF7		    mov	    dx,	81h ; ''
seg000:8FFA		    mov	    ah,	0E1h ; 'á'
seg000:8FFC		    xor	    bx,	bx
seg000:8FFE		    call    ide_?_1
seg000:9001		    jnb	    short loc_9006
seg000:9003		    jmp	    short loc_9016
seg000:9005 ; ---------------------------------------------------------------------------
seg000:9005		    nop
seg000:9006
seg000:9006 loc_9006:				    ; CODE XREF: ide_?_16+6Dj
seg000:9006		    mov	    si,	offset word_4DE
seg000:9009		    mov	    al,	46h ; 'F'
seg000:900B		    call    store_ide_result?
seg000:900E		    jb	    short loc_9016
seg000:9010
seg000:9010 loc_9010:				    ; CODE XREF: ide_?_16+60j
seg000:9010		    and	    cs:byte_4EE, 0FEh
seg000:9016
seg000:9016 loc_9016:				    ; CODE XREF: ide_?_16+38j
seg000:9016					    ; ide_?_16+47j ...
seg000:9016		    pop	    si
seg000:9017		    retn
seg000:9018 ; ---------------------------------------------------------------------------
seg000:9018
seg000:9018 loc_9018:				    ; DATA XREF: ide_?_16:ret_vectors_6o
seg000:9018		    push    si
seg000:9019		    cmp	    cs:byte_4EF, 65h ; 'e'
seg000:901F		    jz	    short loc_9025
seg000:9021		    clc
seg000:9022		    jmp	    short loc_9070
seg000:9024 ; ---------------------------------------------------------------------------
seg000:9024		    nop
seg000:9025
seg000:9025 loc_9025:				    ; CODE XREF: ide_?_16+8Bj
seg000:9025		    mov	    dx,	80h ; ''
seg000:9028		    mov	    ah,	0E2h ; 'â'
seg000:902A		    mov	    bh,	0Fh
seg000:902C		    mov	    bl,	3Fh ; '?'
seg000:902E		    call    ide_?_1
seg000:9031		    jnb	    short loc_9036
seg000:9033		    jmp	    short loc_9070
seg000:9035 ; ---------------------------------------------------------------------------
seg000:9035		    nop
seg000:9036
seg000:9036 loc_9036:				    ; CODE XREF: ide_?_16+9Dj
seg000:9036		    mov	    al,	41h ; 'A'
seg000:9038		    mov	    si,	offset word_4CE
seg000:903B		    call    store_ide_result?
seg000:903E		    jnb	    short loc_9043
seg000:9040		    jmp	    short loc_9070
seg000:9042 ; ---------------------------------------------------------------------------
seg000:9042		    nop
seg000:9043
seg000:9043 loc_9043:				    ; CODE XREF: ide_?_16+AAj
seg000:9043		    cmp	    byte ptr cs:unk_4F0, 65h ; 'e'
seg000:9049		    jz	    short loc_904F
seg000:904B		    clc
seg000:904C		    jmp	    short loc_906A
seg000:904E ; ---------------------------------------------------------------------------
seg000:904E		    nop
seg000:904F
seg000:904F loc_904F:				    ; CODE XREF: ide_?_16+B5j
seg000:904F		    mov	    dx,	81h ; ''
seg000:9052		    mov	    ah,	0E2h ; 'â'
seg000:9054		    mov	    bh,	0Fh
seg000:9056		    mov	    bl,	3Fh ; '?'
seg000:9058		    call    ide_?_1
seg000:905B		    jnb	    short loc_9060
seg000:905D		    jmp	    short loc_9070
seg000:905F ; ---------------------------------------------------------------------------
seg000:905F		    nop
seg000:9060
seg000:9060 loc_9060:				    ; CODE XREF: ide_?_16+C7j
seg000:9060		    mov	    al,	46h ; 'F'
seg000:9062		    mov	    si,	offset word_4DE
seg000:9065		    call    store_ide_result?
seg000:9068		    jb	    short loc_9070
seg000:906A
seg000:906A loc_906A:				    ; CODE XREF: ide_?_16+B8j
seg000:906A		    or	    cs:byte_4EE, 1
seg000:9070
seg000:9070 loc_9070:				    ; CODE XREF: ide_?_16+8Ej
seg000:9070					    ; ide_?_16+9Fj ...
seg000:9070		    pop	    si
seg000:9071		    retn
seg000:9072 ; ---------------------------------------------------------------------------
seg000:9072
seg000:9072 loc_9072:				    ; DATA XREF: ide_?_16:ret_vectors_6o
seg000:9072		    mov	    al,	cs:byte_4EE
seg000:9076		    and	    al,	1
seg000:9078		    retn
seg000:9079 ; ---------------------------------------------------------------------------
seg000:9079
seg000:9079 loc_9079:				    ; DATA XREF: ide_?_16:ret_vectors_6o
seg000:9079		    mov	    al,	cs:byte_4EF
seg000:907D		    cmp	    dl,	80h ; ''
seg000:9080		    jz	    short nullsub_3
seg000:9082		    mov	    al,	byte ptr cs:unk_4F0
seg000:9086		    cmp	    dl,	81h ; ''
seg000:9089		    jz	    short nullsub_3
seg000:908B		    mov	    al,	80h ; ''
seg000:908D
seg000:908D nullsub_3:				    ; CODE XREF: ide_?_16+ECj
seg000:908D					    ; ide_?_16+F5j
seg000:908D		    retn
seg000:908D ide_?_16	    endp ; sp-analysis failed
seg000:908D
seg000:908E
seg000:908E ; =============== S	U B R O	U T I N	E =======================================
seg000:908E
seg000:908E
seg000:908E store_ide_result? proc near		    ; CODE XREF: ide_?_16+4Fp
seg000:908E					    ; ide_?_16+77p ...
seg000:908E		    mov	    cs:[si], cx
seg000:9091		    inc	    bh
seg000:9093		    mov	    cs:[si+2], bh
seg000:9097		    mov	    byte ptr cs:[si+8],	8
seg000:909C		    cmp	    bh,	8
seg000:909F		    ja	    short loc_90A6
seg000:90A1		    mov	    byte ptr cs:[si+8],	0
seg000:90A6
seg000:90A6 loc_90A6:				    ; CODE XREF: store_ide_result?+11j
seg000:90A6		    mov	    word ptr cs:[si+5],	0FFFFh
seg000:90AC		    mov	    cs:[si+0Ch], cx
seg000:90B0		    mov	    cs:[si+0Eh], bl
seg000:90B4		    push    ds
seg000:90B5		    push    cs
seg000:90B6		    pop	    ds
seg000:90B7		    call    table_store
seg000:90BA		    pop	    ds
seg000:90BB		    mov	    ax,	901h
seg000:90BE		    call    fdd_?
seg000:90C1		    retn
seg000:90C1 store_ide_result? endp
seg000:90C1
seg000:90C2
seg000:90C2 ; =============== S	U B R O	U T I N	E =======================================
seg000:90C2
seg000:90C2
seg000:90C2 ide_?_1	    proc near		    ; CODE XREF: sub_5872p
seg000:90C2					    ; ide_?_16+42p ...
seg000:90C2		    push    dx
seg000:90C3		    sub	    dl,	80h ; ''
seg000:90C6		    shl	    dl,	4
seg000:90C9		    or	    dl,	0A0h
seg000:90CC		    or	    dl,	bh
seg000:90CE		    mov	    byte ptr ds:loc_46+1, dl
seg000:90D2		    mov	    byte ptr ds:loc_43,	bl
seg000:90D6		    mov	    byte ptr ds:loc_43+1, 1
seg000:90DB		    mov	    dx,	cs:ide_IO_port
seg000:90E0		    call    ide_?
seg000:90E3		    jb	    short loc_9101
seg000:90E5		    mov	    ah,	0
seg000:90E7		    call    ide_?_0
seg000:90EA		    jb	    short loc_9101
seg000:90EC		    add	    dx,	2
seg000:90EF		    in	    al,	dx
seg000:90F0		    mov	    bl,	al
seg000:90F2		    inc	    dx
seg000:90F3		    inc	    dx
seg000:90F4		    in	    al,	dx
seg000:90F5		    mov	    cl,	al
seg000:90F7		    inc	    dx
seg000:90F8		    in	    al,	dx
seg000:90F9		    mov	    ch,	al
seg000:90FB		    inc	    dx
seg000:90FC		    in	    al,	dx
seg000:90FD		    and	    al,	0Fh
seg000:90FF		    mov	    bh,	al
seg000:9101
seg000:9101 loc_9101:				    ; CODE XREF: ide_?_1+21j
seg000:9101					    ; ide_?_1+28j
seg000:9101		    pop	    dx
seg000:9102		    retn
seg000:9102 ide_?_1	    endp
seg000:9102
seg000:9103
seg000:9103 ; =============== S	U B R O	U T I N	E =======================================
seg000:9103
seg000:9103
seg000:9103 ide_?_2	    proc near		    ; CODE XREF: ide_detect_init?:loc_3325p
seg000:9103					    ; sub_5876p ...
seg000:9103		    push    ax
seg000:9104		    push    cx
seg000:9105		    push    dx
seg000:9106		    mov	    dx,	cs:ide_IO_port
seg000:910B		    mov	    byte ptr ds:loc_46+1, 0A0h ; ' '
seg000:9110		    mov	    byte ptr ds:loc_43,	1
seg000:9115		    mov	    byte ptr ds:loc_43+2, 0
seg000:911A		    mov	    byte ptr ds:loc_46,	0
seg000:911F		    mov	    cx,	10h
seg000:9122		    and	    cs:byte_4EE, 7Fh
seg000:9128
seg000:9128 loc_9128:				    ; CODE XREF: ide_?_2+60j
seg000:9128		    push    cx
seg000:9129		    mov	    ah,	0E1h ; 'á'
seg000:912B		    call    ide_?
seg000:912E		    jb	    short loc_9162
seg000:9130		    mov	    ah,	0
seg000:9132		    call    ide_?_0
seg000:9135		    jb	    short loc_9162
seg000:9137		    pop	    cx
seg000:9138		    mov	    dx,	cs:ide_IO_port
seg000:913D		    add	    dx,	7
seg000:9140		    in	    al,	dx	    ; AT hard disk
seg000:9140					    ; status register bits:
seg000:9140					    ; 0: 1=prev	cmd error
seg000:9140					    ; 2: Corrected data
seg000:9140					    ; 3: Data Request. Buffer is busy
seg000:9140					    ; 4: Seek completed
seg000:9140					    ; 5: Write fault
seg000:9140					    ; 6: Drive ready (unless bit 4=0)
seg000:9140					    ; 7: Busy
seg000:9141		    test    al,	1
seg000:9143		    jnz	    short ide_error
seg000:9145		    add	    dx,	0FFFEh
seg000:9148		    in	    al,	dx
seg000:9149		    xchg    ah,	al
seg000:914B		    dec	    dx
seg000:914C		    in	    al,	dx
seg000:914D		    and	    ax,	ax
seg000:914F		    jz	    short ide_error
seg000:9151		    add	    dx,	0FFFEh
seg000:9154		    in	    al,	dx
seg000:9155		    cmp	    al,	1
seg000:9157		    jz	    short ide_error
seg000:9159		    or	    cs:byte_4EE, 80h
seg000:915F		    jmp	    short ide_error
seg000:9161 ; ---------------------------------------------------------------------------
seg000:9161		    nop
seg000:9162
seg000:9162 loc_9162:				    ; CODE XREF: ide_?_2+2Bj
seg000:9162					    ; ide_?_2+32j
seg000:9162		    pop	    cx
seg000:9163		    loop    loc_9128
seg000:9165
seg000:9165 ide_error:				    ; CODE XREF: ide_?_2+40j
seg000:9165					    ; ide_?_2+4Cj ...
seg000:9165		    pop	    dx
seg000:9166		    pop	    cx
seg000:9167		    pop	    ax
seg000:9168		    retn
seg000:9168 ide_?_2	    endp
seg000:9168
seg000:9169
seg000:9169 ; =============== S	U B R O	U T I N	E =======================================
seg000:9169
seg000:9169
seg000:9169 sub_9169	    proc near		    ; CODE XREF: ide_detect_init?+1C5p
seg000:9169		    test    cs:byte_4EE, 80h
seg000:916F		    jnz	    short loc_9184
seg000:9171		    cmp	    cs:byte_4EF, 65h ; 'e'
seg000:9177		    jz	    short loc_919F
seg000:9179		    cmp	    byte ptr cs:unk_4F0, 65h ; 'e'
seg000:917F		    jz	    short loc_919F
seg000:9181		    jmp	    short locret_91A4
seg000:9183 ; ---------------------------------------------------------------------------
seg000:9183		    nop
seg000:9184
seg000:9184 loc_9184:				    ; CODE XREF: sub_9169+6j
seg000:9184		    mov	    al,	cs:byte_4EF
seg000:9188		    and	    al,	al
seg000:918A		    jz	    short loc_9193
seg000:918C		    cmp	    al,	65h ; 'e'
seg000:918E		    jz	    short loc_9193
seg000:9190		    jmp	    short loc_919F
seg000:9192 ; ---------------------------------------------------------------------------
seg000:9192		    nop
seg000:9193
seg000:9193 loc_9193:				    ; CODE XREF: sub_9169+21j
seg000:9193					    ; sub_9169+25j
seg000:9193		    mov	    al,	byte ptr cs:unk_4F0
seg000:9197		    and	    al,	al
seg000:9199		    jz	    short locret_91A4
seg000:919B		    cmp	    al,	65h ; 'e'
seg000:919D		    jz	    short locret_91A4
seg000:919F
seg000:919F loc_919F:				    ; CODE XREF: sub_9169+Ej
seg000:919F					    ; sub_9169+16j ...
seg000:919F		    mov	    byte ptr ds:loc_73+2, 0
seg000:91A4
seg000:91A4 locret_91A4:			    ; CODE XREF: sub_9169+18j
seg000:91A4					    ; sub_9169+30j ...
seg000:91A4		    retn
seg000:91A4 sub_9169	    endp
seg000:91A4
seg000:91A4 ; ---------------------------------------------------------------------------
seg000:91A5		    db	  0
seg000:91A6 off_91A6	    dw offset sub_9255	    ; DATA XREF: reg_333_?+5Fr
seg000:91A8		    dw offset loc_92FB
seg000:91AA		    dw offset loc_9312
seg000:91AC		    dw offset loc_931F
seg000:91AE		    dw offset loc_9322
seg000:91B0		    dw offset sub_932D
seg000:91B2		    dw offset sub_9358
seg000:91B4		    dw offset reg_333_PIC
seg000:91B6		    dw offset sub_93ED
seg000:91B8		    dw offset loc_9301
seg000:91BA		    dw offset loc_9309
seg000:91BC
seg000:91BC ; =============== S	U B R O	U T I N	E =======================================
seg000:91BC
seg000:91BC
seg000:91BC reg_333_?	    proc far		    ; DATA XREF: sub_1B32+9o
seg000:91BC		    test    word ptr cs:loc_50E, 2
seg000:91C3		    jz	    short loc_91C9
seg000:91C5		    mov	    ah,	0Bh
seg000:91C7		    stc
seg000:91C8		    retf
seg000:91C9 ; ---------------------------------------------------------------------------
seg000:91C9
seg000:91C9 loc_91C9:				    ; CODE XREF: reg_333_?+7j
seg000:91C9		    sti
seg000:91CA		    push    bp
seg000:91CB		    push    ds
seg000:91CC		    mov	    ds,	word ptr cs:loc_C5+1
seg000:91D1		    out	    0FBh, al	    ; AT 80287 data.
seg000:91D1					    ; 286 sends	opcodes	& operands and receives	results.
seg000:91D3		    pushf
seg000:91D4		    inc	    byte ptr ds:loc_BB+4
seg000:91D8		    popf
seg000:91D9		    pop	    ds
seg000:91DA		    cmp	    ah,	0Bh
seg000:91DD		    jb	    short loc_91E4
seg000:91DF		    mov	    ah,	0FFh
seg000:91E1		    stc
seg000:91E2		    jmp	    short loc_9222
seg000:91E4 ; ---------------------------------------------------------------------------
seg000:91E4
seg000:91E4 loc_91E4:				    ; CODE XREF: reg_333_?+21j
seg000:91E4		    xchg    ah,	al
seg000:91E6		    mov	    bp,	ax
seg000:91E8		    and	    bp,	0FFh
seg000:91EC		    shl	    bp,	1
seg000:91EE		    test    word ptr cs:loc_50E, 80h
seg000:91F5		    jz	    short loc_9219
seg000:91F7		    and	    word ptr cs:loc_50E, 0FF7Fh
seg000:91FE		    test    word ptr cs:loc_50E, 100h
seg000:9205		    jnz	    short loc_9219
seg000:9207		    push    ax
seg000:9208		    pushf
seg000:9209		    push    si
seg000:920A		    push    bx
seg000:920B		    mov	    si,	offset reg_table_333
seg000:920E		    mov	    bx,	offset loc_9215
seg000:9211		    cld
seg000:9212		    jmp	    load_reg_table
seg000:9215 ; ---------------------------------------------------------------------------
seg000:9215
seg000:9215 loc_9215:				    ; DATA XREF: reg_333_?+52o
seg000:9215		    pop	    bx
seg000:9216		    pop	    si
seg000:9217		    popf
seg000:9218		    pop	    ax
seg000:9219
seg000:9219 loc_9219:				    ; CODE XREF: reg_333_?+39j
seg000:9219					    ; reg_333_?+49j
seg000:9219		    push    cx
seg000:921A		    push    di
seg000:921B		    call    cs:off_91A6[bp]
seg000:9220		    pop	    di
seg000:9221		    pop	    cx
seg000:9222
seg000:9222 loc_9222:				    ; CODE XREF: reg_333_?+26j
seg000:9222		    push    ds
seg000:9223		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9228		    pushf
seg000:9229		    dec	    byte ptr ds:loc_BB+4
seg000:922D		    jnz	    short loc_9231
seg000:922F		    out	    0F9h, al	    ; AT 80287 data.
seg000:922F					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9231
seg000:9231 loc_9231:				    ; CODE XREF: reg_333_?+71j
seg000:9231		    popf
seg000:9232		    pop	    ds
seg000:9233		    pop	    bp
seg000:9234		    retf
seg000:9234 reg_333_?	    endp
seg000:9234
seg000:9234 ; ---------------------------------------------------------------------------
seg000:9235 jump_table_?    dw offset loc_954D	    ; DATA XREF: sub_9255o
seg000:9235					    ; sub_94D5:loc_965Fo
seg000:9237		    dw offset loc_94FE
seg000:9239		    dw offset loc_94B8
seg000:923B		    dw offset port_337h
seg000:923D		    dw offset loc_94B8
seg000:923F		    dw offset loc_94B8
seg000:9241		    dw offset loc_94B8
seg000:9243		    dw offset port_337h
seg000:9245 off_9245	    dw offset loc_95EA	    ; DATA XREF: sub_9255:loc_92FBo
seg000:9245					    ; sub_9255+C4o
seg000:9247		    dw offset loc_959F
seg000:9249		    dw offset loc_94B8
seg000:924B		    dw offset port_337h
seg000:924D		    dw offset loc_94B8
seg000:924F		    dw offset loc_94B8
seg000:9251		    dw offset loc_94B8
seg000:9253		    dw offset port_337h
seg000:9255
seg000:9255 ; =============== S	U B R O	U T I N	E =======================================
seg000:9255
seg000:9255
seg000:9255 sub_9255	    proc near		    ; CODE XREF: reg_333_?+5Fp
seg000:9255					    ; sub_9255:loc_931Fj ...
seg000:9255		    mov	    bp,	offset jump_table_?
seg000:9258
seg000:9258 loc_9258:				    ; CODE XREF: sub_9255+A9j
seg000:9258					    ; sub_9255+C7j
seg000:9258		    sti
seg000:9259		    push    dx
seg000:925A		    or	    bx,	bx
seg000:925C		    jnz	    short loc_9261
seg000:925E		    mov	    bx,	20h ; ' '
seg000:9261
seg000:9261 loc_9261:				    ; CODE XREF: sub_9255+7j
seg000:9261		    mov	    byte ptr cs:loc_542+1, 0
seg000:9267		    mov	    word ptr cs:loc_540+1, bp
seg000:926C		    mov	    word ptr cs:loc_547+1, cx
seg000:9271		    mov	    word ptr cs:loc_53E+1, offset sub_9413
seg000:9278		    mov	    word ptr cs:loc_544, si
seg000:927D		    mov	    word ptr cs:loc_546, ds
seg000:9282		    mov	    byte ptr cs:loc_50A+3, 0
seg000:9288		    call    reg_332_333
seg000:928B		    mov	    al,	dl
seg000:928D		    cmp	    dh,	1
seg000:9290		    mov	    dx,	334h
seg000:9293		    out	    dx,	al
seg000:9294		    mov	    al,	41h ; 'A'
seg000:9296		    mov	    dx,	333h
seg000:9299		    jnz	    short loc_929D
seg000:929B		    mov	    al,	42h ; 'B'
seg000:929D
seg000:929D loc_929D:				    ; CODE XREF: sub_9255+44j
seg000:929D		    or	    word ptr cs:loc_50E, 2
seg000:92A3		    out	    dx,	al
seg000:92A4		    xor	    ah,	ah
seg000:92A6		    call    dword ptr cs:loc_547+3
seg000:92AB
seg000:92AB loc_92AB:				    ; CODE XREF: sub_9255+77j
seg000:92AB		    test    word ptr cs:loc_50E, 40h
seg000:92B2		    clc
seg000:92B3		    jnz	    short loc_92F1
seg000:92B5		    mov	    dx,	7Dh ; '}'
seg000:92B8
seg000:92B8 loc_92B8:				    ; CODE XREF: sub_9255+74j
seg000:92B8		    mov	    cx,	cs:RTC_test_timer
seg000:92BD
seg000:92BD loc_92BD:				    ; CODE XREF: sub_9255+71j
seg000:92BD		    test    word ptr cs:loc_50E, 2
seg000:92C4		    jz	    short loc_92DB
seg000:92C6		    loop    loc_92BD
seg000:92C8		    dec	    dx
seg000:92C9		    jnz	    short loc_92B8
seg000:92CB		    dec	    bx
seg000:92CC		    jnz	    short loc_92AB
seg000:92CE		    mov	    ah,	4
seg000:92D0		    and	    word ptr cs:loc_50E, 0FFFDh
seg000:92D6		    mov	    byte ptr cs:loc_542+1, ah
seg000:92DB
seg000:92DB loc_92DB:				    ; CODE XREF: sub_9255+6Fj
seg000:92DB		    mov	    ah,	byte ptr cs:loc_542+1
seg000:92E0		    mov	    word ptr cs:loc_53E+1, offset return_?
seg000:92E7		    mov	    bx,	word ptr cs:loc_50A+1
seg000:92EC		    or	    ah,	ah
seg000:92EE		    jz	    short loc_92F1
seg000:92F0		    stc
seg000:92F1
seg000:92F1 loc_92F1:				    ; CODE XREF: sub_9255+5Ej
seg000:92F1					    ; sub_9255+99j
seg000:92F1		    pushf
seg000:92F2		    and	    word ptr cs:loc_50E, 0FFBFh
seg000:92F8		    popf
seg000:92F9		    pop	    dx
seg000:92FA		    retn
seg000:92FB ; ---------------------------------------------------------------------------
seg000:92FB
seg000:92FB loc_92FB:				    ; CODE XREF: reg_333_?+5Fp
seg000:92FB					    ; sub_9255+B2j ...
seg000:92FB		    mov	    bp,	offset off_9245
seg000:92FE		    jmp	    loc_9258
seg000:9301 ; ---------------------------------------------------------------------------
seg000:9301
seg000:9301 loc_9301:				    ; DATA XREF: seg000:91B8o
seg000:9301		    or	    word ptr cs:loc_50E, 40h
seg000:9307		    jmp	    short loc_92FB
seg000:9309 ; ---------------------------------------------------------------------------
seg000:9309
seg000:9309 loc_9309:				    ; DATA XREF: seg000:91BAo
seg000:9309		    or	    word ptr cs:loc_50E, 0C0h
seg000:9310		    jmp	    short loc_92FB
seg000:9312 ; ---------------------------------------------------------------------------
seg000:9312
seg000:9312 loc_9312:				    ; CODE XREF: reg_333_?+5Fp
seg000:9312					    ; DATA XREF: seg000:91AAo
seg000:9312		    or	    word ptr cs:loc_50E, 80h
seg000:9319		    mov	    bp,	offset off_9245
seg000:931C		    jmp	    loc_9258
seg000:931F ; ---------------------------------------------------------------------------
seg000:931F
seg000:931F loc_931F:				    ; CODE XREF: reg_333_?+5Fp
seg000:931F					    ; DATA XREF: seg000:91ACo
seg000:931F		    jmp	    sub_9255
seg000:9322 ; ---------------------------------------------------------------------------
seg000:9322
seg000:9322 loc_9322:				    ; CODE XREF: reg_333_?+5Fp
seg000:9322					    ; DATA XREF: seg000:91AEo
seg000:9322		    jmp	    sub_9255
seg000:9322 sub_9255	    endp
seg000:9322
seg000:9322 ; ---------------------------------------------------------------------------
seg000:9325 byte_9325	    db	3		    ; 0	; DATA XREF: sub_932D+Bo
seg000:9325					    ; sub_932D+13o
seg000:9325		    db	0		    ; 1
seg000:9325		    db 0Bh		    ; 2
seg000:9325		    db	6		    ; 3
seg000:9325		    db 30h		    ; 4
seg000:9325		    db	3		    ; 5
seg000:9325		    db	0		    ; 6
seg000:9325		    db	4		    ; 7
seg000:932D
seg000:932D ; =============== S	U B R O	U T I N	E =======================================
seg000:932D
seg000:932D
seg000:932D sub_932D	    proc near		    ; DATA XREF: seg000:91B0o
seg000:932D		    mov	    ax,	8
seg000:9330		    cmp	    cx,	ax
seg000:9332		    jnb	    short loc_9336
seg000:9334		    mov	    ax,	cx
seg000:9336
seg000:9336 loc_9336:				    ; CODE XREF: sub_932D+5j
seg000:9336		    mov	    cx,	ax
seg000:9338		    mov	    bx,	offset byte_9325
seg000:933B
seg000:933B loc_933B:				    ; CODE XREF: sub_932D+27j
seg000:933B		    mov	    al,	cs:[bx]
seg000:933E		    mov	    [si], al
seg000:9340		    cmp	    bx,	(offset	byte_9325+7)
seg000:9344		    jnz	    short loc_9352
seg000:9346		    test    word ptr cs:loc_50E, 100h
seg000:934D		    jz	    short loc_9352
seg000:934F		    or	    byte ptr [si], 80h
seg000:9352
seg000:9352 loc_9352:				    ; CODE XREF: sub_932D+17j
seg000:9352					    ; sub_932D+20j
seg000:9352		    inc	    bx
seg000:9353		    inc	    si
seg000:9354		    loop    loc_933B
seg000:9356		    clc
seg000:9357		    retn
seg000:9357 sub_932D	    endp
seg000:9357
seg000:9358
seg000:9358 ; =============== S	U B R O	U T I N	E =======================================
seg000:9358
seg000:9358
seg000:9358 sub_9358	    proc near		    ; CODE XREF: sub_9358+Aj
seg000:9358					    ; sub_9358+13j
seg000:9358					    ; DATA XREF: ...
seg000:9358		    call    sub_9376
seg000:935B		    jnb	    short loc_9371
seg000:935D		    inc	    ah
seg000:935F		    cmp	    ah,	8
seg000:9362		    jb	    short sub_9358
seg000:9364		    xor	    ah,	ah
seg000:9366		    inc	    dl
seg000:9368		    cmp	    dl,	7
seg000:936B		    jb	    short sub_9358
seg000:936D		    mov	    ah,	0Ah
seg000:936F
seg000:936F loc_936F:				    ; CODE XREF: sub_9376+Fj
seg000:936F					    ; sub_9376+1Fj ...
seg000:936F		    stc
seg000:9370		    retn
seg000:9371 ; ---------------------------------------------------------------------------
seg000:9371
seg000:9371 loc_9371:				    ; CODE XREF: sub_9358+3j
seg000:9371		    mov	    al,	ah
seg000:9373		    xor	    ah,	ah
seg000:9375		    retn
seg000:9375 sub_9358	    endp
seg000:9375
seg000:9376
seg000:9376 ; =============== S	U B R O	U T I N	E =======================================
seg000:9376
seg000:9376
seg000:9376 sub_9376	    proc near		    ; CODE XREF: sub_9358p
seg000:9376					    ; sub_9376+25j ...
seg000:9376		    push    ax
seg000:9377		    call    sub_93B9
seg000:937A		    jb	    short loc_9387
seg000:937C		    cmp	    byte ptr [si], 7Fh ; ''
seg000:937F		    jz	    short loc_9384
seg000:9381		    clc
seg000:9382		    pop	    ax
seg000:9383		    retn
seg000:9384 ; ---------------------------------------------------------------------------
seg000:9384
seg000:9384 loc_9384:				    ; CODE XREF: sub_9376+9j
seg000:9384		    pop	    ax
seg000:9385		    jmp	    short loc_936F
seg000:9387 ; ---------------------------------------------------------------------------
seg000:9387
seg000:9387 loc_9387:				    ; CODE XREF: sub_9376+4j
seg000:9387		    cmp	    ah,	6
seg000:938A		    jz	    short loc_93B0
seg000:938C		    cmp	    ah,	4
seg000:938F		    jz	    short loc_93B5
seg000:9391		    cmp	    ah,	1
seg000:9394		    pop	    ax
seg000:9395		    jnz	    short loc_936F
seg000:9397		    cmp	    bx,	800h
seg000:939B		    jz	    short sub_9376
seg000:939D		    cmp	    bx,	200h
seg000:93A1		    jnz	    short loc_936F
seg000:93A3		    push    ax
seg000:93A4		    call    sub_93BE
seg000:93A7		    pop	    ax
seg000:93A8		    cmp	    byte ptr [si+2], 6
seg000:93AC		    jz	    short sub_9376
seg000:93AE		    jmp	    short loc_936F
seg000:93B0 ; ---------------------------------------------------------------------------
seg000:93B0
seg000:93B0 loc_93B0:				    ; CODE XREF: sub_9376+14j
seg000:93B0					    ; sub_9376+41j
seg000:93B0		    pop	    ax
seg000:93B1		    mov	    ah,	7
seg000:93B3		    jmp	    short loc_936F
seg000:93B5 ; ---------------------------------------------------------------------------
seg000:93B5
seg000:93B5 loc_93B5:				    ; CODE XREF: sub_9376+19j
seg000:93B5		    mov	    dl,	6
seg000:93B7		    jmp	    short loc_93B0
seg000:93B7 sub_9376	    endp
seg000:93B7
seg000:93B9
seg000:93B9 ; =============== S	U B R O	U T I N	E =======================================
seg000:93B9
seg000:93B9
seg000:93B9 sub_93B9	    proc near		    ; CODE XREF: sub_9376+1p
seg000:93B9		    mov	    al,	12h
seg000:93BB		    jmp	    short loc_93C0
seg000:93BB sub_93B9	    endp
seg000:93BB
seg000:93BB ; ---------------------------------------------------------------------------
seg000:93BD		    db	90h ; 
seg000:93BE
seg000:93BE ; =============== S	U B R O	U T I N	E =======================================
seg000:93BE
seg000:93BE
seg000:93BE sub_93BE	    proc near		    ; CODE XREF: sub_9376+2Ep
seg000:93BE					    ; sub_9ADB+Ap
seg000:93BE		    mov	    al,	3
seg000:93C0
seg000:93C0 loc_93C0:				    ; CODE XREF: sub_93B9+2j
seg000:93C0		    push    si
seg000:93C1		    push    cx
seg000:93C2		    push    es
seg000:93C3		    push    dx
seg000:93C4		    mov	    [si], al
seg000:93C6		    mov	    [si+4], cl
seg000:93C9		    mov	    cl,	5
seg000:93CB		    shl	    ah,	cl
seg000:93CD		    mov	    [si+1], ah
seg000:93D0		    mov	    word ptr [si+2], 0
seg000:93D5		    mov	    byte ptr [si+5], 0
seg000:93D9		    push    ds
seg000:93DA		    pop	    es
seg000:93DB		    mov	    di,	si
seg000:93DD		    xor	    bx,	bx
seg000:93DF		    mov	    ah,	0
seg000:93E1		    mov	    dh,	6
seg000:93E3		    call    far	ptr 0F000h:91BCh
seg000:93E8		    pop	    dx
seg000:93E9		    pop	    es
seg000:93EA		    pop	    cx
seg000:93EB		    pop	    si
seg000:93EC		    retn
seg000:93EC sub_93BE	    endp
seg000:93EC
seg000:93ED
seg000:93ED ; =============== S	U B R O	U T I N	E =======================================
seg000:93ED
seg000:93ED
seg000:93ED sub_93ED	    proc near		    ; DATA XREF: seg000:91B6o
seg000:93ED		    push    ds
seg000:93EE		    push    si
seg000:93EF		    mov	    ax,	ds
seg000:93F1		    or	    ax,	si
seg000:93F3		    jz	    short loc_9401
seg000:93F5		    mov	    word ptr cs:loc_547+3, si
seg000:93FA		    mov	    word ptr cs:loc_54C, ds
seg000:93FF		    jmp	    short loc_940D
seg000:9401 ; ---------------------------------------------------------------------------
seg000:9401
seg000:9401 loc_9401:				    ; CODE XREF: sub_93ED+6j
seg000:9401		    mov	    word ptr cs:loc_547+3, offset word_A112
seg000:9408		    mov	    word ptr cs:loc_54C, cs
seg000:940D
seg000:940D loc_940D:				    ; CODE XREF: sub_93ED+12j
seg000:940D		    pop	    si
seg000:940E		    pop	    ds
seg000:940F		    xor	    ah,	ah
seg000:9411		    retn
seg000:9411 sub_93ED	    endp
seg000:9411
seg000:9412 ; ---------------------------------------------------------------------------
seg000:9412
seg000:9412 return_?:				    ; DATA XREF: sub_9255+8Bo
seg000:9412					    ; sub_9413+84o ...
seg000:9412		    retn
seg000:9413
seg000:9413 ; =============== S	U B R O	U T I N	E =======================================
seg000:9413
seg000:9413
seg000:9413 sub_9413	    proc near		    ; DATA XREF: sub_9255+1Co
seg000:9413		    mov	    al,	1
seg000:9415		    mov	    dx,	333h
seg000:9418		    out	    dx,	al
seg000:9419		    test    byte ptr cs:loc_505+4, 8
seg000:941F		    jnz	    short loc_943A
seg000:9421		    mov	    ah,	5
seg000:9423		    test    byte ptr cs:loc_505+4, 4
seg000:9429		    jnz	    short loc_9437
seg000:942B		    mov	    ah,	6
seg000:942D		    test    byte ptr cs:loc_505+4, 20h
seg000:9433		    jnz	    short loc_9437
seg000:9435		    mov	    ah,	0FEh ; 'þ'
seg000:9437
seg000:9437 loc_9437:				    ; CODE XREF: sub_9413+16j
seg000:9437					    ; sub_9413+20j
seg000:9437		    jmp	    short loc_9492
seg000:9439 ; ---------------------------------------------------------------------------
seg000:9439		    nop
seg000:943A
seg000:943A loc_943A:				    ; CODE XREF: sub_9413+Cj
seg000:943A					    ; sub_94D5+26j ...
seg000:943A		    test    byte ptr cs:loc_505+4, 10h
seg000:9440		    jz	    short loc_9456
seg000:9442		    mov	    al,	byte ptr cs:loc_50A
seg000:9446		    and	    al,	7
seg000:9448		    xor	    ah,	ah
seg000:944A		    shl	    ax,	1
seg000:944C		    mov	    bx,	word ptr cs:loc_540+1
seg000:9451		    add	    bx,	ax
seg000:9453		    jmp	    word ptr cs:[bx]
seg000:9456 ; ---------------------------------------------------------------------------
seg000:9456
seg000:9456 loc_9456:				    ; CODE XREF: sub_9413+2Dj
seg000:9456		    and	    word ptr cs:loc_50E, 0FFEBh
seg000:945C		    test    byte ptr cs:loc_505+4, 8
seg000:9462		    jz	    short loc_9472
seg000:9464		    mov	    dx,	333h
seg000:9467		    mov	    al,	12h
seg000:9469		    mov	    word ptr cs:loc_53E+1, offset loc_9472
seg000:9470		    out	    dx,	al
seg000:9471		    retn
seg000:9472 ; ---------------------------------------------------------------------------
seg000:9472
seg000:9472 loc_9472:				    ; CODE XREF: sub_9413+4Fj
seg000:9472					    ; DATA XREF: sub_9413+56o
seg000:9472		    test    byte ptr cs:loc_505+4, 20h
seg000:9478		    jz	    short loc_9490
seg000:947A		    mov	    ah,	1
seg000:947C		    cmp	    byte ptr cs:loc_50A+3, 2
seg000:9482		    jnz	    short loc_9492
seg000:9484		    cmp	    word ptr cs:loc_50A+1, 0
seg000:948A		    jnz	    short loc_9492
seg000:948C		    xor	    ah,	ah
seg000:948E		    jmp	    short loc_9492
seg000:9490 ; ---------------------------------------------------------------------------
seg000:9490
seg000:9490 loc_9490:				    ; CODE XREF: sub_9413+65j
seg000:9490		    mov	    ah,	8
seg000:9492
seg000:9492 loc_9492:				    ; CODE XREF: sub_9413:loc_9437j
seg000:9492					    ; sub_9413+6Fj ...
seg000:9492		    mov	    byte ptr cs:loc_542+1, ah
seg000:9497		    mov	    word ptr cs:loc_53E+1, offset return_?
seg000:949E		    and	    word ptr cs:loc_50E, 0FFFDh
seg000:94A4		    mov	    al,	ah
seg000:94A6		    mov	    ah,	0FFh
seg000:94A8		    lds	    si,	dword ptr cs:loc_544
seg000:94AD		    mov	    bx,	word ptr cs:loc_50A+1
seg000:94B2		    call    dword ptr cs:loc_547+3
seg000:94B7		    retn
seg000:94B8 ; ---------------------------------------------------------------------------
seg000:94B8
seg000:94B8 loc_94B8:				    ; DATA XREF: seg000:9239o
seg000:94B8					    ; seg000:923Do ...
seg000:94B8		    mov	    ah,	3
seg000:94BA		    jmp	    short loc_9492
seg000:94BA sub_9413	    endp
seg000:94BA
seg000:94BC
seg000:94BC ; =============== S	U B R O	U T I N	E =======================================
seg000:94BC
seg000:94BC
seg000:94BC port_337h	    proc near		    ; DATA XREF: seg000:923Bo
seg000:94BC					    ; seg000:9243o ...
seg000:94BC		    mov	    dx,	337h
seg000:94BF		    in	    al,	dx
seg000:94C0		    test    al,	1Fh
seg000:94C2		    mov	    dx,	333h
seg000:94C5		    jz	    short loc_94CA
seg000:94C7		    mov	    al,	1
seg000:94C9		    out	    dx,	al
seg000:94CA
seg000:94CA loc_94CA:				    ; CODE XREF: port_337h+9j
seg000:94CA		    mov	    al,	11h
seg000:94CC		    mov	    word ptr cs:loc_53E+1, offset sub_94D5
seg000:94D3		    out	    dx,	al
seg000:94D4		    retn
seg000:94D4 port_337h	    endp
seg000:94D4
seg000:94D5
seg000:94D5 ; =============== S	U B R O	U T I N	E =======================================
seg000:94D5
seg000:94D5
seg000:94D5 sub_94D5	    proc near		    ; DATA XREF: port_337h+10o
seg000:94D5		    test    byte ptr cs:loc_50A, 20h
seg000:94DB		    mov	    ah,	9
seg000:94DD		    jz	    short loc_94E1
seg000:94DF
seg000:94DF loc_94DF:				    ; CODE XREF: sub_94D5+59j
seg000:94DF					    ; sub_94D5:loc_9586j ...
seg000:94DF		    jmp	    short loc_9492
seg000:94E1 ; ---------------------------------------------------------------------------
seg000:94E1
seg000:94E1 loc_94E1:				    ; CODE XREF: sub_94D5+8j
seg000:94E1		    mov	    dx,	337h
seg000:94E4		    in	    al,	dx
seg000:94E5		    and	    al,	1Fh
seg000:94E7		    mov	    cl,	al
seg000:94E9		    mov	    dx,	332h
seg000:94EC		    in	    al,	dx
seg000:94ED		    mov	    ah,	al
seg000:94EF		    jmp	    short $+2
seg000:94F1		    in	    al,	dx
seg000:94F2		    mov	    word ptr cs:loc_50A+1, ax
seg000:94F6		    mov	    byte ptr cs:loc_50A+3, cl
seg000:94FB		    jmp	    loc_943A
seg000:94FE ; ---------------------------------------------------------------------------
seg000:94FE
seg000:94FE loc_94FE:				    ; CODE XREF: sub_94D5+100j
seg000:94FE					    ; sub_94D5+112j
seg000:94FE					    ; DATA XREF: ...
seg000:94FE		    mov	    al,	10h
seg000:9500		    mov	    dx,	333h
seg000:9503		    mov	    word ptr cs:loc_53E+1, offset loc_950C
seg000:950A		    out	    dx,	al
seg000:950B		    retn
seg000:950C ; ---------------------------------------------------------------------------
seg000:950C
seg000:950C loc_950C:				    ; DATA XREF: sub_94D5+2Eo
seg000:950C		    mov	    dx,	332h
seg000:950F		    in	    al,	dx
seg000:9510		    lds	    si,	dword ptr cs:loc_544
seg000:9515		    mov	    [si], al
seg000:9517		    inc	    si
seg000:9518		    mov	    word ptr cs:loc_544, si
seg000:951D		    test    byte ptr cs:loc_50A, 20h
seg000:9523		    jz	    short loc_9534
seg000:9525		    mov	    ah,	9
seg000:9527
seg000:9527 loc_9527:				    ; CODE XREF: sub_94D5+67j
seg000:9527		    test    word ptr cs:loc_50E, 4
seg000:952E		    jz	    short loc_94DF
seg000:9530		    stc
seg000:9531		    jmp	    loc_95D8
seg000:9534 ; ---------------------------------------------------------------------------
seg000:9534
seg000:9534 loc_9534:				    ; CODE XREF: sub_94D5+4Ej
seg000:9534		    test    byte ptr cs:loc_505+4, 20h
seg000:953A		    mov	    ah,	6
seg000:953C		    jnz	    short loc_9527
seg000:953E		    test    word ptr cs:loc_50E, 4
seg000:9545		    jnz	    short loc_954A
seg000:9547		    jmp	    loc_943A
seg000:954A ; ---------------------------------------------------------------------------
seg000:954A
seg000:954A loc_954A:				    ; CODE XREF: sub_94D5+70j
seg000:954A		    jmp	    loc_95D8
seg000:954D ; ---------------------------------------------------------------------------
seg000:954D
seg000:954D loc_954D:				    ; CODE XREF: sub_94D5+140j
seg000:954D					    ; sub_94D5+153j
seg000:954D					    ; DATA XREF: ...
seg000:954D		    lds	    si,	dword ptr cs:loc_544
seg000:9552		    cld
seg000:9553		    lodsb
seg000:9554		    mov	    word ptr cs:loc_544, si
seg000:9559		    mov	    dx,	332h
seg000:955C		    out	    dx,	al
seg000:955D		    mov	    al,	10h
seg000:955F		    mov	    dx,	333h
seg000:9562		    mov	    word ptr cs:loc_53E+1, offset loc_956B
seg000:9569		    out	    dx,	al
seg000:956A		    retn
seg000:956B ; ---------------------------------------------------------------------------
seg000:956B
seg000:956B loc_956B:				    ; DATA XREF: sub_94D5+8Do
seg000:956B		    mov	    dx,	332h
seg000:956E		    in	    al,	dx
seg000:956F		    test    byte ptr cs:loc_50A, 20h
seg000:9575		    jz	    short loc_9589
seg000:9577		    mov	    ah,	9
seg000:9579
seg000:9579 loc_9579:				    ; CODE XREF: sub_94D5+BCj
seg000:9579		    test    word ptr cs:loc_50E, 4
seg000:9580		    jz	    short loc_9586
seg000:9582		    stc
seg000:9583		    jmp	    loc_9618
seg000:9586 ; ---------------------------------------------------------------------------
seg000:9586
seg000:9586 loc_9586:				    ; CODE XREF: sub_94D5+ABj
seg000:9586		    jmp	    loc_94DF
seg000:9589 ; ---------------------------------------------------------------------------
seg000:9589
seg000:9589 loc_9589:				    ; CODE XREF: sub_94D5+A0j
seg000:9589		    test    byte ptr cs:loc_505+4, 20h
seg000:958F		    mov	    ah,	6
seg000:9591		    jnz	    short loc_9579
seg000:9593		    test    word ptr cs:loc_50E, 4
seg000:959A		    jnz	    short loc_9618
seg000:959C		    jmp	    loc_943A
seg000:959F ; ---------------------------------------------------------------------------
seg000:959F
seg000:959F loc_959F:				    ; DATA XREF: seg000:9247o
seg000:959F		    test    word ptr cs:loc_50E, 200h
seg000:95A6		    jnz	    short loc_95DD
seg000:95A8		    test    word ptr cs:loc_50E, 4
seg000:95AF		    jnz	    short loc_95E1
seg000:95B1		    test    word ptr cs:loc_544, 1
seg000:95B8		    jnz	    short loc_95C9
seg000:95BA		    mov	    al,	46h ; 'F'
seg000:95BC		    test    word ptr cs:loc_50E, 10h
seg000:95C3		    jz	    short loc_95C7
seg000:95C5		    mov	    al,	42h ; 'B'
seg000:95C7
seg000:95C7 loc_95C7:				    ; CODE XREF: sub_94D5+EEj
seg000:95C7		    jmp	    short loc_962B
seg000:95C9 ; ---------------------------------------------------------------------------
seg000:95C9
seg000:95C9 loc_95C9:				    ; CODE XREF: sub_94D5+E3j
seg000:95C9		    or	    word ptr cs:loc_50E, 4
seg000:95CF		    sub	    word ptr cs:loc_547+1, 2
seg000:95D5		    jmp	    loc_94FE
seg000:95D8 ; ---------------------------------------------------------------------------
seg000:95D8
seg000:95D8 loc_95D8:				    ; CODE XREF: sub_94D5+5Cj
seg000:95D8					    ; sub_94D5:loc_954Aj
seg000:95D8		    jnb	    short loc_95DD
seg000:95DA		    jmp	    loc_94DF
seg000:95DD ; ---------------------------------------------------------------------------
seg000:95DD
seg000:95DD loc_95DD:				    ; CODE XREF: sub_94D5+D1j
seg000:95DD					    ; sub_94D5:loc_95D8j
seg000:95DD		    mov	    al,	46h ; 'F'
seg000:95DF		    jmp	    short loc_962B
seg000:95E1 ; ---------------------------------------------------------------------------
seg000:95E1
seg000:95E1 loc_95E1:				    ; CODE XREF: sub_94D5+DAj
seg000:95E1		    and	    word ptr cs:loc_50E, 0FFFBh
seg000:95E7		    jmp	    loc_94FE
seg000:95EA ; ---------------------------------------------------------------------------
seg000:95EA
seg000:95EA loc_95EA:				    ; DATA XREF: seg000:off_9245o
seg000:95EA		    test    word ptr cs:loc_50E, 200h
seg000:95F1		    jnz	    short loc_961D
seg000:95F3		    test    word ptr cs:loc_50E, 4
seg000:95FA		    jnz	    short loc_9622
seg000:95FC		    test    word ptr cs:loc_544, 1
seg000:9603		    jnz	    short loc_9609
seg000:9605		    mov	    al,	4Ah ; 'J'
seg000:9607		    jmp	    short loc_962B
seg000:9609 ; ---------------------------------------------------------------------------
seg000:9609
seg000:9609 loc_9609:				    ; CODE XREF: sub_94D5+12Ej
seg000:9609		    sub	    word ptr cs:loc_547+1, 2
seg000:960F		    or	    word ptr cs:loc_50E, 4
seg000:9615		    jmp	    loc_954D
seg000:9618 ; ---------------------------------------------------------------------------
seg000:9618
seg000:9618 loc_9618:				    ; CODE XREF: sub_94D5+AEj
seg000:9618					    ; sub_94D5+C5j
seg000:9618		    jnb	    short loc_961D
seg000:961A		    jmp	    loc_94DF
seg000:961D ; ---------------------------------------------------------------------------
seg000:961D
seg000:961D loc_961D:				    ; CODE XREF: sub_94D5+11Cj
seg000:961D					    ; sub_94D5:loc_9618j
seg000:961D		    mov	    al,	4Ah ; 'J'
seg000:961F		    jmp	    short loc_962B
seg000:9621 ; ---------------------------------------------------------------------------
seg000:9621		    nop
seg000:9622
seg000:9622 loc_9622:				    ; CODE XREF: sub_94D5+125j
seg000:9622		    and	    word ptr cs:loc_50E, 0FFFBh
seg000:9628		    jmp	    loc_954D
seg000:962B ; ---------------------------------------------------------------------------
seg000:962B
seg000:962B loc_962B:				    ; CODE XREF: sub_94D5:loc_95C7j
seg000:962B					    ; sub_94D5+10Aj ...
seg000:962B		    call    sub_973E
seg000:962E		    jb	    short loc_965F
seg000:9630		    call    sub_9721
seg000:9633		    mov	    al,	90h ; ''
seg000:9635		    mov	    dx,	333h
seg000:9638		    mov	    word ptr cs:loc_53E+1, offset loc_9641
seg000:963F		    out	    dx,	al
seg000:9640		    retn
seg000:9641 ; ---------------------------------------------------------------------------
seg000:9641
seg000:9641 loc_9641:				    ; DATA XREF: sub_94D5+163o
seg000:9641		    mov	    ah,	9
seg000:9643		    test    byte ptr cs:loc_50A, 20h
seg000:9649		    stc
seg000:964A		    jnz	    short loc_9658
seg000:964C		    mov	    ah,	6
seg000:964E		    test    byte ptr cs:loc_505+4, 20h
seg000:9654		    stc
seg000:9655		    jnz	    short loc_9658
seg000:9657		    clc
seg000:9658
seg000:9658 loc_9658:				    ; CODE XREF: sub_94D5+175j
seg000:9658					    ; sub_94D5+180j
seg000:9658		    mov	    al,	6
seg000:965A		    out	    0D4h, al
seg000:965C		    jmp	    loc_943A
seg000:965F ; ---------------------------------------------------------------------------
seg000:965F
seg000:965F loc_965F:				    ; CODE XREF: sub_94D5+159j
seg000:965F		    mov	    word ptr cs:loc_540+1, offset jump_table_?
seg000:9666		    jmp	    loc_943A
seg000:9666 sub_94D5	    endp
seg000:9666
seg000:9669
seg000:9669 ; =============== S	U B R O	U T I N	E =======================================
seg000:9669
seg000:9669
seg000:9669 reg_333_PIC	    proc far		    ; DATA XREF: seg000:91B4o
seg000:9669		    mov	    word ptr cs:loc_53E+1, offset return_?
seg000:9670		    and	    word ptr cs:loc_50E, 0FFFDh
seg000:9676		    mov	    si,	offset reg_table_333
seg000:9679		    mov	    bx,	offset PIC_mask_?
seg000:967C		    jmp	    load_reg_table
seg000:967F ; ---------------------------------------------------------------------------
seg000:967F
seg000:967F PIC_mask_?:				    ; DATA XREF: reg_333_PIC+10o
seg000:967F		    mov	    dx,	333h
seg000:9682		    mov	    al,	3
seg000:9684		    out	    dx,	al
seg000:9685		    mov	    cx,	1B58h
seg000:9688		    call    delay_doubleCX
seg000:968B		    in	    al,	0A1h	    ; Interrupt	Controller #2, 8259A
seg000:968D		    and	    al,	0F7h
seg000:968F		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:9691		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:9693		    and	    al,	0FBh
seg000:9695		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:9697		    clc
seg000:9698		    retn
seg000:9698 reg_333_PIC	    endp
seg000:9698
seg000:9699
seg000:9699 ; =============== S	U B R O	U T I N	E =======================================
seg000:9699
seg000:9699
seg000:9699 reg_333_PIC_slow proc far		    ; CODE XREF: sub_98A5+24p
seg000:9699		    mov	    word ptr cs:loc_53E+1, offset return_?
seg000:96A0		    and	    word ptr cs:loc_50E, 0FFFDh
seg000:96A6		    mov	    si,	offset reg_table_333
seg000:96A9		    mov	    bx,	offset loc_96AF
seg000:96AC		    jmp	    load_reg_table
seg000:96AF ; ---------------------------------------------------------------------------
seg000:96AF
seg000:96AF loc_96AF:				    ; DATA XREF: reg_333_PIC_slow+10o
seg000:96AF		    call    sub_96E5
seg000:96B2		    jb	    short locret_96E4
seg000:96B4		    push    ds
seg000:96B5		    mov	    dx,	40h ; '@'
seg000:96B8		    mov	    ds,	dx
seg000:96BA		    assume ds:nothing
seg000:96BA		    cmp	    word ptr ds:72h, 1234h
seg000:96C0		    pop	    ds
seg000:96C1		    assume ds:nothing
seg000:96C1		    jz	    short loc_96CB
seg000:96C3		    mov	    cx,	2EE0h
seg000:96C6		    call    delay_doubleCX
seg000:96C9		    jmp	    short loc_96D7
seg000:96CB ; ---------------------------------------------------------------------------
seg000:96CB
seg000:96CB loc_96CB:				    ; CODE XREF: reg_333_PIC_slow+28j
seg000:96CB		    mov	    dx,	333h
seg000:96CE		    mov	    al,	3
seg000:96D0		    out	    dx,	al
seg000:96D1		    mov	    cx,	1B58h
seg000:96D4		    call    delay_doubleCX
seg000:96D7
seg000:96D7 loc_96D7:				    ; CODE XREF: reg_333_PIC_slow+30j
seg000:96D7		    in	    al,	0A1h	    ; Interrupt	Controller #2, 8259A
seg000:96D9		    and	    al,	0F7h
seg000:96DB		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:96DD		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:96DF		    and	    al,	0FBh
seg000:96E1		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:96E3		    clc
seg000:96E4
seg000:96E4 locret_96E4:			    ; CODE XREF: reg_333_PIC_slow+19j
seg000:96E4		    retn
seg000:96E4 reg_333_PIC_slow endp
seg000:96E4
seg000:96E5
seg000:96E5 ; =============== S	U B R O	U T I N	E =======================================
seg000:96E5
seg000:96E5
seg000:96E5 sub_96E5	    proc near		    ; CODE XREF: reg_333_PIC_slow:loc_96AFp
seg000:96E5		    mov	    dx,	337h
seg000:96E8		    in	    al,	dx
seg000:96E9		    test    al,	1Fh
seg000:96EB		    jnz	    short loc_971F
seg000:96ED		    mov	    dx,	332h
seg000:96F0		    mov	    al,	0E5h ; 'å'
seg000:96F2		    out	    dx,	al
seg000:96F3		    mov	    dx,	337h
seg000:96F6		    in	    al,	dx
seg000:96F7		    and	    al,	1Fh
seg000:96F9		    cmp	    al,	1
seg000:96FB		    jnz	    short loc_971F
seg000:96FD		    mov	    dx,	332h
seg000:9700		    in	    al,	dx
seg000:9701		    cmp	    al,	0E5h ; 'å'
seg000:9703		    jnz	    short loc_971F
seg000:9705		    mov	    dx,	33Bh
seg000:9708		    mov	    al,	0FFh
seg000:970A		    out	    dx,	al
seg000:970B		    in	    al,	dx
seg000:970C		    mov	    ah,	al
seg000:970E		    xor	    al,	al
seg000:9710		    out	    dx,	al
seg000:9711		    cmp	    ah,	0DFh ; 'ß'
seg000:9714		    jnz	    short loc_971D
seg000:9716		    or	    word ptr cs:loc_50E, 100h
seg000:971D
seg000:971D loc_971D:				    ; CODE XREF: sub_96E5+2Fj
seg000:971D		    clc
seg000:971E		    retn
seg000:971F ; ---------------------------------------------------------------------------
seg000:971F
seg000:971F loc_971F:				    ; CODE XREF: sub_96E5+6j
seg000:971F					    ; sub_96E5+16j ...
seg000:971F		    stc
seg000:9720		    retn
seg000:9720 sub_96E5	    endp
seg000:9720
seg000:9721
seg000:9721 ; =============== S	U B R O	U T I N	E =======================================
seg000:9721
seg000:9721
seg000:9721 sub_9721	    proc near		    ; CODE XREF: sub_94D5+15Bp
seg000:9721		    mov	    ax,	word ptr cs:loc_547+1
seg000:9725		    test    word ptr cs:loc_50E, 200h
seg000:972C		    jnz	    short loc_9733
seg000:972E		    add	    word ptr cs:loc_544, ax
seg000:9733
seg000:9733 loc_9733:				    ; CODE XREF: sub_9721+Bj
seg000:9733		    mov	    dx,	330h
seg000:9736		    out	    dx,	al
seg000:9737		    inc	    dx
seg000:9738		    xchg    ah,	al
seg000:973A		    jmp	    short $+2
seg000:973C		    out	    dx,	al
seg000:973D		    retn
seg000:973D sub_9721	    endp
seg000:973D
seg000:973E
seg000:973E ; =============== S	U B R O	U T I N	E =======================================
seg000:973E
seg000:973E
seg000:973E sub_973E	    proc near		    ; CODE XREF: sub_94D5:loc_962Bp
seg000:973E		    test    word ptr cs:loc_50E, 100h
seg000:9745		    jz	    short loc_9760
seg000:9747		    mov	    ah,	al
seg000:9749		    mov	    dx,	33Ch
seg000:974C		    in	    al,	dx
seg000:974D		    and	    al,	0FDh
seg000:974F		    test    word ptr cs:loc_50E, 10h
seg000:9756		    jnz	    short loc_975D
seg000:9758		    or	    al,	2
seg000:975A		    and	    ah,	0BFh
seg000:975D
seg000:975D loc_975D:				    ; CODE XREF: sub_973E+18j
seg000:975D		    out	    dx,	al
seg000:975E		    mov	    al,	ah
seg000:9760
seg000:9760 loc_9760:				    ; CODE XREF: sub_973E+7j
seg000:9760		    test    word ptr cs:loc_50E, 200h
seg000:9767		    jz	    short loc_977A
seg000:9769		    mov	    cx,	word ptr cs:loc_54C+2
seg000:976E		    mov	    word ptr cs:loc_547+1, cx
seg000:9773		    and	    word ptr cs:loc_50E, 0FDFFh
seg000:977A
seg000:977A loc_977A:				    ; CODE XREF: sub_973E+29j
seg000:977A		    mov	    dx,	word ptr cs:loc_546
seg000:977F		    xor	    bx,	bx
seg000:9781		    mov	    cx,	4
seg000:9784
seg000:9784 loc_9784:				    ; CODE XREF: sub_973E+4Aj
seg000:9784		    rcl	    dx,	1
seg000:9786		    rcl	    bx,	1
seg000:9788		    loop    loc_9784
seg000:978A		    add	    dx,	word ptr cs:loc_544
seg000:978F		    adc	    bx,	0
seg000:9792		    mov	    cx,	dx
seg000:9794		    add	    cx,	word ptr cs:loc_547+1
seg000:9799		    jnb	    short loc_97E0
seg000:979B		    jz	    short loc_97E0
seg000:979D		    test    word ptr cs:loc_50E, 10h
seg000:97A4		    jnz	    short loc_97E0
seg000:97A6		    push    dx
seg000:97A7		    neg	    dx
seg000:97A9		    xchg    dx,	word ptr cs:loc_547+1
seg000:97AE		    sub	    dx,	word ptr cs:loc_547+1
seg000:97B3		    mov	    word ptr cs:loc_54C+2, dx
seg000:97B8		    pop	    dx
seg000:97B9		    mov	    cx,	dx
seg000:97BB		    mov	    di,	bx
seg000:97BD		    add	    cx,	word ptr cs:loc_547+1
seg000:97C2		    adc	    di,	0
seg000:97C5		    mov	    cl,	0Ch
seg000:97C7		    shl	    di,	cl
seg000:97C9		    and	    di,	0F000h
seg000:97CD		    mov	    word ptr cs:loc_546, di
seg000:97D2		    mov	    word ptr cs:loc_544, 0
seg000:97D9		    or	    word ptr cs:loc_50E, 200h
seg000:97E0
seg000:97E0 loc_97E0:				    ; CODE XREF: sub_973E+5Bj
seg000:97E0					    ; sub_973E+5Dj ...
seg000:97E0		    mov	    ah,	al
seg000:97E2		    mov	    al,	bl
seg000:97E4		    mov	    bx,	dx
seg000:97E6		    out	    89h, al	    ; DMA page register	74LS612:
seg000:97E6					    ; Channel 6	(address bits 17-23)
seg000:97E8		    shr	    bx,	1
seg000:97EA		    test    al,	1
seg000:97EC		    jz	    short loc_97F1
seg000:97EE		    or	    bh,	80h
seg000:97F1
seg000:97F1 loc_97F1:				    ; CODE XREF: sub_973E+AEj
seg000:97F1		    xor	    al,	al
seg000:97F3		    out	    0D8h, al
seg000:97F5		    jmp	    short $+2
seg000:97F7		    mov	    al,	ah
seg000:97F9		    out	    0D6h, al
seg000:97FB		    jmp	    short $+2
seg000:97FD		    mov	    al,	bl
seg000:97FF		    out	    0C8h, al	    ; DMA 8237A-5. cmd reg bits:
seg000:97FF					    ; 0: enable	mem-to-mem DMA
seg000:97FF					    ; 1: enable	Ch0 address hold
seg000:97FF					    ; 2: disable controller
seg000:97FF					    ; 3: compressed timing mode
seg000:97FF					    ; 4: enable	rotating priority
seg000:97FF					    ; 5: extended write	mode; 0=late write
seg000:97FF					    ; 6: DRQ sensing - active high
seg000:97FF					    ; 7: DACK sensing -	active high
seg000:9801		    jmp	    short $+2
seg000:9803		    mov	    al,	bh
seg000:9805		    out	    0C8h, al	    ; DMA 8237A-5. cmd reg bits:
seg000:9805					    ; 0: enable	mem-to-mem DMA
seg000:9805					    ; 1: enable	Ch0 address hold
seg000:9805					    ; 2: disable controller
seg000:9805					    ; 3: compressed timing mode
seg000:9805					    ; 4: enable	rotating priority
seg000:9805					    ; 5: extended write	mode; 0=late write
seg000:9805					    ; 6: DRQ sensing - active high
seg000:9805					    ; 7: DACK sensing -	active high
seg000:9807		    jmp	    short $+2
seg000:9809		    mov	    ax,	word ptr cs:loc_547+1
seg000:980D		    shr	    ax,	1
seg000:980F		    dec	    ax
seg000:9810		    out	    0CAh, al	    ; DMA controller, 8237A-5.
seg000:9810					    ; single mask bit register
seg000:9810					    ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
seg000:9810					    ; 2: 1=set mask for	channel; 0=clear mask (enable)
seg000:9812		    xchg    ah,	al
seg000:9814		    jmp	    short $+2
seg000:9816		    out	    0CAh, al	    ; DMA controller, 8237A-5.
seg000:9816					    ; single mask bit register
seg000:9816					    ; 0-1: select channel (00=0; 01=1; 10=2; 11=3)
seg000:9816					    ; 2: 1=set mask for	channel; 0=clear mask (enable)
seg000:9818		    mov	    al,	2
seg000:981A		    jmp	    short $+2
seg000:981C		    out	    0D4h, al
seg000:981E		    clc
seg000:981F		    retn
seg000:981F sub_973E	    endp
seg000:981F
seg000:981F ; ---------------------------------------------------------------------------
seg000:9820		    dw offset loc_C3F9
seg000:9822 reg_table_333   dw 0Ah		    ; DATA XREF: reg_333_?+4Fo
seg000:9822					    ; reg_333_PIC+Do ...
seg000:9824 stru_9824	    port_init <333h,  2>    ; 0
seg000:9824		    port_init <333h,  0>    ; 1
seg000:9824		    port_init <334h,  0>    ; 2
seg000:9824		    port_init <335h, 93h>   ; 3
seg000:9824		    port_init <336h,  0>    ; 4
seg000:9824		    port_init <337h,  0>    ; 5
seg000:9824		    port_init <338h, 17h>   ; 6
seg000:9824		    port_init <339h,  5>    ; 7
seg000:9824		    port_init <33Bh,  0>    ; 8
seg000:9824		    port_init <33Ch,  3>    ; 9
seg000:9842
seg000:9842 ; =============== S	U B R O	U T I N	E =======================================
seg000:9842
seg000:9842
seg000:9842 reg_332_333	    proc near		    ; CODE XREF: sub_9255+33p
seg000:9842		    push    cx
seg000:9843		    push    dx
seg000:9844		    mov	    cl,	dh
seg000:9846		    xor	    ch,	ch
seg000:9848		    mov	    dx,	333h
seg000:984B		    mov	    al,	1
seg000:984D		    out	    dx,	al
seg000:984E		    mov	    dx,	332h
seg000:9851
seg000:9851 loc_9851:				    ; CODE XREF: reg_332_333+14j
seg000:9851		    mov	    al,	es:[di]
seg000:9854		    inc	    di
seg000:9855		    out	    dx,	al
seg000:9856		    loop    loc_9851
seg000:9858		    pop	    dx
seg000:9859		    pop	    cx
seg000:985A		    retn
seg000:985A reg_332_333	    endp
seg000:985A
seg000:985B
seg000:985B ; =============== S	U B R O	U T I N	E =======================================
seg000:985B
seg000:985B
seg000:985B sub_985B	    proc far		    ; DATA XREF: seg000:FF29o
seg000:985B		    sti
seg000:985C		    push    ds
seg000:985D		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9862		    out	    0FBh, al	    ; AT 80287 data.
seg000:9862					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9864		    pushf
seg000:9865		    inc	    byte ptr ds:loc_BB+4
seg000:9869		    popf
seg000:986A		    pop	    ds
seg000:986B		    push    ax
seg000:986C		    push    bx
seg000:986D		    push    cx
seg000:986E		    push    dx
seg000:986F		    push    ds
seg000:9870		    push    si
seg000:9871		    mov	    dx,	334h
seg000:9874		    in	    al,	dx
seg000:9875		    mov	    byte ptr cs:loc_50A, al
seg000:9879		    mov	    dx,	335h
seg000:987C		    in	    al,	dx
seg000:987D
seg000:987D loc_987D:
seg000:987D		    mov	    byte ptr cs:loc_505+4, al
seg000:9881		    call    word ptr cs:loc_53E+1
seg000:9886		    mov	    al,	20h ; ' '
seg000:9888		    cli
seg000:9889		    out	    20h, al	    ; Interrupt	controller, 8259A.
seg000:988B		    out	    0A0h, al	    ; PIC 2  same as 0020 for PIC 1
seg000:988D		    pop	    si
seg000:988E		    pop	    ds
seg000:988F		    pop	    dx
seg000:9890		    pop	    cx
seg000:9891		    pop	    bx
seg000:9892		    pop	    ax
seg000:9893		    push    ds
seg000:9894		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9899		    pushf
seg000:989A		    dec	    byte ptr ds:loc_BB+4
seg000:989E		    jnz	    short loc_98A2
seg000:98A0		    out	    0F9h, al	    ; AT 80287 data.
seg000:98A0					    ; 286 sends	opcodes	& operands and receives	results.
seg000:98A2
seg000:98A2 loc_98A2:				    ; CODE XREF: sub_985B+43j
seg000:98A2		    popf
seg000:98A3		    pop	    ds
seg000:98A4		    iret
seg000:98A4 sub_985B	    endp
seg000:98A4
seg000:98A5
seg000:98A5 ; =============== S	U B R O	U T I N	E =======================================
seg000:98A5
seg000:98A5
seg000:98A5 sub_98A5	    proc near		    ; CODE XREF: ColrWarm_Boot+450p
seg000:98A5		    push    ds
seg000:98A6		    push    es
seg000:98A7		    mov	    word ptr cs:loc_547+3, offset word_A112
seg000:98AE		    mov	    word ptr cs:loc_54C, cs
seg000:98B3		    mov	    ds,	word ptr cs:loc_C5+1
seg000:98B8		    mov	    al,	byte ptr ds:loc_73+2
seg000:98BB		    add	    al,	80h ; ''
seg000:98BD		    mov	    bx,	cs
seg000:98BF		    mov	    ds,	bx
seg000:98C1		    mov	    es,	bx
seg000:98C3		    mov	    byte ptr ds:loc_50E+2, al
seg000:98C6		    mov	    byte ptr ds:loc_511, al
seg000:98C9		    call    near ptr reg_333_PIC_slow
seg000:98CC		    jb	    short loc_9931
seg000:98CE		    mov	    dx,	0
seg000:98D1		    mov	    al,	dl
seg000:98D3		    mov	    di,	512h
seg000:98D6
seg000:98D6 loc_98D6:				    ; CODE XREF: sub_98A5+81j
seg000:98D6					    ; sub_98A5+8Aj
seg000:98D6		    mov	    ah,	6
seg000:98D8		    mov	    si,	532h
seg000:98DB		    mov	    cx,	0Dh
seg000:98DE		    call    far	ptr 0F000h:91BCh
seg000:98E3		    jb	    short loc_9931
seg000:98E5		    mov	    word ptr [di], 0
seg000:98E9		    cmp	    byte ptr ds:loc_532, 0
seg000:98EE		    jnz	    short loc_9928
seg000:98F0		    test    byte ptr ds:loc_532+1, 80h
seg000:98F5		    jz	    short loc_98FB
seg000:98F7		    or	    word ptr [di], 1000h
seg000:98FB
seg000:98FB loc_98FB:				    ; CODE XREF: sub_98A5+50j
seg000:98FB		    mov	    dh,	0
seg000:98FD		    or	    [di], dx
seg000:98FF		    mov	    cx,	ax
seg000:9901		    and	    cx,	7
seg000:9904		    shl	    cx,	1
seg000:9906		    shl	    cx,	1
seg000:9908		    shl	    cx,	1
seg000:990A		    shl	    cx,	1
seg000:990C		    shl	    cx,	1
seg000:990E		    or	    [di], cx
seg000:9910		    and	    word ptr ds:loc_50E, 0FFFEh
seg000:9915		    inc	    byte ptr ds:loc_511
seg000:9919		    add	    di,	4
seg000:991C		    cmp	    di,	532h
seg000:9920		    jnb	    short loc_9931
seg000:9922		    inc	    al
seg000:9924		    cmp	    al,	8
seg000:9926		    jnz	    short loc_98D6
seg000:9928
seg000:9928 loc_9928:				    ; CODE XREF: sub_98A5+49j
seg000:9928		    xor	    al,	al
seg000:992A		    inc	    dl
seg000:992C		    cmp	    dl,	7
seg000:992F		    jnz	    short loc_98D6
seg000:9931
seg000:9931 loc_9931:				    ; CODE XREF: sub_98A5+27j
seg000:9931					    ; sub_98A5+3Ej ...
seg000:9931		    mov	    al,	byte ptr ds:loc_511
seg000:9934		    sub	    al,	byte ptr ds:loc_50E+2
seg000:9938		    mov	    ds,	word ptr ds:loc_C5+1
seg000:993C		    add	    byte ptr ds:loc_73+2, al
seg000:9940		    cmp	    byte ptr ds:loc_73+2, al
seg000:9944		    jnz	    short loc_9964
seg000:9946		    or	    al,	al
seg000:9948		    jz	    short loc_999A
seg000:994A		    or	    word ptr cs:loc_50E, 8
seg000:9950		    mov	    al,	13h
seg000:9952		    call    table_lookup_ptr
seg000:9955		    mov	    al,	40h ; '@'
seg000:9957		    call    table_store
seg000:995A		    push    cs
seg000:995B		    pop	    ds
seg000:995C		    mov	    si,	offset sub_2A71
seg000:995F		    mov	    al,	13h
seg000:9961		    call    table_store
seg000:9964
seg000:9964 loc_9964:				    ; CODE XREF: sub_98A5+9Fj
seg000:9964		    xor	    ax,	ax
seg000:9966		    mov	    es,	ax
seg000:9968		    mov	    si,	104h
seg000:996B		    mov	    al,	80h ; ''
seg000:996D		    mov	    di,	512h
seg000:9970
seg000:9970 loc_9970:				    ; CODE XREF: sub_98A5+F3j
seg000:9970		    cmp	    al,	byte ptr cs:loc_50E+2
seg000:9975		    jb	    short loc_998E
seg000:9977		    mov	    bx,	offset unk_E571
seg000:997A		    test    word ptr cs:[di], 1000h
seg000:997F		    jnz	    short loc_9984
seg000:9981		    mov	    bx,	offset unk_E581
seg000:9984
seg000:9984 loc_9984:				    ; CODE XREF: sub_98A5+DAj
seg000:9984		    mov	    es:[si], bx
seg000:9987		    mov	    word ptr es:[si+2],	cs
seg000:998B		    add	    di,	4
seg000:998E
seg000:998E loc_998E:				    ; CODE XREF: sub_98A5+D0j
seg000:998E		    add	    si,	14h
seg000:9991		    inc	    al
seg000:9993		    cmp	    al,	byte ptr cs:loc_511
seg000:9998		    jb	    short loc_9970
seg000:999A
seg000:999A loc_999A:				    ; CODE XREF: sub_98A5+A3j
seg000:999A		    pop	    es
seg000:999B		    pop	    ds
seg000:999C		    retn
seg000:999C sub_98A5	    endp
seg000:999C
seg000:999D
seg000:999D ; =============== S	U B R O	U T I N	E =======================================
seg000:999D
seg000:999D
seg000:999D sub_999D	    proc near		    ; CODE XREF: seg000:9E9Fp
seg000:999D		    push    ax
seg000:999E		    push    dx
seg000:999F		    push    di
seg000:99A0
seg000:99A0 loc_99A0:				    ; CODE XREF: sub_999D:loc_9A16j
seg000:99A0					    ; sub_999D+8Fj
seg000:99A0		    push    ax
seg000:99A1		    mov	    byte ptr ds:loc_532, 25h ; '%'
seg000:99A6		    mov	    cl,	5
seg000:99A8		    shl	    al,	cl
seg000:99AA		    mov	    byte ptr ds:loc_532+1, al
seg000:99AD		    mov	    word ptr ds:loc_534, 0
seg000:99B3		    mov	    word ptr ds:loc_534+2, 0
seg000:99B9		    mov	    word ptr ds:loc_538, 0
seg000:99BF		    mov	    word ptr ds:loc_538+2, 0
seg000:99C5		    mov	    cx,	0Dh
seg000:99C8		    mov	    si,	532h
seg000:99CB		    push    di
seg000:99CC		    mov	    di,	532h
seg000:99CF		    mov	    dh,	0Ah
seg000:99D1		    xor	    bx,	bx
seg000:99D3		    xor	    ah,	ah
seg000:99D5		    call    far	ptr 0F000h:91BCh
seg000:99DA		    pop	    di
seg000:99DB		    jnb	    short loc_9A1C
seg000:99DD		    cmp	    ah,	1
seg000:99E0		    pop	    ax
seg000:99E1		    jnz	    short loc_9A14
seg000:99E3		    cmp	    bx,	200h
seg000:99E7		    jnz	    short loc_9A14
seg000:99E9		    push    di
seg000:99EA		    call    sub_9ADB
seg000:99ED		    pop	    di
seg000:99EE		    cmp	    byte ptr cs:loc_534, 2
seg000:99F4		    jz	    short loc_9A18
seg000:99F6		    cmp	    byte ptr cs:loc_534, 0
seg000:99FC		    jz	    short loc_9A16
seg000:99FE		    cmp	    byte ptr cs:loc_534, 6
seg000:9A04		    jnz	    short loc_9A14
seg000:9A06		    cmp	    byte ptr cs:loc_53E, 29h ; ')'
seg000:9A0C		    jz	    short loc_9A16
seg000:9A0E		    cmp	    byte ptr cs:loc_53E, 28h ; '('
seg000:9A14
seg000:9A14 loc_9A14:				    ; CODE XREF: sub_999D+44j
seg000:9A14					    ; sub_999D+4Aj ...
seg000:9A14		    jnz	    short loc_9A18
seg000:9A16
seg000:9A16 loc_9A16:				    ; CODE XREF: sub_999D+5Fj
seg000:9A16					    ; sub_999D+6Fj
seg000:9A16		    jmp	    short loc_99A0
seg000:9A18 ; ---------------------------------------------------------------------------
seg000:9A18
seg000:9A18 loc_9A18:				    ; CODE XREF: sub_999D+57j
seg000:9A18					    ; sub_999D:loc_9A14j
seg000:9A18		    stc
seg000:9A19		    jmp	    loc_9AD7
seg000:9A1C ; ---------------------------------------------------------------------------
seg000:9A1C
seg000:9A1C loc_9A1C:				    ; CODE XREF: sub_999D+3Ej
seg000:9A1C		    pop	    ax
seg000:9A1D		    cmp	    word ptr ds:loc_534, 0FFFFh
seg000:9A22		    jnz	    short loc_9A2F
seg000:9A24		    cmp	    word ptr ds:loc_532, 0FF00h
seg000:9A2A		    jnz	    short loc_9A2F
seg000:9A2C		    jmp	    loc_99A0
seg000:9A2F ; ---------------------------------------------------------------------------
seg000:9A2F
seg000:9A2F loc_9A2F:				    ; CODE XREF: sub_999D+85j
seg000:9A2F					    ; sub_999D+8Dj
seg000:9A2F		    and	    word ptr [di], 0FCFFh
seg000:9A33		    cmp	    word ptr ds:loc_534+2, 0
seg000:9A38		    stc
seg000:9A39		    jnz	    short loc_9A9D
seg000:9A3B		    cmp	    word ptr ds:loc_538, 2
seg000:9A40		    jz	    short loc_9A5E
seg000:9A42		    or	    word ptr [di], 100h
seg000:9A46		    cmp	    word ptr ds:loc_538, 1
seg000:9A4B		    jz	    short loc_9A5E
seg000:9A4D		    and	    word ptr [di], 0FEFFh
seg000:9A51		    or	    word ptr [di], 200h
seg000:9A55		    cmp	    word ptr ds:loc_538, 8000h
seg000:9A5B		    stc
seg000:9A5C		    jnz	    short loc_9A9D
seg000:9A5E
seg000:9A5E loc_9A5E:				    ; CODE XREF: sub_999D+A3j
seg000:9A5E					    ; sub_999D+AEj
seg000:9A5E		    mov	    dx,	word ptr ds:loc_532
seg000:9A62		    mov	    ax,	word ptr ds:loc_534
seg000:9A65		    xchg    ah,	al
seg000:9A67		    xchg    dh,	dl
seg000:9A69		    mov	    cl,	[di+1]
seg000:9A6C		    and	    cl,	3
seg000:9A6F		    or	    cl,	cl
seg000:9A71		    jz	    short loc_9A7C
seg000:9A73
seg000:9A73 loc_9A73:				    ; CODE XREF: sub_999D+DDj
seg000:9A73		    rcr	    dx,	1
seg000:9A75		    rcr	    ax,	1
seg000:9A77		    dec	    cl
seg000:9A79		    clc
seg000:9A7A		    jnz	    short loc_9A73
seg000:9A7C
seg000:9A7C loc_9A7C:				    ; CODE XREF: sub_999D+D4j
seg000:9A7C		    cmp	    dx,	8000h
seg000:9A80		    cmc
seg000:9A81		    jb	    short loc_9AD7
seg000:9A83		    push    dx
seg000:9A84		    push    ax
seg000:9A85		    add	    ax,	7FFFh
seg000:9A88		    adc	    dx,	0
seg000:9A8B		    mov	    cx,	8000h
seg000:9A8E
seg000:9A8E loc_9A8E:
seg000:9A8E		    div	    cx
seg000:9A90
seg000:9A90 loc_9A90:
seg000:9A90		    mov	    bx,	1
seg000:9A93
seg000:9A93 loc_9A93:				    ; CODE XREF: sub_999D+FEj
seg000:9A93		    cmp	    al,	bl
seg000:9A95		    jbe	    short loc_9AA0
seg000:9A97		    inc	    bh
seg000:9A99		    add	    bl,	bl
seg000:9A9B		    jmp	    short loc_9A93
seg000:9A9D ; ---------------------------------------------------------------------------
seg000:9A9D
seg000:9A9D loc_9A9D:				    ; CODE XREF: sub_999D+9Cj
seg000:9A9D					    ; sub_999D+BFj
seg000:9A9D		    jmp	    short loc_9AD7
seg000:9A9D ; ---------------------------------------------------------------------------
seg000:9A9F		    db	90h ; 
seg000:9AA0 ; ---------------------------------------------------------------------------
seg000:9AA0
seg000:9AA0 loc_9AA0:				    ; CODE XREF: sub_999D+F8j
seg000:9AA0		    and	    word ptr [di], 0BFFFh
seg000:9AA4		    cmp	    bl,	10h
seg000:9AA7		    mov	    cl,	20h ; ' '
seg000:9AA9		    ja	    short loc_9AB5
seg000:9AAB		    shl	    bl,	1
seg000:9AAD		    inc	    bh
seg000:9AAF		    or	    word ptr [di], 4000h
seg000:9AB3		    mov	    cl,	11h
seg000:9AB5
seg000:9AB5 loc_9AB5:				    ; CODE XREF: sub_999D+10Cj
seg000:9AB5		    mov	    al,	bh
seg000:9AB7		    xor	    ah,	ah
seg000:9AB9		    mov	    [di+2], ax
seg000:9ABC		    mov	    al,	bl
seg000:9ABE		    mul	    cl
seg000:9AC0		    mov	    cx,	ax
seg000:9AC2		    pop	    ax
seg000:9AC3		    pop	    dx
seg000:9AC4		    div	    cx
seg000:9AC6		    shl	    ax,	1
seg000:9AC8		    shl	    ax,	1
seg000:9ACA		    shl	    ax,	1
seg000:9ACC		    and	    ax,	1FF8h
seg000:9ACF		    or	    [di+2], ax
seg000:9AD2		    or	    word ptr [di], 2000h
seg000:9AD6		    clc
seg000:9AD7
seg000:9AD7 loc_9AD7:				    ; CODE XREF: sub_999D+7Cj
seg000:9AD7					    ; sub_999D+E4j ...
seg000:9AD7		    pop	    di
seg000:9AD8		    pop	    dx
seg000:9AD9		    pop	    ax
seg000:9ADA		    retn
seg000:9ADA sub_999D	    endp
seg000:9ADA
seg000:9ADB
seg000:9ADB ; =============== S	U B R O	U T I N	E =======================================
seg000:9ADB
seg000:9ADB
seg000:9ADB sub_9ADB	    proc near		    ; CODE XREF: sub_999D+4Dp
seg000:9ADB					    ; sub_A07B+2Bp
seg000:9ADB		    push    ax
seg000:9ADC		    push    dx
seg000:9ADD		    mov	    ah,	al
seg000:9ADF		    mov	    si,	532h
seg000:9AE2		    mov	    cx,	0Dh
seg000:9AE5		    call    sub_93BE
seg000:9AE8		    pop	    dx
seg000:9AE9		    pop	    ax
seg000:9AEA		    retn
seg000:9AEA sub_9ADB	    endp
seg000:9AEA
seg000:9AEA ; ---------------------------------------------------------------------------
seg000:9AEB jump_table_?_0  dw offset sub_9BFB	    ; 0	; DATA XREF: sub_2A71+7129r
seg000:9AEB		    dw offset loc_9BF7	    ; 1
seg000:9AEB		    dw offset loc_9C6B	    ; 2
seg000:9AEB		    dw offset loc_9C77	    ; 3
seg000:9AEB		    dw offset loc_9C7C	    ; 4
seg000:9AEB		    dw offset loc_9D44	    ; 5
seg000:9AEB		    dw offset loc_9BF7	    ; 6
seg000:9AEB		    dw offset loc_9BF7	    ; 7
seg000:9AEB		    dw offset loc_9CDE	    ; 8
seg000:9AEB		    dw offset loc_9CB0	    ; 9
seg000:9AEB		    dw offset loc_9D3E	    ; 0Ah
seg000:9AEB		    dw offset loc_9D3E	    ; 0Bh
seg000:9AEB		    dw offset loc_9C70	    ; 0Ch
seg000:9AEB		    dw offset sub_9BFB	    ; 0Dh
seg000:9AEB		    dw offset loc_9BF7	    ; 0Eh
seg000:9AEB		    dw offset loc_9BF7	    ; 0Fh
seg000:9AEB		    dw offset loc_9CB6	    ; 10h
seg000:9AEB		    dw offset loc_9CB0	    ; 11h
seg000:9AEB		    dw offset loc_9BF7	    ; 12h
seg000:9AEB		    dw offset loc_9BF7	    ; 13h
seg000:9AEB		    dw offset loc_9CB0	    ; 14h
seg000:9AEB		    dw offset loc_9DF1	    ; 15h
seg000:9AEB		    dw offset loc_9BF7	    ; 16h
seg000:9AEB		    dw offset loc_9BF7	    ; 17h
seg000:9AEB		    dw offset loc_9E64	    ; 18h
seg000:9AEB		    dw offset loc_9BF7	    ; 19h
seg000:9AEB		    dw offset loc_9BF7	    ; 1Ah
seg000:9AEB		    dw offset loc_9BF7	    ; 1Bh
seg000:9AEB		    dw offset loc_9BF7	    ; 1Ch
seg000:9AEB		    dw offset loc_9BF7	    ; 1Dh
seg000:9AEB		    dw offset loc_9CBD	    ; 1Eh
seg000:9B29 ; ---------------------------------------------------------------------------
seg000:9B29 ; START OF FUNCTION	CHUNK FOR sub_2A71
seg000:9B29
seg000:9B29 loc_9B29:				    ; CODE XREF: sub_2A71+25j
seg000:9B29		    sti
seg000:9B2A		    cmp	    ah,	1Fh
seg000:9B2D		    jb	    short loc_9B32
seg000:9B2F
seg000:9B2F loc_9B2F:				    ; CODE XREF: sub_2A71+70D0j
seg000:9B2F					    ; sub_2A71+70D7j
seg000:9B2F		    jmp	    loc_2A99
seg000:9B32 ; ---------------------------------------------------------------------------
seg000:9B32
seg000:9B32 loc_9B32:				    ; CODE XREF: sub_2A71+70BCj
seg000:9B32		    cmp	    ah,	0
seg000:9B35		    jz	    short loc_9B93
seg000:9B37		    cmp	    ah,	0Dh
seg000:9B3A		    jz	    short loc_9B93
seg000:9B3C		    cmp	    dl,	byte ptr cs:loc_50E+2
seg000:9B41		    jb	    short loc_9B2F
seg000:9B43		    cmp	    dl,	byte ptr cs:loc_511
seg000:9B48		    jnb	    short loc_9B2F
seg000:9B4A		    push    bx
seg000:9B4B		    mov	    bl,	dl
seg000:9B4D		    xor	    bh,	bh
seg000:9B4F		    sub	    bl,	byte ptr cs:loc_50E+2
seg000:9B54		    shl	    bx,	1
seg000:9B56		    shl	    bx,	1
seg000:9B58		    cmp	    ah,	18h
seg000:9B5B		    jz	    short loc_9B70
seg000:9B5D		    cmp	    ah,	1Eh
seg000:9B60		    jz	    short loc_9B70
seg000:9B62		    test    word ptr cs:[bx+512h], 2000h
seg000:9B69		    jnz	    short loc_9B70
seg000:9B6B		    call    sub_9BB8
seg000:9B6E		    jb	    short loc_9BA4
seg000:9B70
seg000:9B70 loc_9B70:				    ; CODE XREF: sub_2A71+70EAj
seg000:9B70					    ; sub_2A71+70EFj ...
seg000:9B70		    test    word ptr cs:[bx+512h], 400h
seg000:9B77		    pop	    bx
seg000:9B78		    jz	    short loc_9B93
seg000:9B7A		    cmp	    ah,	8
seg000:9B7D		    jz	    short loc_9B93
seg000:9B7F		    cmp	    ah,	10h
seg000:9B82		    jz	    short loc_9B93
seg000:9B84		    cmp	    ah,	15h
seg000:9B87		    jz	    short loc_9B93
seg000:9B89		    cmp	    ah,	1Eh
seg000:9B8C		    jz	    short loc_9B93
seg000:9B8E		    cmp	    ah,	18h
seg000:9B91		    jnz	    short loc_9B9F
seg000:9B93
seg000:9B93 loc_9B93:				    ; CODE XREF: sub_2A71+70C4j
seg000:9B93					    ; sub_2A71+70C9j ...
seg000:9B93		    push    bx
seg000:9B94		    xor	    bh,	bh
seg000:9B96		    mov	    bl,	ah
seg000:9B98		    shl	    bx,	1
seg000:9B9A		    jmp	    cs:jump_table_?_0[bx]
seg000:9B9F ; ---------------------------------------------------------------------------
seg000:9B9F
seg000:9B9F loc_9B9F:				    ; CODE XREF: sub_2A71+7120j
seg000:9B9F		    mov	    ah,	6
seg000:9BA1		    jmp	    short loc_9BA5
seg000:9BA1 ; END OF FUNCTION CHUNK FOR	sub_2A71
seg000:9BA1 ; ---------------------------------------------------------------------------
seg000:9BA3		    db	90h ; 
seg000:9BA4 ; ---------------------------------------------------------------------------
seg000:9BA4 ; START OF FUNCTION	CHUNK FOR sub_2A71
seg000:9BA4
seg000:9BA4 loc_9BA4:				    ; CODE XREF: sub_2A71+70FDj
seg000:9BA4		    pop	    bx
seg000:9BA5
seg000:9BA5 loc_9BA5:				    ; CODE XREF: sub_2A71+7130j
seg000:9BA5					    ; sub_9BFB+6Dj ...
seg000:9BA5		    push    ds
seg000:9BA6		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9BAB		    mov	    byte ptr ds:loc_73+1, ah
seg000:9BAF		    pop	    ds
seg000:9BB0		    or	    ah,	ah
seg000:9BB2		    jz	    short locret_9BB5
seg000:9BB4		    stc
seg000:9BB5
seg000:9BB5 locret_9BB5:			    ; CODE XREF: sub_2A71+7141j
seg000:9BB5					    ; seg000:9E53j
seg000:9BB5		    retf    2
seg000:9BB5 ; END OF FUNCTION CHUNK FOR	sub_2A71
seg000:9BB8
seg000:9BB8 ; =============== S	U B R O	U T I N	E =======================================
seg000:9BB8
seg000:9BB8
seg000:9BB8 sub_9BB8	    proc near		    ; CODE XREF: sub_2A71+70FAp
seg000:9BB8		    push    ax
seg000:9BB9		    push    dx
seg000:9BBA		    mov	    ah,	18h
seg000:9BBC		    pushf
seg000:9BBD		    call    far	ptr 0F000h:2A71h
seg000:9BC2		    pushf
seg000:9BC3		    test    word ptr cs:[bx+512h], 1000h
seg000:9BCA		    jz	    short loc_9BEC
seg000:9BCC		    push    ds
seg000:9BCD		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9BD2		    out	    0FBh, al	    ; AT 80287 data.
seg000:9BD2					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9BD4		    pushf
seg000:9BD5		    inc	    byte ptr ds:loc_BB+4
seg000:9BD9		    popf
seg000:9BDA		    or	    word ptr cs:[bx+512h], 400h
seg000:9BE1		    pushf
seg000:9BE2		    dec	    byte ptr ds:loc_BB+4
seg000:9BE6		    jnz	    short loc_9BEA
seg000:9BE8		    out	    0F9h, al	    ; AT 80287 data.
seg000:9BE8					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9BEA
seg000:9BEA loc_9BEA:				    ; CODE XREF: sub_9BB8+2Ej
seg000:9BEA		    popf
seg000:9BEB		    pop	    ds
seg000:9BEC
seg000:9BEC loc_9BEC:				    ; CODE XREF: sub_9BB8+12j
seg000:9BEC		    popf
seg000:9BED		    pop	    dx
seg000:9BEE		    jnb	    short loc_9BF5
seg000:9BF0		    add	    sp,	2
seg000:9BF3		    stc
seg000:9BF4		    retn
seg000:9BF5 ; ---------------------------------------------------------------------------
seg000:9BF5
seg000:9BF5 loc_9BF5:				    ; CODE XREF: sub_9BB8+36j
seg000:9BF5		    pop	    ax
seg000:9BF6		    retn
seg000:9BF6 sub_9BB8	    endp
seg000:9BF6
seg000:9BF7 ; ---------------------------------------------------------------------------
seg000:9BF7
seg000:9BF7 loc_9BF7:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9BF7		    pop	    bx
seg000:9BF8		    jmp	    loc_2A99
seg000:9BFB
seg000:9BFB ; =============== S	U B R O	U T I N	E =======================================
seg000:9BFB
seg000:9BFB
seg000:9BFB sub_9BFB	    proc far		    ; CODE XREF: sub_2A71+7129j
seg000:9BFB					    ; DATA XREF: seg000:jump_table_?_0o
seg000:9BFB		    push    ax
seg000:9BFC		    push    cx
seg000:9BFD		    push    si
seg000:9BFE		    mov	    word ptr cs:loc_53E+1, offset return_?
seg000:9C05		    and	    word ptr cs:loc_50E, 0FFFDh
seg000:9C0B		    mov	    si,	offset reg_table_333
seg000:9C0E		    mov	    bx,	offset loc_9C14
seg000:9C11		    jmp	    load_reg_table
seg000:9C14 ; ---------------------------------------------------------------------------
seg000:9C14
seg000:9C14 loc_9C14:				    ; DATA XREF: sub_9BFB+13o
seg000:9C14		    in	    al,	0A1h	    ; Interrupt	Controller #2, 8259A
seg000:9C16		    and	    al,	0F7h
seg000:9C18		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:9C1A		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:9C1C		    and	    al,	0FBh
seg000:9C1E		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:9C20		    test    word ptr cs:loc_50E, 20h
seg000:9C27		    jz	    short loc_9C56
seg000:9C29		    push    dx
seg000:9C2A		    mov	    dx,	333h
seg000:9C2D		    mov	    al,	3
seg000:9C2F		    out	    dx,	al
seg000:9C30		    pop	    dx
seg000:9C31		    push    ds
seg000:9C32		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9C37		    out	    0FBh, al	    ; AT 80287 data.
seg000:9C37					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9C39		    pushf
seg000:9C3A		    inc	    byte ptr ds:loc_BB+4
seg000:9C3E		    popf
seg000:9C3F		    and	    word ptr cs:loc_50E, 0FFDFh
seg000:9C45		    pushf
seg000:9C46		    dec	    byte ptr ds:loc_BB+4
seg000:9C4A		    jnz	    short loc_9C4E
seg000:9C4C		    out	    0F9h, al	    ; AT 80287 data.
seg000:9C4C					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9C4E
seg000:9C4E loc_9C4E:				    ; CODE XREF: sub_9BFB+4Fj
seg000:9C4E		    popf
seg000:9C4F		    pop	    ds
seg000:9C50		    mov	    cx,	4E20h
seg000:9C53		    call    delay_doubleCX
seg000:9C56
seg000:9C56 loc_9C56:				    ; CODE XREF: sub_9BFB+2Cj
seg000:9C56		    pop	    si
seg000:9C57		    pop	    cx
seg000:9C58		    pop	    ax
seg000:9C59		    pop	    bx
seg000:9C5A		    test    word ptr cs:loc_50E, 8
seg000:9C61		    jnz	    short loc_9C66
seg000:9C63		    jmp	    loc_2A99
seg000:9C66 ; ---------------------------------------------------------------------------
seg000:9C66
seg000:9C66 loc_9C66:				    ; CODE XREF: sub_9BFB+66j
seg000:9C66		    xor	    ax,	ax
seg000:9C68		    jmp	    loc_9BA5
seg000:9C68 sub_9BFB	    endp
seg000:9C68
seg000:9C6B ; ---------------------------------------------------------------------------
seg000:9C6B
seg000:9C6B loc_9C6B:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9C6B		    mov	    bl,	8
seg000:9C6D		    jmp	    loc_9EC7
seg000:9C70 ; ---------------------------------------------------------------------------
seg000:9C70
seg000:9C70 loc_9C70:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9C70		    mov	    bl,	0Bh
seg000:9C72		    xor	    al,	al
seg000:9C74		    jmp	    loc_9EC7
seg000:9C77 ; ---------------------------------------------------------------------------
seg000:9C77
seg000:9C77 loc_9C77:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9C77		    mov	    bl,	0Ah
seg000:9C79		    jmp	    loc_9EC7
seg000:9C7C ; ---------------------------------------------------------------------------
seg000:9C7C
seg000:9C7C loc_9C7C:				    ; CODE XREF: seg000:9C83j
seg000:9C7C					    ; DATA XREF: seg000:jump_table_?_0o
seg000:9C7C		    test    word ptr cs:loc_50E, 2
seg000:9C83		    jnz	    short loc_9C7C
seg000:9C85		    push    ds
seg000:9C86		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9C8B		    out	    0FBh, al	    ; AT 80287 data.
seg000:9C8B					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9C8D		    pushf
seg000:9C8E		    inc	    byte ptr ds:loc_BB+4
seg000:9C92		    popf
seg000:9C93		    pop	    ds
seg000:9C94		    or	    word ptr cs:loc_50E, 10h
seg000:9C9A		    push    ds
seg000:9C9B		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9CA0		    pushf
seg000:9CA1		    dec	    byte ptr ds:loc_BB+4
seg000:9CA5		    jnz	    short loc_9CA9
seg000:9CA7		    out	    0F9h, al	    ; AT 80287 data.
seg000:9CA7					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9CA9
seg000:9CA9 loc_9CA9:				    ; CODE XREF: seg000:9CA5j
seg000:9CA9		    popf
seg000:9CAA		    pop	    ds
seg000:9CAB		    mov	    bl,	8
seg000:9CAD		    jmp	    loc_9EC7
seg000:9CB0 ; ---------------------------------------------------------------------------
seg000:9CB0
seg000:9CB0 loc_9CB0:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9CB0		    pop	    bx
seg000:9CB1		    xor	    ah,	ah
seg000:9CB3		    jmp	    loc_9BA5
seg000:9CB6 ; ---------------------------------------------------------------------------
seg000:9CB6
seg000:9CB6 loc_9CB6:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9CB6		    mov	    bl,	0
seg000:9CB8		    xor	    al,	al
seg000:9CBA		    jmp	    loc_9EC7
seg000:9CBD ; ---------------------------------------------------------------------------
seg000:9CBD
seg000:9CBD loc_9CBD:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9CBD		    mov	    bl,	dl
seg000:9CBF		    sub	    bl,	byte ptr cs:loc_50E+2
seg000:9CC4		    xor	    bh,	bh
seg000:9CC6		    shl	    bx,	1
seg000:9CC8		    shl	    bx,	1
seg000:9CCA		    add	    bx,	512h
seg000:9CCE		    mov	    ax,	cs:[bx]
seg000:9CD1		    and	    ax,	1000h
seg000:9CD4		    mov	    cl,	0Ch
seg000:9CD6		    shr	    ax,	cl
seg000:9CD8		    pop	    bx
seg000:9CD9		    xor	    ah,	ah
seg000:9CDB		    jmp	    loc_9BA5
seg000:9CDE ; ---------------------------------------------------------------------------
seg000:9CDE
seg000:9CDE loc_9CDE:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9CDE		    mov	    bl,	dl
seg000:9CE0		    sub	    bl,	byte ptr cs:loc_50E+2
seg000:9CE5		    xor	    bh,	bh
seg000:9CE7		    shl	    bx,	1
seg000:9CE9		    shl	    bx,	1
seg000:9CEB		    add	    bx,	512h
seg000:9CEF		    push    ds
seg000:9CF0		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9CF5		    mov	    dl,	byte ptr ds:loc_73+2
seg000:9CF9		    pop	    ds
seg000:9CFA		    test    word ptr cs:[bx], 400h
seg000:9CFF		    jnz	    short loc_9D37
seg000:9D01		    mov	    dh,	1
seg000:9D03		    mov	    cl,	cs:[bx+2]
seg000:9D07		    and	    cl,	7
seg000:9D0A		    shl	    dh,	cl
seg000:9D0C		    dec	    dh
seg000:9D0E		    mov	    cx,	cs:[bx+2]
seg000:9D12		    shr	    cx,	1
seg000:9D14		    shr	    cx,	1
seg000:9D16		    shr	    cx,	1
seg000:9D18		    sub	    cx,	3
seg000:9D1B		    xchg    ch,	cl
seg000:9D1D		    ror	    cl,	1
seg000:9D1F		    ror	    cl,	1
seg000:9D21		    and	    cl,	0C0h
seg000:9D24		    mov	    ah,	20h ; ' '
seg000:9D26		    test    word ptr cs:[bx], 4000h
seg000:9D2B		    jz	    short loc_9D2F
seg000:9D2D		    mov	    ah,	11h
seg000:9D2F
seg000:9D2F loc_9D2F:				    ; CODE XREF: seg000:9D2Bj
seg000:9D2F		    or	    cl,	ah
seg000:9D31
seg000:9D31 loc_9D31:				    ; CODE XREF: seg000:9D3Cj
seg000:9D31		    pop	    bx
seg000:9D32		    xor	    ah,	ah
seg000:9D34		    jmp	    loc_9BA5
seg000:9D37 ; ---------------------------------------------------------------------------
seg000:9D37
seg000:9D37 loc_9D37:				    ; CODE XREF: seg000:9CFFj
seg000:9D37		    mov	    dh,	3
seg000:9D39		    mov	    cx,	0FCD1h
seg000:9D3C		    jmp	    short loc_9D31
seg000:9D3E ; ---------------------------------------------------------------------------
seg000:9D3E
seg000:9D3E loc_9D3E:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9D3E		    pop	    bx
seg000:9D3F		    mov	    ah,	1
seg000:9D41		    jmp	    loc_9BA5
seg000:9D44 ; ---------------------------------------------------------------------------
seg000:9D44
seg000:9D44 loc_9D44:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9D44		    pop	    bx
seg000:9D45		    cmp	    dh,	0
seg000:9D48		    jnz	    short loc_9D50
seg000:9D4A		    test    cx,	0FFC0h
seg000:9D4E		    jz	    short loc_9D55
seg000:9D50
seg000:9D50 loc_9D50:				    ; CODE XREF: seg000:9D48j
seg000:9D50		    xor	    ah,	ah
seg000:9D52		    jmp	    loc_9BA5
seg000:9D55 ; ---------------------------------------------------------------------------
seg000:9D55
seg000:9D55 loc_9D55:				    ; CODE XREF: seg000:9D4Ej
seg000:9D55					    ; seg000:9DD3j
seg000:9D55		    push    ds
seg000:9D56		    push    es
seg000:9D57		    push    si
seg000:9D58		    push    di
seg000:9D59		    push    bx
seg000:9D5A		    push    cx
seg000:9D5B		    push    dx
seg000:9D5C		    push    bp
seg000:9D5D		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9D62		    out	    0FBh, al	    ; AT 80287 data.
seg000:9D62					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9D64		    pushf
seg000:9D65		    inc	    byte ptr ds:loc_BB+4
seg000:9D69		    popf
seg000:9D6A		    mov	    ax,	cs
seg000:9D6C		    mov	    ds,	ax
seg000:9D6E		    mov	    es,	ax
seg000:9D70		    mov	    bl,	dl
seg000:9D72		    sub	    bl,	byte ptr ds:loc_50E+2
seg000:9D76		    xor	    bh,	bh
seg000:9D78		    shl	    bx,	1
seg000:9D7A		    shl	    bx,	1
seg000:9D7C		    add	    bx,	512h
seg000:9D80		    mov	    bp,	bx
seg000:9D82		    mov	    byte ptr ds:loc_532, 4
seg000:9D87		    mov	    ax,	[bx]
seg000:9D89		    mov	    dl,	al
seg000:9D8B		    and	    dl,	7
seg000:9D8E		    and	    al,	0E0h
seg000:9D90		    or	    al,	8
seg000:9D92		    mov	    byte ptr ds:loc_532+1, al
seg000:9D95		    mov	    dh,	6
seg000:9D97		    mov	    word ptr ds:loc_534, 0
seg000:9D9D		    mov	    word ptr ds:loc_534+2, 0
seg000:9DA3		    mov	    si,	532h
seg000:9DA6		    mov	    di,	si
seg000:9DA8		    mov	    cx,	0Dh
seg000:9DAB		    mov	    bx,	0FFFFh
seg000:9DAE		    mov	    ah,	0
seg000:9DB0		    call    far	ptr 0F000h:91BCh
seg000:9DB5		    jnb	    short loc_9DD5
seg000:9DB7		    call    sub_A07B
seg000:9DBA		    jb	    short loc_9DD7
seg000:9DBC		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9DC1		    pushf
seg000:9DC2		    dec	    byte ptr ds:loc_BB+4
seg000:9DC6		    jnz	    short loc_9DCA
seg000:9DC8		    out	    0F9h, al	    ; AT 80287 data.
seg000:9DC8					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9DCA
seg000:9DCA loc_9DCA:				    ; CODE XREF: seg000:9DC6j
seg000:9DCA		    popf
seg000:9DCB		    pop	    bp
seg000:9DCC		    pop	    dx
seg000:9DCD		    pop	    cx
seg000:9DCE		    pop	    bx
seg000:9DCF		    pop	    di
seg000:9DD0		    pop	    si
seg000:9DD1		    pop	    es
seg000:9DD2		    pop	    ds
seg000:9DD3		    jmp	    short loc_9D55
seg000:9DD5 ; ---------------------------------------------------------------------------
seg000:9DD5
seg000:9DD5 loc_9DD5:				    ; CODE XREF: seg000:9DB5j
seg000:9DD5		    xor	    ah,	ah
seg000:9DD7
seg000:9DD7 loc_9DD7:				    ; CODE XREF: seg000:9DBAj
seg000:9DD7		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9DDC		    pushf
seg000:9DDD		    dec	    byte ptr ds:loc_BB+4
seg000:9DE1		    jnz	    short loc_9DE5
seg000:9DE3		    out	    0F9h, al	    ; AT 80287 data.
seg000:9DE3					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9DE5
seg000:9DE5 loc_9DE5:				    ; CODE XREF: seg000:9DE1j
seg000:9DE5		    popf
seg000:9DE6		    pop	    bp
seg000:9DE7		    pop	    dx
seg000:9DE8		    pop	    cx
seg000:9DE9		    pop	    bx
seg000:9DEA		    pop	    di
seg000:9DEB		    pop	    si
seg000:9DEC		    pop	    es
seg000:9DED		    pop	    ds
seg000:9DEE		    jmp	    loc_9BA5
seg000:9DF1 ; ---------------------------------------------------------------------------
seg000:9DF1
seg000:9DF1 loc_9DF1:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9DF1		    pop	    bx
seg000:9DF2		    mov	    bl,	dl
seg000:9DF4		    sub	    bl,	byte ptr cs:loc_50E+2
seg000:9DF9		    xor	    bh,	bh
seg000:9DFB		    shl	    bx,	1
seg000:9DFD		    shl	    bx,	1
seg000:9DFF		    test    word ptr cs:[bx+512h], 400h
seg000:9E06		    jnz	    short loc_9E56
seg000:9E08		    mov	    dx,	cs:[bx+514h]
seg000:9E0D		    mov	    cl,	dl
seg000:9E0F		    and	    cl,	7
seg000:9E12		    mov	    al,	1
seg000:9E14		    shl	    al,	cl
seg000:9E16		    mov	    cl,	al
seg000:9E18		    mov	    al,	20h ; ' '
seg000:9E1A		    test    word ptr cs:[bx+512h], 4000h
seg000:9E21		    jz	    short loc_9E25
seg000:9E23		    mov	    al,	11h
seg000:9E25
seg000:9E25 loc_9E25:				    ; CODE XREF: seg000:9E21j
seg000:9E25		    mul	    cl
seg000:9E27		    and	    dx,	1FF8h
seg000:9E2B		    shr	    dx,	1
seg000:9E2D		    shr	    dx,	1
seg000:9E2F		    shr	    dx,	1
seg000:9E31		    sub	    dx,	3
seg000:9E34		    mul	    dx
seg000:9E36		    xchg    ax,	dx
seg000:9E37		    mov	    cx,	ax
seg000:9E39
seg000:9E39 loc_9E39:				    ; CODE XREF: seg000:9E62j
seg000:9E39		    mov	    ah,	3
seg000:9E3B		    test    word ptr cs:[bx+512h], 1000h
seg000:9E42		    jz	    short loc_9E46
seg000:9E44		    mov	    ah,	2
seg000:9E46
seg000:9E46 loc_9E46:				    ; CODE XREF: seg000:9E42j
seg000:9E46		    push    ds
seg000:9E47		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9E4C		    mov	    byte ptr ds:loc_73+1, 0
seg000:9E51		    pop	    ds
seg000:9E52		    clc
seg000:9E53		    jmp	    locret_9BB5
seg000:9E56 ; ---------------------------------------------------------------------------
seg000:9E56
seg000:9E56 loc_9E56:				    ; CODE XREF: seg000:9E06j
seg000:9E56		    mov	    cx,	44h ; 'D'
seg000:9E59		    mov	    ax,	3FDh
seg000:9E5C		    mul	    cx
seg000:9E5E		    mov	    cx,	dx
seg000:9E60		    mov	    dx,	ax
seg000:9E62		    jmp	    short loc_9E39
seg000:9E64 ; ---------------------------------------------------------------------------
seg000:9E64
seg000:9E64 loc_9E64:				    ; DATA XREF: seg000:jump_table_?_0o
seg000:9E64		    pop	    bx
seg000:9E65		    push    ax
seg000:9E66		    push    bx
seg000:9E67		    push    cx
seg000:9E68		    push    dx
seg000:9E69		    push    si
seg000:9E6A		    push    di
seg000:9E6B		    push    ds
seg000:9E6C		    push    es
seg000:9E6D		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9E72		    out	    0FBh, al	    ; AT 80287 data.
seg000:9E72					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9E74		    pushf
seg000:9E75		    inc	    byte ptr ds:loc_BB+4
seg000:9E79		    popf
seg000:9E7A		    mov	    ax,	cs
seg000:9E7C		    mov	    ds,	ax
seg000:9E7E		    mov	    es,	ax
seg000:9E80		    mov	    al,	dl
seg000:9E82		    sub	    al,	byte ptr ds:loc_50E+2
seg000:9E86		    xor	    ah,	ah
seg000:9E88		    shl	    ax,	1
seg000:9E8A		    shl	    ax,	1
seg000:9E8C		    mov	    di,	ax
seg000:9E8E		    add	    di,	512h
seg000:9E92		    mov	    dx,	[di]
seg000:9E94		    mov	    al,	dl
seg000:9E96		    and	    dl,	7
seg000:9E99		    and	    al,	0E0h
seg000:9E9B		    mov	    cl,	5
seg000:9E9D		    shr	    al,	cl
seg000:9E9F		    call    sub_999D
seg000:9EA2		    jb	    short loc_9EA8
seg000:9EA4		    and	    word ptr [di], 0FBFFh
seg000:9EA8
seg000:9EA8 loc_9EA8:				    ; CODE XREF: seg000:9EA2j
seg000:9EA8		    mov	    ds,	word ptr ds:loc_C5+1
seg000:9EAC		    pushf
seg000:9EAD		    dec	    byte ptr ds:loc_BB+4
seg000:9EB1		    jnz	    short loc_9EB5
seg000:9EB3		    out	    0F9h, al	    ; AT 80287 data.
seg000:9EB3					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9EB5
seg000:9EB5 loc_9EB5:				    ; CODE XREF: seg000:9EB1j
seg000:9EB5		    popf
seg000:9EB6		    pop	    es
seg000:9EB7		    pop	    ds
seg000:9EB8		    pop	    di
seg000:9EB9		    pop	    si
seg000:9EBA		    pop	    dx
seg000:9EBB		    pop	    cx
seg000:9EBC		    pop	    bx
seg000:9EBD		    pop	    ax
seg000:9EBE		    mov	    ah,	0
seg000:9EC0		    jnb	    short loc_9EC4
seg000:9EC2		    mov	    ah,	80h ; ''
seg000:9EC4
seg000:9EC4 loc_9EC4:				    ; CODE XREF: seg000:9EC0j
seg000:9EC4		    jmp	    loc_9BA5
seg000:9EC7 ; ---------------------------------------------------------------------------
seg000:9EC7
seg000:9EC7 loc_9EC7:				    ; CODE XREF: seg000:9C6Dj
seg000:9EC7					    ; seg000:9C74j ...
seg000:9EC7		    push    ds
seg000:9EC8		    mov	    ds,	word ptr cs:loc_C5+1
seg000:9ECD		    out	    0FBh, al	    ; AT 80287 data.
seg000:9ECD					    ; 286 sends	opcodes	& operands and receives	results.
seg000:9ECF		    pushf
seg000:9ED0		    inc	    byte ptr ds:loc_BB+4
seg000:9ED4		    popf
seg000:9ED5		    pop	    ds
seg000:9ED6		    mov	    byte ptr cs:loc_532, bl
seg000:9EDB		    pop	    bx
seg000:9EDC
seg000:9EDC loc_9EDC:				    ; CODE XREF: seg000:A02Aj
seg000:9EDC		    push    es
seg000:9EDD		    push    ds
seg000:9EDE		    push    si
seg000:9EDF		    push    di
seg000:9EE0		    push    cx
seg000:9EE1		    push    dx
seg000:9EE2		    push    bx
seg000:9EE3		    push    bp
seg000:9EE4		    cmp	    byte ptr cs:loc_532, 0Bh
seg000:9EEA		    jz	    short loc_9EFB
seg000:9EEC		    cmp	    byte ptr cs:loc_532, 0
seg000:9EF2		    jz	    short loc_9EFB
seg000:9EF4		    or	    al,	al
seg000:9EF6		    jnz	    short loc_9EFB
seg000:9EF8		    jmp	    loc_A02D
seg000:9EFB ; ---------------------------------------------------------------------------
seg000:9EFB
seg000:9EFB loc_9EFB:				    ; CODE XREF: seg000:9EEAj
seg000:9EFB					    ; seg000:9EF2j ...
seg000:9EFB		    xor	    ah,	ah
seg000:9EFD		    mov	    word ptr cs:loc_534+2, ax
seg000:9F01		    mov	    al,	dl
seg000:9F03		    sub	    al,	byte ptr cs:loc_50E+2
seg000:9F08		    mov	    bp,	ax
seg000:9F0A		    shl	    bp,	1
seg000:9F0C		    shl	    bp,	1
seg000:9F0E		    add	    bp,	512h
seg000:9F12		    mov	    al,	cs:[bp+0]
seg000:9F16		    and	    al,	0E0h
seg000:9F18		    mov	    byte ptr cs:loc_532+1, al
seg000:9F1C		    mov	    word ptr cs:loc_534, 0
seg000:9F23		    cmp	    byte ptr cs:loc_532, 0
seg000:9F29		    jnz	    short loc_9F2E
seg000:9F2B		    jmp	    short loc_9F9C
seg000:9F2D ; ---------------------------------------------------------------------------
seg000:9F2D		    nop
seg000:9F2E
seg000:9F2E loc_9F2E:				    ; CODE XREF: seg000:9F29j
seg000:9F2E		    mov	    ah,	cl
seg000:9F30		    mov	    al,	ch
seg000:9F32		    and	    ah,	0C0h
seg000:9F35		    rol	    ah,	1
seg000:9F37		    rol	    ah,	1
seg000:9F39		    push    bx
seg000:9F3A		    push    cx
seg000:9F3B		    mov	    bh,	dh
seg000:9F3D		    mov	    cl,	cs:[bp+2]
seg000:9F41		    and	    cl,	7
seg000:9F44		    mov	    dx,	11h
seg000:9F47		    test    word ptr cs:[bp+0],	4000h
seg000:9F4D		    jnz	    short loc_9F52
seg000:9F4F		    mov	    dx,	20h ; ' '
seg000:9F52
seg000:9F52 loc_9F52:				    ; CODE XREF: seg000:9F4Dj
seg000:9F52		    shl	    dx,	cl
seg000:9F54		    pop	    cx
seg000:9F55		    mov	    ch,	bh
seg000:9F57		    pop	    bx
seg000:9F58		    mul	    dx
seg000:9F5A		    and	    cl,	3Fh
seg000:9F5D		    dec	    cl
seg000:9F5F		    add	    al,	cl
seg000:9F61		    adc	    ah,	0
seg000:9F64		    adc	    dx,	0
seg000:9F67		    xchg    ax,	cx
seg000:9F68		    mov	    al,	11h
seg000:9F6A		    test    word ptr cs:[bp+0],	4000h
seg000:9F70		    jnz	    short loc_9F74
seg000:9F72		    mov	    al,	20h ; ' '
seg000:9F74
seg000:9F74 loc_9F74:				    ; CODE XREF: seg000:9F70j
seg000:9F74		    mul	    ah
seg000:9F76		    add	    cx,	ax
seg000:9F78		    adc	    dx,	0
seg000:9F7B		    mov	    ax,	cx
seg000:9F7D		    mov	    ch,	dl
seg000:9F7F		    mov	    cl,	cs:[bp+1]
seg000:9F83		    and	    cl,	3
seg000:9F86		    jz	    short loc_9F91
seg000:9F88
seg000:9F88 loc_9F88:				    ; CODE XREF: seg000:9F8Fj
seg000:9F88		    clc
seg000:9F89		    rcl	    ax,	1
seg000:9F8B		    rcl	    ch,	1
seg000:9F8D		    dec	    cl
seg000:9F8F		    jnz	    short loc_9F88
seg000:9F91
seg000:9F91 loc_9F91:				    ; CODE XREF: seg000:9F86j
seg000:9F91		    or	    byte ptr cs:loc_532+1, ch
seg000:9F96		    xchg    ah,	al
seg000:9F98		    mov	    word ptr cs:loc_534, ax
seg000:9F9C
seg000:9F9C loc_9F9C:				    ; CODE XREF: seg000:9F2Bj
seg000:9F9C		    test    word ptr cs:loc_50E, 10h
seg000:9FA3		    jz	    short loc_9FA7
seg000:9FA5		    xor	    bx,	bx
seg000:9FA7
seg000:9FA7 loc_9FA7:				    ; CODE XREF: seg000:9FA3j
seg000:9FA7		    mov	    ax,	es
seg000:9FA9		    mov	    si,	bx
seg000:9FAB		    mov	    cl,	4
seg000:9FAD		    shr	    bx,	cl
seg000:9FAF		    add	    ax,	bx
seg000:9FB1		    mov	    ds,	ax
seg000:9FB3		    and	    si,	0Fh
seg000:9FB6		    mov	    di,	532h
seg000:9FB9		    push    cs
seg000:9FBA		    pop	    es
seg000:9FBB		    mov	    ax,	200h
seg000:9FBE		    mov	    cl,	cs:[bp+1]
seg000:9FC2		    and	    cl,	3
seg000:9FC5		    shr	    ax,	cl
seg000:9FC7		    mov	    dx,	ax
seg000:9FC9		    mov	    al,	byte ptr cs:loc_534+2
seg000:9FCD		    shl	    al,	cl
seg000:9FCF		    mov	    byte ptr cs:loc_534+2, al
seg000:9FD3		    xor	    ah,	ah
seg000:9FD5		    mul	    dx
seg000:9FD7		    mov	    cx,	ax
seg000:9FD9		    mov	    dh,	6
seg000:9FDB		    mov	    dl,	cs:[bp+0]
seg000:9FDF		    and	    dl,	7
seg000:9FE2		    xor	    bx,	bx
seg000:9FE4		    mov	    ah,	1
seg000:9FE6		    cmp	    byte ptr cs:loc_532, 8
seg000:9FEC		    jz	    short loc_9FFA
seg000:9FEE		    mov	    ah,	2
seg000:9FF0		    cmp	    byte ptr cs:loc_532, 0Ah
seg000:9FF6		    jz	    short loc_9FFA
seg000:9FF8		    mov	    ah,	0
seg000:9FFA
seg000:9FFA loc_9FFA:				    ; CODE XREF: seg000:9FECj
seg000:9FFA					    ; seg000:9FF6j
seg000:9FFA		    call    far	ptr 0F000h:91BCh
seg000:9FFF		    jnb	    short loc_A02D
seg000:A001		    mov	    cl,	byte ptr cs:loc_534+2
seg000:A006		    mov	    ch,	byte ptr cs:loc_532
seg000:A00B		    push    cx
seg000:A00C		    call    sub_A07B
seg000:A00F		    pop	    cx
seg000:A010		    mov	    byte ptr cs:loc_532, ch
seg000:A015		    jb	    short loc_A02F
seg000:A017		    mov	    al,	cl
seg000:A019		    mov	    cl,	cs:[bp+1]
seg000:A01D		    and	    cl,	3
seg000:A020		    shr	    al,	cl
seg000:A022		    pop	    bp
seg000:A023		    pop	    bx
seg000:A024		    pop	    dx
seg000:A025		    pop	    cx
seg000:A026		    pop	    di
seg000:A027		    pop	    si
seg000:A028		    pop	    ds
seg000:A029		    pop	    es
seg000:A02A		    jmp	    loc_9EDC
seg000:A02D ; ---------------------------------------------------------------------------
seg000:A02D
seg000:A02D loc_A02D:				    ; CODE XREF: seg000:9EF8j
seg000:A02D					    ; seg000:9FFFj
seg000:A02D		    xor	    ah,	ah
seg000:A02F
seg000:A02F loc_A02F:				    ; CODE XREF: seg000:A015j
seg000:A02F		    jb	    short loc_A049
seg000:A031		    pushf
seg000:A032		    cmp	    byte ptr cs:loc_532, 0
seg000:A038		    jnz	    short loc_A048
seg000:A03A		    test    word ptr cs:[bp+0],	400h
seg000:A040		    jz	    short loc_A048
seg000:A042		    popf
seg000:A043		    stc
seg000:A044		    mov	    ah,	6
seg000:A046		    jmp	    short loc_A049
seg000:A048 ; ---------------------------------------------------------------------------
seg000:A048
seg000:A048 loc_A048:				    ; CODE XREF: seg000:A038j
seg000:A048					    ; seg000:A040j
seg000:A048		    popf
seg000:A049
seg000:A049 loc_A049:				    ; CODE XREF: seg000:loc_A02Fj
seg000:A049					    ; seg000:A046j
seg000:A049		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A04E		    pushf
seg000:A04F		    dec	    byte ptr ds:loc_BB+4
seg000:A053		    jnz	    short loc_A057
seg000:A055		    out	    0F9h, al	    ; AT 80287 data.
seg000:A055					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A057
seg000:A057 loc_A057:				    ; CODE XREF: seg000:A053j
seg000:A057		    popf
seg000:A058		    pop	    bp
seg000:A059		    pop	    bx
seg000:A05A		    pop	    dx
seg000:A05B		    pop	    cx
seg000:A05C		    pop	    di
seg000:A05D		    pop	    si
seg000:A05E		    pop	    ds
seg000:A05F		    pop	    es
seg000:A060		    jmp	    loc_9BA5
seg000:A060 ; ---------------------------------------------------------------------------
seg000:A063 stru_A063	    compare_pair < 1, 11h>  ; 0	; DATA XREF: sub_A07B:loc_A0E0o
seg000:A065		    compare_pair <2, 80h>
seg000:A067		    compare_pair <3, 10h>
seg000:A069		    compare_pair <4, 20h>
seg000:A06B		    compare_pair <5, 7>
seg000:A06D		    compare_pair <6, 80h>
seg000:A06F		    compare_pair <7, 3>
seg000:A071		    db 0FFh
seg000:A072 stru_A072	    compare_pair < 2, 80h>  ; 0	; DATA XREF: sub_A07B:loc_A0EAo
seg000:A074		    compare_pair <6, 80h>
seg000:A076		    compare_pair <4, 20h>
seg000:A078		    compare_pair <9, 20h>
seg000:A07A		    db 0FFh
seg000:A07B
seg000:A07B ; =============== S	U B R O	U T I N	E =======================================
seg000:A07B
seg000:A07B
seg000:A07B sub_A07B	    proc near		    ; CODE XREF: seg000:9DB7p
seg000:A07B					    ; seg000:A00Cp
seg000:A07B		    cmp	    ah,	0Bh
seg000:A07E		    jz	    short loc_A0C6
seg000:A080		    cmp	    ah,	1
seg000:A083		    jnz	    short loc_A0EA
seg000:A085		    cmp	    bx,	800h
seg000:A089		    jz	    short loc_A0C6
seg000:A08B		    cmp	    bx,	200h
seg000:A08F		    jnz	    short loc_A0EA
seg000:A091		    mov	    dl,	cs:[bp+0]
seg000:A095		    mov	    al,	dl
seg000:A097		    and	    dl,	7
seg000:A09A		    and	    al,	0E0h
seg000:A09C		    mov	    cl,	5
seg000:A09E		    shr	    al,	cl
seg000:A0A0		    push    ds
seg000:A0A1		    mov	    cx,	0F000h
seg000:A0A4		    mov	    ds,	cx
seg000:A0A6		    assume ds:nothing
seg000:A0A6		    call    sub_9ADB
seg000:A0A9		    pop	    ds
seg000:A0AA		    assume ds:nothing
seg000:A0AA		    jb	    short loc_A0EA
seg000:A0AC		    cmp	    byte ptr cs:loc_534, 6
seg000:A0B2		    jnz	    short loc_A0E0
seg000:A0B4		    cmp	    byte ptr cs:loc_53E, 28h ; '('
seg000:A0BA		    jz	    short loc_A0D0
seg000:A0BC		    cmp	    byte ptr cs:loc_53E, 29h ; ')'
seg000:A0C2		    jnz	    short loc_A0E0
seg000:A0C4		    jmp	    short loc_A0CE
seg000:A0C6 ; ---------------------------------------------------------------------------
seg000:A0C6
seg000:A0C6 loc_A0C6:				    ; CODE XREF: sub_A07B+3j
seg000:A0C6					    ; sub_A07B+Ej
seg000:A0C6		    push    cx
seg000:A0C7		    mov	    cx,	2EEh
seg000:A0CA		    call    delay_doubleCX
seg000:A0CD		    pop	    cx
seg000:A0CE
seg000:A0CE loc_A0CE:				    ; CODE XREF: sub_A07B+49j
seg000:A0CE		    clc
seg000:A0CF		    retn
seg000:A0D0 ; ---------------------------------------------------------------------------
seg000:A0D0
seg000:A0D0 loc_A0D0:				    ; CODE XREF: sub_A07B+3Fj
seg000:A0D0		    or	    word ptr cs:[bp+0],	400h
seg000:A0D6		    and	    word ptr cs:[bp+0],	0DFFFh
seg000:A0DC		    mov	    ah,	6
seg000:A0DE		    stc
seg000:A0DF		    retn
seg000:A0E0 ; ---------------------------------------------------------------------------
seg000:A0E0
seg000:A0E0 loc_A0E0:				    ; CODE XREF: sub_A07B+37j
seg000:A0E0					    ; sub_A07B+47j
seg000:A0E0		    mov	    si,	offset stru_A063
seg000:A0E3		    mov	    ah,	byte ptr cs:loc_534
seg000:A0E8		    jmp	    short loc_A0F8
seg000:A0EA ; ---------------------------------------------------------------------------
seg000:A0EA
seg000:A0EA loc_A0EA:				    ; CODE XREF: sub_A07B+8j
seg000:A0EA					    ; sub_A07B+14j ...
seg000:A0EA		    mov	    si,	offset stru_A072
seg000:A0ED		    cmp	    ah,	6
seg000:A0F0		    jz	    short loc_A0F8
seg000:A0F2		    or	    word ptr cs:loc_50E, 20h
seg000:A0F8
seg000:A0F8 loc_A0F8:				    ; CODE XREF: sub_A07B+6Dj
seg000:A0F8					    ; sub_A07B+75j ...
seg000:A0F8		    cmp	    byte ptr cs:[si], 0FFh
seg000:A0FC		    jz	    short loc_A108
seg000:A0FE		    cmp	    cs:[si], ah
seg000:A101		    jz	    short loc_A10C
seg000:A103		    add	    si,	2
seg000:A106		    jmp	    short loc_A0F8
seg000:A108 ; ---------------------------------------------------------------------------
seg000:A108
seg000:A108 loc_A108:				    ; CODE XREF: sub_A07B+81j
seg000:A108		    mov	    ah,	0BBh ; '»'
seg000:A10A		    stc
seg000:A10B		    retn
seg000:A10C ; ---------------------------------------------------------------------------
seg000:A10C
seg000:A10C loc_A10C:				    ; CODE XREF: sub_A07B+86j
seg000:A10C		    mov	    ah,	cs:[si+1]
seg000:A110		    stc
seg000:A111		    retn
seg000:A111 sub_A07B	    endp
seg000:A111
seg000:A111 ; ---------------------------------------------------------------------------
seg000:A112 word_A112	    dw 0CBh		    ; DATA XREF: sub_93ED:loc_9401o
seg000:A112					    ; sub_98A5+2o
seg000:A114
seg000:A114 ; =============== S	U B R O	U T I N	E =======================================
seg000:A114
seg000:A114
seg000:A114 sub_A114	    proc far		    ; CODE XREF: sub_F859j
seg000:A114
seg000:A114 ; FUNCTION CHUNK AT	seg000:6EBC SIZE 00000039 BYTES
seg000:A114 ; FUNCTION CHUNK AT	seg000:A171 SIZE 0000000C BYTES
seg000:A114 ; FUNCTION CHUNK AT	seg000:A1BD SIZE 00000065 BYTES
seg000:A114 ; FUNCTION CHUNK AT	seg000:A25F SIZE 00000033 BYTES
seg000:A114 ; FUNCTION CHUNK AT	seg000:A293 SIZE 00000025 BYTES
seg000:A114 ; FUNCTION CHUNK AT	seg000:A387 SIZE 00000050 BYTES
seg000:A114 ; FUNCTION CHUNK AT	seg000:A3DD SIZE 0000010E BYTES
seg000:A114
seg000:A114		    sti
seg000:A115		    cld
seg000:A116		    push    ds
seg000:A117		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A11C		    out	    0FBh, al	    ; AT 80287 data.
seg000:A11C					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A11E		    pushf
seg000:A11F		    inc	    byte ptr ds:loc_BB+4
seg000:A123		    popf
seg000:A124		    pop	    ds
seg000:A125		    cmp	    ah,	0E6h
seg000:A128		    ja	    short loc_A166
seg000:A12A		    cmp	    ah,	0E2h
seg000:A12D		    jb	    short loc_A134
seg000:A12F		    sub	    ah,	51h
seg000:A132		    jmp	    short loc_A151
seg000:A134 ; ---------------------------------------------------------------------------
seg000:A134
seg000:A134 loc_A134:				    ; CODE XREF: sub_A114+19j
seg000:A134		    cmp	    ah,	0C0h
seg000:A137		    jnz	    short loc_A13D
seg000:A139		    mov	    ah,	96h
seg000:A13B		    jmp	    short loc_A151
seg000:A13D ; ---------------------------------------------------------------------------
seg000:A13D
seg000:A13D loc_A13D:				    ; CODE XREF: sub_A114+23j
seg000:A13D		    cmp	    ah,	80h
seg000:A140		    jb	    short loc_A166
seg000:A142		    cmp	    ah,	92h
seg000:A145		    jnb	    short loc_A166
seg000:A147		    cmp	    ah,	91h
seg000:A14A		    jz	    short loc_A176
seg000:A14C		    cmp	    ah,	89h
seg000:A14F		    jz	    short loc_A163
seg000:A151
seg000:A151 loc_A151:				    ; CODE XREF: sub_A114+1Ej
seg000:A151					    ; sub_A114+27j
seg000:A151		    push    bp
seg000:A152		    push    ax
seg000:A153		    mov	    al,	ah
seg000:A155		    xor	    ah,	ah
seg000:A157		    sub	    al,	80h
seg000:A159		    shl	    ax,	1
seg000:A15B		    mov	    bp,	ax
seg000:A15D		    pop	    ax
seg000:A15E		    jmp	    cs:off_A18F[bp]
seg000:A163 ; ---------------------------------------------------------------------------
seg000:A163
seg000:A163 loc_A163:				    ; CODE XREF: sub_A114+3Bj
seg000:A163		    jmp	    loc_6EBC
seg000:A166 ; ---------------------------------------------------------------------------
seg000:A166
seg000:A166 loc_A166:				    ; CODE XREF: sub_A114+14j
seg000:A166					    ; sub_A114+2Cj ...
seg000:A166		    push    bp
seg000:A167		    jmp	    near ptr end_interrupt?
seg000:A167 sub_A114	    endp ; sp-analysis failed
seg000:A167
seg000:A16A ; ---------------------------------------------------------------------------
seg000:A16A ; START OF FUNCTION	CHUNK FOR end_interrupt?
seg000:A16A
seg000:A16A loc_A16A:				    ; CODE XREF: sub_A114+ACj
seg000:A16A					    ; sub_A114+B5j ...
seg000:A16A		    pop	    bp
seg000:A16B		    call    sub_A17D
seg000:A16E		    retf    2
seg000:A16E ; END OF FUNCTION CHUNK FOR	end_interrupt?
seg000:A171 ; ---------------------------------------------------------------------------
seg000:A171 ; START OF FUNCTION	CHUNK FOR sub_A114
seg000:A171
seg000:A171 loc_A171:				    ; CODE XREF: sub_A114+27Fj
seg000:A171					    ; sub_A114+2EDj
seg000:A171		    pop	    bp
seg000:A172		    call    sub_A17D
seg000:A175		    iret
seg000:A176 ; ---------------------------------------------------------------------------
seg000:A176
seg000:A176 loc_A176:				    ; CODE XREF: sub_A114+36j
seg000:A176		    sub	    ah,	91h
seg000:A179		    call    sub_A17D
seg000:A17C		    iret
seg000:A17C ; END OF FUNCTION CHUNK FOR	sub_A114
seg000:A17D
seg000:A17D ; =============== S	U B R O	U T I N	E =======================================
seg000:A17D
seg000:A17D
seg000:A17D sub_A17D	    proc near		    ; CODE XREF: end_interrupt?-26Cp
seg000:A17D					    ; sub_A114+5Ep ...
seg000:A17D		    push    ds
seg000:A17E		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A183		    pushf
seg000:A184		    dec	    byte ptr ds:loc_BB+4
seg000:A188		    jnz	    short loc_A18C
seg000:A18A		    out	    0F9h, al	    ; AT 80287 data.
seg000:A18A					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A18C
seg000:A18C loc_A18C:				    ; CODE XREF: sub_A17D+Bj
seg000:A18C		    popf
seg000:A18D		    pop	    ds
seg000:A18E		    retn
seg000:A18E sub_A17D	    endp
seg000:A18E
seg000:A18E ; ---------------------------------------------------------------------------
seg000:A18F off_A18F	    dw offset loc_A3DD	    ; DATA XREF: sub_A114+4Ar
seg000:A191		    dw offset loc_A3DD
seg000:A193		    dw offset loc_A3DD
seg000:A195		    dw offset loc_A1CB
seg000:A197		    dw offset int15h84hjoy
seg000:A199		    dw offset int15h_?
seg000:A19B		    dw offset loc_A1D5
seg000:A19D		    dw offset loc_A25F
seg000:A19F		    dw offset loc_A387
seg000:A1A1		    dw offset loc_6EBC
seg000:A1A3		    dw offset end_interrupt?
seg000:A1A5		    dw offset end_interrupt?
seg000:A1A7		    dw offset end_interrupt?
seg000:A1A9		    dw offset end_interrupt?
seg000:A1AB		    dw offset end_interrupt?
seg000:A1AD		    dw offset end_interrupt?
seg000:A1AF		    dw offset loc_A3DD
seg000:A1B1		    dw offset loc_A3E2
seg000:A1B3		    dw offset loc_A404
seg000:A1B5		    dw offset loc_A45F
seg000:A1B7		    dw offset loc_A46D
seg000:A1B9		    dw offset loc_A4E1
seg000:A1BB		    dw offset loc_A1C2
seg000:A1BD ; ---------------------------------------------------------------------------
seg000:A1BD ; START OF FUNCTION	CHUNK FOR sub_A114
seg000:A1BD
seg000:A1BD int15h84hjoy:			    ; CODE XREF: sub_A114+4Aj
seg000:A1BD					    ; DATA XREF: seg000:A197o
seg000:A1BD		    call    joystick
seg000:A1C0		    jmp	    short loc_A16A
seg000:A1C2 ; ---------------------------------------------------------------------------
seg000:A1C2
seg000:A1C2 loc_A1C2:				    ; CODE XREF: sub_A114+4Aj
seg000:A1C2					    ; DATA XREF: seg000:A1BBo
seg000:A1C2		    mov	    bx,	0E6F5h
seg000:A1C5		    push    cs
seg000:A1C6		    pop	    es
seg000:A1C7		    xor	    ah,	ah
seg000:A1C9		    jmp	    short loc_A16A
seg000:A1CB ; ---------------------------------------------------------------------------
seg000:A1CB
seg000:A1CB loc_A1CB:				    ; CODE XREF: sub_A114+4Aj
seg000:A1CB					    ; DATA XREF: seg000:A195o
seg000:A1CB		    call    sub_A222
seg000:A1CE		    jnb	    short loc_A1D3
seg000:A1D0		    mov	    ax,	0
seg000:A1D3
seg000:A1D3 loc_A1D3:				    ; CODE XREF: sub_A114+BAj
seg000:A1D3		    jmp	    short loc_A16A
seg000:A1D5 ; ---------------------------------------------------------------------------
seg000:A1D5
seg000:A1D5 loc_A1D5:				    ; CODE XREF: sub_A114+4Aj
seg000:A1D5					    ; DATA XREF: seg000:A19Bo
seg000:A1D5		    push    es
seg000:A1D6		    push    dx
seg000:A1D7		    push    cx
seg000:A1D8		    push    bx
seg000:A1D9		    mov	    es,	word ptr cs:loc_48+1
seg000:A1DE		    mov	    bx,	0A0h
seg000:A1E1		    push    ax
seg000:A1E2		    call    sub_A222
seg000:A1E5		    jnb	    short loc_A1EC
seg000:A1E7		    pop	    ax
seg000:A1E8		    mov	    ah,	0
seg000:A1EA		    jmp	    short loc_A21B
seg000:A1EC ; ---------------------------------------------------------------------------
seg000:A1EC
seg000:A1EC loc_A1EC:				    ; CODE XREF: sub_A114+D1j
seg000:A1EC		    xchg    cx,	dx
seg000:A1EE
seg000:A1EE loc_A1EE:				    ; CODE XREF: sub_A114+DEj
seg000:A1EE					    ; sub_A114+E5j
seg000:A1EE		    test    byte ptr es:[bx], 80h
seg000:A1F2		    loope   loc_A1EE
seg000:A1F4		    jnz	    short loc_A1FB
seg000:A1F6		    sub	    dx,	1
seg000:A1F9		    jnb	    short loc_A1EE
seg000:A1FB
seg000:A1FB loc_A1FB:				    ; CODE XREF: sub_A114+E0j
seg000:A1FB		    mov	    byte ptr es:[bx], 0
seg000:A1FF		    pop	    bx
seg000:A200		    push    ax
seg000:A201		    mov	    al,	0Bh
seg000:A203		    mov	    ah,	al
seg000:A205		    call    read_cmos
seg000:A208		    test    al,	40h
seg000:A20A		    jz	    short loc_A219
seg000:A20C		    and	    al,	0BFh
seg000:A20E		    xchg    ah,	al
seg000:A210		    call    write_cmos
seg000:A213		    mov	    byte ptr es:loc_9F+1, 0
seg000:A219
seg000:A219 loc_A219:				    ; CODE XREF: sub_A114+F6j
seg000:A219		    pop	    ax
seg000:A21A		    clc
seg000:A21B
seg000:A21B loc_A21B:				    ; CODE XREF: sub_A114+D6j
seg000:A21B		    pop	    bx
seg000:A21C		    pop	    cx
seg000:A21D		    pop	    dx
seg000:A21E		    pop	    es
seg000:A21F		    jmp	    loc_A16A
seg000:A21F ; END OF FUNCTION CHUNK FOR	sub_A114
seg000:A222
seg000:A222 ; =============== S	U B R O	U T I N	E =======================================
seg000:A222
seg000:A222
seg000:A222 sub_A222	    proc near		    ; CODE XREF: sub_A114:loc_A1CBp
seg000:A222					    ; sub_A114+CEp
seg000:A222		    push    ds
seg000:A223		    mov	    ds,	word ptr cs:loc_48+1
seg000:A228		    test    byte ptr ds:loc_9F+1, 1
seg000:A22D		    stc
seg000:A22E		    jnz	    short loc_A25D
seg000:A230		    or	    byte ptr ds:loc_9F+1, 1
seg000:A235		    mov	    word ptr ds:loc_97+1, bx
seg000:A239		    mov	    word ptr ds:loc_99+1, es
seg000:A23D		    mov	    word ptr ds:loc_9B+1, dx
seg000:A241		    mov	    word ptr ds:loc_9D+1, cx
seg000:A245		    mov	    al,	0Bh
seg000:A247		    mov	    ah,	al
seg000:A249		    call    read_cmos
seg000:A24C		    or	    al,	40h
seg000:A24E		    xchg    ah,	al
seg000:A250		    call    write_cmos
seg000:A253		    in	    al,	0A1h	    ; Interrupt	Controller #2, 8259A
seg000:A255		    and	    al,	0FEh
seg000:A257		    out	    0A1h, al	    ; Interrupt	Controller #2, 8259A
seg000:A259		    mov	    al,	ah
seg000:A25B		    xor	    ah,	ah
seg000:A25D
seg000:A25D loc_A25D:				    ; CODE XREF: sub_A222+Cj
seg000:A25D		    pop	    ds
seg000:A25E		    retn
seg000:A25E sub_A222	    endp
seg000:A25E
seg000:A25F ; ---------------------------------------------------------------------------
seg000:A25F ; START OF FUNCTION	CHUNK FOR sub_A114
seg000:A25F
seg000:A25F loc_A25F:				    ; CODE XREF: sub_A114+4Aj
seg000:A25F					    ; DATA XREF: seg000:A19Do
seg000:A25F		    push    ax
seg000:A260		    push    bp
seg000:A261		    mov	    bp,	sp
seg000:A263		    push    ax
seg000:A264		    mov	    ax,	0A16Ah
seg000:A267		    xchg    ax,	[bp-2]
seg000:A26A		    pushf
seg000:A26B		    push    word ptr [bp+0]
seg000:A26E		    xchg    ax,	[bp-4]
seg000:A271		    mov	    [bp+2], ax
seg000:A274		    mov	    word ptr [bp+0], cs
seg000:A277		    pop	    bp
seg000:A278		    pop	    ax
seg000:A279		    pusha
seg000:A27A		    push    es
seg000:A27B		    push    ds
seg000:A27C		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A281		    mov	    byte ptr cs:loc_550, 1
seg000:A287		    call    port_FBFFF9_Out
seg000:A28A		    jnb	    short loc_A293
seg000:A28C		    mov	    al,	3
seg000:A28E		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:A290		    jmp	    short loc_A2D4
seg000:A290 ; END OF FUNCTION CHUNK FOR	sub_A114
seg000:A292 ; ---------------------------------------------------------------------------
seg000:A292		    nop
seg000:A293 ; START OF FUNCTION	CHUNK FOR sub_A114
seg000:A293
seg000:A293 loc_A293:				    ; CODE XREF: sub_A114+176j
seg000:A293		    cli
seg000:A294		    call    sub_A30B
seg000:A297		    mov	    bx,	67h
seg000:A29A		    mov	    [bx], sp
seg000:A29C		    mov	    word ptr [bx+2], ss
seg000:A29F		    mov	    al,	8Fh
seg000:A2A1		    mov	    ah,	9
seg000:A2A3		    call    write_cmos
seg000:A2A6		    mov	    al,	2
seg000:A2A8		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:A2AA		    smsw    ax
seg000:A2AD		    or	    ax,	1
seg000:A2B0		    lmsw    ax
seg000:A2B3		    jmp	    20h:0A2B8h
seg000:A2B3 ; END OF FUNCTION CHUNK FOR	sub_A114
seg000:A2B8 ; ---------------------------------------------------------------------------
seg000:A2B8
seg000:A2B8 loc_A2B8:
seg000:A2B8		    mov	    ax,	28h
seg000:A2BB		    mov	    ss,	ax
seg000:A2BD		    assume ss:nothing
seg000:A2BD		    call    sub_A346
seg000:A2C0		    xor	    al,	al
seg000:A2C2		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:A2C4		    cli
seg000:A2C5		    out	    0FBh, al	    ; AT 80287 data.
seg000:A2C5					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A2C7		    out	    0EEh, al
seg000:A2C9		    in	    al,	0EFh
seg000:A2CB		    sti
seg000:A2CC		    hlt
seg000:A2CC ; ---------------------------------------------------------------------------
seg000:A2CD		    db 0EBh ; ë
seg000:A2CE		    db 0FDh ; ý
seg000:A2CF ; ---------------------------------------------------------------------------
seg000:A2CF ; START OF FUNCTION	CHUNK FOR ColrWarm_Boot
seg000:A2CF
seg000:A2CF loc_A2CF:				    ; CODE XREF: ColrWarm_Boot+51j
seg000:A2CF					    ; DATA XREF: ColrWarm_Boot:jump_tableo
seg000:A2CF		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A2D4
seg000:A2D4 loc_A2D4:				    ; CODE XREF: sub_A114+17Cj
seg000:A2D4		    mov	    bx,	67h
seg000:A2D7		    mov	    sp,	[bx]
seg000:A2D9		    mov	    ss,	word ptr [bx+2]
seg000:A2DC		    assume ss:nothing
seg000:A2DC		    sti
seg000:A2DD		    xor	    al,	al
seg000:A2DF		    out	    70h, al	    ; CMOS Memory:
seg000:A2DF					    ; used by real-time	clock
seg000:A2E1		    call    sub_71D9
seg000:A2E4		    cmp	    byte ptr cs:loc_550, 1
seg000:A2EA		    jz	    short loc_A2F1
seg000:A2EC		    call    sub_71F8
seg000:A2EF		    jnb	    short loc_A2FB
seg000:A2F1
seg000:A2F1 loc_A2F1:				    ; CODE XREF: ColrWarm_Boot+929Aj
seg000:A2F1		    in	    al,	80h	    ; manufacture's diagnostic checkpoint
seg000:A2F3		    test    al,	0FFh
seg000:A2F5		    jz	    short loc_A2FB
seg000:A2F7		    mov	    al,	3
seg000:A2F9		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:A2FB
seg000:A2FB loc_A2FB:				    ; CODE XREF: ColrWarm_Boot+929Fj
seg000:A2FB					    ; ColrWarm_Boot+92A5j
seg000:A2FB		    pop	    ds
seg000:A2FC		    pop	    es
seg000:A2FD		    popa
seg000:A2FE		    xchg    ah,	al
seg000:A300		    in	    al,	80h	    ; manufacture's diagnostic checkpoint
seg000:A302		    xchg    ah,	al
seg000:A304		    mov	    byte ptr cs:loc_550, 0
seg000:A30A		    iret
seg000:A30A ; END OF FUNCTION CHUNK FOR	ColrWarm_Boot
seg000:A30B
seg000:A30B ; =============== S	U B R O	U T I N	E =======================================
seg000:A30B
seg000:A30B
seg000:A30B sub_A30B	    proc near		    ; CODE XREF: sub_A114+180p
seg000:A30B		    push    cx
seg000:A30C		    mov	    di,	si
seg000:A30E		    add	    di,	8
seg000:A311		    mov	    ax,	0FFFFh
seg000:A314		    stosw
seg000:A315		    mov	    ax,	es
seg000:A317		    call    sub_6E66
seg000:A31A		    add	    ax,	si
seg000:A31C		    adc	    dl,	0
seg000:A31F		    stosw
seg000:A320		    mov	    al,	dl
seg000:A322		    stosb
seg000:A323		    xor	    ax,	ax
seg000:A325		    stosb
seg000:A326		    stosw
seg000:A327		    add	    di,	10h
seg000:A32A		    mov	    ax,	cs
seg000:A32C		    mov	    cl,	9Bh
seg000:A32E		    call    sub_6E52
seg000:A331		    mov	    ax,	ss
seg000:A333		    mov	    cl,	93h
seg000:A335		    call    sub_6E52
seg000:A338		    mov	    bx,	6FB2h
seg000:A33B		    lidt    fword ptr cs:[bx]
seg000:A33F		    lgdt    fword ptr es:[si+8]
seg000:A344		    pop	    cx
seg000:A345		    retn
seg000:A345 sub_A30B	    endp
seg000:A345
seg000:A346
seg000:A346 ; =============== S	U B R O	U T I N	E =======================================
seg000:A346
seg000:A346
seg000:A346 sub_A346	    proc near		    ; CODE XREF: seg000:A2BDp
seg000:A346		    mov	    ax,	10h
seg000:A349		    mov	    ds,	ax
seg000:A34B		    assume ds:nothing
seg000:A34B		    mov	    ax,	18h
seg000:A34E		    mov	    es,	ax
seg000:A350		    assume es:nothing
seg000:A350		    xor	    si,	si
seg000:A352		    xor	    di,	di
seg000:A354		    shr	    cx,	1
seg000:A356		    jnb	    short loc_A359
seg000:A358		    movsw
seg000:A359
seg000:A359 loc_A359:				    ; CODE XREF: sub_A346+10j
seg000:A359		    rep	movsd
seg000:A35C		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:A35C					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:A35C					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:A35C					    ; 3: 1=read	high switches
seg000:A35C					    ; 4: 0=enable RAM parity checking
seg000:A35C					    ; 5: 0=enable I/O channel check
seg000:A35C					    ; 6: 0=hold	keyboard clock low
seg000:A35C					    ; 7: 0=enable kbrd
seg000:A35E		    test    al,	0C0h
seg000:A360		    jz	    short locret_A386
seg000:A362		    mov	    bx,	ds:0
seg000:A366		    mov	    ax,	es:0
seg000:A36A		    mov	    es:0, ax
seg000:A36E		    mov	    ds:0, bx
seg000:A372		    mov	    ah,	0Ch
seg000:A374		    out	    0F7h, al
seg000:A376		    mov	    dx,	61h
seg000:A379		    in	    al,	dx	    ; PC/XT PPI	port B bits:
seg000:A379					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:A379					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:A379					    ; 3: 1=read	high switches
seg000:A379					    ; 4: 0=enable RAM parity checking
seg000:A379					    ; 5: 0=enable I/O channel check
seg000:A379					    ; 6: 0=hold	keyboard clock low
seg000:A379					    ; 7: 0=enable kbrd
seg000:A37A		    or	    al,	ah
seg000:A37C		    out	    dx,	al	    ; PC/XT PPI	port B bits:
seg000:A37C					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:A37C					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:A37C					    ; 3: 1=read	high switches
seg000:A37C					    ; 4: 0=enable RAM parity checking
seg000:A37C					    ; 5: 0=enable I/O channel check
seg000:A37C					    ; 6: 0=hold	keyboard clock low
seg000:A37C					    ; 7: 0=enable kbrd
seg000:A37D		    not	    ah
seg000:A37F		    and	    al,	ah
seg000:A381		    out	    dx,	al	    ; PC/XT PPI	port B bits:
seg000:A381					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:A381					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:A381					    ; 3: 1=read	high switches
seg000:A381					    ; 4: 0=enable RAM parity checking
seg000:A381					    ; 5: 0=enable I/O channel check
seg000:A381					    ; 6: 0=hold	keyboard clock low
seg000:A381					    ; 7: 0=enable kbrd
seg000:A382		    mov	    al,	1
seg000:A384		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:A386
seg000:A386 locret_A386:			    ; CODE XREF: sub_A346+1Aj
seg000:A386		    retn
seg000:A386 sub_A346	    endp
seg000:A386
seg000:A387 ; ---------------------------------------------------------------------------
seg000:A387 ; START OF FUNCTION	CHUNK FOR sub_A114
seg000:A387
seg000:A387 loc_A387:				    ; CODE XREF: sub_A114+4Aj
seg000:A387					    ; DATA XREF: seg000:A19Fo
seg000:A387		    mov	    ah,	30h
seg000:A389		    mov	    al,	31h
seg000:A38B		    call    read_cmos
seg000:A38E		    xchg    al,	ah
seg000:A390		    call    read_cmos
seg000:A393		    jmp	    loc_A171
seg000:A396 ; ---------------------------------------------------------------------------
seg000:A396
seg000:A396 int15h_?:				    ; CODE XREF: sub_A114+4Aj
seg000:A396					    ; DATA XREF: seg000:A199o
seg000:A396		    push    ds
seg000:A397		    push    si
seg000:A398		    cmp	    al,	0
seg000:A39A		    jnz	    short loc_A3D0
seg000:A39C		    mov	    al,	15h
seg000:A39E		    call    table_lookup_ptr
seg000:A3A1		    mov	    si,	ds
seg000:A3A3		    mov	    ax,	cs
seg000:A3A5		    cmp	    ax,	si
seg000:A3A7		    jnz	    short loc_A3CE
seg000:A3A9		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A3AE		    assume ds:nothing
seg000:A3AE		    test    byte ptr ds:loc_16+1, 0Ch
seg000:A3B3		    jz	    short loc_A3CE
seg000:A3B5		    call    sub_7B2D
seg000:A3B8		    test    byte ptr ds:loc_16+1, 4
seg000:A3BD		    jz	    short loc_A3CE
seg000:A3BF		    mov	    ax,	0
seg000:A3C2		    call    far	ptr 0F000h:7A58h
seg000:A3C7		    mov	    byte ptr ds:loc_70+1, 80h
seg000:A3CC		    int	    1Bh		    ; CTRL-BREAK KEY
seg000:A3CE
seg000:A3CE loc_A3CE:				    ; CODE XREF: sub_A114+293j
seg000:A3CE					    ; sub_A114+29Fj ...
seg000:A3CE		    xor	    al,	al
seg000:A3D0
seg000:A3D0 loc_A3D0:				    ; CODE XREF: sub_A114+286j
seg000:A3D0		    xor	    ah,	ah
seg000:A3D2		    pop	    si
seg000:A3D3		    pop	    ds
seg000:A3D4		    jmp	    loc_A16A
seg000:A3D4 ; END OF FUNCTION CHUNK FOR	sub_A114
seg000:A3D7
seg000:A3D7 ; =============== S	U B R O	U T I N	E =======================================
seg000:A3D7
seg000:A3D7
seg000:A3D7 end_interrupt?  proc far		    ; CODE XREF: joystick+11p
seg000:A3D7					    ; sub_A114+4Aj ...
seg000:A3D7
seg000:A3D7 ; FUNCTION CHUNK AT	seg000:A16A SIZE 00000007 BYTES
seg000:A3D7
seg000:A3D7		    mov	    ah,	86h
seg000:A3D9		    stc
seg000:A3DA		    jmp	    loc_A16A
seg000:A3DA end_interrupt?  endp ; sp-analysis failed
seg000:A3DA
seg000:A3DD ; ---------------------------------------------------------------------------
seg000:A3DD ; START OF FUNCTION	CHUNK FOR sub_A114
seg000:A3DD
seg000:A3DD loc_A3DD:				    ; CODE XREF: sub_A114+4Aj
seg000:A3DD					    ; DATA XREF: seg000:off_A18Fo ...
seg000:A3DD		    xor	    ah,	ah
seg000:A3DF		    jmp	    loc_A16A
seg000:A3E2 ; ---------------------------------------------------------------------------
seg000:A3E2
seg000:A3E2 loc_A3E2:				    ; CODE XREF: sub_A114+4Aj
seg000:A3E2					    ; DATA XREF: seg000:A1B1o
seg000:A3E2		    push    ds
seg000:A3E3		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A3E8		    or	    al,	al
seg000:A3EA		    jnz	    short loc_A3F6
seg000:A3EC		    out	    0FBh, al	    ; AT 80287 data.
seg000:A3EC					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A3EE		    pushf
seg000:A3EF		    inc	    byte ptr ds:loc_BB+4
seg000:A3F3		    popf
seg000:A3F4		    jmp	    short loc_A400
seg000:A3F6 ; ---------------------------------------------------------------------------
seg000:A3F6
seg000:A3F6 loc_A3F6:				    ; CODE XREF: sub_A114+2D6j
seg000:A3F6		    pushf
seg000:A3F7		    dec	    byte ptr ds:loc_BB+4
seg000:A3FB		    jnz	    short loc_A3FF
seg000:A3FD		    out	    0F9h, al	    ; AT 80287 data.
seg000:A3FD					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A3FF
seg000:A3FF loc_A3FF:				    ; CODE XREF: sub_A114+2E7j
seg000:A3FF		    popf
seg000:A400
seg000:A400 loc_A400:				    ; CODE XREF: sub_A114+2E0j
seg000:A400		    pop	    ds
seg000:A401		    jmp	    loc_A171
seg000:A404 ; ---------------------------------------------------------------------------
seg000:A404
seg000:A404 loc_A404:				    ; CODE XREF: sub_A114+4Aj
seg000:A404					    ; DATA XREF: seg000:A1B3o
seg000:A404		    push    ds
seg000:A405		    push    dx
seg000:A406		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A40B		    out	    0FBh, al	    ; AT 80287 data.
seg000:A40B					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A40D		    pushf
seg000:A40E		    inc	    byte ptr ds:loc_BB+4
seg000:A412		    popf
seg000:A413		    test    al,	0FEh
seg000:A415		    jnz	    short loc_A43D
seg000:A417		    mov	    byte ptr cs:word_4C5, 0
seg000:A41D		    cmp	    al,	1
seg000:A41F		    jnz	    short loc_A427
seg000:A421		    mov	    byte ptr cs:word_4C5, 1
seg000:A427
seg000:A427 loc_A427:				    ; CODE XREF: sub_A114+30Bj
seg000:A427		    mov	    cs:RTC_test_timer, 600h
seg000:A42E		    out	    0F5h, al
seg000:A430		    test    byte ptr cs:loc_CA+4, 2
seg000:A436		    jz	    short loc_A44F
seg000:A438		    call    port_9F4_Out_0
seg000:A43B		    jmp	    short loc_A44F
seg000:A43D ; ---------------------------------------------------------------------------
seg000:A43D
seg000:A43D loc_A43D:				    ; CODE XREF: sub_A114+301j
seg000:A43D		    out	    0F4h, al
seg000:A43F		    mov	    byte ptr cs:word_4C5, 0FFh
seg000:A445		    mov	    cs:RTC_test_timer, 1B8h
seg000:A44C		    call    out_9F4_sync
seg000:A44F
seg000:A44F loc_A44F:				    ; CODE XREF: sub_A114+322j
seg000:A44F					    ; sub_A114+327j
seg000:A44F		    pushf
seg000:A450		    dec	    byte ptr ds:loc_BB+4
seg000:A454		    jnz	    short loc_A458
seg000:A456		    out	    0F9h, al	    ; AT 80287 data.
seg000:A456					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A458
seg000:A458 loc_A458:				    ; CODE XREF: sub_A114+340j
seg000:A458		    popf
seg000:A459		    clc
seg000:A45A		    pop	    dx
seg000:A45B		    pop	    ds
seg000:A45C		    jmp	    loc_A16A
seg000:A45F ; ---------------------------------------------------------------------------
seg000:A45F
seg000:A45F loc_A45F:				    ; CODE XREF: sub_A114+4Aj
seg000:A45F					    ; DATA XREF: seg000:A1B5o
seg000:A45F		    mov	    al,	byte ptr cs:word_4C5
seg000:A463		    cmp	    al,	2
seg000:A465		    jnz	    short loc_A469
seg000:A467		    mov	    al,	1
seg000:A469
seg000:A469 loc_A469:				    ; CODE XREF: sub_A114+351j
seg000:A469		    clc
seg000:A46A		    jmp	    loc_A16A
seg000:A46D ; ---------------------------------------------------------------------------
seg000:A46D
seg000:A46D loc_A46D:				    ; CODE XREF: sub_A114+4Aj
seg000:A46D					    ; DATA XREF: seg000:A1B7o
seg000:A46D		    push    bx
seg000:A46E		    push    cx
seg000:A46F		    push    dx
seg000:A470		    push    si
seg000:A471		    push    ds
seg000:A472		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A477		    out	    0FBh, al	    ; AT 80287 data.
seg000:A477					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A479		    pushf
seg000:A47A		    inc	    byte ptr ds:loc_BB+4
seg000:A47E		    popf
seg000:A47F		    mov	    bl,	byte ptr cs:loc_CA+4
seg000:A484		    test    bl,	4
seg000:A487		    jz	    short loc_A4C3
seg000:A489		    test    bl,	8
seg000:A48C		    jnz	    short loc_A4C3
seg000:A48E		    test    al,	2
seg000:A490		    jz	    short loc_A4BA
seg000:A492		    test    byte ptr cs:loc_505+2, 40h
seg000:A498		    jz	    short loc_A4C3
seg000:A49A		    or	    byte ptr cs:loc_CA+4, 2
seg000:A4A0		    test    byte ptr cs:word_4C5, 0FEh
seg000:A4A6		    jnz	    short loc_A4C3
seg000:A4A8		    xor	    ax,	ax
seg000:A4AA		    mov	    ds,	ax
seg000:A4AC		    mov	    si,	ax
seg000:A4AE		    mov	    cx,	8000h
seg000:A4B1		    cli
seg000:A4B2		    rep	lodsw
seg000:A4B4		    call    port_9F4_Out_0
seg000:A4B7		    sti
seg000:A4B8
seg000:A4B8 loc_A4B8:				    ; CODE XREF: sub_A114+19FJ
seg000:A4B8		    jmp	    short loc_A4C3
seg000:A4BA ; ---------------------------------------------------------------------------
seg000:A4BA
seg000:A4BA loc_A4BA:				    ; CODE XREF: sub_A114+37Cj
seg000:A4BA		    call    out_9F4_sync
seg000:A4BD		    and	    byte ptr cs:loc_CA+4, 0FDh
seg000:A4C3
seg000:A4C3 loc_A4C3:				    ; CODE XREF: sub_A114+373j
seg000:A4C3					    ; sub_A114+378j ...
seg000:A4C3		    mov	    al,	byte ptr cs:loc_CA+4
seg000:A4C7		    and	    al,	0Eh
seg000:A4C9		    mov	    ds,	word ptr cs:loc_C5+1
seg000:A4CE		    pushf
seg000:A4CF		    dec	    byte ptr ds:loc_BB+4
seg000:A4D3		    jnz	    short loc_A4D7
seg000:A4D5		    out	    0F9h, al	    ; AT 80287 data.
seg000:A4D5					    ; 286 sends	opcodes	& operands and receives	results.
seg000:A4D7
seg000:A4D7 loc_A4D7:				    ; CODE XREF: sub_A114+3BFj
seg000:A4D7		    popf
seg000:A4D8		    pop	    ds
seg000:A4D9		    pop	    si
seg000:A4DA		    pop	    dx
seg000:A4DB		    pop	    cx
seg000:A4DC		    pop	    bx
seg000:A4DD		    clc
seg000:A4DE		    jmp	    loc_A16A
seg000:A4E1 ; ---------------------------------------------------------------------------
seg000:A4E1
seg000:A4E1 loc_A4E1:				    ; CODE XREF: sub_A114+4Aj
seg000:A4E1					    ; DATA XREF: seg000:A1B9o
seg000:A4E1		    mov	    al,	byte ptr cs:loc_CA+4
seg000:A4E5		    and	    al,	0Eh
seg000:A4E7		    clc
seg000:A4E8		    jmp	    loc_A16A
seg000:A4E8 ; END OF FUNCTION CHUNK FOR	sub_A114
seg000:A4E8 ; ---------------------------------------------------------------------------
seg000:A4EB		    db	  0
seg000:A4EC word_A4EC	    dw 100h		    ; DATA XREF: sub_A6AD+20r
seg000:A4EC					    ; sub_A70B+Er ...
seg000:A4EE		    db	  0
seg000:A4EF		    db	  2
seg000:A4F0		    db	80h ; 
seg000:A4F1		    db	  2
seg000:A4F2 word_A4F2	    dw 0		    ; DATA XREF: sub_A771+40r
seg000:A4F2					    ; sub_A771+4Ar ...
seg000:A4F4		    db	  0
seg000:A4F5		    db	  0
seg000:A4F6		    db	  0
seg000:A4F7		    db	  4
seg000:A4F8		    db	  0
seg000:A4F9		    db	  4
seg000:A4FA		    db	  0
seg000:A4FB		    db	  8
seg000:A4FC		    db	  0
seg000:A4FD		    db	  8
seg000:A4FE		    db	  0
seg000:A4FF		    db	0Ch
seg000:A500		    db	  0
seg000:A501		    db	0Ch
seg000:A502		    db	  0
seg000:A503		    db	10h
seg000:A504		    db	  0
seg000:A505		    db	10h
seg000:A506		    db	  0
seg000:A507		    db	14h
seg000:A508		    db	  0
seg000:A509		    db	14h
seg000:A50A		    db	  0
seg000:A50B		    db	18h
seg000:A50C		    db	  0
seg000:A50D		    db	18h
seg000:A50E		    db	  0
seg000:A50F		    db	1Ch
seg000:A510		    db	  0
seg000:A511		    db	1Ch
seg000:A512
seg000:A512 ; =============== S	U B R O	U T I N	E =======================================
seg000:A512
seg000:A512 ; Attributes: bp-based frame
seg000:A512
seg000:A512 sub_A512	    proc near		    ; CODE XREF: sub_C9FC+8Bp
seg000:A512
seg000:A512 var_2	    = word ptr -2
seg000:A512 arg_0	    = word ptr	4
seg000:A512
seg000:A512		    enter   2, 0
seg000:A516		    push    si
seg000:A517		    push    di
seg000:A518		    mov	    di,	0FFFFh
seg000:A51B		    cmp	    [bp+arg_0],	0BD27h
seg000:A520		    jz	    short loc_A530
seg000:A522		    cmp	    [bp+arg_0],	0BD36h
seg000:A527		    jz	    short loc_A530
seg000:A529		    cmp	    [bp+arg_0],	0BD45h
seg000:A52E		    jnz	    short loc_A534
seg000:A530
seg000:A530 loc_A530:				    ; CODE XREF: sub_A512+Ej
seg000:A530					    ; sub_A512+15j
seg000:A530		    xor	    si,	si
seg000:A532		    jmp	    short loc_A537
seg000:A534 ; ---------------------------------------------------------------------------
seg000:A534
seg000:A534 loc_A534:				    ; CODE XREF: sub_A512+1Cj
seg000:A534		    mov	    si,	3
seg000:A537
seg000:A537 loc_A537:				    ; CODE XREF: sub_A512+20j
seg000:A537		    mov	    [bp+var_2],	si
seg000:A53A		    jmp	    short loc_A55F
seg000:A53C ; ---------------------------------------------------------------------------
seg000:A53C
seg000:A53C loc_A53C:				    ; CODE XREF: sub_A512+55j
seg000:A53C		    mov	    bx,	si
seg000:A53E		    shl	    bx,	1
seg000:A540		    push    word ptr [bx+464h]
seg000:A544		    mov	    ax,	si
seg000:A546		    imul    ax,	0Fh
seg000:A549		    add	    ax,	0BD27h
seg000:A54C		    push    ax
seg000:A54D		    call    sub_A594
seg000:A550		    pop	    cx
seg000:A551		    pop	    cx
seg000:A552		    mov	    bx,	si
seg000:A554		    shl	    bx,	1
seg000:A556		    cmp	    ax,	[bx+464h]
seg000:A55A		    jz	    short loc_A55E
seg000:A55C		    xor	    di,	di
seg000:A55E
seg000:A55E loc_A55E:				    ; CODE XREF: sub_A512+48j
seg000:A55E		    inc	    si
seg000:A55F
seg000:A55F loc_A55F:				    ; CODE XREF: sub_A512+28j
seg000:A55F		    mov	    ax,	[bp+var_2]
seg000:A562		    add	    ax,	3
seg000:A565		    cmp	    ax,	si
seg000:A567		    jg	    short loc_A53C
seg000:A569		    cmp	    di,	0FFFFh
seg000:A56C		    jnz	    short loc_A575
seg000:A56E		    call    sub_D433
seg000:A571		    xor	    ax,	ax
seg000:A573		    jmp	    short loc_A578
seg000:A575 ; ---------------------------------------------------------------------------
seg000:A575
seg000:A575 loc_A575:				    ; CODE XREF: sub_A512+5Aj
seg000:A575		    mov	    ax,	0FFFFh
seg000:A578
seg000:A578 loc_A578:				    ; CODE XREF: sub_A512+61j
seg000:A578		    pop	    di
seg000:A579		    pop	    si
seg000:A57A		    leave
seg000:A57B
seg000:A57B locret_A57B:			    ; DATA XREF: sub_A594+5Ar
seg000:A57B		    retn
seg000:A57B sub_A512	    endp
seg000:A57B
seg000:A57B ; ---------------------------------------------------------------------------
seg000:A57C		    db	1Fh
seg000:A57D		    db	1Dh
seg000:A57E		    db	1Fh
seg000:A57F		    db	1Eh
seg000:A580		    db	1Fh
seg000:A581		    db	1Eh
seg000:A582		    db	1Fh
seg000:A583		    db	1Fh
seg000:A584		    db	1Eh
seg000:A585		    db	1Fh
seg000:A586		    db	1Eh
seg000:A587 byte_A587	    db 1Fh		    ; DATA XREF: sub_A594+6Cr
seg000:A588		    db	1Fh
seg000:A589		    db	1Ch
seg000:A58A		    db	1Fh
seg000:A58B		    db	1Eh
seg000:A58C		    db	1Fh
seg000:A58D		    db	1Eh
seg000:A58E		    db	1Fh
seg000:A58F		    db	1Fh
seg000:A590		    db	1Eh
seg000:A591		    db	1Fh
seg000:A592		    db	1Eh
seg000:A593		    db	1Fh
seg000:A594
seg000:A594 ; =============== S	U B R O	U T I N	E =======================================
seg000:A594
seg000:A594 ; Attributes: bp-based frame
seg000:A594
seg000:A594 sub_A594	    proc near		    ; CODE XREF: sub_A512+3Bp
seg000:A594					    ; DATA XREF: seg000:stru_BD34o ...
seg000:A594
seg000:A594 arg_0	    = word ptr	4
seg000:A594 arg_2	    = word ptr	6
seg000:A594
seg000:A594		    push    bp
seg000:A595		    mov	    bp,	sp
seg000:A597		    push    si
seg000:A598		    push    di
seg000:A599		    mov	    si,	[bp+arg_2]
seg000:A59C		    mov	    di,	[bp+arg_0]
seg000:A59F		    cmp	    di,	offset stru_BD25.data
seg000:A5A3		    jnz	    short loc_A5AD
seg000:A5A5		    cmp	    si,	17h
seg000:A5A8		    jle	    short loc_A5AD
seg000:A5AA		    mov	    si,	0FFFFh
seg000:A5AD
seg000:A5AD loc_A5AD:				    ; CODE XREF: sub_A594+Fj
seg000:A5AD					    ; sub_A594+14j
seg000:A5AD		    cmp	    di,	offset stru_BD34.data
seg000:A5B1		    jnz	    short loc_A5BB
seg000:A5B3		    cmp	    si,	3Bh ; ';'
seg000:A5B6		    jle	    short loc_A5BB
seg000:A5B8		    mov	    si,	0FFFFh
seg000:A5BB
seg000:A5BB loc_A5BB:				    ; CODE XREF: sub_A594+1Dj
seg000:A5BB					    ; sub_A594+22j
seg000:A5BB		    cmp	    di,	offset stru_BD43.data
seg000:A5BF		    jnz	    short loc_A5C9
seg000:A5C1		    cmp	    si,	3Bh ; ';'
seg000:A5C4		    jle	    short loc_A5C9
seg000:A5C6		    mov	    si,	0FFFFh
seg000:A5C9
seg000:A5C9 loc_A5C9:				    ; CODE XREF: sub_A594+2Bj
seg000:A5C9					    ; sub_A594+30j
seg000:A5C9		    cmp	    di,	offset stru_BD52.data
seg000:A5CD		    jnz	    short loc_A5DC
seg000:A5CF		    cmp	    si,	0Ch
seg000:A5D2		    jg	    short loc_A5D9
seg000:A5D4		    cmp	    si,	1
seg000:A5D7		    jge	    short loc_A5DC
seg000:A5D9
seg000:A5D9 loc_A5D9:				    ; CODE XREF: sub_A594+3Ej
seg000:A5D9		    mov	    si,	0FFFFh
seg000:A5DC
seg000:A5DC loc_A5DC:				    ; CODE XREF: sub_A594+39j
seg000:A5DC					    ; sub_A594+43j
seg000:A5DC		    cmp	    di,	offset stru_BD61.data
seg000:A5E0		    jnz	    short loc_A60F
seg000:A5E2		    test    ds:word_46E, 3
seg000:A5E8		    jnz	    short loc_A5FC
seg000:A5EA		    mov	    bx,	ds:word_46A
seg000:A5EE		    mov	    al,	byte ptr ds:locret_A57B[bx]
seg000:A5F2		    mov	    ah,	0
seg000:A5F4		    cmp	    ax,	ds:word_46C
seg000:A5F8		    jge	    short loc_A60F
seg000:A5FA		    jmp	    short loc_A60C
seg000:A5FC ; ---------------------------------------------------------------------------
seg000:A5FC
seg000:A5FC loc_A5FC:				    ; CODE XREF: sub_A594+54j
seg000:A5FC		    mov	    bx,	ds:word_46A
seg000:A600		    mov	    al,	ds:byte_A587[bx]
seg000:A604		    mov	    ah,	0
seg000:A606		    cmp	    ax,	ds:word_46C
seg000:A60A		    jge	    short loc_A60F
seg000:A60C
seg000:A60C loc_A60C:				    ; CODE XREF: sub_A594+66j
seg000:A60C		    mov	    si,	0FFFFh
seg000:A60F
seg000:A60F loc_A60F:				    ; CODE XREF: sub_A594+4Cj
seg000:A60F					    ; sub_A594+64j ...
seg000:A60F		    cmp	    di,	offset stru_BD70.data
seg000:A613		    jnz	    short loc_A624
seg000:A615		    cmp	    si,	833h
seg000:A619		    jg	    short loc_A621
seg000:A61B		    cmp	    si,	7BCh
seg000:A61F		    jge	    short loc_A624
seg000:A621
seg000:A621 loc_A621:				    ; CODE XREF: sub_A594+85j
seg000:A621		    mov	    si,	0FFFFh
seg000:A624
seg000:A624 loc_A624:				    ; CODE XREF: sub_A594+7Fj
seg000:A624					    ; sub_A594+8Bj
seg000:A624		    cmp	    si,	0FFFFh
seg000:A627		    jz	    short loc_A63B
seg000:A629		    push    si
seg000:A62A		    mov	    al,	[di+1]
seg000:A62D		    mov	    ah,	0
seg000:A62F		    push    ax
seg000:A630		    mov	    al,	[di]
seg000:A632		    mov	    ah,	0
seg000:A634		    push    ax
seg000:A635		    call    sub_C6D3
seg000:A638		    add	    sp,	6
seg000:A63B
seg000:A63B loc_A63B:				    ; CODE XREF: sub_A594+93j
seg000:A63B		    mov	    ax,	si
seg000:A63D		    pop	    di
seg000:A63E		    pop	    si
seg000:A63F		    pop	    bp
seg000:A640		    retn
seg000:A640 sub_A594	    endp
seg000:A640
seg000:A641
seg000:A641 ; =============== S	U B R O	U T I N	E =======================================
seg000:A641
seg000:A641 ; Attributes: bp-based frame
seg000:A641
seg000:A641 sub_A641	    proc near		    ; CODE XREF: sub_B4BB+11p
seg000:A641					    ; sub_B74F+28p ...
seg000:A641
seg000:A641 var_2	    = word ptr -2
seg000:A641 arg_0	    = word ptr	4
seg000:A641
seg000:A641		    enter   2, 0
seg000:A645		    push    si
seg000:A646		    push    di
seg000:A647		    cmp	    [bp+arg_0],	5
seg000:A64B		    jz	    short loc_A6A9
seg000:A64D		    mov	    di,	ds:word_468
seg000:A651		    cmp	    [bp+arg_0],	0FFFFh
seg000:A655		    jz	    short loc_A666
seg000:A657		    push    0
seg000:A659		    call    CMOS_read_AL
seg000:A65C		    pop	    cx
seg000:A65D		    push    ax
seg000:A65E		    call    sub_D361
seg000:A661		    pop	    cx
seg000:A662		    cmp	    ax,	di
seg000:A664		    jz	    short loc_A6A9
seg000:A666
seg000:A666 loc_A666:				    ; CODE XREF: sub_A641+14j
seg000:A666		    push    [bp+arg_0]
seg000:A669		    call    sub_D3AF
seg000:A66C		    pop	    cx
seg000:A66D		    cmp	    [bp+arg_0],	4
seg000:A671		    jnz	    short loc_A678
seg000:A673		    mov	    di,	3
seg000:A676		    jmp	    short loc_A67B
seg000:A678 ; ---------------------------------------------------------------------------
seg000:A678
seg000:A678 loc_A678:				    ; CODE XREF: sub_A641+30j
seg000:A678		    mov	    di,	6
seg000:A67B
seg000:A67B loc_A67B:				    ; CODE XREF: sub_A641+35j
seg000:A67B		    mov	    [bp+var_2],	offset stru_BD25.data
seg000:A680		    xor	    si,	si
seg000:A682		    jmp	    short loc_A6A5
seg000:A684 ; ---------------------------------------------------------------------------
seg000:A684
seg000:A684 loc_A684:				    ; CODE XREF: sub_A641+66j
seg000:A684		    mov	    bx,	si
seg000:A686		    shl	    bx,	1
seg000:A688		    push    ds:word_464[bx]
seg000:A68C		    mov	    bx,	[bp+var_2]
seg000:A68F		    mov	    al,	[bx+1]
seg000:A692		    mov	    ah,	0
seg000:A694		    push    ax
seg000:A695		    mov	    al,	[bx]
seg000:A697		    mov	    ah,	0
seg000:A699		    push    ax
seg000:A69A		    call    sub_C6D3
seg000:A69D		    add	    sp,	6
seg000:A6A0		    add	    [bp+var_2],	0Fh
seg000:A6A4		    inc	    si
seg000:A6A5
seg000:A6A5 loc_A6A5:				    ; CODE XREF: sub_A641+41j
seg000:A6A5		    cmp	    si,	di
seg000:A6A7		    jl	    short loc_A684
seg000:A6A9
seg000:A6A9 loc_A6A9:				    ; CODE XREF: sub_A641+Aj
seg000:A6A9					    ; sub_A641+23j
seg000:A6A9		    pop	    di
seg000:A6AA		    pop	    si
seg000:A6AB		    leave
seg000:A6AC		    retn
seg000:A6AC sub_A641	    endp
seg000:A6AC
seg000:A6AD
seg000:A6AD ; =============== S	U B R O	U T I N	E =======================================
seg000:A6AD
seg000:A6AD ; Attributes: bp-based frame
seg000:A6AD
seg000:A6AD sub_A6AD	    proc near		    ; DATA XREF: seg000:stru_BD8Eo
seg000:A6AD
seg000:A6AD arg_0	    = word ptr	4
seg000:A6AD arg_2	    = word ptr	6
seg000:A6AD arg_4	    = word ptr	8
seg000:A6AD
seg000:A6AD		    push    bp
seg000:A6AE		    mov	    bp,	sp
seg000:A6B0		    push    si
seg000:A6B1		    push    di
seg000:A6B2		    mov	    si,	[bp+arg_2]
seg000:A6B5		    mov	    di,	[bp+arg_0]
seg000:A6B8		    mov	    ax,	[di+0Bh]
seg000:A6BB		    cmp	    ax,	si
seg000:A6BD		    jle	    short loc_A6C3
seg000:A6BF		    or	    si,	si
seg000:A6C1		    jge	    short loc_A6C6
seg000:A6C3
seg000:A6C3 loc_A6C3:				    ; CODE XREF: sub_A6AD+10j
seg000:A6C3		    mov	    si,	[di+7]
seg000:A6C6
seg000:A6C6 loc_A6C6:				    ; CODE XREF: sub_A6AD+14j
seg000:A6C6		    push    [bp+arg_4]
seg000:A6C9		    mov	    bx,	si
seg000:A6CB		    shl	    bx,	1
seg000:A6CD		    push    ds:word_A4EC[bx]
seg000:A6D1		    mov	    al,	[di+1]
seg000:A6D4		    mov	    ah,	0
seg000:A6D6		    push    ax
seg000:A6D7		    mov	    al,	[di]
seg000:A6D9		    mov	    ah,	0
seg000:A6DB		    push    ax
seg000:A6DC		    call    sub_C686
seg000:A6DF		    add	    sp,	8
seg000:A6E2		    mov	    ds:word_470, si
seg000:A6E6		    push    0
seg000:A6E8		    push    ds:cmos_15h
seg000:A6EC		    mov	    ax,	offset stru_BDAC.data
seg000:A6EF		    push    ax
seg000:A6F0		    call    sub_A70B
seg000:A6F3		    add	    sp,	6
seg000:A6F6		    mov	    ds:cmos_15h, ax
seg000:A6F9		    push    0
seg000:A6FB		    call    sub_A8E3
seg000:A6FE		    pop	    cx
seg000:A6FF		    push    0
seg000:A701		    call    sub_A946
seg000:A704		    pop	    cx
seg000:A705		    mov	    ax,	si
seg000:A707		    pop	    di
seg000:A708		    pop	    si
seg000:A709		    pop	    bp
seg000:A70A		    retn
seg000:A70A sub_A6AD	    endp
seg000:A70A
seg000:A70B
seg000:A70B ; =============== S	U B R O	U T I N	E =======================================
seg000:A70B
seg000:A70B ; Attributes: bp-based frame
seg000:A70B
seg000:A70B sub_A70B	    proc near		    ; CODE XREF: sub_A6AD+43p
seg000:A70B					    ; DATA XREF: seg000:stru_BDBBo
seg000:A70B
seg000:A70B arg_0	    = word ptr	4
seg000:A70B arg_2	    = word ptr	6
seg000:A70B arg_4	    = word ptr	8
seg000:A70B
seg000:A70B		    push    bp
seg000:A70C		    mov	    bp,	sp
seg000:A70E		    push    si
seg000:A70F		    push    di
seg000:A710		    mov	    si,	[bp+arg_2]
seg000:A713		    mov	    bx,	ds:word_470
seg000:A717		    shl	    bx,	1
seg000:A719		    mov	    di,	ds:word_A4EC[bx]
seg000:A71D		    or	    si,	si
seg000:A71F		    jge	    short loc_A723
seg000:A721		    xor	    si,	si
seg000:A723
seg000:A723 loc_A723:				    ; CODE XREF: sub_A70B+14j
seg000:A723		    shl	    si,	6
seg000:A726		    mov	    ax,	2C0h
seg000:A729		    sub	    ax,	di
seg000:A72B		    cmp	    ax,	si
seg000:A72D		    jge	    short loc_A734
seg000:A72F		    mov	    si,	280h
seg000:A732		    sub	    si,	di
seg000:A734
seg000:A734 loc_A734:				    ; CODE XREF: sub_A70B+22j
seg000:A734		    mov	    ax,	280h
seg000:A737		    sub	    ax,	di
seg000:A739		    cmp	    ax,	si
seg000:A73B		    jge	    short loc_A73F
seg000:A73D		    xor	    si,	si
seg000:A73F
seg000:A73F loc_A73F:				    ; CODE XREF: sub_A70B+30j
seg000:A73F		    push    [bp+arg_4]
seg000:A742		    push    si
seg000:A743		    mov	    bx,	[bp+arg_0]
seg000:A746		    mov	    al,	[bx+1]
seg000:A749		    mov	    ah,	0
seg000:A74B		    push    ax
seg000:A74C		    mov	    al,	[bx]
seg000:A74E		    mov	    ah,	0
seg000:A750		    push    ax
seg000:A751		    call    sub_C686
seg000:A754		    add	    sp,	8
seg000:A757		    push    0
seg000:A759		    mov	    ax,	si
seg000:A75B		    add	    ax,	di
seg000:A75D		    push    ax
seg000:A75E		    push    0Fh
seg000:A760		    push    8
seg000:A762		    call    sub_C686
seg000:A765		    add	    sp,	8
seg000:A768		    mov	    ax,	si
seg000:A76A		    sar	    ax,	6
seg000:A76D		    pop	    di
seg000:A76E		    pop	    si
seg000:A76F		    pop	    bp
seg000:A770		    retn
seg000:A770 sub_A70B	    endp
seg000:A770
seg000:A771
seg000:A771 ; =============== S	U B R O	U T I N	E =======================================
seg000:A771
seg000:A771 ; Attributes: bp-based frame
seg000:A771
seg000:A771 sub_A771	    proc near		    ; DATA XREF: seg000:stru_BD9Do
seg000:A771
seg000:A771 arg_2	    = word ptr	6
seg000:A771 arg_4	    = word ptr	8
seg000:A771
seg000:A771		    push    bp
seg000:A772		    mov	    bp,	sp
seg000:A774		    push    si
seg000:A775		    push    ds:cmos_a4f2_idx_1
seg000:A779		    push    ds:cmos_a4f2_idx_0
seg000:A77D		    push    [bp+arg_2]
seg000:A780		    call    sub_A9D1
seg000:A783		    add	    sp,	6
seg000:A786		    mov	    ds:cmos_a4f2_idx_0,	ax
seg000:A789		    push    34h	; '4'
seg000:A78B		    call    CMOS_read_AL
seg000:A78E		    pop	    cx
seg000:A78F		    mov	    si,	ax
seg000:A791		    shl	    si,	8
seg000:A794		    jmp	    short loc_A7AB
seg000:A796 ; ---------------------------------------------------------------------------
seg000:A796
seg000:A796 loc_A796:				    ; CODE XREF: sub_A771+53j
seg000:A796		    sub	    ds:cmos_a4f2_idx_1,	2
seg000:A79B		    mov	    ax,	ds:cmos_a4f2_idx_0
seg000:A79E		    and	    ax,	ds:cmos_a4f2_idx_1
seg000:A7A2		    test    ax,	1
seg000:A7A5		    jz	    short loc_A7AB
seg000:A7A7		    dec	    ds:cmos_a4f2_idx_1
seg000:A7AB
seg000:A7AB loc_A7AB:				    ; CODE XREF: sub_A771+23j
seg000:A7AB					    ; sub_A771+34j
seg000:A7AB		    mov	    bx,	ds:cmos_a4f2_idx_0
seg000:A7AF		    shl	    bx,	1
seg000:A7B1		    mov	    ax,	ds:word_A4F2[bx]
seg000:A7B5		    mov	    bx,	ds:cmos_a4f2_idx_1
seg000:A7B9		    shl	    bx,	1
seg000:A7BB		    add	    ax,	ds:word_A4F2[bx]
seg000:A7BF		    add	    ax,	400h
seg000:A7C2		    cmp	    ax,	si
seg000:A7C4		    jg	    short loc_A796
seg000:A7C6		    push    0
seg000:A7C8		    call    sub_A946
seg000:A7CB		    pop	    cx
seg000:A7CC		    push    [bp+arg_4]
seg000:A7CF		    call    sub_A8E3
seg000:A7D2		    pop	    cx
seg000:A7D3		    mov	    ax,	ds:cmos_a4f2_idx_0
seg000:A7D6		    pop	    si
seg000:A7D7		    pop	    bp
seg000:A7D8		    retn
seg000:A7D8 sub_A771	    endp
seg000:A7D8
seg000:A7D9
seg000:A7D9 ; =============== S	U B R O	U T I N	E =======================================
seg000:A7D9
seg000:A7D9 ; Attributes: bp-based frame
seg000:A7D9
seg000:A7D9 sub_A7D9	    proc near		    ; CODE XREF: sub_A8E3+56p
seg000:A7D9					    ; DATA XREF: seg000:BDCAo
seg000:A7D9
seg000:A7D9 var_6	    = word ptr -6
seg000:A7D9 var_4	    = word ptr -4
seg000:A7D9 var_2	    = word ptr -2
seg000:A7D9 arg_0	    = word ptr	4
seg000:A7D9 arg_2	    = word ptr	6
seg000:A7D9 arg_4	    = word ptr	8
seg000:A7D9
seg000:A7D9		    enter   6, 0
seg000:A7DD		    push    si
seg000:A7DE		    push    di
seg000:A7DF		    mov	    si,	[bp+arg_2]
seg000:A7E2		    or	    si,	si
seg000:A7E4		    jge	    short loc_A7E8
seg000:A7E6		    xor	    si,	si
seg000:A7E8
seg000:A7E8 loc_A7E8:				    ; CODE XREF: sub_A7D9+Bj
seg000:A7E8		    mov	    bx,	ds:word_470
seg000:A7EC		    shl	    bx,	1
seg000:A7EE		    mov	    ax,	ds:word_A4EC[bx]
seg000:A7F2		    mov	    [bp+var_6],	ax
seg000:A7F5		    mov	    ax,	380h
seg000:A7F8		    sub	    ax,	[bp+var_6]
seg000:A7FB		    mov	    [bp+var_4],	ax
seg000:A7FE		    mov	    bx,	ds:cmos_a4f2_idx_0
seg000:A802		    shl	    bx,	1
seg000:A804		    mov	    di,	ds:word_A4F2[bx]
seg000:A808		    test    ds:cmos_a4f2_idx_0,	1
seg000:A80E		    jz	    short loc_A812
seg000:A810		    add	    di,	ax
seg000:A812
seg000:A812 loc_A812:				    ; CODE XREF: sub_A7D9+35j
seg000:A812		    mov	    ax,	si
seg000:A814		    shl	    ax,	6
seg000:A817		    add	    ax,	di
seg000:A819		    mov	    [bp+var_2],	ax
seg000:A81C		    cmp	    si,	ds:cmos_17h
seg000:A820		    jnz	    short loc_A829
seg000:A822		    cmp	    ax,	3B80h
seg000:A825		    jle	    short loc_A844
seg000:A827		    jmp	    short loc_A83C
seg000:A829 ; ---------------------------------------------------------------------------
seg000:A829
seg000:A829 loc_A829:				    ; CODE XREF: sub_A7D9+47j
seg000:A829		    cmp	    [bp+var_2],	3B80h
seg000:A82E		    jle	    short loc_A844
seg000:A830		    mov	    ax,	ds:cmos_17h
seg000:A833		    inc	    ax
seg000:A834		    cmp	    ax,	si
seg000:A836		    jnz	    short loc_A83C
seg000:A838		    xor	    si,	si
seg000:A83A		    jmp	    short loc_A844
seg000:A83C ; ---------------------------------------------------------------------------
seg000:A83C
seg000:A83C loc_A83C:				    ; CODE XREF: sub_A7D9+4Ej
seg000:A83C					    ; sub_A7D9+5Dj
seg000:A83C		    mov	    si,	3B80h
seg000:A83F		    sub	    si,	di
seg000:A841		    sar	    si,	6
seg000:A844
seg000:A844 loc_A844:				    ; CODE XREF: sub_A7D9+4Cj
seg000:A844					    ; sub_A7D9+55j ...
seg000:A844		    push    [bp+arg_4]
seg000:A847		    mov	    ax,	si
seg000:A849		    shl	    ax,	6
seg000:A84C		    push    ax
seg000:A84D		    mov	    bx,	[bp+arg_0]
seg000:A850		    mov	    al,	[bx+1]
seg000:A853		    mov	    ah,	0
seg000:A855		    push    ax
seg000:A856		    mov	    al,	[bx]
seg000:A858		    mov	    ah,	0
seg000:A85A		    push    ax
seg000:A85B		    call    sub_C686
seg000:A85E		    add	    sp,	8
seg000:A861		    push    0
seg000:A863		    mov	    ax,	si
seg000:A865		    shl	    ax,	6
seg000:A868		    add	    ax,	di
seg000:A86A		    push    ax
seg000:A86B		    push    18h
seg000:A86D		    push    8
seg000:A86F		    call    sub_C686
seg000:A872		    add	    sp,	8
seg000:A875		    mov	    ax,	si
seg000:A877		    pop	    di
seg000:A878		    pop	    si
seg000:A879		    leave
seg000:A87A		    retn
seg000:A87A sub_A7D9	    endp
seg000:A87A
seg000:A87B
seg000:A87B ; =============== S	U B R O	U T I N	E =======================================
seg000:A87B
seg000:A87B ; Attributes: bp-based frame
seg000:A87B
seg000:A87B sub_A87B	    proc near		    ; DATA XREF: seg000:stru_BDACo
seg000:A87B
seg000:A87B arg_2	    = word ptr	6
seg000:A87B arg_4	    = word ptr	8
seg000:A87B
seg000:A87B		    push    bp
seg000:A87C		    mov	    bp,	sp
seg000:A87E		    push    si
seg000:A87F		    push    ds:cmos_a4f2_idx_0
seg000:A883		    push    ds:cmos_a4f2_idx_1
seg000:A887		    push    [bp+arg_2]
seg000:A88A		    call    sub_A9D1
seg000:A88D		    add	    sp,	6
seg000:A890		    mov	    ds:cmos_a4f2_idx_1,	ax
seg000:A893		    push    34h	; '4'
seg000:A895		    call    CMOS_read_AL
seg000:A898		    pop	    cx
seg000:A899		    mov	    si,	ax
seg000:A89B		    shl	    si,	8
seg000:A89E		    jmp	    short loc_A8B5
seg000:A8A0 ; ---------------------------------------------------------------------------
seg000:A8A0
seg000:A8A0 loc_A8A0:				    ; CODE XREF: sub_A87B+53j
seg000:A8A0		    sub	    ds:cmos_a4f2_idx_0,	2
seg000:A8A5		    mov	    ax,	ds:cmos_a4f2_idx_1
seg000:A8A8		    and	    ax,	ds:cmos_a4f2_idx_0
seg000:A8AC		    test    ax,	1
seg000:A8AF		    jz	    short loc_A8B5
seg000:A8B1		    dec	    ds:cmos_a4f2_idx_0
seg000:A8B5
seg000:A8B5 loc_A8B5:				    ; CODE XREF: sub_A87B+23j
seg000:A8B5					    ; sub_A87B+34j
seg000:A8B5		    mov	    bx,	ds:cmos_a4f2_idx_1
seg000:A8B9		    shl	    bx,	1
seg000:A8BB		    mov	    ax,	ds:word_A4F2[bx]
seg000:A8BF		    mov	    bx,	ds:cmos_a4f2_idx_0
seg000:A8C3		    shl	    bx,	1
seg000:A8C5		    add	    ax,	ds:word_A4F2[bx]
seg000:A8C9		    add	    ax,	400h
seg000:A8CC		    cmp	    ax,	si
seg000:A8CE		    jg	    short loc_A8A0
seg000:A8D0		    push    0
seg000:A8D2		    call    sub_A8E3
seg000:A8D5		    pop	    cx
seg000:A8D6		    push    [bp+arg_4]
seg000:A8D9		    call    sub_A946
seg000:A8DC		    pop	    cx
seg000:A8DD		    mov	    ax,	ds:cmos_a4f2_idx_1
seg000:A8E0		    pop	    si
seg000:A8E1		    pop	    bp
seg000:A8E2		    retn
seg000:A8E2 sub_A87B	    endp
seg000:A8E2
seg000:A8E3
seg000:A8E3 ; =============== S	U B R O	U T I N	E =======================================
seg000:A8E3
seg000:A8E3 ; Attributes: bp-based frame
seg000:A8E3
seg000:A8E3 sub_A8E3	    proc near		    ; CODE XREF: sub_A6AD+4Ep
seg000:A8E3					    ; sub_A771+5Ep ...
seg000:A8E3
seg000:A8E3 var_4	    = word ptr -4
seg000:A8E3 var_2	    = word ptr -2
seg000:A8E3 arg_0	    = word ptr	4
seg000:A8E3
seg000:A8E3		    enter   4, 0
seg000:A8E7		    push    si
seg000:A8E8		    push    di
seg000:A8E9		    mov	    bx,	ds:word_470
seg000:A8ED		    shl	    bx,	1
seg000:A8EF		    mov	    ax,	ds:word_A4EC[bx]
seg000:A8F3		    mov	    [bp+var_4],	ax
seg000:A8F6		    mov	    ax,	380h
seg000:A8F9		    sub	    ax,	[bp+var_4]
seg000:A8FC		    mov	    [bp+var_2],	ax
seg000:A8FF		    mov	    di,	offset stru_BD8E.data
seg000:A902		    mov	    bx,	ds:cmos_a4f2_idx_0
seg000:A906		    shl	    bx,	1
seg000:A908		    mov	    si,	ds:word_A4F2[bx]
seg000:A90C		    mov	    ax,	ds:cmos_a4f2_idx_0
seg000:A90F		    and	    ax,	1
seg000:A912		    cmp	    ax,	1
seg000:A915		    jnz	    short loc_A91A
seg000:A917		    add	    si,	[bp+var_2]
seg000:A91A
seg000:A91A loc_A91A:				    ; CODE XREF: sub_A8E3+32j
seg000:A91A		    push    [bp+arg_0]
seg000:A91D		    push    si
seg000:A91E		    mov	    al,	[di+1]
seg000:A921		    mov	    ah,	0
seg000:A923		    push    ax
seg000:A924		    mov	    al,	[di]
seg000:A926		    mov	    ah,	0
seg000:A928		    push    ax
seg000:A929		    call    sub_C686
seg000:A92C		    add	    sp,	8
seg000:A92F		    push    0
seg000:A931		    push    ds:cmos_17h
seg000:A935		    mov	    ax,	offset stru_BDBB.data
seg000:A938		    push    ax
seg000:A939		    call    sub_A7D9
seg000:A93C		    add	    sp,	6
seg000:A93F		    mov	    ds:cmos_17h, ax
seg000:A942		    pop	    di
seg000:A943		    pop	    si
seg000:A944		    leave
seg000:A945		    retn
seg000:A945 sub_A8E3	    endp
seg000:A945
seg000:A946
seg000:A946 ; =============== S	U B R O	U T I N	E =======================================
seg000:A946
seg000:A946 ; Attributes: bp-based frame
seg000:A946
seg000:A946 sub_A946	    proc near		    ; CODE XREF: sub_A6AD+54p
seg000:A946					    ; sub_A771+57p ...
seg000:A946
seg000:A946 var_4	    = word ptr -4
seg000:A946 var_2	    = word ptr -2
seg000:A946 arg_0	    = word ptr	4
seg000:A946
seg000:A946		    enter   4, 0
seg000:A94A		    push    si
seg000:A94B		    push    di
seg000:A94C		    mov	    bx,	ds:word_470
seg000:A950		    shl	    bx,	1
seg000:A952		    mov	    ax,	ds:word_A4EC[bx]
seg000:A956		    mov	    [bp+var_4],	ax
seg000:A959		    mov	    ax,	380h
seg000:A95C		    sub	    ax,	[bp+var_4]
seg000:A95F		    mov	    [bp+var_2],	ax
seg000:A962		    mov	    si,	offset stru_BD9D.data
seg000:A965		    mov	    bx,	ds:cmos_a4f2_idx_1
seg000:A969		    shl	    bx,	1
seg000:A96B		    mov	    di,	ds:word_A4F2[bx]
seg000:A96F		    mov	    ax,	ds:cmos_a4f2_idx_1
seg000:A972		    and	    ax,	1
seg000:A975		    cmp	    ax,	1
seg000:A978		    jnz	    short loc_A97D
seg000:A97A		    add	    di,	[bp+var_2]
seg000:A97D
seg000:A97D loc_A97D:				    ; CODE XREF: sub_A946+32j
seg000:A97D		    cmp	    ds:cmos_a4f2_idx_1,	0
seg000:A982		    jnz	    short loc_A9B8
seg000:A984		    cmp	    [bp+arg_0],	0
seg000:A988		    jz	    short loc_A9A1
seg000:A98A		    mov	    ax,	offset aOff ; "	-OFF-  "
seg000:A98D		    push    ax
seg000:A98E		    mov	    al,	[si+1]
seg000:A991		    mov	    ah,	0
seg000:A993		    push    ax
seg000:A994		    mov	    al,	[si]
seg000:A996		    mov	    ah,	0
seg000:A998		    push    ax
seg000:A999		    call    mem_copy?_0
seg000:A99C		    add	    sp,	6
seg000:A99F		    jmp	    short loc_A9CD
seg000:A9A1 ; ---------------------------------------------------------------------------
seg000:A9A1
seg000:A9A1 loc_A9A1:				    ; CODE XREF: sub_A946+42j
seg000:A9A1		    mov	    ax,	offset aOff ; "	-OFF-  "
seg000:A9A4		    push    ax
seg000:A9A5		    mov	    al,	[si+1]
seg000:A9A8		    mov	    ah,	0
seg000:A9AA		    push    ax
seg000:A9AB		    mov	    al,	[si]
seg000:A9AD		    mov	    ah,	0
seg000:A9AF		    push    ax
seg000:A9B0		    call    string_copy?
seg000:A9B3		    add	    sp,	6
seg000:A9B6		    jmp	    short loc_A9CD
seg000:A9B8 ; ---------------------------------------------------------------------------
seg000:A9B8
seg000:A9B8 loc_A9B8:				    ; CODE XREF: sub_A946+3Cj
seg000:A9B8		    push    [bp+arg_0]
seg000:A9BB		    push    di
seg000:A9BC		    mov	    al,	[si+1]
seg000:A9BF		    mov	    ah,	0
seg000:A9C1		    push    ax
seg000:A9C2		    mov	    al,	[si]
seg000:A9C4		    mov	    ah,	0
seg000:A9C6		    push    ax
seg000:A9C7		    call    sub_C686
seg000:A9CA		    add	    sp,	8
seg000:A9CD
seg000:A9CD loc_A9CD:				    ; CODE XREF: sub_A946+59j
seg000:A9CD					    ; sub_A946+70j
seg000:A9CD		    pop	    di
seg000:A9CE		    pop	    si
seg000:A9CF		    leave
seg000:A9D0		    retn
seg000:A9D0 sub_A946	    endp
seg000:A9D0
seg000:A9D1
seg000:A9D1 ; =============== S	U B R O	U T I N	E =======================================
seg000:A9D1
seg000:A9D1 ; Attributes: bp-based frame
seg000:A9D1
seg000:A9D1 sub_A9D1	    proc near		    ; CODE XREF: sub_A771+Fp
seg000:A9D1					    ; sub_A87B+Fp
seg000:A9D1
seg000:A9D1 var_2	    = word ptr -2
seg000:A9D1 arg_0	    = word ptr	4
seg000:A9D1 arg_2	    = word ptr	6
seg000:A9D1 arg_4	    = word ptr	8
seg000:A9D1
seg000:A9D1		    enter   2, 0
seg000:A9D5		    push    si
seg000:A9D6		    push    di
seg000:A9D7		    mov	    si,	[bp+arg_0]
seg000:A9DA		    push    34h	; '4'
seg000:A9DC		    call    CMOS_read_AL
seg000:A9DF		    pop	    cx
seg000:A9E0		    mov	    di,	ax
seg000:A9E2		    add	    di,	0FFFCh
seg000:A9E5		    sar	    di,	1
seg000:A9E7		    or	    di,	1
seg000:A9EA		    mov	    [bp+var_2],	0
seg000:A9EF		    mov	    ax,	[bp+arg_2]
seg000:A9F2		    inc	    ax
seg000:A9F3		    cmp	    ax,	si
seg000:A9F5		    jz	    short loc_AA02
seg000:A9F7		    cmp	    si,	1
seg000:A9FA		    jge	    short loc_AA07
seg000:A9FC		    cmp	    [bp+arg_2],	1
seg000:AA00		    jle	    short loc_AA07
seg000:AA02
seg000:AA02 loc_AA02:				    ; CODE XREF: sub_A9D1+24j
seg000:AA02		    mov	    [bp+var_2],	1
seg000:AA07
seg000:AA07 loc_AA07:				    ; CODE XREF: sub_A9D1+29j
seg000:AA07					    ; sub_A9D1+2Fj
seg000:AA07		    cmp	    si,	di
seg000:AA09		    jg	    short loc_AA0F
seg000:AA0B		    or	    si,	si
seg000:AA0D		    jge	    short loc_AA1B
seg000:AA0F
seg000:AA0F loc_AA0F:				    ; CODE XREF: sub_A9D1+38j
seg000:AA0F		    cmp	    [bp+var_2],	0
seg000:AA13		    jnz	    short loc_AA19
seg000:AA15		    mov	    si,	di
seg000:AA17		    jmp	    short loc_AA1B
seg000:AA19 ; ---------------------------------------------------------------------------
seg000:AA19
seg000:AA19 loc_AA19:				    ; CODE XREF: sub_A9D1+42j
seg000:AA19		    xor	    si,	si
seg000:AA1B
seg000:AA1B loc_AA1B:				    ; CODE XREF: sub_A9D1+3Cj
seg000:AA1B					    ; sub_A9D1+46j
seg000:AA1B		    mov	    ax,	[bp+arg_4]
seg000:AA1E		    and	    ax,	si
seg000:AA20		    test    ax,	1
seg000:AA23		    jz	    short loc_AA35
seg000:AA25		    cmp	    [bp+var_2],	1
seg000:AA29		    jnz	    short loc_AA34
seg000:AA2B		    inc	    si
seg000:AA2C		    cmp	    si,	di
seg000:AA2E		    jle	    short loc_AA35
seg000:AA30		    xor	    si,	si
seg000:AA32		    jmp	    short loc_AA35
seg000:AA34 ; ---------------------------------------------------------------------------
seg000:AA34
seg000:AA34 loc_AA34:				    ; CODE XREF: sub_A9D1+58j
seg000:AA34		    dec	    si
seg000:AA35
seg000:AA35 loc_AA35:				    ; CODE XREF: sub_A9D1+52j
seg000:AA35					    ; sub_A9D1+5Dj ...
seg000:AA35		    mov	    ax,	si
seg000:AA37		    pop	    di
seg000:AA38		    pop	    si
seg000:AA39		    leave
seg000:AA3A		    retn
seg000:AA3A sub_A9D1	    endp
seg000:AA3A
seg000:AA3A ; ---------------------------------------------------------------------------
seg000:AA3B Hard	    dw offset aHard	    ; DATA XREF: seg000:ABBBr
seg000:AA3B					    ; seg000:loc_ABD6r	...
seg000:AA3B					    ; "	Hard"
seg000:AA3D ESDI	    dw offset aEsdi	    ; DATA XREF: seg000:AC62r
seg000:AA3D					    ; seg000:loc_AC7Cr
seg000:AA3D					    ; "	ESDI"
seg000:AA3F hdd_not_ready   dw offset aDriveNotReadyC ;	DATA XREF: ide_?_17+64r
seg000:AA3F					    ; "Drive Not Ready!	Can't set drive type y"...
seg000:AA41 no_hdd_ctrl	    dw offset aNoWinchesterDisk	; DATA XREF: ide_?_17+23r
seg000:AA41					    ; "	     No	Winchester Disk	Controller.  "
seg000:AA43 clr_scr?	    db 'È',0Ch,0            ; DATA XREF: seg000:stru_BE7Eo
seg000:AA43					    ; seg000:BE8Do
seg000:AA46		    db	  0
seg000:AA47 ; ---------------------------------------------------------------------------
seg000:AA47		    push    si
seg000:AA48		    push    di
seg000:AA49		    mov	    di,	[bp+6]
seg000:AA4C		    mov	    si,	[bp+4]
seg000:AA4F		    or	    di,	di
seg000:AA51		    jz	    short loc_AA93
seg000:AA53		    cmp	    ds:byte_4CA, 0
seg000:AA58		    jnz	    short loc_AA93
seg000:AA5A		    cmp	    si,	offset stru_BE6F.data
seg000:AA5E		    jnz	    short loc_AA67
seg000:AA60		    test    ds:byte_4EE, 2
seg000:AA65		    jz	    short loc_AA74
seg000:AA67
seg000:AA67 loc_AA67:				    ; CODE XREF: seg000:AA5Ej
seg000:AA67		    cmp	    si,	offset stru_BE7E.data
seg000:AA6B		    jnz	    short loc_AA93
seg000:AA6D		    test    ds:byte_4EE, 4
seg000:AA72		    jnz	    short loc_AA93
seg000:AA74
seg000:AA74 loc_AA74:				    ; CODE XREF: seg000:AA65j
seg000:AA74		    push    si
seg000:AA75		    push    di
seg000:AA76		    call    ide_?_17
seg000:AA79		    pop	    cx
seg000:AA7A		    pop	    cx
seg000:AA7B		    mov	    di,	ax
seg000:AA7D		    or	    di,	di
seg000:AA7F		    jz	    short loc_AA93
seg000:AA81		    cmp	    si,	offset stru_BE6F.data
seg000:AA85		    jnz	    short loc_AA8E
seg000:AA87		    or	    ds:byte_4EE, 2
seg000:AA8C		    jmp	    short loc_AA93
seg000:AA8E ; ---------------------------------------------------------------------------
seg000:AA8E
seg000:AA8E loc_AA8E:				    ; CODE XREF: seg000:AA85j
seg000:AA8E		    or	    ds:byte_4EE, 4
seg000:AA93
seg000:AA93 loc_AA93:				    ; CODE XREF: seg000:AA51j
seg000:AA93					    ; seg000:AA58j ...
seg000:AA93		    test    ds:byte_4EE, 80h
seg000:AA98		    jz	    short loc_AADC
seg000:AA9A		    mov	    ax,	offset spaces_line ; "		     "
seg000:AA9D		    push    ax
seg000:AA9E		    mov	    al,	[si+1]
seg000:AAA1		    mov	    ah,	0
seg000:AAA3		    push    ax
seg000:AAA4		    mov	    al,	[si]
seg000:AAA6		    mov	    ah,	0
seg000:AAA8		    push    ax
seg000:AAA9		    call    string_copy?
seg000:AAAC		    add	    sp,	6
seg000:AAAF		    cmp	    di,	1
seg000:AAB2		    jz	    short loc_AAB8
seg000:AAB4		    or	    di,	di
seg000:AAB6		    jge	    short loc_AABB
seg000:AAB8
seg000:AAB8 loc_AAB8:				    ; CODE XREF: seg000:AAB2j
seg000:AAB8		    mov	    di,	64h ; 'd'
seg000:AABB
seg000:AABB loc_AABB:				    ; CODE XREF: seg000:AAB6j
seg000:AABB		    cmp	    di,	63h ; 'c'
seg000:AABE		    jz	    short loc_AAC5
seg000:AAC0		    cmp	    di,	64h ; 'd'
seg000:AAC3		    jle	    short loc_AAC7
seg000:AAC5
seg000:AAC5 loc_AAC5:				    ; CODE XREF: seg000:AABEj
seg000:AAC5		    xor	    di,	di
seg000:AAC7
seg000:AAC7 loc_AAC7:				    ; CODE XREF: seg000:AAC3j
seg000:AAC7		    cmp	    di,	64h ; 'd'
seg000:AACA		    jnz	    short loc_AAEF
seg000:AACC		    push    si
seg000:AACD		    call    sub_B119
seg000:AAD0		    pop	    cx
seg000:AAD1		    or	    ax,	ax
seg000:AAD3		    jnz	    short loc_AAEF
seg000:AAD5		    call    outChar_VGA
seg000:AAD8		    xor	    di,	di
seg000:AADA		    jmp	    short loc_AAEF
seg000:AADC ; ---------------------------------------------------------------------------
seg000:AADC
seg000:AADC loc_AADC:				    ; CODE XREF: seg000:AA98j
seg000:AADC		    or	    di,	di
seg000:AADE		    jl	    short loc_AAE5
seg000:AAE0		    cmp	    di,	64h ; 'd'
seg000:AAE3		    jnz	    short loc_AAE8
seg000:AAE5
seg000:AAE5 loc_AAE5:				    ; CODE XREF: seg000:AADEj
seg000:AAE5		    mov	    di,	3Eh ; '>'
seg000:AAE8
seg000:AAE8 loc_AAE8:				    ; CODE XREF: seg000:AAE3j
seg000:AAE8		    cmp	    di,	3Fh ; '?'
seg000:AAEB		    jl	    short loc_AAEF
seg000:AAED		    xor	    di,	di
seg000:AAEF
seg000:AAEF loc_AAEF:				    ; CODE XREF: seg000:AACAj
seg000:AAEF					    ; seg000:AAD3j ...
seg000:AAEF		    or	    di,	di
seg000:AAF1		    jz	    short loc_AAF6
seg000:AAF3		    jmp	    loc_ABF1
seg000:AAF6 ; ---------------------------------------------------------------------------
seg000:AAF6
seg000:AAF6 loc_AAF6:				    ; CODE XREF: seg000:AAF1j
seg000:AAF6		    cmp	    ds:byte_4CA, 0
seg000:AAFB		    jz	    short loc_AB00
seg000:AAFD		    jmp	    loc_ABF1
seg000:AB00 ; ---------------------------------------------------------------------------
seg000:AB00
seg000:AB00 loc_AB00:				    ; CODE XREF: seg000:AAFBj
seg000:AB00		    mov	    ax,	offset aNotPresent_0 ; " -Not Present- "
seg000:AB03		    push    ax
seg000:AB04		    mov	    al,	[si+1]
seg000:AB07		    mov	    ah,	0
seg000:AB09		    push    ax
seg000:AB0A		    mov	    al,	[si]
seg000:AB0C		    mov	    ah,	0
seg000:AB0E		    push    ax
seg000:AB0F		    call    mem_copy?_0
seg000:AB12		    add	    sp,	6
seg000:AB15		    mov	    ax,	offset spaces_lineend ;	"    "
seg000:AB18		    push    ax
seg000:AB19		    mov	    al,	[si+1]
seg000:AB1C		    mov	    ah,	0
seg000:AB1E		    add	    ax,	0FFFAh
seg000:AB21		    push    ax
seg000:AB22		    mov	    al,	[si]
seg000:AB24		    mov	    ah,	0
seg000:AB26		    inc	    ax
seg000:AB27		    inc	    ax
seg000:AB28		    push    ax
seg000:AB29		    call    string_copy?
seg000:AB2C		    add	    sp,	6
seg000:AB2F		    mov	    ax,	offset spaces_lineend ;	"    "
seg000:AB32		    push    ax
seg000:AB33		    mov	    al,	[si+1]
seg000:AB36		    mov	    ah,	0
seg000:AB38		    add	    ax,	0Ah
seg000:AB3B		    push    ax
seg000:AB3C		    mov	    al,	[si]
seg000:AB3E		    mov	    ah,	0
seg000:AB40		    inc	    ax
seg000:AB41		    inc	    ax
seg000:AB42		    push    ax
seg000:AB43		    call    string_copy?
seg000:AB46		    add	    sp,	6
seg000:AB49		    mov	    ax,	offset spaces_lineend ;	"    "
seg000:AB4C		    push    ax
seg000:AB4D		    mov	    al,	[si+1]
seg000:AB50		    mov	    ah,	0
seg000:AB52		    add	    ax,	0FFFAh
seg000:AB55		    push    ax
seg000:AB56		    mov	    al,	[si]
seg000:AB58		    mov	    ah,	0
seg000:AB5A		    add	    ax,	3
seg000:AB5D		    push    ax
seg000:AB5E		    call    string_copy?
seg000:AB61		    add	    sp,	6
seg000:AB64		    mov	    ax,	offset spaces_lineend ;	"    "
seg000:AB67		    push    ax
seg000:AB68		    mov	    al,	[si+1]
seg000:AB6B		    mov	    ah,	0
seg000:AB6D		    add	    ax,	0Ah
seg000:AB70		    push    ax
seg000:AB71		    mov	    al,	[si]
seg000:AB73		    mov	    ah,	0
seg000:AB75		    add	    ax,	3
seg000:AB78		    push    ax
seg000:AB79		    call    string_copy?
seg000:AB7C		    add	    sp,	6
seg000:AB7F		    mov	    ax,	offset spaces_lineend ;	"    "
seg000:AB82		    push    ax
seg000:AB83		    mov	    al,	[si+1]
seg000:AB86		    mov	    ah,	0
seg000:AB88		    add	    ax,	0FFFAh
seg000:AB8B		    push    ax
seg000:AB8C		    mov	    al,	[si]
seg000:AB8E		    mov	    ah,	0
seg000:AB90		    add	    ax,	4
seg000:AB93		    push    ax
seg000:AB94		    call    string_copy?
seg000:AB97		    add	    sp,	6
seg000:AB9A		    mov	    ax,	offset spaces_lineend ;	"    "
seg000:AB9D		    push    ax
seg000:AB9E		    mov	    al,	[si+1]
seg000:ABA1		    mov	    ah,	0
seg000:ABA3		    add	    ax,	0Ah
seg000:ABA6		    push    ax
seg000:ABA7		    mov	    al,	[si]
seg000:ABA9		    mov	    ah,	0
seg000:ABAB		    add	    ax,	4
seg000:ABAE		    push    ax
seg000:ABAF		    call    string_copy?
seg000:ABB2		    add	    sp,	6
seg000:ABB5		    cmp	    word ptr [bp+8], 0
seg000:ABB9		    jz	    short loc_ABD6
seg000:ABBB		    push    ds:Hard
seg000:ABBF		    mov	    al,	[si+1]
seg000:ABC2		    mov	    ah,	0
seg000:ABC4		    add	    ax,	0FFECh
seg000:ABC7		    push    ax
seg000:ABC8		    mov	    al,	[si]
seg000:ABCA		    mov	    ah,	0
seg000:ABCC		    push    ax
seg000:ABCD		    call    mem_copy?_0
seg000:ABD0		    add	    sp,	6
seg000:ABD3		    jmp	    loc_B03C
seg000:ABD6 ; ---------------------------------------------------------------------------
seg000:ABD6
seg000:ABD6 loc_ABD6:				    ; CODE XREF: seg000:ABB9j
seg000:ABD6		    push    ds:Hard
seg000:ABDA		    mov	    al,	[si+1]
seg000:ABDD		    mov	    ah,	0
seg000:ABDF		    add	    ax,	0FFECh
seg000:ABE2		    push    ax
seg000:ABE3		    mov	    al,	[si]
seg000:ABE5		    mov	    ah,	0
seg000:ABE7		    push    ax
seg000:ABE8		    call    string_copy?
seg000:ABEB		    add	    sp,	6
seg000:ABEE		    jmp	    loc_B03C
seg000:ABF1 ; ---------------------------------------------------------------------------
seg000:ABF1
seg000:ABF1 loc_ABF1:				    ; CODE XREF: seg000:AAF3j
seg000:ABF1					    ; seg000:AAFDj
seg000:ABF1		    cmp	    ds:byte_4CA, 0
seg000:ABF6		    jz	    short loc_AC16
seg000:ABF8		    push    si
seg000:ABF9		    call    loc_B0C8
seg000:ABFC		    pop	    cx
seg000:ABFD		    mov	    di,	ax
seg000:ABFF		    mov	    ax,	offset aTempest	; " Tempest    "
seg000:AC02		    push    ax
seg000:AC03		    mov	    al,	[si+1]
seg000:AC06		    mov	    ah,	0
seg000:AC08		    push    ax
seg000:AC09		    mov	    al,	[si]
seg000:AC0B		    mov	    ah,	0
seg000:AC0D		    push    ax
seg000:AC0E		    call    mem_copy?_0
seg000:AC11		    add	    sp,	6
seg000:AC14		    jmp	    short loc_AC2B
seg000:AC16 ; ---------------------------------------------------------------------------
seg000:AC16
seg000:AC16 loc_AC16:				    ; CODE XREF: seg000:ABF6j
seg000:AC16		    mov	    ax,	offset aDriveType ; " Drive Type "
seg000:AC19		    push    ax
seg000:AC1A		    mov	    al,	[si+1]
seg000:AC1D		    mov	    ah,	0
seg000:AC1F		    push    ax
seg000:AC20		    mov	    al,	[si]
seg000:AC22		    mov	    ah,	0
seg000:AC24		    push    ax
seg000:AC25		    call    mem_copy?_0
seg000:AC28		    add	    sp,	6
seg000:AC2B
seg000:AC2B loc_AC2B:				    ; CODE XREF: seg000:AC14j
seg000:AC2B		    cmp	    di,	64h ; 'd'
seg000:AC2E		    jz	    short loc_AC33
seg000:AC30		    jmp	    loc_ADC1
seg000:AC33 ; ---------------------------------------------------------------------------
seg000:AC33
seg000:AC33 loc_AC33:				    ; CODE XREF: seg000:AC2Ej
seg000:AC33		    push    3
seg000:AC35		    lea	    ax,	[bp-0Ch]
seg000:AC38		    push    ax
seg000:AC39		    push    di
seg000:AC3A		    call    sub_D309
seg000:AC3D		    add	    sp,	6
seg000:AC40		    mov	    byte ptr [bp-9], 0
seg000:AC44		    lea	    ax,	[bp-0Ch]
seg000:AC47		    push    ax
seg000:AC48		    mov	    al,	[si+1]
seg000:AC4B		    mov	    ah,	0
seg000:AC4D		    add	    ax,	0Ch
seg000:AC50		    push    ax
seg000:AC51		    mov	    al,	[si]
seg000:AC53		    mov	    ah,	0
seg000:AC55		    push    ax
seg000:AC56		    call    mem_copy?_0
seg000:AC59		    add	    sp,	6
seg000:AC5C		    cmp	    word ptr [bp+8], 0
seg000:AC60		    jz	    short loc_AC7C
seg000:AC62		    push    ds:ESDI
seg000:AC66		    mov	    al,	[si+1]
seg000:AC69		    mov	    ah,	0
seg000:AC6B		    add	    ax,	0FFECh
seg000:AC6E		    push    ax
seg000:AC6F		    mov	    al,	[si]
seg000:AC71		    mov	    ah,	0
seg000:AC73		    push    ax
seg000:AC74		    call    mem_copy?_0
seg000:AC77		    add	    sp,	6
seg000:AC7A		    jmp	    short loc_AC94
seg000:AC7C ; ---------------------------------------------------------------------------
seg000:AC7C
seg000:AC7C loc_AC7C:				    ; CODE XREF: seg000:AC60j
seg000:AC7C		    push    ds:ESDI
seg000:AC80		    mov	    al,	[si+1]
seg000:AC83		    mov	    ah,	0
seg000:AC85		    add	    ax,	0FFECh
seg000:AC88		    push    ax
seg000:AC89		    mov	    al,	[si]
seg000:AC8B		    mov	    ah,	0
seg000:AC8D		    push    ax
seg000:AC8E		    call    string_copy?
seg000:AC91		    add	    sp,	6
seg000:AC94
seg000:AC94 loc_AC94:				    ; CODE XREF: seg000:AC7Aj
seg000:AC94		    push    si
seg000:AC95		    call    sub_B119
seg000:AC98		    pop	    cx
seg000:AC99		    mov	    [bp-2], ax
seg000:AC9C		    push    4
seg000:AC9E		    lea	    ax,	[bp-0Ch]
seg000:ACA1		    push    ax
seg000:ACA2		    push    word ptr [bp-2]
seg000:ACA5		    call    sub_D309
seg000:ACA8		    add	    sp,	6
seg000:ACAB		    mov	    byte ptr [bp-8], 0
seg000:ACAF		    lea	    ax,	[bp-0Ch]
seg000:ACB2		    push    ax
seg000:ACB3		    mov	    al,	[si+1]
seg000:ACB6		    mov	    ah,	0
seg000:ACB8		    add	    ax,	0FFFAh
seg000:ACBB		    push    ax
seg000:ACBC		    mov	    al,	[si]
seg000:ACBE		    mov	    ah,	0
seg000:ACC0		    inc	    ax
seg000:ACC1		    inc	    ax
seg000:ACC2		    push    ax
seg000:ACC3		    call    string_copy?
seg000:ACC6		    add	    sp,	6
seg000:ACC9		    push    2
seg000:ACCB		    lea	    ax,	[bp-0Ch]
seg000:ACCE		    push    ax
seg000:ACCF		    push    10h
seg000:ACD1		    call    sub_D309
seg000:ACD4		    add	    sp,	6
seg000:ACD7		    mov	    byte ptr [bp-0Ah], 0
seg000:ACDB		    lea	    ax,	[bp-0Ch]
seg000:ACDE		    push    ax
seg000:ACDF		    mov	    al,	[si+1]
seg000:ACE2		    mov	    ah,	0
seg000:ACE4		    add	    ax,	0Ch
seg000:ACE7		    push    ax
seg000:ACE8		    mov	    al,	[si]
seg000:ACEA		    mov	    ah,	0
seg000:ACEC		    inc	    ax
seg000:ACED		    inc	    ax
seg000:ACEE		    push    ax
seg000:ACEF		    call    string_copy?
seg000:ACF2		    add	    sp,	6
seg000:ACF5		    push    4
seg000:ACF7		    lea	    ax,	[bp-0Ch]
seg000:ACFA		    push    ax
seg000:ACFB		    mov	    ax,	[bp-2]
seg000:ACFE		    inc	    ax
seg000:ACFF		    push    ax
seg000:AD00		    call    sub_D309
seg000:AD03		    add	    sp,	6
seg000:AD06		    mov	    byte ptr [bp-8], 0
seg000:AD0A		    lea	    ax,	[bp-0Ch]
seg000:AD0D		    push    ax
seg000:AD0E		    mov	    al,	[si+1]
seg000:AD11		    mov	    ah,	0
seg000:AD13		    add	    ax,	0FFFAh
seg000:AD16		    push    ax
seg000:AD17		    mov	    al,	[si]
seg000:AD19		    mov	    ah,	0
seg000:AD1B		    add	    ax,	3
seg000:AD1E		    push    ax
seg000:AD1F		    call    string_copy?
seg000:AD22		    add	    sp,	6
seg000:AD25		    push    2
seg000:AD27		    lea	    ax,	[bp-0Ch]
seg000:AD2A		    push    ax
seg000:AD2B		    push    3Fh	; '?'
seg000:AD2D		    call    sub_D309
seg000:AD30		    add	    sp,	6
seg000:AD33		    mov	    byte ptr [bp-0Ah], 0
seg000:AD37		    lea	    ax,	[bp-0Ch]
seg000:AD3A		    push    ax
seg000:AD3B		    mov	    al,	[si+1]
seg000:AD3E		    mov	    ah,	0
seg000:AD40		    add	    ax,	0Ch
seg000:AD43		    push    ax
seg000:AD44		    mov	    al,	[si]
seg000:AD46		    mov	    ah,	0
seg000:AD48		    add	    ax,	3
seg000:AD4B		    push    ax
seg000:AD4C		    call    string_copy?
seg000:AD4F		    add	    sp,	6
seg000:AD52		    mov	    byte ptr [bp-0Ch], 20h ; ' '
seg000:AD56		    mov	    byte ptr [bp-0Bh], 4Fh ; 'O'
seg000:AD5A		    mov	    al,	66h ; 'f'
seg000:AD5C		    mov	    [bp-9], al
seg000:AD5F		    mov	    [bp-0Ah], al
seg000:AD62		    mov	    byte ptr [bp-8], 0
seg000:AD66		    lea	    ax,	[bp-0Ch]
seg000:AD69		    push    ax
seg000:AD6A		    mov	    al,	[si+1]
seg000:AD6D		    mov	    ah,	0
seg000:AD6F		    add	    ax,	0FFFAh
seg000:AD72		    push    ax
seg000:AD73		    mov	    al,	[si]
seg000:AD75		    mov	    ah,	0
seg000:AD77		    add	    ax,	4
seg000:AD7A		    push    ax
seg000:AD7B		    call    string_copy?
seg000:AD7E		    add	    sp,	6
seg000:AD81		    push    4
seg000:AD83		    lea	    ax,	[bp-0Ch]
seg000:AD86		    push    ax
seg000:AD87		    push    3Fh	; '?'
seg000:AD89		    push    10h
seg000:AD8B		    push    word ptr [bp-2]
seg000:AD8E		    call    sub_B0EE
seg000:AD91		    add	    sp,	6
seg000:AD94		    push    ax
seg000:AD95		    call    sub_D309
seg000:AD98		    add	    sp,	6
seg000:AD9B		    mov	    byte ptr [bp-8], 4Dh ; 'M'
seg000:AD9F		    mov	    byte ptr [bp-7], 0
seg000:ADA3		    lea	    ax,	[bp-0Ch]
seg000:ADA6		    push    ax
seg000:ADA7		    mov	    al,	[si+1]
seg000:ADAA		    mov	    ah,	0
seg000:ADAC		    add	    ax,	9
seg000:ADAF		    push    ax
seg000:ADB0		    mov	    al,	[si]
seg000:ADB2		    mov	    ah,	0
seg000:ADB4		    add	    ax,	4
seg000:ADB7		    push    ax
seg000:ADB8		    call    string_copy?
seg000:ADBB		    add	    sp,	6
seg000:ADBE		    jmp	    loc_B03C
seg000:ADC1 ; ---------------------------------------------------------------------------
seg000:ADC1
seg000:ADC1 loc_ADC1:				    ; CODE XREF: seg000:AC30j
seg000:ADC1		    push    2
seg000:ADC3		    lea	    ax,	[bp-0Ch]
seg000:ADC6		    push    ax
seg000:ADC7		    push    di
seg000:ADC8		    call    sub_D309
seg000:ADCB		    add	    sp,	6
seg000:ADCE		    mov	    byte ptr [bp-0Ah], 20h ; ' '
seg000:ADD2		    mov	    byte ptr [bp-9], 0
seg000:ADD6		    lea	    ax,	[bp-0Ch]
seg000:ADD9		    push    ax
seg000:ADDA		    mov	    al,	[si+1]
seg000:ADDD		    mov	    ah,	0
seg000:ADDF		    add	    ax,	0Ch
seg000:ADE2		    push    ax
seg000:ADE3		    mov	    al,	[si]
seg000:ADE5		    mov	    ah,	0
seg000:ADE7		    push    ax
seg000:ADE8		    call    mem_copy?_0
seg000:ADEB		    add	    sp,	6
seg000:ADEE		    mov	    ax,	di
seg000:ADF0		    dec	    ax
seg000:ADF1		    mov	    [bp-2], ax
seg000:ADF4		    cmp	    ax,	0Eh
seg000:ADF7		    jl	    short loc_ADFC
seg000:ADF9		    inc	    word ptr [bp-2]
seg000:ADFC
seg000:ADFC loc_ADFC:				    ; CODE XREF: seg000:ADF7j
seg000:ADFC		    cmp	    ds:byte_4CA, 0
seg000:AE01		    jnz	    short loc_AE34
seg000:AE03		    cmp	    word ptr [bp-2], 2Eh ; '.'
seg000:AE07		    jge	    short loc_AE1D
seg000:AE09		    mov	    bx,	[bp-2]
seg000:AE0C		    shl	    bx,	4
seg000:AE0F		    add	    bx,	0E401h
seg000:AE13		    push    ds
seg000:AE14		    pop	    es
seg000:AE15		    assume es:nothing
seg000:AE15		    mov	    word ptr [bp-4], es
seg000:AE18		    mov	    [bp-6], bx
seg000:AE1B		    jmp	    short loc_AE53
seg000:AE1D ; ---------------------------------------------------------------------------
seg000:AE1D
seg000:AE1D loc_AE1D:				    ; CODE XREF: seg000:AE07j
seg000:AE1D		    mov	    bx,	[bp-2]
seg000:AE20		    add	    bx,	0FFD2h
seg000:AE23		    shl	    bx,	4
seg000:AE26		    add	    bx,	0F94Bh
seg000:AE2A		    push    ds
seg000:AE2B		    pop	    es
seg000:AE2C		    mov	    word ptr [bp-4], es
seg000:AE2F		    mov	    [bp-6], bx
seg000:AE32		    jmp	    short loc_AE53
seg000:AE34 ; ---------------------------------------------------------------------------
seg000:AE34
seg000:AE34 loc_AE34:				    ; CODE XREF: seg000:AE01j
seg000:AE34		    push    es
seg000:AE35		    xor	    ax,	ax
seg000:AE37		    mov	    es,	ax
seg000:AE39		    mov	    bx,	word ptr es:loc_104
seg000:AE3E		    mov	    es,	word ptr es:loc_104+2
seg000:AE43		    assume es:nothing
seg000:AE43		    mov	    ax,	[bp-2]
seg000:AE46		    mov	    cl,	4
seg000:AE48		    shl	    ax,	cl
seg000:AE4A		    add	    bx,	ax
seg000:AE4C		    mov	    [bp-6], bx
seg000:AE4F		    mov	    word ptr [bp-4], es
seg000:AE52		    pop	    es
seg000:AE53		    assume es:nothing
seg000:AE53
seg000:AE53 loc_AE53:				    ; CODE XREF: seg000:AE1Bj
seg000:AE53					    ; seg000:AE32j
seg000:AE53		    push    4
seg000:AE55		    lea	    ax,	[bp-0Ch]
seg000:AE58		    push    ax
seg000:AE59		    les	    bx,	[bp-6]
seg000:AE5C		    push    word ptr es:[bx]
seg000:AE5F		    call    sub_D309
seg000:AE62		    add	    sp,	6
seg000:AE65		    mov	    byte ptr [bp-8], 0
seg000:AE69		    lea	    ax,	[bp-0Ch]
seg000:AE6C		    push    ax
seg000:AE6D		    mov	    al,	[si+1]
seg000:AE70		    mov	    ah,	0
seg000:AE72		    add	    ax,	0FFFAh
seg000:AE75		    push    ax
seg000:AE76		    mov	    al,	[si]
seg000:AE78		    mov	    ah,	0
seg000:AE7A		    inc	    ax
seg000:AE7B		    inc	    ax
seg000:AE7C		    push    ax
seg000:AE7D		    call    string_copy?
seg000:AE80		    add	    sp,	6
seg000:AE83		    push    2
seg000:AE85		    lea	    ax,	[bp-0Ch]
seg000:AE88		    push    ax
seg000:AE89		    les	    bx,	[bp-6]
seg000:AE8C		    mov	    al,	es:[bx+2]
seg000:AE90		    mov	    ah,	0
seg000:AE92		    push    ax
seg000:AE93		    call    sub_D309
seg000:AE96		    add	    sp,	6
seg000:AE99		    mov	    byte ptr [bp-0Ah], 0
seg000:AE9D		    lea	    ax,	[bp-0Ch]
seg000:AEA0		    push    ax
seg000:AEA1		    mov	    al,	[si+1]
seg000:AEA4		    mov	    ah,	0
seg000:AEA6		    add	    ax,	0Ch
seg000:AEA9		    push    ax
seg000:AEAA		    mov	    al,	[si]
seg000:AEAC		    mov	    ah,	0
seg000:AEAE		    inc	    ax
seg000:AEAF		    inc	    ax
seg000:AEB0		    push    ax
seg000:AEB1		    call    string_copy?
seg000:AEB4		    add	    sp,	6
seg000:AEB7		    cmp	    ds:byte_4CA, 0
seg000:AEBC		    jnz	    short loc_AED3
seg000:AEBE		    push    4
seg000:AEC0		    lea	    ax,	[bp-0Ch]
seg000:AEC3		    push    ax
seg000:AEC4		    les	    bx,	[bp-6]
seg000:AEC7		    push    word ptr es:[bx+0Ch]
seg000:AECB		    call    sub_D309
seg000:AECE		    add	    sp,	6
seg000:AED1		    jmp	    short loc_AEE7
seg000:AED3 ; ---------------------------------------------------------------------------
seg000:AED3
seg000:AED3 loc_AED3:				    ; CODE XREF: seg000:AEBCj
seg000:AED3		    push    4
seg000:AED5		    lea	    ax,	[bp-0Ch]
seg000:AED8		    push    ax
seg000:AED9		    les	    bx,	[bp-6]
seg000:AEDC		    mov	    ax,	es:[bx]
seg000:AEDF		    inc	    ax
seg000:AEE0		    push    ax
seg000:AEE1		    call    sub_D309
seg000:AEE4		    add	    sp,	6
seg000:AEE7
seg000:AEE7 loc_AEE7:				    ; CODE XREF: seg000:AED1j
seg000:AEE7		    mov	    byte ptr [bp-8], 0
seg000:AEEB		    lea	    ax,	[bp-0Ch]
seg000:AEEE		    push    ax
seg000:AEEF		    mov	    al,	[si+1]
seg000:AEF2		    mov	    ah,	0
seg000:AEF4		    add	    ax,	0FFFAh
seg000:AEF7		    push    ax
seg000:AEF8		    mov	    al,	[si]
seg000:AEFA		    mov	    ah,	0
seg000:AEFC		    add	    ax,	3
seg000:AEFF		    push    ax
seg000:AF00		    call    string_copy?
seg000:AF03		    add	    sp,	6
seg000:AF06		    cmp	    ds:byte_4CA, 0
seg000:AF0B		    jnz	    short loc_AF25
seg000:AF0D		    push    2
seg000:AF0F		    lea	    ax,	[bp-0Ch]
seg000:AF12		    push    ax
seg000:AF13		    les	    bx,	[bp-6]
seg000:AF16		    mov	    al,	es:[bx+0Eh]
seg000:AF1A		    mov	    ah,	0
seg000:AF1C		    push    ax
seg000:AF1D		    call    sub_D309
seg000:AF20		    add	    sp,	6
seg000:AF23		    jmp	    short loc_AF33
seg000:AF25 ; ---------------------------------------------------------------------------
seg000:AF25
seg000:AF25 loc_AF25:				    ; CODE XREF: seg000:AF0Bj
seg000:AF25		    push    2
seg000:AF27		    lea	    ax,	[bp-0Ch]
seg000:AF2A		    push    ax
seg000:AF2B		    push    11h
seg000:AF2D		    call    sub_D309
seg000:AF30		    add	    sp,	6
seg000:AF33
seg000:AF33 loc_AF33:				    ; CODE XREF: seg000:AF23j
seg000:AF33		    mov	    byte ptr [bp-0Ah], 0
seg000:AF37		    lea	    ax,	[bp-0Ch]
seg000:AF3A		    push    ax
seg000:AF3B		    mov	    al,	[si+1]
seg000:AF3E		    mov	    ah,	0
seg000:AF40		    add	    ax,	0Ch
seg000:AF43		    push    ax
seg000:AF44		    mov	    al,	[si]
seg000:AF46		    mov	    ah,	0
seg000:AF48		    add	    ax,	3
seg000:AF4B		    push    ax
seg000:AF4C		    call    string_copy?
seg000:AF4F		    add	    sp,	6
seg000:AF52		    les	    bx,	[bp-6]
seg000:AF55		    cmp	    word ptr es:[bx+5],	0FFFFh
seg000:AF5A		    jnz	    short loc_AF6E
seg000:AF5C		    mov	    byte ptr [bp-0Ch], 20h ; ' '
seg000:AF60		    mov	    byte ptr [bp-0Bh], 4Fh ; 'O'
seg000:AF64		    mov	    al,	66h ; 'f'
seg000:AF66		    mov	    [bp-9], al
seg000:AF69		    mov	    [bp-0Ah], al
seg000:AF6C		    jmp	    short loc_AF85
seg000:AF6E ; ---------------------------------------------------------------------------
seg000:AF6E
seg000:AF6E loc_AF6E:				    ; CODE XREF: seg000:AF5Aj
seg000:AF6E		    push    4
seg000:AF70		    lea	    ax,	[bp-0Ch]
seg000:AF73		    push    ax
seg000:AF74		    les	    bx,	[bp-6]
seg000:AF77		    mov	    ax,	es:[bx+5]
seg000:AF7B		    and	    ax,	3FFh
seg000:AF7E		    push    ax
seg000:AF7F		    call    sub_D309
seg000:AF82		    add	    sp,	6
seg000:AF85
seg000:AF85 loc_AF85:				    ; CODE XREF: seg000:AF6Cj
seg000:AF85		    mov	    byte ptr [bp-8], 0
seg000:AF89		    lea	    ax,	[bp-0Ch]
seg000:AF8C		    push    ax
seg000:AF8D		    mov	    al,	[si+1]
seg000:AF90		    mov	    ah,	0
seg000:AF92		    add	    ax,	0FFFAh
seg000:AF95		    push    ax
seg000:AF96		    mov	    al,	[si]
seg000:AF98		    mov	    ah,	0
seg000:AF9A		    add	    ax,	4
seg000:AF9D		    push    ax
seg000:AF9E		    call    string_copy?
seg000:AFA1		    add	    sp,	6
seg000:AFA4		    push    4
seg000:AFA6		    lea	    ax,	[bp-0Ch]
seg000:AFA9		    push    ax
seg000:AFAA		    cmp	    ds:byte_4CA, 0
seg000:AFAF		    jnz	    short loc_AFBC
seg000:AFB1		    les	    bx,	[bp-6]
seg000:AFB4		    mov	    al,	es:[bx+0Eh]
seg000:AFB8		    mov	    ah,	0
seg000:AFBA		    jmp	    short loc_AFBF
seg000:AFBC ; ---------------------------------------------------------------------------
seg000:AFBC
seg000:AFBC loc_AFBC:				    ; CODE XREF: seg000:AFAFj
seg000:AFBC		    mov	    ax,	11h
seg000:AFBF
seg000:AFBF loc_AFBF:				    ; CODE XREF: seg000:AFBAj
seg000:AFBF		    push    ax
seg000:AFC0		    les	    bx,	[bp-6]
seg000:AFC3		    mov	    al,	es:[bx+2]
seg000:AFC7		    mov	    ah,	0
seg000:AFC9		    push    ax
seg000:AFCA		    push    word ptr es:[bx]
seg000:AFCD		    call    sub_B0EE
seg000:AFD0		    add	    sp,	6
seg000:AFD3		    push    ax
seg000:AFD4		    call    sub_D309
seg000:AFD7		    add	    sp,	6
seg000:AFDA		    mov	    byte ptr [bp-8], 4Dh ; 'M'
seg000:AFDE		    mov	    byte ptr [bp-7], 0
seg000:AFE2		    lea	    ax,	[bp-0Ch]
seg000:AFE5		    push    ax
seg000:AFE6		    mov	    al,	[si+1]
seg000:AFE9		    mov	    ah,	0
seg000:AFEB		    add	    ax,	9
seg000:AFEE		    push    ax
seg000:AFEF		    mov	    al,	[si]
seg000:AFF1		    mov	    ah,	0
seg000:AFF3		    add	    ax,	4
seg000:AFF6		    push    ax
seg000:AFF7		    call    string_copy?
seg000:AFFA		    add	    sp,	6
seg000:AFFD		    cmp	    word ptr [bp+8], 0
seg000:B001		    jz	    short loc_B01D
seg000:B003		    push    ds:Hard
seg000:B007		    mov	    al,	[si+1]
seg000:B00A		    mov	    ah,	0
seg000:B00C		    add	    ax,	0FFECh
seg000:B00F		    push    ax
seg000:B010		    mov	    al,	[si]
seg000:B012		    mov	    ah,	0
seg000:B014		    push    ax
seg000:B015		    call    mem_copy?_0
seg000:B018		    add	    sp,	6
seg000:B01B		    jmp	    short loc_B035
seg000:B01D ; ---------------------------------------------------------------------------
seg000:B01D
seg000:B01D loc_B01D:				    ; CODE XREF: seg000:B001j
seg000:B01D		    push    ds:Hard
seg000:B021		    mov	    al,	[si+1]
seg000:B024		    mov	    ah,	0
seg000:B026		    add	    ax,	0FFECh
seg000:B029		    push    ax
seg000:B02A		    mov	    al,	[si]
seg000:B02C		    mov	    ah,	0
seg000:B02E		    push    ax
seg000:B02F		    call    string_copy?
seg000:B032		    add	    sp,	6
seg000:B035
seg000:B035 loc_B035:				    ; CODE XREF: seg000:B01Bj
seg000:B035		    cmp	    ds:byte_4CA, 0
seg000:B03A		    jnz	    short loc_B040
seg000:B03C
seg000:B03C loc_B03C:				    ; CODE XREF: seg000:ABD3j
seg000:B03C					    ; seg000:ABEEj ...
seg000:B03C		    mov	    ax,	di
seg000:B03E		    jmp	    short loc_B044
seg000:B040 ; ---------------------------------------------------------------------------
seg000:B040
seg000:B040 loc_B040:				    ; CODE XREF: seg000:B03Aj
seg000:B040		    xor	    ax,	ax
seg000:B042		    jmp	    short $+2
seg000:B044
seg000:B044 loc_B044:				    ; CODE XREF: seg000:B03Ej
seg000:B044		    pop	    di
seg000:B045		    pop	    si
seg000:B046		    leave
seg000:B047		    retn
seg000:B048
seg000:B048 ; =============== S	U B R O	U T I N	E =======================================
seg000:B048
seg000:B048 ; Attributes: bp-based frame
seg000:B048
seg000:B048 ide_?_17	    proc near		    ; CODE XREF: seg000:AA76p
seg000:B048
seg000:B048 var_2	    = word ptr -2
seg000:B048 arg_0	    = word ptr	4
seg000:B048 arg_2	    = word ptr	6
seg000:B048
seg000:B048		    enter   2, 0
seg000:B04C		    mov	    dx,	1F4h
seg000:B04F		    mov	    al,	55h ; 'U'
seg000:B051		    out	    dx,	al	    ; AT hard disk controller:
seg000:B051					    ; Cylinder high (bits 0-1 are bits 8-9 of 10-bit cylinder number)
seg000:B052		    push    dx
seg000:B053		    pop	    dx
seg000:B054		    in	    al,	dx	    ; AT hard disk controller:
seg000:B054					    ; Cylinder high (bits 0-1 are bits 8-9 of 10-bit cylinder number)
seg000:B055		    cmp	    al,	55h ; 'U'
seg000:B057		    mov	    ax,	0FFFFh
seg000:B05A		    jz	    short loc_B05F
seg000:B05C		    mov	    ax,	0
seg000:B05F
seg000:B05F loc_B05F:				    ; CODE XREF: ide_?_17+12j
seg000:B05F		    mov	    [bp+var_2],	ax
seg000:B062		    cmp	    [bp+var_2],	0
seg000:B066		    jnz	    short loc_B07B
seg000:B068		    call    outChar_VGA
seg000:B06B		    push    ds:no_hdd_ctrl
seg000:B06F		    push    13h
seg000:B071		    push    17h
seg000:B073		    call    mem_copy?_0
seg000:B076		    add	    sp,	6
seg000:B079		    jmp	    short loc_B0BA
seg000:B07B ; ---------------------------------------------------------------------------
seg000:B07B
seg000:B07B loc_B07B:				    ; CODE XREF: ide_?_17+1Ej
seg000:B07B		    cmp	    [bp+arg_2],	offset stru_BE6F.data
seg000:B080		    jnz	    short loc_B089
seg000:B082		    mov	    [bp+var_2],	0A0h ; ' '
seg000:B087		    jmp	    short loc_B08E
seg000:B089 ; ---------------------------------------------------------------------------
seg000:B089
seg000:B089 loc_B089:				    ; CODE XREF: ide_?_17+38j
seg000:B089		    mov	    [bp+var_2],	0B0h ; '°'
seg000:B08E
seg000:B08E loc_B08E:				    ; CODE XREF: ide_?_17+3Fj
seg000:B08E		    mov	    dx,	1F6h
seg000:B091		    mov	    al,	byte ptr [bp+var_2]
seg000:B094		    out	    dx,	al	    ; AT hard disk controller:
seg000:B094					    ; Drive & Head.
seg000:B094					    ; Read/Write: bits indicate	head, drive for	operation
seg000:B095		    inc	    dx
seg000:B096
seg000:B096 loc_B096:
seg000:B096		    mov	    cx,	0FFh
seg000:B099
seg000:B099 loc_B099:				    ; CODE XREF: ide_?_17+56j
seg000:B099		    in	    al,	dx	    ; AT hard disk
seg000:B099					    ; status register bits:
seg000:B099					    ; 0: 1=prev	cmd error
seg000:B099					    ; 2: Corrected data
seg000:B099					    ; 3: Data Request. Buffer is busy
seg000:B099					    ; 4: Seek completed
seg000:B099					    ; 5: Write fault
seg000:B099					    ; 6: Drive ready (unless bit 4=0)
seg000:B099					    ; 7: Busy
seg000:B09A		    test    al,	40h
seg000:B09C		    jnz	    short loc_B0A0
seg000:B09E		    loop    loc_B099
seg000:B0A0
seg000:B0A0 loc_B0A0:				    ; CODE XREF: ide_?_17+54j
seg000:B0A0		    mov	    [bp+var_2],	cx
seg000:B0A3		    cmp	    [bp+var_2],	0
seg000:B0A7		    jnz	    short loc_B0BE
seg000:B0A9		    call    outChar_VGA
seg000:B0AC		    push    ds:hdd_not_ready
seg000:B0B0		    push    13h
seg000:B0B2		    push    17h
seg000:B0B4		    call    mem_copy?_0
seg000:B0B7		    add	    sp,	6
seg000:B0BA
seg000:B0BA loc_B0BA:				    ; CODE XREF: ide_?_17+31j
seg000:B0BA		    xor	    ax,	ax
seg000:B0BC		    jmp	    short locret_B0C6
seg000:B0BE ; ---------------------------------------------------------------------------
seg000:B0BE
seg000:B0BE loc_B0BE:				    ; CODE XREF: ide_?_17+5Fj
seg000:B0BE		    call    ide_?_2
seg000:B0C1		    mov	    ax,	[bp+arg_0]
seg000:B0C4		    jmp	    short $+2
seg000:B0C6
seg000:B0C6 locret_B0C6:			    ; CODE XREF: ide_?_17+74j
seg000:B0C6		    leave
seg000:B0C7		    retn
seg000:B0C7 ide_?_17	    endp
seg000:B0C7
seg000:B0C8 ; ---------------------------------------------------------------------------
seg000:B0C8
seg000:B0C8 loc_B0C8:				    ; CODE XREF: seg000:ABF9p
seg000:B0C8		    enter   2, 0
seg000:B0CC		    mov	    dx,	322h
seg000:B0CF		    in	    al,	dx	    ; XT Hard Disk: generate controller	select pulse
seg000:B0D0		    xor	    ah,	ah
seg000:B0D2		    mov	    [bp-2], ax
seg000:B0D5		    cmp	    word ptr [bp+4], offset stru_BE6F.data
seg000:B0DA		    jnz	    short loc_B0E5
seg000:B0DC		    mov	    ax,	[bp-2]
seg000:B0DF		    sar	    ax,	2
seg000:B0E2		    mov	    [bp-2], ax
seg000:B0E5
seg000:B0E5 loc_B0E5:				    ; CODE XREF: seg000:B0DAj
seg000:B0E5		    mov	    ax,	[bp-2]
seg000:B0E8		    and	    ax,	3
seg000:B0EB		    inc	    ax
seg000:B0EC		    leave
seg000:B0ED		    retn
seg000:B0EE
seg000:B0EE ; =============== S	U B R O	U T I N	E =======================================
seg000:B0EE
seg000:B0EE ; Attributes: bp-based frame
seg000:B0EE
seg000:B0EE sub_B0EE	    proc near		    ; CODE XREF: seg000:AD8Ep
seg000:B0EE					    ; seg000:AFCDp
seg000:B0EE
seg000:B0EE arg_0	    = word ptr	4
seg000:B0EE arg_2	    = word ptr	6
seg000:B0EE arg_4	    = word ptr	8
seg000:B0EE
seg000:B0EE		    push    bp
seg000:B0EF		    mov	    bp,	sp
seg000:B0F1		    mov	    ax,	[bp+arg_0]
seg000:B0F4		    mov	    bx,	[bp+arg_2]
seg000:B0F7		    mul	    bx
seg000:B0F9		    mov	    bx,	[bp+arg_4]
seg000:B0FC		    mul	    bx
seg000:B0FE		    mov	    cx,	9
seg000:B101
seg000:B101 loc_B101:				    ; CODE XREF: sub_B0EE+17j
seg000:B101		    rol	    ax,	1
seg000:B103		    rcl	    dx,	1
seg000:B105		    loop    loc_B101
seg000:B107		    mov	    bx,	61A8h
seg000:B10A		    div	    bx
seg000:B10C		    mov	    dx,	0
seg000:B10F		    add	    ax,	14h
seg000:B112		    mov	    bx,	28h ; '('
seg000:B115		    div	    bx
seg000:B117		    pop	    bp
seg000:B118		    retn
seg000:B118 sub_B0EE	    endp
seg000:B118
seg000:B119
seg000:B119 ; =============== S	U B R O	U T I N	E =======================================
seg000:B119
seg000:B119 ; Attributes: bp-based frame
seg000:B119
seg000:B119 sub_B119	    proc near		    ; CODE XREF: seg000:AACDp
seg000:B119					    ; seg000:AC95p
seg000:B119
seg000:B119 var_2	    = word ptr -2
seg000:B119 arg_0	    = word ptr	4
seg000:B119
seg000:B119		    enter   2, 0
seg000:B11D		    cmp	    [bp+arg_0],	offset stru_BE6F.data
seg000:B122		    jnz	    short loc_B12B
seg000:B124		    mov	    [bp+var_2],	80h ; ''
seg000:B129		    jmp	    short loc_B130
seg000:B12B ; ---------------------------------------------------------------------------
seg000:B12B
seg000:B12B loc_B12B:				    ; CODE XREF: sub_B119+9j
seg000:B12B		    mov	    [bp+var_2],	81h ; ''
seg000:B130
seg000:B130 loc_B130:				    ; CODE XREF: sub_B119+10j
seg000:B130		    mov	    ah,	0E2h ; 'â'
seg000:B132		    mov	    dx,	[bp+var_2]
seg000:B135		    mov	    bh,	0Fh
seg000:B137		    mov	    bl,	3Fh ; '?'
seg000:B139		    call    ide_?_1
seg000:B13C		    jnb	    short loc_B141
seg000:B13E		    mov	    cx,	0
seg000:B141
seg000:B141 loc_B141:				    ; CODE XREF: sub_B119+23j
seg000:B141		    mov	    ax,	cx
seg000:B143		    leave
seg000:B144		    retn
seg000:B144 sub_B119	    endp
seg000:B144
seg000:B144 ; ---------------------------------------------------------------------------
seg000:B145 pass_200h	    pass_command <200h,	offset aPasswordCont_0>
seg000:B145					    ; DATA XREF: password_?+5o
seg000:B145					    ; password+3Eo ...
seg000:B145					    ; "	Password Control: "
seg000:B149 pass_1600h	    pass_command <1600h, offset	aMakeNoChanges>
seg000:B149					    ; DATA XREF: password_?+16o
seg000:B149					    ; set_pass+4Do
seg000:B149					    ; "	Make No	Changes	"
seg000:B14D pass_1600h_1    pass_command <1600h, offset	aModifyPassword>
seg000:B14D					    ; DATA XREF: set_pass+1Co
seg000:B14D					    ; "	Modify Password	"
seg000:B151 pass_1600h_0    pass_command <1600h, offset	aModifyMode>
seg000:B151					    ; DATA XREF: set_pass+35o
seg000:B151					    ; "	    Modify Mode	"
seg000:B155 pass_402h	    pass_command <402h,	offset aCurrentPasswor>
seg000:B155					    ; DATA XREF: password_?+27o
seg000:B155					    ; password+50o ...
seg000:B155					    ; "Current Password:"
seg000:B159 pass_1D02h	    pass_command <1D02h, offset	aXxxxxxxx>
seg000:B159					    ; DATA XREF: password_?+38o
seg000:B159					    ; "XXXXXXXX"
seg000:B15D pass_403h	    pass_command <403h,	offset aNewPassword>
seg000:B15D					    ; DATA XREF: password_?+49o
seg000:B15D					    ; password_?_0+B2o
seg000:B15D					    ; "New Password:"
seg000:B161 pass_1403h	    pass_command <1403h, offset	aXxxxxxxxXxxxxx>
seg000:B161					    ; DATA XREF: password_?+5Ao
seg000:B161					    ; "XXXXXXXX	XXXXXXXX"
seg000:B165 pass_404h	    pass_command <404h,	offset aPasswordMode>
seg000:B165					    ; DATA XREF: password_?+6Bo
seg000:B165					    ; pass_?+12o
seg000:B165					    ; "Password	Mode:"
seg000:B169 pass_1404h	    pass_command <1404h, offset	aPrompt> ; DATA	XREF: password_?+82o
seg000:B169					    ; password_?+BDo ...
seg000:B169					    ; "Prompt"
seg000:B16D pass_1D04h	    pass_command <1D04h, offset	aNoprompt>
seg000:B16D					    ; DATA XREF: password_?+93o
seg000:B16D					    ; password_?+ACo ...
seg000:B16D					    ; "Noprompt"
seg000:B171 aSelectPasswordCo db ' Select password command, then Press RETURN to start ',0
seg000:B171					    ; DATA XREF: set_pass:loc_BA4Eo
seg000:B1A7 aEnterCurrentPass db ' Enter current password, Press RETURN when finished, ESC to quit '
seg000:B1A7					    ; DATA XREF: password:loc_B99Ao
seg000:B1A7					    ; password:loc_BA0Eo
seg000:B1A7		    db 0
seg000:B1E9 aEnterNewPassword db ' Enter new password, Press RETURN when finished, ESC to quit ',0
seg000:B227 aEnterNewPasswo_1 db ' Enter new password again, Press RETURN when finished, ESC to qui'
seg000:B227		    db 't ',0
seg000:B26B aSelectPasswordMo db ' Select password mode, Press RETURN when finished ',0
seg000:B26B					    ; DATA XREF: pass_?+8o
seg000:B29E aPressReturnToIns db ' Press RETURN to INSTALL new password, ESC to quit ',0
seg000:B2D2 aSystemHardwareDo db ' System Hardware doesn',27h,'t support Passwords, ESC to continue ',0
seg000:B2D2					    ; DATA XREF: password+27o
seg000:B2D2					    ; password_?_0:loc_BC39o
seg000:B30F aErrorIncorrectPa db ' ERROR: incorrect password entered, ESC to continue ',0
seg000:B30F					    ; DATA XREF: password+113o
seg000:B344 aErrorPasswordsDo db ' ERROR: passwords do not match, ESC to continue ',0
seg000:B375 aErrorKeyboardCon db ' ERROR: Keyboard Controller not responding, ESC to continue ',0
seg000:B375					    ; DATA XREF: password:loc_B950o
seg000:B375					    ; password_?_0:loc_BC4Do
seg000:B3B2 aErrorCannotProgr db ' ERROR: Cannot program Password Chip, ESC to continue ',0
seg000:B3B2					    ; DATA XREF: password+8Bo
seg000:B3E9 aErrorOldPassword db ' ERROR: Old password invalid, password cleared, Press RETURN to c'
seg000:B3E9					    ; DATA XREF: password+DFo
seg000:B3E9					    ; password+153o
seg000:B3E9		    db 'ontinue ',0
seg000:B433
seg000:B433 ; =============== S	U B R O	U T I N	E =======================================
seg000:B433
seg000:B433 ; Attributes: bp-based frame
seg000:B433
seg000:B433 sub_B433	    proc near		    ; CODE XREF: password_?+Fp
seg000:B433					    ; password_?+20p ...
seg000:B433
seg000:B433 arg_0	    = byte ptr	4
seg000:B433 arg_2	    = byte ptr	6
seg000:B433 arg_4	    = word ptr	8
seg000:B433 arg_6	    = byte ptr	0Ah
seg000:B433
seg000:B433		    push    bp
seg000:B434		    mov	    bp,	sp
seg000:B436		    push    si
seg000:B437		    push    di
seg000:B438		    mov	    di,	[bp+arg_4]
seg000:B43B		    mov	    al,	[di]
seg000:B43D		    add	    [bp+arg_0],	al
seg000:B440		    mov	    al,	[di+1]
seg000:B443		    add	    [bp+arg_2],	al
seg000:B446		    mov	    si,	[di+2]
seg000:B449		    cmp	    [bp+arg_6],	1
seg000:B44D		    jnz	    short loc_B464
seg000:B44F		    push    si
seg000:B450		    mov	    al,	[bp+arg_2]
seg000:B453		    mov	    ah,	0
seg000:B455		    push    ax
seg000:B456		    mov	    al,	[bp+arg_0]
seg000:B459		    mov	    ah,	0
seg000:B45B		    push    ax
seg000:B45C		    call    mem_copy?_0
seg000:B45F		    add	    sp,	6
seg000:B462		    jmp	    short loc_B477
seg000:B464 ; ---------------------------------------------------------------------------
seg000:B464
seg000:B464 loc_B464:				    ; CODE XREF: sub_B433+1Aj
seg000:B464		    push    si
seg000:B465		    mov	    al,	[bp+arg_2]
seg000:B468		    mov	    ah,	0
seg000:B46A		    push    ax
seg000:B46B		    mov	    al,	[bp+arg_0]
seg000:B46E		    mov	    ah,	0
seg000:B470		    push    ax
seg000:B471		    call    string_copy?
seg000:B474		    add	    sp,	6
seg000:B477
seg000:B477 loc_B477:				    ; CODE XREF: sub_B433+2Fj
seg000:B477		    pop	    di
seg000:B478		    pop	    si
seg000:B479		    pop	    bp
seg000:B47A		    retn
seg000:B47A sub_B433	    endp
seg000:B47A
seg000:B47B
seg000:B47B ; =============== S	U B R O	U T I N	E =======================================
seg000:B47B
seg000:B47B ; Attributes: bp-based frame
seg000:B47B
seg000:B47B error_handlr_?  proc near		    ; CODE XREF: pass_?+Cp
seg000:B47B					    ; sub_B79D+Dp ...
seg000:B47B
seg000:B47B arg_0	    = word ptr	4
seg000:B47B
seg000:B47B		    push    bp
seg000:B47C		    mov	    bp,	sp
seg000:B47E		    push    si
seg000:B47F		    push    di
seg000:B480		    mov	    di,	[bp+arg_0]
seg000:B483		    xor	    si,	si
seg000:B485		    jmp	    short loc_B488
seg000:B487 ; ---------------------------------------------------------------------------
seg000:B487
seg000:B487 loc_B487:				    ; CODE XREF: error_handlr_?+13j
seg000:B487		    inc	    si
seg000:B488
seg000:B488 loc_B488:				    ; CODE XREF: error_handlr_?+Aj
seg000:B488		    mov	    bx,	di
seg000:B48A		    inc	    di
seg000:B48B		    cmp	    byte ptr [bx], 0
seg000:B48E		    jnz	    short loc_B487
seg000:B490		    push    20h	; ' '
seg000:B492		    push    4Eh	; 'N'
seg000:B494		    push    1
seg000:B496		    push    17h
seg000:B498		    call    sub_D293
seg000:B49B		    add	    sp,	8
seg000:B49E		    push    [bp+arg_0]
seg000:B4A1		    mov	    ax,	si
seg000:B4A3		    mov	    bx,	2
seg000:B4A6		    cwd
seg000:B4A7		    idiv    bx
seg000:B4A9		    mov	    dx,	28h ; '('
seg000:B4AC		    sub	    dx,	ax
seg000:B4AE		    push    dx
seg000:B4AF		    push    17h
seg000:B4B1		    call    mem_copy?_0
seg000:B4B4		    add	    sp,	6
seg000:B4B7		    pop	    di
seg000:B4B8		    pop	    si
seg000:B4B9		    pop	    bp
seg000:B4BA		    retn
seg000:B4BA error_handlr_?  endp
seg000:B4BA
seg000:B4BB
seg000:B4BB ; =============== S	U B R O	U T I N	E =======================================
seg000:B4BB
seg000:B4BB ; Attributes: bp-based frame
seg000:B4BB
seg000:B4BB sub_B4BB	    proc near		    ; CODE XREF: dissasembler_?+2Fp
seg000:B4BB
seg000:B4BB arg_0	    = word ptr	4
seg000:B4BB
seg000:B4BB		    push    bp
seg000:B4BC		    mov	    bp,	sp
seg000:B4BE		    jmp	    short loc_B4D0
seg000:B4C0 ; ---------------------------------------------------------------------------
seg000:B4C0
seg000:B4C0 loc_B4C0:				    ; CODE XREF: sub_B4BB+1Aj
seg000:B4C0		    cmp	    [bp+arg_0],	0
seg000:B4C4		    jnz	    short loc_B4D0
seg000:B4C6		    mov	    al,	ds:byte_4A4
seg000:B4C9		    mov	    ah,	0
seg000:B4CB		    push    ax
seg000:B4CC		    call    sub_A641
seg000:B4CF		    pop	    cx
seg000:B4D0
seg000:B4D0 loc_B4D0:				    ; CODE XREF: sub_B4BB+3j
seg000:B4D0					    ; sub_B4BB+9j
seg000:B4D0		    call    check_keyb
seg000:B4D3		    or	    ax,	ax
seg000:B4D5		    jz	    short loc_B4C0
seg000:B4D7		    mov	    ah,	0
seg000:B4D9		    int	    16h		    ; KEYBOARD - READ CHAR FROM	BUFFER,	WAIT IF	EMPTY
seg000:B4D9					    ; Return: AH = scan	code, AL = character
seg000:B4DB		    pop	    bp
seg000:B4DC		    retn
seg000:B4DC sub_B4BB	    endp
seg000:B4DC
seg000:B4DD
seg000:B4DD ; =============== S	U B R O	U T I N	E =======================================
seg000:B4DD
seg000:B4DD ; Attributes: bp-based frame
seg000:B4DD
seg000:B4DD dissasembler_?  proc near		    ; CODE XREF: sub_B79D+1Ap
seg000:B4DD					    ; sub_B79D+38p
seg000:B4DD
seg000:B4DD var_75	    = byte ptr -75h
seg000:B4DD var_3	    = byte ptr -3
seg000:B4DD var_2	    = word ptr -2
seg000:B4DD arg_0	    = word ptr	4
seg000:B4DD arg_2	    = byte ptr	6
seg000:B4DD arg_4	    = byte ptr	8
seg000:B4DD arg_6	    = word ptr	0Ah
seg000:B4DD arg_34	    = byte ptr	38h
seg000:B4DD
seg000:B4DD		    enter   4, 0
seg000:B4E1		    push    si
seg000:B4E2		    push    di
seg000:B4E3		    xor	    si,	si
seg000:B4E5		    jmp	    short loc_B4EE
seg000:B4E7 ; ---------------------------------------------------------------------------
seg000:B4E7
seg000:B4E7 loc_B4E7:				    ; CODE XREF: dissasembler_?+14j
seg000:B4E7		    mov	    bx,	[bp+arg_0]
seg000:B4EA		    mov	    byte ptr [bx+si], 0
seg000:B4ED		    inc	    si
seg000:B4EE
seg000:B4EE loc_B4EE:				    ; CODE XREF: dissasembler_?+8j
seg000:B4EE		    cmp	    si,	8
seg000:B4F1		    jl	    short loc_B4E7
seg000:B4F3		    mov	    al,	[bp+arg_4]
seg000:B4F6		    mov	    ah,	0
seg000:B4F8		    push    ax
seg000:B4F9		    mov	    al,	[bp+arg_2]
seg000:B4FC		    mov	    ah,	0
seg000:B4FE		    push    ax
seg000:B4FF		    call    set_cursor
seg000:B502		    pop	    cx
seg000:B503		    pop	    cx
seg000:B504		    xor	    si,	si
seg000:B506		    mov	    [bp+var_2],	si
seg000:B509
seg000:B509 loc_B509:				    ; CODE XREF: dissasembler_?+CFj
seg000:B509		    push    [bp+arg_6]
seg000:B50C		    call    sub_B4BB
seg000:B50F		    pop	    cx
seg000:B510		    mov	    di,	ax
seg000:B512		    mov	    ax,	di
seg000:B514		    sar	    ax,	8
seg000:B517		    mov	    [bp+var_3],	al
seg000:B51A		    test    di,	0FFh
seg000:B51E		    jz	    short loc_B524
seg000:B520		    and	    di,	0FFh
seg000:B524
seg000:B524 loc_B524:				    ; CODE XREF: dissasembler_?+41j
seg000:B524		    mov	    ax,	di
seg000:B526		    mov	    cx,	4
seg000:B529		    mov	    bx,	offset table_args
seg000:B52C
seg000:B52C loc_B52C:				    ; CODE XREF: dissasembler_?+56j
seg000:B52C		    cmp	    cs:[bx], ax
seg000:B52F		    jz	    short loc_B537
seg000:B531		    inc	    bx
seg000:B532		    inc	    bx
seg000:B533		    loop    loc_B52C
seg000:B535		    jmp	    short loc_B573
seg000:B537 ; ---------------------------------------------------------------------------
seg000:B537
seg000:B537 loc_B537:				    ; CODE XREF: dissasembler_?+52j
seg000:B537		    jmp	    word ptr cs:[bx+8]
seg000:B537 ; ---------------------------------------------------------------------------
seg000:B53B table_args:				    ; DATA XREF: dissasembler_?+4Co
seg000:B53B		    dw 8
seg000:B53D		    dw 0Dh
seg000:B53F		    dw 1Bh
seg000:B541		    dw 4B00h
seg000:B543		    dw offset mnemon_string
seg000:B545		    dw offset cursor_thenFFFF
seg000:B547		    dw offset cursor_then0
seg000:B549		    dw offset mnemon_string
seg000:B54B mnemon_string:			    ; DATA XREF: dissasembler_?+66o
seg000:B54B					    ; dissasembler_?+6Co
seg000:B54B		    dw offset aJmpJnJnJnJnJpJJp+16h
seg000:B54D		    dw 387Eh
seg000:B54F		    dw 8B4Eh
seg000:B551		    dw 45Eh
seg000:B553 ; ---------------------------------------------------------------------------
seg000:B553		    mov	    byte ptr [bx+si], 0
seg000:B556		    jmp	    short loc_B587
seg000:B558 ; ---------------------------------------------------------------------------
seg000:B558
seg000:B558 cursor_thenFFFF:			    ; DATA XREF: dissasembler_?+68o
seg000:B558		    push    0
seg000:B55A		    push    19h
seg000:B55C		    call    set_cursor
seg000:B55F		    pop	    cx
seg000:B560		    pop	    cx
seg000:B561		    mov	    ax,	0FFFFh
seg000:B564		    jmp	    short loc_B5AF
seg000:B566 ; ---------------------------------------------------------------------------
seg000:B566
seg000:B566 cursor_then0:			    ; DATA XREF: dissasembler_?+6Ao
seg000:B566		    push    0
seg000:B568		    push    19h
seg000:B56A		    call    set_cursor
seg000:B56D		    pop	    cx
seg000:B56E		    pop	    cx
seg000:B56F		    xor	    ax,	ax
seg000:B571		    jmp	    short loc_B5AF
seg000:B573 ; ---------------------------------------------------------------------------
seg000:B573
seg000:B573 loc_B573:				    ; CODE XREF: dissasembler_?+58j
seg000:B573		    test    di,	0FFh
seg000:B577		    jz	    short loc_B587
seg000:B579		    cmp	    si,	8
seg000:B57C		    jge	    short loc_B587
seg000:B57E		    mov	    al,	[bp+var_3]
seg000:B581		    mov	    bx,	[bp+arg_0]
seg000:B584		    mov	    [bx+si], al
seg000:B586		    inc	    si
seg000:B587
seg000:B587 loc_B587:				    ; CODE XREF: dissasembler_?+79j
seg000:B587					    ; dissasembler_?+9Aj ...
seg000:B587		    cmp	    si,	[bp+var_2]
seg000:B58A		    jnz	    short loc_B591
seg000:B58C		    call    outChar_VGA
seg000:B58F		    jmp	    short loc_B5A9
seg000:B591 ; ---------------------------------------------------------------------------
seg000:B591
seg000:B591 loc_B591:				    ; CODE XREF: dissasembler_?+ADj
seg000:B591		    cmp	    si,	8
seg000:B594		    jge	    short loc_B5A9
seg000:B596		    mov	    al,	[bp+arg_4]
seg000:B599		    mov	    ah,	0
seg000:B59B		    add	    ax,	si
seg000:B59D		    push    ax
seg000:B59E		    mov	    al,	[bp+arg_2]
seg000:B5A1		    mov	    ah,	0
seg000:B5A3		    push    ax
seg000:B5A4		    call    set_cursor
seg000:B5A7		    pop	    cx
seg000:B5A8		    pop	    cx
seg000:B5A9
seg000:B5A9 loc_B5A9:				    ; CODE XREF: dissasembler_?+B2j
seg000:B5A9					    ; dissasembler_?+B7j
seg000:B5A9		    mov	    [bp+var_2],	si
seg000:B5AC		    jmp	    loc_B509
seg000:B5AF ; ---------------------------------------------------------------------------
seg000:B5AF
seg000:B5AF loc_B5AF:				    ; CODE XREF: dissasembler_?+87j
seg000:B5AF					    ; dissasembler_?+94j
seg000:B5AF		    pop	    di
seg000:B5B0		    pop	    si
seg000:B5B1		    leave
seg000:B5B2		    retn
seg000:B5B2 dissasembler_?  endp
seg000:B5B2
seg000:B5B3
seg000:B5B3 ; =============== S	U B R O	U T I N	E =======================================
seg000:B5B3
seg000:B5B3 ; Attributes: bp-based frame
seg000:B5B3
seg000:B5B3 sub_B5B3	    proc near		    ; CODE XREF: sub_B79D+4Cp
seg000:B5B3
seg000:B5B3 arg_0	    = word ptr	4
seg000:B5B3 arg_2	    = word ptr	6
seg000:B5B3 arg_4	    = byte ptr	8
seg000:B5B3
seg000:B5B3		    push    bp
seg000:B5B4		    mov	    bp,	sp
seg000:B5B6		    push    si
seg000:B5B7		    xor	    si,	si
seg000:B5B9		    jmp	    short loc_B5D4
seg000:B5BB ; ---------------------------------------------------------------------------
seg000:B5BB
seg000:B5BB loc_B5BB:				    ; CODE XREF: sub_B5B3+28j
seg000:B5BB		    mov	    bx,	[bp+arg_0]
seg000:B5BE		    mov	    al,	[bx+si]
seg000:B5C0		    mov	    bx,	[bp+arg_2]
seg000:B5C3		    cmp	    al,	[bx+si]
seg000:B5C5		    jz	    short loc_B5CB
seg000:B5C7		    xor	    ax,	ax
seg000:B5C9		    jmp	    short loc_B5E0
seg000:B5CB ; ---------------------------------------------------------------------------
seg000:B5CB
seg000:B5CB loc_B5CB:				    ; CODE XREF: sub_B5B3+12j
seg000:B5CB		    mov	    bx,	[bp+arg_0]
seg000:B5CE		    cmp	    byte ptr [bx+si], 0
seg000:B5D1		    jz	    short loc_B5DD
seg000:B5D3		    inc	    si
seg000:B5D4
seg000:B5D4 loc_B5D4:				    ; CODE XREF: sub_B5B3+6j
seg000:B5D4		    mov	    al,	[bp+arg_4]
seg000:B5D7		    mov	    ah,	0
seg000:B5D9		    cmp	    ax,	si
seg000:B5DB		    jg	    short loc_B5BB
seg000:B5DD
seg000:B5DD loc_B5DD:				    ; CODE XREF: sub_B5B3+1Ej
seg000:B5DD		    mov	    ax,	0FFFFh
seg000:B5E0
seg000:B5E0 loc_B5E0:				    ; CODE XREF: sub_B5B3+16j
seg000:B5E0		    pop	    si
seg000:B5E1		    pop	    bp
seg000:B5E2		    retn
seg000:B5E2 sub_B5B3	    endp
seg000:B5E2
seg000:B5E3
seg000:B5E3 ; =============== S	U B R O	U T I N	E =======================================
seg000:B5E3
seg000:B5E3 ; Attributes: bp-based frame
seg000:B5E3
seg000:B5E3 password_?	    proc near		    ; CODE XREF: password_?_0+35p
seg000:B5E3					    ; password_?_0+11Ep
seg000:B5E3
seg000:B5E3 arg_0	    = word ptr	4
seg000:B5E3 arg_2	    = byte ptr	6
seg000:B5E3 arg_4	    = word ptr	8
seg000:B5E3
seg000:B5E3		    push    bp
seg000:B5E4		    mov	    bp,	sp
seg000:B5E6		    push    0
seg000:B5E8		    mov	    ax,	offset pass_200h
seg000:B5EB		    push    ax		    ; __int16
seg000:B5EC		    push    [bp+arg_4]
seg000:B5EF		    push    word ptr [bp+arg_2]	; char
seg000:B5F2		    call    sub_B433
seg000:B5F5		    mov	    sp,	bp
seg000:B5F7		    push    1
seg000:B5F9		    mov	    ax,	offset pass_1600h
seg000:B5FC		    push    ax		    ; __int16
seg000:B5FD		    push    [bp+arg_4]
seg000:B600		    push    word ptr [bp+arg_2]	; char
seg000:B603		    call    sub_B433
seg000:B606		    mov	    sp,	bp
seg000:B608		    push    0
seg000:B60A		    mov	    ax,	offset pass_402h
seg000:B60D		    push    ax		    ; __int16
seg000:B60E		    push    [bp+arg_4]
seg000:B611		    push    word ptr [bp+arg_2]	; char
seg000:B614		    call    sub_B433
seg000:B617		    mov	    sp,	bp
seg000:B619		    push    0
seg000:B61B		    mov	    ax,	offset pass_1D02h
seg000:B61E		    push    ax		    ; __int16
seg000:B61F		    push    [bp+arg_4]
seg000:B622		    push    word ptr [bp+arg_2]	; char
seg000:B625		    call    sub_B433
seg000:B628		    mov	    sp,	bp
seg000:B62A		    push    0
seg000:B62C		    mov	    ax,	offset pass_403h
seg000:B62F		    push    ax		    ; __int16
seg000:B630		    push    [bp+arg_4]
seg000:B633		    push    word ptr [bp+arg_2]	; char
seg000:B636		    call    sub_B433
seg000:B639		    mov	    sp,	bp
seg000:B63B		    push    0
seg000:B63D		    mov	    ax,	offset pass_1403h
seg000:B640		    push    ax		    ; __int16
seg000:B641		    push    [bp+arg_4]
seg000:B644		    push    word ptr [bp+arg_2]	; char
seg000:B647		    call    sub_B433
seg000:B64A		    mov	    sp,	bp
seg000:B64C		    push    0
seg000:B64E		    mov	    ax,	offset pass_404h
seg000:B651		    push    ax		    ; __int16
seg000:B652		    push    [bp+arg_4]
seg000:B655		    push    word ptr [bp+arg_2]	; char
seg000:B658		    call    sub_B433
seg000:B65B		    mov	    sp,	bp
seg000:B65D		    cmp	    [bp+arg_0],	0
seg000:B661		    jnz	    short loc_B687
seg000:B663		    push    1
seg000:B665		    mov	    ax,	offset pass_1404h
seg000:B668		    push    ax		    ; __int16
seg000:B669		    push    [bp+arg_4]
seg000:B66C		    push    word ptr [bp+arg_2]	; char
seg000:B66F		    call    sub_B433
seg000:B672		    mov	    sp,	bp
seg000:B674		    push    0
seg000:B676		    mov	    ax,	offset pass_1D04h
seg000:B679		    push    ax		    ; __int16
seg000:B67A		    push    [bp+arg_4]
seg000:B67D		    push    word ptr [bp+arg_2]	; char
seg000:B680		    call    sub_B433
seg000:B683		    mov	    sp,	bp
seg000:B685		    jmp	    short loc_B6AF
seg000:B687 ; ---------------------------------------------------------------------------
seg000:B687
seg000:B687 loc_B687:				    ; CODE XREF: password_?+7Ej
seg000:B687		    cmp	    [bp+arg_0],	1
seg000:B68B		    jnz	    short loc_B6AF
seg000:B68D		    push    1
seg000:B68F		    mov	    ax,	offset pass_1D04h
seg000:B692		    push    ax		    ; __int16
seg000:B693		    push    [bp+arg_4]
seg000:B696		    push    word ptr [bp+arg_2]	; char
seg000:B699		    call    sub_B433
seg000:B69C		    mov	    sp,	bp
seg000:B69E		    push    0
seg000:B6A0		    mov	    ax,	offset pass_1404h
seg000:B6A3		    push    ax		    ; __int16
seg000:B6A4		    push    [bp+arg_4]
seg000:B6A7		    push    word ptr [bp+arg_2]	; char
seg000:B6AA		    call    sub_B433
seg000:B6AD		    mov	    sp,	bp
seg000:B6AF
seg000:B6AF loc_B6AF:				    ; CODE XREF: password_?+A2j
seg000:B6AF					    ; password_?+A8j
seg000:B6AF		    pop	    bp
seg000:B6B0		    retn
seg000:B6B0 password_?	    endp
seg000:B6B0
seg000:B6B1
seg000:B6B1 ; =============== S	U B R O	U T I N	E =======================================
seg000:B6B1
seg000:B6B1 ; Attributes: bp-based frame
seg000:B6B1
seg000:B6B1 pass_?	    proc near		    ; CODE XREF: password_?_0+DEp
seg000:B6B1
seg000:B6B1 arg_0	    = word ptr	4
seg000:B6B1 arg_2	    = byte ptr	6
seg000:B6B1 arg_4	    = word ptr	8
seg000:B6B1 arg_6	    = word ptr	0Ah
seg000:B6B1
seg000:B6B1		    push    bp
seg000:B6B2		    mov	    bp,	sp
seg000:B6B4		    push    si
seg000:B6B5		    push    di
seg000:B6B6		    mov	    si,	[bp+arg_0]
seg000:B6B9		    mov	    ax,	offset aSelectPasswordMo ; " Select password mode, Press RETURN	whe"...
seg000:B6BC		    push    ax
seg000:B6BD		    call    error_handlr_?
seg000:B6C0		    pop	    cx
seg000:B6C1		    push    1
seg000:B6C3		    mov	    ax,	offset pass_404h
seg000:B6C6		    push    ax		    ; __int16
seg000:B6C7		    push    [bp+arg_4]
seg000:B6CA		    push    word ptr [bp+arg_2]	; char
seg000:B6CD		    call    sub_B433
seg000:B6D0		    add	    sp,	8
seg000:B6D3		    jmp	    short loc_B737
seg000:B6D5 ; ---------------------------------------------------------------------------
seg000:B6D5
seg000:B6D5 loc_B6D5:				    ; CODE XREF: pass_?+96j
seg000:B6D5		    cmp	    di,	20h ; ' '
seg000:B6D8		    jz	    short loc_B6DF
seg000:B6DA		    cmp	    di,	8
seg000:B6DD		    jnz	    short loc_B737
seg000:B6DF
seg000:B6DF loc_B6DF:				    ; CODE XREF: pass_?+27j
seg000:B6DF		    or	    si,	si
seg000:B6E1		    jnz	    short loc_B70C
seg000:B6E3		    mov	    si,	1
seg000:B6E6		    push    0
seg000:B6E8		    mov	    ax,	offset pass_1404h
seg000:B6EB		    push    ax		    ; __int16
seg000:B6EC		    push    [bp+arg_4]
seg000:B6EF		    push    word ptr [bp+arg_2]	; char
seg000:B6F2		    call    sub_B433
seg000:B6F5		    add	    sp,	8
seg000:B6F8		    push    1
seg000:B6FA		    mov	    ax,	offset pass_1D04h
seg000:B6FD		    push    ax		    ; __int16
seg000:B6FE		    push    [bp+arg_4]
seg000:B701		    push    word ptr [bp+arg_2]	; char
seg000:B704		    call    sub_B433
seg000:B707		    add	    sp,	8
seg000:B70A		    jmp	    short loc_B737
seg000:B70C ; ---------------------------------------------------------------------------
seg000:B70C
seg000:B70C loc_B70C:				    ; CODE XREF: pass_?+30j
seg000:B70C		    cmp	    si,	1
seg000:B70F		    jnz	    short loc_B737
seg000:B711		    xor	    si,	si
seg000:B713		    push    0
seg000:B715		    mov	    ax,	offset pass_1D04h
seg000:B718		    push    ax		    ; __int16
seg000:B719		    push    [bp+arg_4]
seg000:B71C		    push    word ptr [bp+arg_2]	; char
seg000:B71F		    call    sub_B433
seg000:B722		    add	    sp,	8
seg000:B725		    push    1
seg000:B727		    mov	    ax,	offset pass_1404h
seg000:B72A		    push    ax		    ; __int16
seg000:B72B		    push    [bp+arg_4]
seg000:B72E		    push    word ptr [bp+arg_2]	; char
seg000:B731		    call    sub_B433
seg000:B734		    add	    sp,	8
seg000:B737
seg000:B737 loc_B737:				    ; CODE XREF: pass_?+22j
seg000:B737					    ; pass_?+2Cj ...
seg000:B737		    push    [bp+arg_6]
seg000:B73A		    call    get_keypress
seg000:B73D		    pop	    cx
seg000:B73E		    mov	    di,	ax
seg000:B740		    mov	    ax,	di
seg000:B742		    cmp	    ax,	0Dh
seg000:B745		    jz	    short loc_B749
seg000:B747		    jmp	    short loc_B6D5
seg000:B749 ; ---------------------------------------------------------------------------
seg000:B749
seg000:B749 loc_B749:				    ; CODE XREF: pass_?+94j
seg000:B749		    mov	    ax,	si
seg000:B74B		    pop	    di
seg000:B74C		    pop	    si
seg000:B74D		    pop	    bp
seg000:B74E		    retn
seg000:B74E pass_?	    endp
seg000:B74E
seg000:B74F
seg000:B74F ; =============== S	U B R O	U T I N	E =======================================
seg000:B74F
seg000:B74F ; Attributes: bp-based frame
seg000:B74F
seg000:B74F sub_B74F	    proc near		    ; CODE XREF: sub_B79D+A5p
seg000:B74F					    ; password+1Cp ...
seg000:B74F
seg000:B74F var_1	    = byte ptr -1
seg000:B74F arg_0	    = word ptr	4
seg000:B74F arg_2	    = word ptr	6
seg000:B74F
seg000:B74F		    enter   2, 0
seg000:B753		    push    si
seg000:B754		    cli
seg000:B755		    in	    al,	21h	    ; Interrupt	controller, 8259A.
seg000:B757		    mov	    [bp+var_1],	al
seg000:B75A		    or	    al,	2
seg000:B75C		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:B75E		    sti
seg000:B75F		    mov	    si,	0FFFFh
seg000:B762		    mov	    cx,	0FFFFh
seg000:B765
seg000:B765 loc_B765:				    ; CODE XREF: sub_B74F+2Dj
seg000:B765					    ; sub_B74F+2Fj
seg000:B765		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:B765					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:B765					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:B765					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:B765					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:B765					    ;	 +------------------------------+-----------------------------------+
seg000:B765					    ; 4:  INH	  0=keyboard communications inhibited
seg000:B765					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:B765					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:B765					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:B765					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:B767		    test    al,	1
seg000:B769		    jnz	    short loc_B786
seg000:B76B		    cmp	    [bp+arg_2],	0
seg000:B76F		    jnz	    short loc_B77B
seg000:B771		    mov	    al,	ds:byte_4A4
seg000:B774		    mov	    ah,	0
seg000:B776		    push    ax
seg000:B777		    call    sub_A641
seg000:B77A		    pop	    cx
seg000:B77B
seg000:B77B loc_B77B:				    ; CODE XREF: sub_B74F+20j
seg000:B77B		    dec	    si
seg000:B77C		    jnz	    short loc_B765
seg000:B77E		    loop    loc_B765
seg000:B780		    mov	    ax,	0
seg000:B783		    jmp	    short loc_B791
seg000:B783 ; ---------------------------------------------------------------------------
seg000:B785		    db	90h ; 
seg000:B786 ; ---------------------------------------------------------------------------
seg000:B786
seg000:B786 loc_B786:				    ; CODE XREF: sub_B74F+1Aj
seg000:B786		    in	    al,	60h	    ; 8042 keyboard controller data register
seg000:B788		    mov	    bx,	[bp+arg_0]
seg000:B78B		    mov	    ss:[bx], al
seg000:B78E		    mov	    ax,	0FFFFh
seg000:B791
seg000:B791 loc_B791:				    ; CODE XREF: sub_B74F+34j
seg000:B791		    cli
seg000:B792		    push    ax
seg000:B793		    mov	    al,	[bp+var_1]
seg000:B796		    out	    21h, al	    ; Interrupt	controller, 8259A.
seg000:B798		    pop	    ax
seg000:B799		    sti
seg000:B79A		    pop	    si
seg000:B79B		    leave
seg000:B79C		    retn
seg000:B79C sub_B74F	    endp
seg000:B79C
seg000:B79D
seg000:B79D ; =============== S	U B R O	U T I N	E =======================================
seg000:B79D
seg000:B79D ; Attributes: bp-based frame
seg000:B79D
seg000:B79D sub_B79D	    proc near		    ; CODE XREF: password_?_0+C3p
seg000:B79D
seg000:B79D var_14	    = word ptr -14h
seg000:B79D var_11	    = byte ptr -11h
seg000:B79D var_10	    = byte ptr -10h
seg000:B79D var_8	    = byte ptr -8
seg000:B79D arg_0	    = word ptr	4
seg000:B79D
seg000:B79D		    enter   14h, 0
seg000:B7A1		    push    si
seg000:B7A2		    push    di
seg000:B7A3		    mov	    di,	[bp+arg_0]
seg000:B7A6
seg000:B7A6 loc_B7A6:				    ; CODE XREF: sub_B79D+40j
seg000:B7A6					    ; sub_B79D+77j ...
seg000:B7A6		    mov	    ax,	0B1E9h
seg000:B7A9		    push    ax
seg000:B7AA		    call    error_handlr_?
seg000:B7AD		    pop	    cx
seg000:B7AE		    push    di
seg000:B7AF		    push    14h
seg000:B7B1		    push    14h
seg000:B7B3		    lea	    ax,	[bp+var_10]
seg000:B7B6		    push    ax
seg000:B7B7		    call    dissasembler_?
seg000:B7BA		    add	    sp,	8
seg000:B7BD		    or	    ax,	ax
seg000:B7BF		    jnz	    short loc_B7C4
seg000:B7C1		    jmp	    loc_B8A0
seg000:B7C4 ; ---------------------------------------------------------------------------
seg000:B7C4
seg000:B7C4 loc_B7C4:				    ; CODE XREF: sub_B79D+22j
seg000:B7C4		    mov	    ax,	0B227h
seg000:B7C7		    push    ax
seg000:B7C8		    call    error_handlr_?
seg000:B7CB		    pop	    cx
seg000:B7CC		    push    di
seg000:B7CD		    push    1Dh
seg000:B7CF		    push    14h
seg000:B7D1		    lea	    ax,	[bp+var_8]
seg000:B7D4		    push    ax
seg000:B7D5		    call    dissasembler_?
seg000:B7D8		    add	    sp,	8
seg000:B7DB		    or	    ax,	ax
seg000:B7DD		    jz	    short loc_B7A6
seg000:B7DF		    push    8
seg000:B7E1		    lea	    ax,	[bp+var_8]
seg000:B7E4		    push    ax
seg000:B7E5		    lea	    ax,	[bp+var_10]
seg000:B7E8		    push    ax
seg000:B7E9		    call    sub_B5B3
seg000:B7EC		    add	    sp,	6
seg000:B7EF		    or	    ax,	ax
seg000:B7F1		    jnz	    short loc_B7F6
seg000:B7F3		    jmp	    loc_B88B
seg000:B7F6 ; ---------------------------------------------------------------------------
seg000:B7F6
seg000:B7F6 loc_B7F6:				    ; CODE XREF: sub_B79D+54j
seg000:B7F6		    mov	    ax,	0B29Eh
seg000:B7F9		    push    ax
seg000:B7FA		    call    error_handlr_?
seg000:B7FD		    pop	    cx
seg000:B7FE
seg000:B7FE loc_B7FE:				    ; CODE XREF: sub_B79D+71j
seg000:B7FE		    push    di
seg000:B7FF		    call    get_keypress
seg000:B802		    pop	    cx
seg000:B803
seg000:B803 loc_B803:
seg000:B803		    mov	    [bp+var_14], ax
seg000:B806		    cmp	    ax,	1Bh
seg000:B809		    jz	    short loc_B810
seg000:B80B		    cmp	    ax,	0Dh
seg000:B80E		    jnz	    short loc_B7FE
seg000:B810
seg000:B810 loc_B810:				    ; CODE XREF: sub_B79D+6Cj
seg000:B810		    cmp	    [bp+var_14], 0Dh
seg000:B814		    jnz	    short loc_B7A6
seg000:B816		    push    0BCh ; '¼'
seg000:B819		    call    keyb_?_0
seg000:B81C		    pop	    cx
seg000:B81D		    xor	    si,	si
seg000:B81F
seg000:B81F loc_B81F:				    ; CODE XREF: sub_B79D+9Ej
seg000:B81F		    mov	    al,	[bp+si+var_10]
seg000:B822		    mov	    ah,	0
seg000:B824		    push    ax
seg000:B825		    call    keyb_send_arg
seg000:B828		    pop	    cx
seg000:B829		    mov	    ax,	si
seg000:B82B		    inc	    si
seg000:B82C		    mov	    bx,	ax
seg000:B82E		    lea	    ax,	[bp+var_10]
seg000:B831		    add	    bx,	ax
seg000:B833		    cmp	    byte ptr [bx], 0
seg000:B836		    jz	    short loc_B83D
seg000:B838		    cmp	    si,	8
seg000:B83B		    jl	    short loc_B81F
seg000:B83D
seg000:B83D loc_B83D:				    ; CODE XREF: sub_B79D+99j
seg000:B83D		    push    di
seg000:B83E		    lea	    ax,	[bp+var_11]
seg000:B841		    push    ax
seg000:B842		    call    sub_B74F
seg000:B845		    pop	    cx
seg000:B846		    pop	    cx
seg000:B847		    or	    ax,	ax
seg000:B849		    jz	    short loc_B865
seg000:B84B		    cmp	    [bp+var_11], 2
seg000:B84F		    jnz	    short loc_B877
seg000:B851		    mov	    ax,	0B3B2h
seg000:B854		    push    ax
seg000:B855		    call    error_handlr_?
seg000:B858		    pop	    cx
seg000:B859
seg000:B859 loc_B859:				    ; CODE XREF: sub_B79D+C4j
seg000:B859		    push    di
seg000:B85A		    call    get_keypress
seg000:B85D		    pop	    cx
seg000:B85E		    cmp	    ax,	1Bh
seg000:B861		    jnz	    short loc_B859
seg000:B863		    jmp	    short loc_B877
seg000:B865 ; ---------------------------------------------------------------------------
seg000:B865
seg000:B865 loc_B865:				    ; CODE XREF: sub_B79D+ACj
seg000:B865		    mov	    ax,	0B375h
seg000:B868		    push    ax
seg000:B869		    call    error_handlr_?
seg000:B86C		    pop	    cx
seg000:B86D
seg000:B86D loc_B86D:				    ; CODE XREF: sub_B79D+D8j
seg000:B86D		    push    di
seg000:B86E		    call    get_keypress
seg000:B871		    pop	    cx
seg000:B872		    cmp	    ax,	1Bh
seg000:B875		    jnz	    short loc_B86D
seg000:B877
seg000:B877 loc_B877:				    ; CODE XREF: sub_B79D+B2j
seg000:B877					    ; sub_B79D+C6j
seg000:B877		    xor	    si,	si
seg000:B879		    jmp	    short loc_B884
seg000:B87B ; ---------------------------------------------------------------------------
seg000:B87B
seg000:B87B loc_B87B:				    ; CODE XREF: sub_B79D+EAj
seg000:B87B		    mov	    [bp+si+var_10], 0
seg000:B87F		    mov	    [bp+si+var_8], 0
seg000:B883		    inc	    si
seg000:B884
seg000:B884 loc_B884:				    ; CODE XREF: sub_B79D+DCj
seg000:B884		    cmp	    si,	8
seg000:B887		    jl	    short loc_B87B
seg000:B889		    jmp	    short loc_B8AD
seg000:B88B ; ---------------------------------------------------------------------------
seg000:B88B
seg000:B88B loc_B88B:				    ; CODE XREF: sub_B79D+56j
seg000:B88B		    mov	    ax,	0B344h
seg000:B88E		    push    ax
seg000:B88F		    call    error_handlr_?
seg000:B892		    pop	    cx
seg000:B893
seg000:B893 loc_B893:				    ; CODE XREF: sub_B79D+FEj
seg000:B893		    push    di
seg000:B894		    call    get_keypress
seg000:B897		    pop	    cx
seg000:B898		    cmp	    ax,	1Bh
seg000:B89B		    jnz	    short loc_B893
seg000:B89D		    jmp	    loc_B7A6
seg000:B8A0 ; ---------------------------------------------------------------------------
seg000:B8A0
seg000:B8A0 loc_B8A0:				    ; CODE XREF: sub_B79D+24j
seg000:B8A0		    push    0BBh ; '»'
seg000:B8A3		    call    keyb_?_0
seg000:B8A6		    pop	    cx
seg000:B8A7		    push    5
seg000:B8A9		    call    keyb_send_arg
seg000:B8AC		    pop	    cx
seg000:B8AD
seg000:B8AD loc_B8AD:				    ; CODE XREF: sub_B79D+ECj
seg000:B8AD		    pop	    di
seg000:B8AE		    pop	    si
seg000:B8AF		    leave
seg000:B8B0		    retn
seg000:B8B0 sub_B79D	    endp
seg000:B8B0
seg000:B8B1
seg000:B8B1 ; =============== S	U B R O	U T I N	E =======================================
seg000:B8B1
seg000:B8B1 ; Attributes: bp-based frame
seg000:B8B1
seg000:B8B1 password	    proc near		    ; CODE XREF: password_?_0+8Cp
seg000:B8B1
seg000:B8B1 var_4	    = byte ptr -4
seg000:B8B1 var_3	    = byte ptr -3
seg000:B8B1 var_2	    = byte ptr -2
seg000:B8B1 var_1	    = byte ptr -1
seg000:B8B1 arg_0	    = word ptr	4
seg000:B8B1 arg_2	    = byte ptr	6
seg000:B8B1 arg_4	    = word ptr	8
seg000:B8B1 arg_6	    = word ptr	0Ah
seg000:B8B1
seg000:B8B1		    enter   4, 0
seg000:B8B5		    push    si
seg000:B8B6		    mov	    si,	[bp+arg_6]
seg000:B8B9		    mov	    [bp+var_2],	0FFh
seg000:B8BD		    mov	    [bp+var_3],	0
seg000:B8C1		    push    0BAh ; 'º'
seg000:B8C4		    call    keyb_?_0
seg000:B8C7		    pop	    cx
seg000:B8C8		    push    si
seg000:B8C9		    lea	    ax,	[bp+var_4]
seg000:B8CC		    push    ax
seg000:B8CD		    call    sub_B74F
seg000:B8D0		    pop	    cx
seg000:B8D1		    pop	    cx
seg000:B8D2		    cmp	    [bp+var_4],	3
seg000:B8D6		    jnz	    short loc_B8ED
seg000:B8D8		    mov	    ax,	offset aSystemHardwareDo ; " System Hardware doesn't support Passwo"...
seg000:B8DB		    push    ax
seg000:B8DC		    call    error_handlr_?
seg000:B8DF		    pop	    cx
seg000:B8E0
seg000:B8E0 loc_B8E0:				    ; CODE XREF: password+37j
seg000:B8E0		    push    si
seg000:B8E1		    call    get_keypress
seg000:B8E4		    pop	    cx
seg000:B8E5		    cmp	    ax,	1Bh
seg000:B8E8		    jnz	    short loc_B8E0
seg000:B8EA		    jmp	    short loc_B962
seg000:B8EA ; ---------------------------------------------------------------------------
seg000:B8EC		    db	90h ; 
seg000:B8ED ; ---------------------------------------------------------------------------
seg000:B8ED
seg000:B8ED loc_B8ED:				    ; CODE XREF: password+25j
seg000:B8ED		    push    0
seg000:B8EF		    mov	    ax,	offset pass_200h
seg000:B8F2		    push    ax		    ; __int16
seg000:B8F3		    push    [bp+arg_4]
seg000:B8F6		    push    word ptr [bp+arg_2]	; char
seg000:B8F9		    call    sub_B433
seg000:B8FC		    add	    sp,	8
seg000:B8FF		    push    1
seg000:B901		    mov	    ax,	offset pass_402h
seg000:B904		    push    ax		    ; __int16
seg000:B905		    push    [bp+arg_4]
seg000:B908		    push    word ptr [bp+arg_2]	; char
seg000:B90B		    call    sub_B433
seg000:B90E		    add	    sp,	8
seg000:B911		    cmp	    [bp+var_4],	2
seg000:B915		    jnz	    short loc_B966
seg000:B917		    push    0BCh ; '¼'
seg000:B91A		    call    keyb_?_0
seg000:B91D		    pop	    cx
seg000:B91E		    push    0
seg000:B920		    call    keyb_send_arg
seg000:B923		    pop	    cx
seg000:B924		    mov	    [bp+var_3],	0FFh
seg000:B928		    push    si
seg000:B929		    lea	    ax,	[bp+var_4]
seg000:B92C		    push    ax
seg000:B92D		    call    sub_B74F
seg000:B930		    pop	    cx
seg000:B931		    pop	    cx
seg000:B932		    or	    ax,	ax
seg000:B934		    jz	    short loc_B950
seg000:B936		    cmp	    [bp+var_4],	2
seg000:B93A		    jnz	    short loc_B966
seg000:B93C		    mov	    ax,	offset aErrorCannotProgr ; " ERROR: Cannot program Password Chip, E"...
seg000:B93F		    push    ax
seg000:B940		    call    error_handlr_?
seg000:B943		    pop	    cx
seg000:B944
seg000:B944 loc_B944:				    ; CODE XREF: password+9Bj
seg000:B944		    push    si
seg000:B945		    call    get_keypress
seg000:B948		    pop	    cx
seg000:B949		    cmp	    ax,	1Bh
seg000:B94C		    jnz	    short loc_B944
seg000:B94E
seg000:B94E loc_B94E:
seg000:B94E		    jmp	    short loc_B962
seg000:B950 ; ---------------------------------------------------------------------------
seg000:B950
seg000:B950 loc_B950:				    ; CODE XREF: password+83j
seg000:B950		    mov	    ax,	offset aErrorKeyboardCon ; " ERROR: Keyboard Controller	not respond"...
seg000:B953		    push    ax
seg000:B954		    call    error_handlr_?
seg000:B957		    pop	    cx
seg000:B958
seg000:B958 loc_B958:				    ; CODE XREF: password+AFj
seg000:B958		    push    si
seg000:B959		    call    get_keypress
seg000:B95C		    pop	    cx
seg000:B95D		    cmp	    ax,	1Bh
seg000:B960		    jnz	    short loc_B958
seg000:B962
seg000:B962 loc_B962:				    ; CODE XREF: password+39j
seg000:B962					    ; password:loc_B94Ej
seg000:B962		    mov	    [bp+var_2],	0
seg000:B966
seg000:B966 loc_B966:				    ; CODE XREF: password+64j
seg000:B966					    ; password+89j
seg000:B966		    cmp	    [bp+var_2],	0
seg000:B96A		    jnz	    short loc_B96F
seg000:B96C		    jmp	    loc_BA3E
seg000:B96F ; ---------------------------------------------------------------------------
seg000:B96F
seg000:B96F loc_B96F:				    ; CODE XREF: password+B9j
seg000:B96F		    push    0BBh ; '»'
seg000:B972		    call    keyb_?_0
seg000:B975		    pop	    cx
seg000:B976		    cmp	    [bp+arg_0],	1
seg000:B97A		    jnz	    short loc_B984
seg000:B97C		    push    3
seg000:B97E		    call    keyb_send_arg
seg000:B981		    pop	    cx
seg000:B982		    jmp	    short loc_B98A
seg000:B984 ; ---------------------------------------------------------------------------
seg000:B984
seg000:B984 loc_B984:				    ; CODE XREF: password+C9j
seg000:B984		    push    4
seg000:B986		    call    keyb_send_arg
seg000:B989		    pop	    cx
seg000:B98A
seg000:B98A loc_B98A:				    ; CODE XREF: password+D1j
seg000:B98A		    cmp	    [bp+var_3],	0
seg000:B98E		    jz	    short loc_B99A
seg000:B990		    mov	    ax,	offset aErrorOldPassword ; " ERROR: Old	password invalid, password "...
seg000:B993		    push    ax
seg000:B994		    call    error_handlr_?
seg000:B997		    pop	    cx
seg000:B998		    jmp	    short loc_B9A2
seg000:B99A ; ---------------------------------------------------------------------------
seg000:B99A
seg000:B99A loc_B99A:				    ; CODE XREF: password+DDj
seg000:B99A		    mov	    ax,	offset aEnterCurrentPass ; " Enter current password, Press RETURN w"...
seg000:B99D		    push    ax
seg000:B99E		    call    error_handlr_?
seg000:B9A1		    pop	    cx
seg000:B9A2
seg000:B9A2 loc_B9A2:				    ; CODE XREF: password+E7j
seg000:B9A2		    mov	    [bp+var_1],	0
seg000:B9A6
seg000:B9A6 loc_B9A6:				    ; CODE XREF: password+101j
seg000:B9A6					    ; password+18Aj
seg000:B9A6		    push    si
seg000:B9A7		    lea	    ax,	[bp+var_4]
seg000:B9AA		    push    ax
seg000:B9AB		    call    sub_B74F
seg000:B9AE		    pop	    cx
seg000:B9AF		    pop	    cx
seg000:B9B0		    or	    ax,	ax
seg000:B9B2		    jz	    short loc_B9A6
seg000:B9B4		    cmp	    [bp+var_4],	0FFh
seg000:B9B8		    jnz	    short loc_B9BE
seg000:B9BA		    mov	    [bp+var_1],	0FFh
seg000:B9BE
seg000:B9BE loc_B9BE:				    ; CODE XREF: password+107j
seg000:B9BE		    cmp	    [bp+var_4],	0FEh ; 'þ'
seg000:B9C2		    jnz	    short loc_BA18
seg000:B9C4		    mov	    ax,	offset aErrorIncorrectPa ; " ERROR: incorrect password entered,	ESC"...
seg000:B9C7		    push    ax
seg000:B9C8		    call    error_handlr_?
seg000:B9CB		    pop	    cx
seg000:B9CC		    push    0BBh ; '»'
seg000:B9CF		    call    keyb_?_0
seg000:B9D2		    pop	    cx
seg000:B9D3		    push    5
seg000:B9D5		    call    keyb_send_arg
seg000:B9D8		    pop	    cx
seg000:B9D9
seg000:B9D9 loc_B9D9:				    ; CODE XREF: password+130j
seg000:B9D9		    push    si
seg000:B9DA		    call    get_keypress
seg000:B9DD		    pop	    cx
seg000:B9DE		    cmp	    ax,	1Bh
seg000:B9E1		    jnz	    short loc_B9D9
seg000:B9E3		    push    0BBh ; '»'
seg000:B9E6		    call    keyb_?_0
seg000:B9E9		    pop	    cx
seg000:B9EA		    cmp	    [bp+arg_0],	1
seg000:B9EE		    jnz	    short loc_B9F8
seg000:B9F0		    push    3
seg000:B9F2		    call    keyb_send_arg
seg000:B9F5		    pop	    cx
seg000:B9F6		    jmp	    short loc_B9FE
seg000:B9F8 ; ---------------------------------------------------------------------------
seg000:B9F8
seg000:B9F8 loc_B9F8:				    ; CODE XREF: password+13Dj
seg000:B9F8		    push    4
seg000:B9FA		    call    keyb_send_arg
seg000:B9FD		    pop	    cx
seg000:B9FE
seg000:B9FE loc_B9FE:				    ; CODE XREF: password+145j
seg000:B9FE		    cmp	    [bp+var_3],	0
seg000:BA02		    jz	    short loc_BA0E
seg000:BA04		    mov	    ax,	offset aErrorOldPassword ; " ERROR: Old	password invalid, password "...
seg000:BA07		    push    ax
seg000:BA08		    call    error_handlr_?
seg000:BA0B		    pop	    cx
seg000:BA0C		    jmp	    short loc_BA2F
seg000:BA0E ; ---------------------------------------------------------------------------
seg000:BA0E
seg000:BA0E loc_BA0E:				    ; CODE XREF: password+151j
seg000:BA0E		    mov	    ax,	offset aEnterCurrentPass ; " Enter current password, Press RETURN w"...
seg000:BA11		    push    ax
seg000:BA12		    call    error_handlr_?
seg000:BA15		    pop	    cx
seg000:BA16		    jmp	    short loc_BA2F
seg000:BA18 ; ---------------------------------------------------------------------------
seg000:BA18
seg000:BA18 loc_BA18:				    ; CODE XREF: password+111j
seg000:BA18		    cmp	    [bp+var_4],	1
seg000:BA1C		    jnz	    short loc_BA2F
seg000:BA1E		    push    0BBh ; '»'
seg000:BA21		    call    keyb_?_0
seg000:BA24		    pop	    cx
seg000:BA25		    push    5
seg000:BA27		    call    keyb_send_arg
seg000:BA2A		    pop	    cx
seg000:BA2B		    mov	    [bp+var_2],	0
seg000:BA2F
seg000:BA2F loc_BA2F:				    ; CODE XREF: password+15Bj
seg000:BA2F					    ; password+165j ...
seg000:BA2F		    cmp	    [bp+var_1],	0
seg000:BA33		    jnz	    short loc_BA3E
seg000:BA35		    cmp	    [bp+var_2],	0
seg000:BA39		    jz	    short loc_BA3E
seg000:BA3B		    jmp	    loc_B9A6
seg000:BA3E ; ---------------------------------------------------------------------------
seg000:BA3E
seg000:BA3E loc_BA3E:				    ; CODE XREF: password+BBj
seg000:BA3E					    ; password+182j ...
seg000:BA3E		    mov	    al,	[bp+var_2]
seg000:BA41		    mov	    ah,	0
seg000:BA43		    pop	    si
seg000:BA44		    leave
seg000:BA45		    retn
seg000:BA45 password	    endp
seg000:BA45
seg000:BA46
seg000:BA46 ; =============== S	U B R O	U T I N	E =======================================
seg000:BA46
seg000:BA46 ; Attributes: bp-based frame
seg000:BA46
seg000:BA46 set_pass	    proc near		    ; CODE XREF: password_?_0+4Ep
seg000:BA46
seg000:BA46 var_2	    = word ptr -2
seg000:BA46 arg_0	    = word ptr	4
seg000:BA46 arg_2	    = byte ptr	6
seg000:BA46 arg_4	    = word ptr	8
seg000:BA46 arg_6	    = word ptr	0Ah
seg000:BA46
seg000:BA46		    enter   2, 0
seg000:BA4A		    push    si
seg000:BA4B		    push    di
seg000:BA4C		    xor	    si,	si
seg000:BA4E
seg000:BA4E loc_BA4E:				    ; "	Select password	command, then Press RE"...
seg000:BA4E		    mov	    ax,	offset aSelectPasswordCo
seg000:BA51		    push    ax
seg000:BA52		    call    error_handlr_?
seg000:BA55		    pop	    cx
seg000:BA56		    mov	    [bp+var_2],	0
seg000:BA5B
seg000:BA5B loc_BA5B:				    ; CODE XREF: set_pass+101j
seg000:BA5B		    cmp	    si,	1
seg000:BA5E		    jnz	    short loc_BA74
seg000:BA60		    push    1
seg000:BA62		    mov	    ax,	offset pass_1600h_1
seg000:BA65		    push    ax		    ; __int16
seg000:BA66		    push    [bp+arg_4]
seg000:BA69		    push    word ptr [bp+arg_2]	; char
seg000:BA6C		    call    sub_B433
seg000:BA6F		    add	    sp,	8
seg000:BA72		    jmp	    short loc_BAB5
seg000:BA74 ; ---------------------------------------------------------------------------
seg000:BA74
seg000:BA74 loc_BA74:				    ; CODE XREF: set_pass+18j
seg000:BA74		    cmp	    si,	2
seg000:BA77		    jnz	    short loc_BA8D
seg000:BA79		    push    1
seg000:BA7B		    mov	    ax,	offset pass_1600h_0
seg000:BA7E		    push    ax		    ; __int16
seg000:BA7F		    push    [bp+arg_4]
seg000:BA82		    push    word ptr [bp+arg_2]	; char
seg000:BA85		    call    sub_B433
seg000:BA88		    add	    sp,	8
seg000:BA8B		    jmp	    short loc_BAB5
seg000:BA8D ; ---------------------------------------------------------------------------
seg000:BA8D
seg000:BA8D loc_BA8D:				    ; CODE XREF: set_pass+31j
seg000:BA8D		    or	    si,	si
seg000:BA8F		    jnz	    short loc_BAB5
seg000:BA91		    push    1
seg000:BA93		    mov	    ax,	offset pass_1600h
seg000:BA96		    push    ax		    ; __int16
seg000:BA97		    push    [bp+arg_4]
seg000:BA9A		    push    word ptr [bp+arg_2]	; char
seg000:BA9D		    call    sub_B433
seg000:BAA0		    add	    sp,	8
seg000:BAA3		    jmp	    short loc_BAB5
seg000:BAA5 ; ---------------------------------------------------------------------------
seg000:BAA5
seg000:BAA5 loc_BAA5:				    ; CODE XREF: set_pass+7Cj
seg000:BAA5		    cmp	    [bp+arg_6],	0
seg000:BAA9		    jnz	    short loc_BAB5
seg000:BAAB		    mov	    al,	ds:byte_4A4
seg000:BAAE		    mov	    ah,	0
seg000:BAB0		    push    ax
seg000:BAB1		    call    sub_A641
seg000:BAB4		    pop	    cx
seg000:BAB5
seg000:BAB5 loc_BAB5:				    ; CODE XREF: set_pass+2Cj
seg000:BAB5					    ; set_pass+45j ...
seg000:BAB5		    push    [bp+arg_6]
seg000:BAB8		    call    check_keyb
seg000:BABB		    pop	    cx
seg000:BABC		    mov	    di,	ax
seg000:BABE		    mov	    ax,	di
seg000:BAC0		    or	    ax,	ax
seg000:BAC2		    jz	    short loc_BAA5
seg000:BAC4		    test    di,	0FFh
seg000:BAC8		    jz	    short loc_BACE
seg000:BACA		    and	    di,	0FFh
seg000:BACE
seg000:BACE loc_BACE:				    ; CODE XREF: set_pass+82j
seg000:BACE		    mov	    ax,	di
seg000:BAD0		    mov	    cx,	7
seg000:BAD3		    mov	    bx,	offset jump_tab_lookup
seg000:BAD6
seg000:BAD6 loc_BAD6:				    ; CODE XREF: set_pass+97j
seg000:BAD6		    cmp	    cs:[bx], ax
seg000:BAD9		    jz	    short loc_BAE1
seg000:BADB		    inc	    bx
seg000:BADC		    inc	    bx
seg000:BADD		    loop    loc_BAD6
seg000:BADF		    jmp	    short loc_BB13
seg000:BAE1 ; ---------------------------------------------------------------------------
seg000:BAE1
seg000:BAE1 loc_BAE1:				    ; CODE XREF: set_pass+93j
seg000:BAE1		    jmp	    word ptr cs:[bx+0Eh]
seg000:BAE1 ; ---------------------------------------------------------------------------
seg000:BAE5 jump_tab_lookup:			    ; DATA XREF: set_pass+8Do
seg000:BAE5		    dw 9
seg000:BAE7		    dw 0Dh
seg000:BAE9		    dw 1Bh
seg000:BAEB		    dw 4800h
seg000:BAED		    dw 4B00h
seg000:BAEF		    dw 4D00h
seg000:BAF1		    dw 5000h
seg000:BAF3		    dw offset loc_BB01
seg000:BAF5		    dw offset loc_BB0A
seg000:BAF7		    dw offset loc_BB01
seg000:BAF9		    dw offset loc_BB01
seg000:BAFB		    dw offset loc_BB01
seg000:BAFD		    dw offset loc_BB01
seg000:BAFF		    dw offset loc_BB01
seg000:BB01 ; ---------------------------------------------------------------------------
seg000:BB01
seg000:BB01 loc_BB01:				    ; DATA XREF: set_pass+ADo
seg000:BB01					    ; set_pass+B1o ...
seg000:BB01		    mov	    [bp+var_2],	1
seg000:BB06		    xor	    si,	si
seg000:BB08		    jmp	    short loc_BB1A
seg000:BB0A ; ---------------------------------------------------------------------------
seg000:BB0A
seg000:BB0A loc_BB0A:				    ; DATA XREF: set_pass+AFo
seg000:BB0A		    or	    si,	si
seg000:BB0C		    jz	    short loc_BB13
seg000:BB0E		    mov	    [bp+var_2],	1
seg000:BB13
seg000:BB13 loc_BB13:				    ; CODE XREF: set_pass+99j
seg000:BB13					    ; set_pass+C6j
seg000:BB13		    push    [bp+arg_6]
seg000:BB16		    call    get_keypress
seg000:BB19		    pop	    cx
seg000:BB1A
seg000:BB1A loc_BB1A:				    ; CODE XREF: set_pass+C2j
seg000:BB1A		    cmp	    di,	20h ; ' '
seg000:BB1D		    jnz	    short loc_BB22
seg000:BB1F		    inc	    si
seg000:BB20		    jmp	    short loc_BB28
seg000:BB22 ; ---------------------------------------------------------------------------
seg000:BB22
seg000:BB22 loc_BB22:				    ; CODE XREF: set_pass+D7j
seg000:BB22		    cmp	    di,	8
seg000:BB25		    jnz	    short loc_BB28
seg000:BB27		    dec	    si
seg000:BB28
seg000:BB28 loc_BB28:				    ; CODE XREF: set_pass+DAj
seg000:BB28					    ; set_pass+DFj
seg000:BB28		    or	    si,	si
seg000:BB2A		    jge	    short loc_BB35
seg000:BB2C		    mov	    bx,	[bp+arg_0]
seg000:BB2F		    mov	    si,	[bx+0Bh]
seg000:BB32		    dec	    si
seg000:BB33		    jmp	    short loc_BB41
seg000:BB35 ; ---------------------------------------------------------------------------
seg000:BB35
seg000:BB35 loc_BB35:				    ; CODE XREF: set_pass+E4j
seg000:BB35		    mov	    bx,	[bp+arg_0]
seg000:BB38		    mov	    ax,	[bx+0Bh]
seg000:BB3B		    cmp	    ax,	si
seg000:BB3D		    jnz	    short loc_BB41
seg000:BB3F		    xor	    si,	si
seg000:BB41
seg000:BB41 loc_BB41:				    ; CODE XREF: set_pass+EDj
seg000:BB41					    ; set_pass+F7j
seg000:BB41		    cmp	    [bp+var_2],	0
seg000:BB45		    jnz	    short loc_BB4A
seg000:BB47		    jmp	    loc_BA5B
seg000:BB4A ; ---------------------------------------------------------------------------
seg000:BB4A
seg000:BB4A loc_BB4A:				    ; CODE XREF: set_pass+FFj
seg000:BB4A		    mov	    ax,	si
seg000:BB4C		    pop	    di
seg000:BB4D		    pop	    si
seg000:BB4E		    leave
seg000:BB4F
seg000:BB4F locret_BB4F:			    ; DATA XREF: seg000:off_BF42o
seg000:BB4F		    retn
seg000:BB4F set_pass	    endp
seg000:BB4F
seg000:BB50
seg000:BB50 ; =============== S	U B R O	U T I N	E =======================================
seg000:BB50
seg000:BB50 ; Attributes: bp-based frame
seg000:BB50
seg000:BB50 password_?_0    proc near		    ; DATA XREF: seg000:BE24o
seg000:BB50
seg000:BB50 var_3	    = word ptr -3
seg000:BB50 arg_0	    = word ptr	4
seg000:BB50 arg_2	    = word ptr	6
seg000:BB50 arg_4	    = word ptr	8
seg000:BB50 arg_6	    = word ptr	0Ah
seg000:BB50
seg000:BB50		    enter   4, 0
seg000:BB54		    push    si
seg000:BB55		    push    di
seg000:BB56		    mov	    si,	[bp+arg_6]
seg000:BB59		    mov	    bx,	[bp+arg_0]
seg000:BB5C		    mov	    al,	[bx]
seg000:BB5E		    mov	    byte ptr [bp+var_3], al
seg000:BB61		    mov	    al,	[bx+1]
seg000:BB64		    mov	    byte ptr [bp+var_3+1], al
seg000:BB67		    push    0
seg000:BB69		    push    19h
seg000:BB6B		    call    set_cursor
seg000:BB6E		    pop	    cx
seg000:BB6F		    pop	    cx
seg000:BB70		    cmp	    [bp+arg_4],	0
seg000:BB74		    jnz	    short loc_BB8E
seg000:BB76		    mov	    al,	byte ptr [bp+var_3+1]
seg000:BB79		    mov	    ah,	0
seg000:BB7B		    push    ax
seg000:BB7C		    mov	    al,	byte ptr [bp+var_3]
seg000:BB7F		    mov	    ah,	0
seg000:BB81		    push    ax
seg000:BB82		    push    [bp+arg_2]
seg000:BB85		    call    password_?
seg000:BB88		    add	    sp,	6
seg000:BB8B		    jmp	    loc_BC8D
seg000:BB8E ; ---------------------------------------------------------------------------
seg000:BB8E
seg000:BB8E loc_BB8E:				    ; CODE XREF: password_?_0+24j
seg000:BB8E					    ; password_?_0+13Aj
seg000:BB8E		    push    si
seg000:BB8F		    mov	    al,	byte ptr [bp+var_3+1]
seg000:BB92		    mov	    ah,	0
seg000:BB94		    push    ax
seg000:BB95		    mov	    al,	byte ptr [bp+var_3]
seg000:BB98		    mov	    ah,	0
seg000:BB9A		    push    ax
seg000:BB9B		    push    [bp+arg_0]
seg000:BB9E		    call    set_pass
seg000:BBA1		    add	    sp,	8
seg000:BBA4		    mov	    di,	ax
seg000:BBA6		    or	    di,	di
seg000:BBA8		    jnz	    short loc_BBAD
seg000:BBAA		    jmp	    loc_BC5F
seg000:BBAD ; ---------------------------------------------------------------------------
seg000:BBAD
seg000:BBAD loc_BBAD:				    ; CODE XREF: password_?_0+58j
seg000:BBAD		    push    0B9h ; '¹'
seg000:BBB0		    call    keyb_?_0
seg000:BBB3		    pop	    cx
seg000:BBB4		    push    si
seg000:BBB5		    lea	    ax,	[bp-1]
seg000:BBB8		    push    ax
seg000:BBB9		    call    sub_B74F
seg000:BBBC		    pop	    cx
seg000:BBBD		    pop	    cx
seg000:BBBE		    or	    ax,	ax
seg000:BBC0		    jnz	    short loc_BBC5
seg000:BBC2		    jmp	    loc_BC4D
seg000:BBC5 ; ---------------------------------------------------------------------------
seg000:BBC5
seg000:BBC5 loc_BBC5:				    ; CODE XREF: password_?_0+70j
seg000:BBC5		    cmp	    byte ptr [bp-1], 24h ; '$'
seg000:BBC9		    jnb	    short loc_BBCE
seg000:BBCB		    jmp	    short loc_BC39
seg000:BBCB ; ---------------------------------------------------------------------------
seg000:BBCD		    db	90h ; 
seg000:BBCE ; ---------------------------------------------------------------------------
seg000:BBCE
seg000:BBCE loc_BBCE:				    ; CODE XREF: password_?_0+79j
seg000:BBCE		    push    si
seg000:BBCF		    mov	    al,	byte ptr [bp+var_3+1]
seg000:BBD2		    mov	    ah,	0
seg000:BBD4		    push    ax
seg000:BBD5		    mov	    al,	byte ptr [bp+var_3]
seg000:BBD8		    mov	    ah,	0
seg000:BBDA		    push    ax
seg000:BBDB		    push    di
seg000:BBDC		    call    password
seg000:BBDF
seg000:BBDF loc_BBDF:
seg000:BBDF		    add	    sp,	8
seg000:BBE2		    or	    ax,	ax
seg000:BBE4		    jnz	    short loc_BBE9
seg000:BBE6		    jmp	    short loc_BC5F
seg000:BBE6 ; ---------------------------------------------------------------------------
seg000:BBE8		    db	90h ; 
seg000:BBE9 ; ---------------------------------------------------------------------------
seg000:BBE9
seg000:BBE9 loc_BBE9:				    ; CODE XREF: password_?_0+94j
seg000:BBE9		    push    0
seg000:BBEB		    mov	    ax,	offset pass_402h
seg000:BBEE		    push    ax
seg000:BBEF		    push    [bp+var_3+1]
seg000:BBF2		    push    [bp+var_3]
seg000:BBF5		    call    sub_B433
seg000:BBF8		    add	    sp,	8
seg000:BBFB		    cmp	    di,	1
seg000:BBFE		    jnz	    short loc_BC19
seg000:BC00		    push    1
seg000:BC02		    mov	    ax,	offset pass_403h
seg000:BC05		    push    ax
seg000:BC06		    push    [bp+var_3+1]
seg000:BC09		    push    [bp+var_3]
seg000:BC0C		    call    sub_B433
seg000:BC0F		    add	    sp,	8
seg000:BC12		    push    si
seg000:BC13		    call    sub_B79D
seg000:BC16		    pop	    cx
seg000:BC17		    jmp	    short loc_BC5F
seg000:BC19 ; ---------------------------------------------------------------------------
seg000:BC19
seg000:BC19 loc_BC19:				    ; CODE XREF: password_?_0+AEj
seg000:BC19		    cmp	    di,	2
seg000:BC1C		    jnz	    short loc_BC5F
seg000:BC1E		    push    si
seg000:BC1F		    mov	    al,	byte ptr [bp+var_3+1]
seg000:BC22		    mov	    ah,	0
seg000:BC24		    push    ax
seg000:BC25		    mov	    al,	byte ptr [bp+var_3]
seg000:BC28		    mov	    ah,	0
seg000:BC2A		    push    ax
seg000:BC2B		    push    [bp+arg_2]
seg000:BC2E		    call    pass_?
seg000:BC31		    add	    sp,	8
seg000:BC34		    mov	    [bp+arg_2],	ax
seg000:BC37		    jmp	    short loc_BC5F
seg000:BC39 ; ---------------------------------------------------------------------------
seg000:BC39
seg000:BC39 loc_BC39:				    ; CODE XREF: password_?_0+7Bj
seg000:BC39		    mov	    ax,	offset aSystemHardwareDo ; " System Hardware doesn't support Passwo"...
seg000:BC3C		    push    ax
seg000:BC3D		    call    error_handlr_?
seg000:BC40		    pop	    cx
seg000:BC41
seg000:BC41 loc_BC41:				    ; CODE XREF: password_?_0+F9j
seg000:BC41		    push    si
seg000:BC42		    call    get_keypress
seg000:BC45		    pop	    cx
seg000:BC46		    cmp	    ax,	1Bh
seg000:BC49		    jnz	    short loc_BC41
seg000:BC4B		    jmp	    short loc_BC5F
seg000:BC4D ; ---------------------------------------------------------------------------
seg000:BC4D
seg000:BC4D loc_BC4D:				    ; CODE XREF: password_?_0+72j
seg000:BC4D		    mov	    ax,	offset aErrorKeyboardCon ; " ERROR: Keyboard Controller	not respond"...
seg000:BC50		    push    ax
seg000:BC51		    call    error_handlr_?
seg000:BC54		    pop	    cx
seg000:BC55
seg000:BC55 loc_BC55:				    ; CODE XREF: password_?_0+10Dj
seg000:BC55		    push    si
seg000:BC56		    call    get_keypress
seg000:BC59		    pop	    cx
seg000:BC5A		    cmp	    ax,	1Bh
seg000:BC5D		    jnz	    short loc_BC55
seg000:BC5F
seg000:BC5F loc_BC5F:				    ; CODE XREF: password_?_0+5Aj
seg000:BC5F					    ; password_?_0+96j	...
seg000:BC5F		    mov	    al,	byte ptr [bp+var_3+1]
seg000:BC62		    mov	    ah,	0
seg000:BC64		    push    ax
seg000:BC65		    mov	    al,	byte ptr [bp+var_3]
seg000:BC68		    mov	    ah,	0
seg000:BC6A		    push    ax
seg000:BC6B		    push    [bp+arg_2]
seg000:BC6E		    call    password_?
seg000:BC71		    add	    sp,	6
seg000:BC74		    push    1
seg000:BC76		    mov	    ax,	offset pass_200h
seg000:BC79		    push    ax
seg000:BC7A		    push    [bp+var_3+1]
seg000:BC7D		    push    [bp+var_3]
seg000:BC80		    call    sub_B433
seg000:BC83		    add	    sp,	8
seg000:BC86		    or	    di,	di
seg000:BC88		    jz	    short loc_BC8D
seg000:BC8A		    jmp	    loc_BB8E
seg000:BC8D ; ---------------------------------------------------------------------------
seg000:BC8D
seg000:BC8D loc_BC8D:				    ; CODE XREF: password_?_0+3Bj
seg000:BC8D					    ; password_?_0+138j
seg000:BC8D		    mov	    ax,	[bp+arg_2]
seg000:BC90		    pop	    di
seg000:BC91		    pop	    si
seg000:BC92		    leave
seg000:BC93		    retn
seg000:BC93 password_?_0    endp
seg000:BC93
seg000:BC93 ; ---------------------------------------------------------------------------
seg000:BC94 bios_input_msg  dw offset aEnterCurrentTi ;	DATA XREF: bios_input_?+11r
seg000:BC94					    ; bios_input_?+2Er
seg000:BC94					    ; "	Enter Current Time As HH:MM:SS In 24 H"...
seg000:BC96		    dw offset aEnterCurrentDa ;	" Enter	Current	Date as	MM/DD/YYYY "
seg000:BC98		    dw offset aEnterSizeOfM_0 ;	" Enter	Size of	MAIN Base RAM "
seg000:BC9A		    dw offset aEnterSizeOfMai ;	" Enter	Size of	MAIN Extended RAM "
seg000:BC9C		    dw offset aEnterSizeOfEms ;	" Enter	Size of	EMS RAM	"
seg000:BC9E		    dw offset aEnterSizeOfA_0 ;	" Enter	Size of	Add-On Base RAM	(Memory	"...
seg000:BCA0		    dw offset aEnterSizeOfAdd ;	" Enter	Size of	Add-On Extended	RAM (Mem"...
seg000:BCA2		    dw offset aEnterMachineOp ;	" Enter	Machine	Operating Speed	"
seg000:BCA4		    dw offset aEnterCacheCont ;	" Enter	Cache Control Option "
seg000:BCA6		    dw offset aEnterSerialPor ;	" Enter	Serial Port Configuration "
seg000:BCA8		    dw offset aEnterParallelP ;	" Enter	Parallel Port Configuration "
seg000:BCAA		    dw offset aPressSpaceToCh ;	" Press	SPACE to change	system password;"...
seg000:BCAC		    dw offset aEnterDefaultVi ;	" Enter	Default	Video Display Type Desir"...
seg000:BCAE		    dw offset aEnterVideoRefr ;	" Enter	Video Refresh Rate "
seg000:BCB0		    dw offset aEnterDriveToBo ;	" Enter	Drive To Boot From "
seg000:BCB2		    dw offset aEnterFloppyDri ;	" Enter	Floppy Drive Type (3-1/2\" or 5-1"...
seg000:BCB4		    dw offset aEnterHardDiskF ;	" Enter	Hard Disk (Fixed) Disk Drive Typ"...
seg000:BCB6 unk_BCB6	    db	2Fh ; /		    ; DATA XREF: seg000:C110o
seg000:BCB7 bios_set_start? dw 0		    ; DATA XREF: seg000:BE60o
seg000:BCB7					    ; seg000:stru_BE6Fo
seg000:BCB9		    Bios_settings <offset aNotPresent, 0> ; " -Not Present-"
seg000:BCBD		    Bios_settings <offset a514360k, 0> ; "  5-1/4\" 360K "
seg000:BCC1		    Bios_settings <offset a5141_2m, 0> ; "  5-1/4\" 1.2M "
seg000:BCC5		    Bios_settings <offset a312720k, 0> ; "  3-1/2\" 720K "
seg000:BCC9 stru_BCC9	    Bios_settings <offset a3121_4m, 0> ; DATA XREF: seg000:BE51o
seg000:BCC9					    ; "	 3-1/2\" 1.4M "
seg000:BCCD		    Bios_settings <offset aEnterMfm300Mon, 0> ;	"Enter MFM-300 Monitor "
seg000:BCD1		    Bios_settings <offset aFloppyDrive0_0, 0> ;	"	Floppy Drive 0 "
seg000:BCD5		    Bios_settings <offset aHardDiskDrive0, 0> ;	"    Hard Disk Drive 0 "
seg000:BCD9 stru_BCD9	    Bios_settings <offset aFloppyThenHard, 0>
seg000:BCD9					    ; DATA XREF: seg000:BE33o
seg000:BCD9					    ; "Floppy then Hard	Disk "
seg000:BCDD		    Bios_settings <offset aEnhancedGraphi, 0> ;	" Enhanced Graphics "
seg000:BCE1		    Bios_settings <offset aColorCard40x25, 0> ;	" Color	Card: 40x25 "
seg000:BCE5		    Bios_settings <offset aColorCard80x25, 0> ;	" Color	Card: 80x25 "
seg000:BCE9 stru_BCE9	    Bios_settings <offset aMono_Card80x25, 800h>
seg000:BCE9					    ; DATA XREF: seg000:BE42o
seg000:BCE9					    ; "	Mono. Card: 80x25 "
seg000:BCED		    Bios_settings <offset a60Hz, 0> ; "	60 Hz "
seg000:BCF1 stru_BCF1	    Bios_settings <offset a50Hz, 0> ; DATA XREF: seg000:BDD9o
seg000:BCF1					    ; "	50 Hz "
seg000:BCF5		    Bios_settings <offset aSlow, 600h> ; " Slow	"
seg000:BCF9		    Bios_settings <offset aFast, 0C00h>	; " Fast "
seg000:BCFD stru_BCFD	    Bios_settings <offset aSmart, 0> ; DATA XREF: seg000:BDE8o
seg000:BCFD					    ; "	Smart "
seg000:BD01		    Bios_settings <offset aCacheOffQOff, 0> ; "	Cache:OFF Q:OFF	"
seg000:BD05		    Bios_settings <offset aCacheOnQOff,	0> ; " Cache: ON Q:OFF "
seg000:BD09		    Bios_settings <offset aCacheOnQ1, 0> ; " Cache: ON Q:  1 "
seg000:BD0D stru_BD0D	    Bios_settings <offset aCacheOnQ16, 0> ; DATA XREF: seg000:BDF7o
seg000:BD0D					    ; seg000:BE06o
seg000:BD0D					    ; "	Cache: ON Q: 16	"
seg000:BD11		    Bios_settings <offset aEnable, 0> ;	"  Enable "
seg000:BD15 stru_BD15	    Bios_settings <offset aDisable, 0> ; DATA XREF: seg000:BE15o
seg000:BD15					    ; "	Disable	"
seg000:BD19		    Bios_settings <offset aDisable, 0> ; " Disable "
seg000:BD1D		    Bios_settings <offset aLpt1, 0> ; "	  LPT1:	"
seg000:BD21		    Bios_settings <offset aLpt2, 0> ; "	  LPT2:	"
seg000:BD25 stru_BD25	    Bios_settings <offset aLpt3, 0A03h>	; DATA XREF: sub_A594+Bo
seg000:BD25					    ; sub_A641:loc_A67Bo
seg000:BD25					    ; "	  LPT3:	"
seg000:BD29		    db	  5
seg000:BD2A		    db	10h
seg000:BD2B		    db	  6
seg000:BD2C		    db	  1
seg000:BD2D		    db	11h
seg000:BD2E word_BD2E	    dw 0		    ; DATA XREF: biosOpts_to_ram+Cr
seg000:BD30		    db	  0
seg000:BD31		    db	  0
seg000:BD32		    db	  2
seg000:BD33		    db	  0
seg000:BD34 stru_BD34	    bios_link <offset sub_A594,	0D03h>
seg000:BD34					    ; DATA XREF: sub_A594:loc_A5ADo
seg000:BD38		    db	  5
seg000:BD39		    db	10h
seg000:BD3A		    db	  6
seg000:BD3B		    db	  2
seg000:BD3C		    db	  0
seg000:BD3D		    db	  0
seg000:BD3E		    db	  0
seg000:BD3F		    db	  0
seg000:BD40		    db	  0
seg000:BD41		    db	  2
seg000:BD42		    db	  0
seg000:BD43 stru_BD43	    bios_link <offset sub_A594,	1003h>
seg000:BD43					    ; DATA XREF: sub_A594:loc_A5BBo
seg000:BD47		    db	  5
seg000:BD48		    db	10h
seg000:BD49		    db	  6
seg000:BD4A		    db	  3
seg000:BD4B		    db	  1
seg000:BD4C		    db	  0
seg000:BD4D		    db	  0
seg000:BD4E		    db	  0
seg000:BD4F		    db	  0
seg000:BD50		    db	  2
seg000:BD51		    db	  0
seg000:BD52 stru_BD52	    bios_link <offset sub_A594,	1C03h>
seg000:BD52					    ; DATA XREF: sub_A594:loc_A5C9o
seg000:BD56		    db	  4
seg000:BD57		    db	10h
seg000:BD58		    db	  7
seg000:BD59		    db	  4
seg000:BD5A		    db	  0
seg000:BD5B		    db	  1
seg000:BD5C		    db	  0
seg000:BD5D		    db	  1
seg000:BD5E		    db	  1
seg000:BD5F		    db	  2
seg000:BD60		    db	  0
seg000:BD61 stru_BD61	    bios_link <offset sub_A594,	1F03h>
seg000:BD61					    ; DATA XREF: sub_A594:loc_A5DCo
seg000:BD65		    db	  4
seg000:BD66		    db	10h
seg000:BD67		    db	  7
seg000:BD68		    db	  5
seg000:BD69		    db	  3
seg000:BD6A		    db	  1
seg000:BD6B		    db	  0
seg000:BD6C		    db	  1
seg000:BD6D		    db	  1
seg000:BD6E		    db	  2
seg000:BD6F		    db	  0
seg000:BD70 stru_BD70	    bios_link <offset sub_A594,	2203h>
seg000:BD70					    ; DATA XREF: sub_A594:loc_A60Fo
seg000:BD74		    db	  4
seg000:BD75		    db	10h
seg000:BD76		    db	  7
seg000:BD77		    db	11h
seg000:BD78		    db	  4
seg000:BD79		    db 0C5h ; Å
seg000:BD7A		    db	  7
seg000:BD7B		    db	  1
seg000:BD7C		    db	  1
seg000:BD7D		    db	  4
seg000:BD7E		    db	  0
seg000:BD7F		    bios_link <offset sub_A594,	0F06h>
seg000:BD83		    db	  2
seg000:BD84		    db	  0
seg000:BD85		    db	  9
seg000:BD86		    db	  7
seg000:BD87		    db	13h
seg000:BD88		    db	  2
seg000:BD89		    db	  0
seg000:BD8A		    db	  2
seg000:BD8B		    db	  2
seg000:BD8C		    db	  3
seg000:BD8D		    db	  0
seg000:BD8E stru_BD8E	    bios_link <offset sub_A6AD,	1806h> ; DATA XREF: sub_A8E3+1Co
seg000:BD92		    db	  2
seg000:BD93		    db	  0
seg000:BD94		    db	0Ah
seg000:BD95		    db	  8
seg000:BD96		    db	  6
seg000:BD97		    db	  1
seg000:BD98		    db	  0
seg000:BD99		    db	  2
seg000:BD9A		    db	  3
seg000:BD9B		    db	10h
seg000:BD9C		    db	  0
seg000:BD9D stru_BD9D	    bios_link <offset sub_A771,	2006h> ; DATA XREF: sub_A946+1Co
seg000:BDA1		    db	  2
seg000:BDA2		    db	  0
seg000:BDA3		    db	0Ah
seg000:BDA4		    db	13h
seg000:BDA5		    db	  7
seg000:BDA6		    db	  0
seg000:BDA7		    db	  0
seg000:BDA8		    db	  2
seg000:BDA9		    db	  4
seg000:BDAA		    db	10h
seg000:BDAB		    db	  0
seg000:BDAC stru_BDAC	    bios_link <offset sub_A87B,	0F07h> ; DATA XREF: sub_A6AD+3Fo
seg000:BDB0		    db	  2
seg000:BDB1		    db	  6
seg000:BDB2		    db	0Bh
seg000:BDB3		    db	0Ah
seg000:BDB4		    db	14h
seg000:BDB5		    db	  0
seg000:BDB6		    db	  0
seg000:BDB7		    db	  3
seg000:BDB8		    db	  5
seg000:BDB9		    db	  9
seg000:BDBA		    db	  0
seg000:BDBB stru_BDBB	    bios_link <offset sub_A70B,	1807h> ; DATA XREF: sub_A8E3+52o
seg000:BDBF		    db	  2
seg000:BDC0		    db	  7
seg000:BDC1		    db	0Bh
seg000:BDC2		    db	14h
seg000:BDC3		    db	  9
seg000:BDC4		    db	  0
seg000:BDC5		    db	  0
seg000:BDC6		    db	  3
seg000:BDC7		    db	  6
seg000:BDC8		    db 0F1h ; ñ
seg000:BDC9		    db	  0
seg000:BDCA		    bios_link <offset sub_A7D9,	140Ah>
seg000:BDCE		    db	  0
seg000:BDCF		    db	  9
seg000:BDD0		    db	0Ch
seg000:BDD1		    db	16h
seg000:BDD2		    db	16h
seg000:BDD3		    db	  1
seg000:BDD4		    db	  0
seg000:BDD5		    db	  4
seg000:BDD6		    db	  7
seg000:BDD7		    db	  3
seg000:BDD8		    db	  0
seg000:BDD9		    bios_link <offset stru_BCF1.data, 160Bh>
seg000:BDDD		    db	  1
seg000:BDDE		    db	0Bh
seg000:BDDF		    db	0Dh
seg000:BDE0		    db	16h
seg000:BDE1		    db	16h
seg000:BDE2		    db	  0
seg000:BDE3		    db	  0
seg000:BDE4		    db	  5
seg000:BDE5		    db	  8
seg000:BDE6		    db	  4
seg000:BDE7		    db	  0
seg000:BDE8		    bios_link <offset stru_BCFD.data, 1E0Dh>
seg000:BDEC		    db	  1
seg000:BDED		    db	0Ch
seg000:BDEE		    db	0Eh
seg000:BDEF		    db	16h
seg000:BDF0		    db	16h
seg000:BDF1		    db	  0
seg000:BDF2		    db	  0
seg000:BDF3		    db	  6
seg000:BDF4		    db	  9
seg000:BDF5		    db	  2
seg000:BDF6		    db	  0
seg000:BDF7		    bios_link <offset stru_BD0D.data, 1E0Eh>
seg000:BDFB		    db	  1
seg000:BDFC		    db	0Dh
seg000:BDFD		    db	0Fh
seg000:BDFE		    db	16h
seg000:BDFF		    db	16h
seg000:BE00		    db	  0
seg000:BE01		    db	  0
seg000:BE02		    db	  7
seg000:BE03		    db	  9
seg000:BE04		    db	  2
seg000:BE05		    db	  0
seg000:BE06		    bios_link <offset stru_BD0D.data, 1E0Fh>
seg000:BE0A		    db	  1
seg000:BE0B		    db	0Eh
seg000:BE0C		    db	10h
seg000:BE0D		    db	17h
seg000:BE0E		    db	17h
seg000:BE0F		    db	  1
seg000:BE10		    db	  0
seg000:BE11		    db	  8
seg000:BE12		    db	0Ah
seg000:BE13		    db	  4
seg000:BE14		    db	  0
seg000:BE15		    bios_link <offset stru_BD15.data, 11h>
seg000:BE19		    db	  2
seg000:BE1A		    db	0Fh
seg000:BE1B		    db	  0
seg000:BE1C		    db	17h
seg000:BE1D		    db	17h
seg000:BE1E		    db	  0
seg000:BE1F		    db	  0
seg000:BE20		    db	  9
seg000:BE21		    db	0Bh
seg000:BE22		    db	  3
seg000:BE23		    db	  0
seg000:BE24		    bios_link <offset password_?_0, 3A03h>
seg000:BE28		    db	  1
seg000:BE29		    db	17h
seg000:BE2A		    db	12h
seg000:BE2B		    db	  0
seg000:BE2C		    db	  3
seg000:BE2D		    db	  0
seg000:BE2E		    db	  0
seg000:BE2F		    db	0Ah
seg000:BE30		    db	0Ch
seg000:BE31		    db	  4
seg000:BE32		    db	  0
seg000:BE33		    bios_link <offset stru_BCD9.data, 3E04h>
seg000:BE37		    db	  0
seg000:BE38		    db	11h
seg000:BE39		    db	13h
seg000:BE3A		    db	  0
seg000:BE3B		    db	  3
seg000:BE3C		    db	  0
seg000:BE3D		    db	  0
seg000:BE3E		    db	0Bh
seg000:BE3F		    db	0Dh
seg000:BE40		    db	  2
seg000:BE41		    db	  0
seg000:BE42		    bios_link <offset stru_BCE9.data, 3706h>
seg000:BE46		    db	  1
seg000:BE47		    db	12h
seg000:BE48		    db	14h
seg000:BE49		    db	  6
seg000:BE4A		    db	  8
seg000:BE4B		    db	  3
seg000:BE4C		    db	  0
seg000:BE4D		    db	0Ch
seg000:BE4E		    db	0Eh
seg000:BE4F		    db	  4
seg000:BE50		    db	  0
seg000:BE51		    bios_link <offset stru_BCC9.data, 3F07h>
seg000:BE55		    db	  1
seg000:BE56		    db	13h
seg000:BE57		    db	15h
seg000:BE58		    db	  9
seg000:BE59		    db	0Ah
seg000:BE5A		    db	  4
seg000:BE5B		    db	  0
seg000:BE5C		    db	0Dh
seg000:BE5D		    db	0Fh
seg000:BE5E		    db	  5
seg000:BE5F		    db	  0
seg000:BE60		    bios_link <offset bios_set_start?, 3F08h>
seg000:BE64		    db	  1
seg000:BE65		    db	14h
seg000:BE66		    db	16h
seg000:BE67		    db	  9
seg000:BE68		    db	0Ah
seg000:BE69		    db	  0
seg000:BE6A		    db	  0
seg000:BE6B		    db	0Eh
seg000:BE6C		    db	0Fh
seg000:BE6D		    db	  5
seg000:BE6E		    db	  0
seg000:BE6F stru_BE6F	    bios_link <offset bios_set_start?, 3E0Ah>
seg000:BE6F					    ; DATA XREF: seg000:AA5Ao
seg000:BE6F					    ; seg000:AA81o ...
seg000:BE73		    db	  2
seg000:BE74		    db	15h
seg000:BE75		    db	17h
seg000:BE76		    db	0Bh
seg000:BE77		    db	0Bh
seg000:BE78		    db	  0
seg000:BE79		    db	  0
seg000:BE7A		    db	0Fh
seg000:BE7B		    db	10h
seg000:BE7C		    db	65h ; e
seg000:BE7D		    db	  0
seg000:BE7E stru_BE7E	    bios_link <offset clr_scr?,	3E11h> ; DATA XREF: seg000:loc_AA67o
seg000:BE7E					    ; "È\f"
seg000:BE82		    db	  2
seg000:BE83		    db	16h
seg000:BE84		    db	11h
seg000:BE85		    db	10h
seg000:BE86		    db	10h
seg000:BE87		    db	  0
seg000:BE88		    db	  0
seg000:BE89		    db	10h
seg000:BE8A		    db	10h
seg000:BE8B		    db	65h ; e
seg000:BE8C		    db	  0
seg000:BE8D		    bios_link <offset clr_scr?,	0FFFFh>	; "È\f"
seg000:BE91		    db	  0
seg000:BE92		    db	  0
seg000:BE93		    db	  0
seg000:BE94		    db	  0
seg000:BE95		    db	  0
seg000:BE96		    db	  0
seg000:BE97		    db	  0
seg000:BE98		    db	  0
seg000:BE99		    db	  0
seg000:BE9A		    db	  0
seg000:BE9B		    db	  0
seg000:BE9C		    db	  0
seg000:BE9D		    db	  0
seg000:BE9E word_BE9E	    dw 203h		    ; DATA XREF: seg000:off_C0DCo
seg000:BEA0 stru_BEA0	    Bios_disp <offset aTime,  3, 15h>; 0 ; " Time:"
seg000:BEA0		    Bios_disp <offset aDate,  6,  4>; 1
seg000:BEA0		    Bios_disp <offset aMainRam,	 7,  2>; 2
seg000:BEA0		    Bios_disp <offset aAddOnRam, 0Ah,  2>; 3
seg000:BEA0		    Bios_disp <offset aOperatingSpeed, 0Bh,  2>; 4
seg000:BEA0		    Bios_disp <offset aCacheControl, 0Dh,  2>; 5
seg000:BEA0		    Bios_disp <offset aSerialPort1Com, 0Eh,  2>; 6
seg000:BEA0		    Bios_disp <offset aSerialPort2Com, 0Fh,  2>; 7
seg000:BEA0		    Bios_disp <offset aParallelPortAs, 11h,  2>; 8
seg000:BEA0		    Bios_disp <offset aPasswordContro,	3, 2Ah>; 9
seg000:BEA0		    Bios_disp <offset aVideoDisplay,  4, 2Ah>; 0Ah
seg000:BEA0		    Bios_disp <offset aVideoRefreshRa,	6, 2Ah>; 0Bh
seg000:BEA0		    Bios_disp <offset aBootDrive,  7, 2Ah>; 0Ch
seg000:BEA0		    Bios_disp <offset aFloppyDrive0,  8, 2Ah>; 0Dh
seg000:BEA0		    Bios_disp <offset aFloppyDrive1, 0Ah, 2Fh>;	0Eh
seg000:BEA0		    Bios_disp <offset aDiskDrive0, 11h,	2Fh>; 0Fh
seg000:BEA0		    Bios_disp <offset aDiskDrive1,  3, 0Ch>; 10h
seg000:BEA0		    Bios_disp <offset aCurrentPasswor+10h,  3, 0Fh>; 11h
seg000:BEA0		    Bios_disp <offset aCurrentPasswor+10h,  3, 1Eh>; 12h
seg000:BEA0		    Bios_disp <offset asc_DB57,	 3, 21h>; 13h
seg000:BEA0		    Bios_disp <offset asc_DB57,	 5, 12h>; 14h
seg000:BEA0		    Bios_disp <offset aBaseExtendedEm,	7, 22h>; 15h
seg000:BEA0		    Bios_disp <offset asc_DB6D,	 8,  8>; 16h
seg000:BEA0		    Bios_disp <offset aTotal,  8, 22h>;	17h
seg000:BEA0		    Bios_disp <offset asc_DB6D,	0Ch, 2Ch>; 18h
seg000:BEA0		    Bios_disp <offset aCylinders, 0Ch, 3Eh>; 19h
seg000:BEA0		    Bios_disp <offset aHeads, 0Dh, 2Ch>; 1Ah
seg000:BEA0		    Bios_disp <offset aShipZone, 0Dh, 3Eh>; 1Bh
seg000:BEA0		    Bios_disp <offset aSectors,	0Eh, 2Ch>; 1Ch
seg000:BEA0		    Bios_disp <offset aPrecomp,	0Eh, 3Eh>; 1Dh
seg000:BEA0		    Bios_disp <offset aCapacity, 13h, 2Ch>; 1Eh
seg000:BEA0		    Bios_disp <offset aCylinders, 13h, 3Eh>; 1Fh
seg000:BEA0		    Bios_disp <offset aHeads, 14h, 2Ch>; 20h
seg000:BEA0		    Bios_disp <offset aShipZone, 14h, 3Eh>; 21h
seg000:BEA0		    Bios_disp <offset aSectors,	15h, 2Ch>; 22h
seg000:BEA0		    Bios_disp <offset aPrecomp,	15h, 3Eh>; 23h
seg000:BEA0		    Bios_disp <offset aCapacity,  1, 13h>; 24h
seg000:BEA0		    Bios_disp <offset aSystemHardware, 0FFh, 0FFh>; 25h
seg000:BF38		    db	  0
seg000:BF39		    db	  0
seg000:BF3A off_BF3A	    dw offset off_C900	    ; DATA XREF: seg000:off_C076o
seg000:BF3C		    dw 1
seg000:BF3E word_BF3E	    dw 0CD01h		    ; DATA XREF: seg000:off_BF4Ao
seg000:BF40		    dw 4Eh
seg000:BF42 off_BF42	    dw offset locret_BB4F   ; DATA XREF: seg000:off_BF46o
seg000:BF44		    dw 1
seg000:BF46 off_BF46	    dw offset off_BF42	    ; DATA XREF: seg000:off_BF4Co
seg000:BF48		    dw 0
seg000:BF4A off_BF4A	    dw offset word_BF3E	    ; DATA XREF: seg000:C078o
seg000:BF4C off_BF4C	    dw offset off_BF46	    ; DATA XREF: seg000:off_BF92o
seg000:BF4E word_BF4E	    dw 0BA00h		    ; DATA XREF: seg000:off_C07Ao
seg000:BF4E					    ; seg000:off_C082o	...
seg000:BF50		    dw 1
seg000:BF52 word_BF52	    dw 0BA4Fh		    ; DATA XREF: seg000:off_BF56o
seg000:BF52					    ; seg000:off_BF82o	...
seg000:BF54		    dw 1
seg000:BF56 off_BF56	    dw offset word_BF52	    ; DATA XREF: seg000:C07Co
seg000:BF56					    ; seg000:C0D4o
seg000:BF58		    dw 0
seg000:BF5A word_BF5A	    dw 0CC00h		    ; DATA XREF: seg000:off_C07Eo
seg000:BF5C		    dw 1
seg000:BF5E word_BF5E	    dw 0CD01h		    ; DATA XREF: seg000:off_BF7Ao
seg000:BF60		    dw 27h
seg000:BF62 word_BF62	    dw 0CB28h		    ; DATA XREF: seg000:off_BF76o
seg000:BF64		    dw 1
seg000:BF66 word_BF66	    dw 0CD29h		    ; DATA XREF: seg000:off_BF72o
seg000:BF68		    dw 26h
seg000:BF6A word_BF6A	    dw 0B94Fh		    ; DATA XREF: seg000:off_BF6Eo
seg000:BF6C		    dw 1
seg000:BF6E off_BF6E	    dw offset word_BF6A	    ; DATA XREF: seg000:BF74o
seg000:BF70		    dw 0
seg000:BF72 off_BF72	    dw offset word_BF66	    ; DATA XREF: seg000:BF78o
seg000:BF74		    dw offset off_BF6E
seg000:BF76 off_BF76	    dw offset word_BF62	    ; DATA XREF: seg000:BF7Co
seg000:BF78		    dw offset off_BF72
seg000:BF7A off_BF7A	    dw offset word_BF5E	    ; DATA XREF: seg000:C080o
seg000:BF7C		    dw offset off_BF76
seg000:BF7E word_BF7E	    dw 0BA28h		    ; DATA XREF: seg000:off_BF86o
seg000:BF7E					    ; seg000:off_BFA6o	...
seg000:BF80		    dw 1
seg000:BF82 off_BF82	    dw offset word_BF52	    ; DATA XREF: seg000:BF88o
seg000:BF84		    dw 0
seg000:BF86 off_BF86	    dw offset word_BF7E	    ; DATA XREF: seg000:C084o
seg000:BF86					    ; seg000:C088o ...
seg000:BF88		    dw offset off_BF82
seg000:BF8A word_BF8A	    dw 0DA2Bh		    ; DATA XREF: seg000:off_BF9Eo
seg000:BF8A					    ; seg000:off_BFF2o
seg000:BF8C		    dw 1
seg000:BF8E off_BF8E	    dw offset loc_C42C	    ; DATA XREF: seg000:off_BF9Ao
seg000:BF8E					    ; seg000:off_BFCEo	...
seg000:BF90		    dw 21h
seg000:BF92 off_BF92	    dw offset off_BF4C	    ; DATA XREF: seg000:off_BF96o
seg000:BF92					    ; seg000:off_BFEAo
seg000:BF94		    dw 1
seg000:BF96 off_BF96	    dw offset off_BF92	    ; DATA XREF: seg000:BF9Co
seg000:BF98		    dw 0
seg000:BF9A off_BF9A	    dw offset off_BF8E	    ; DATA XREF: seg000:BFA0o
seg000:BF9C		    dw offset off_BF96
seg000:BF9E off_BF9E	    dw offset word_BF8A	    ; DATA XREF: seg000:BFA4o
seg000:BFA0		    dw offset off_BF9A
seg000:BFA2 off_BFA2	    dw offset word_BF52	    ; DATA XREF: seg000:BFA8o
seg000:BFA4		    dw offset off_BF9E
seg000:BFA6 off_BFA6	    dw offset word_BF7E	    ; DATA XREF: seg000:C0A4o
seg000:BFA8		    dw offset off_BFA2
seg000:BFAA word_BFAA	    dw 0B32Bh		    ; DATA XREF: seg000:off_BFB6o
seg000:BFAA					    ; seg000:off_C016o
seg000:BFAC		    dw 1
seg000:BFAE word_BFAE	    dw 0B34Ch		    ; DATA XREF: seg000:off_BFB2o
seg000:BFAE					    ; seg000:off_C012o
seg000:BFB0		    dw 1
seg000:BFB2 off_BFB2	    dw offset word_BFAE	    ; DATA XREF: seg000:BFB8o
seg000:BFB4		    dw 0
seg000:BFB6 off_BFB6	    dw offset word_BFAA	    ; DATA XREF: seg000:BFBCo
seg000:BFB8		    dw offset off_BFB2
seg000:BFBA off_BFBA	    dw offset word_BF52	    ; DATA XREF: seg000:BFC0o
seg000:BFBC		    dw offset off_BFB6
seg000:BFBE off_BFBE	    dw offset word_BF7E	    ; DATA XREF: seg000:C0A8o
seg000:BFBE					    ; seg000:C0ACo ...
seg000:BFC0		    dw offset off_BFBA
seg000:BFC2 word_BFC2	    dw 0C02Bh		    ; DATA XREF: seg000:off_BFD2o
seg000:BFC4		    dw 1
seg000:BFC6 word_BFC6	    dw 0D94Ch		    ; DATA XREF: seg000:off_BFCAo
seg000:BFC8		    dw 1
seg000:BFCA off_BFCA	    dw offset word_BFC6	    ; DATA XREF: seg000:BFD0o
seg000:BFCC		    dw 0
seg000:BFCE off_BFCE	    dw offset off_BF8E	    ; DATA XREF: seg000:BFD4o
seg000:BFD0		    dw offset off_BFCA
seg000:BFD2 off_BFD2	    dw offset word_BFC2	    ; DATA XREF: seg000:BFD8o
seg000:BFD4		    dw offset off_BFCE
seg000:BFD6 off_BFD6	    dw offset word_BF52	    ; DATA XREF: seg000:BFDCo
seg000:BFD8		    dw offset off_BFD2
seg000:BFDA off_BFDA	    dw offset word_BF7E	    ; DATA XREF: seg000:C0B4o
seg000:BFDC		    dw offset off_BFD6
seg000:BFDE word_BFDE	    dw 0DA03h		    ; DATA XREF: seg000:off_BFFEo
seg000:BFE0		    dw 1
seg000:BFE2 word_BFE2	    dw 0C404h		    ; DATA XREF: seg000:off_BFFAo
seg000:BFE2					    ; seg000:off_C04Ao
seg000:BFE4		    dw 21h
seg000:BFE6 word_BFE6	    dw 0BF25h		    ; DATA XREF: seg000:off_BFF6o
seg000:BFE8		    dw 1
seg000:BFEA off_BFEA	    dw offset off_BF92	    ; DATA XREF: seg000:BFF0o
seg000:BFEC		    dw 0
seg000:BFEE off_BFEE	    dw offset off_BF8E	    ; DATA XREF: seg000:BFF4o
seg000:BFF0		    dw offset off_BFEA
seg000:BFF2 off_BFF2	    dw offset word_BF8A	    ; DATA XREF: seg000:BFF8o
seg000:BFF4		    dw offset off_BFEE
seg000:BFF6 off_BFF6	    dw offset word_BFE6	    ; DATA XREF: seg000:BFFCo
seg000:BFF8		    dw offset off_BFF2
seg000:BFFA off_BFFA	    dw offset word_BFE2	    ; DATA XREF: seg000:C000o
seg000:BFFC		    dw offset off_BFF6
seg000:BFFE off_BFFE	    dw offset word_BFDE	    ; DATA XREF: seg000:C004o
seg000:C000		    dw offset off_BFFA
seg000:C002 off_C002	    dw offset word_BF52	    ; DATA XREF: seg000:C008o
seg000:C004		    dw offset off_BFFE
seg000:C006 off_C006	    dw offset word_BF7E	    ; DATA XREF: seg000:C0C0o
seg000:C008		    dw offset off_C002
seg000:C00A word_C00A	    dw 0B303h		    ; DATA XREF: seg000:off_C01Eo
seg000:C00C		    dw 1
seg000:C00E word_C00E	    dw 0B325h		    ; DATA XREF: seg000:off_C01Ao
seg000:C010		    dw 1
seg000:C012 off_C012	    dw offset word_BFAE	    ; DATA XREF: seg000:C018o
seg000:C014		    dw 0
seg000:C016 off_C016	    dw offset word_BFAA	    ; DATA XREF: seg000:C01Co
seg000:C018		    dw offset off_C012
seg000:C01A off_C01A	    dw offset word_C00E	    ; DATA XREF: seg000:C020o
seg000:C01C		    dw offset off_C016
seg000:C01E off_C01E	    dw offset word_C00A	    ; DATA XREF: seg000:C024o
seg000:C020		    dw offset off_C01A
seg000:C022 off_C022	    dw offset word_BF52	    ; DATA XREF: seg000:C028o
seg000:C024		    dw offset off_C01E
seg000:C026 off_C026	    dw offset word_BF7E	    ; DATA XREF: seg000:C0C4o
seg000:C026					    ; seg000:C0C8o ...
seg000:C028		    dw offset off_C022
seg000:C02A word_C02A	    dw 0C003h		    ; DATA XREF: seg000:off_C04Eo
seg000:C02C		    db	  1
seg000:C02D		    db	  0
seg000:C02E word_C02E	    dw 0D925h		    ; DATA XREF: seg000:off_C046o
seg000:C030		    dw 1
seg000:C032 word_C032	    dw 0C02Bh		    ; DATA XREF: seg000:off_C042o
seg000:C034		    dw 1
seg000:C036 word_C036	    dw 0D94Ch		    ; DATA XREF: seg000:off_C03Ao
seg000:C038		    dw 1
seg000:C03A off_C03A	    dw offset word_C036	    ; DATA XREF: seg000:C040o
seg000:C03C		    dw 0
seg000:C03E off_C03E	    dw offset off_BF8E	    ; DATA XREF: seg000:C044o
seg000:C040		    dw offset off_C03A
seg000:C042 off_C042	    dw offset word_C032	    ; DATA XREF: seg000:C048o
seg000:C044		    dw offset off_C03E
seg000:C046 off_C046	    dw offset word_C02E	    ; DATA XREF: seg000:C04Co
seg000:C048		    dw offset off_C042
seg000:C04A off_C04A	    dw offset word_BFE2	    ; DATA XREF: seg000:C050o
seg000:C04C		    dw offset off_C046
seg000:C04E off_C04E	    dw offset word_C02A	    ; DATA XREF: seg000:C054o
seg000:C050		    dw offset off_C04A
seg000:C052 off_C052	    dw offset word_BF52	    ; DATA XREF: seg000:C058o
seg000:C054		    dw offset off_C04E
seg000:C056 off_C056	    dw offset word_BF7E	    ; DATA XREF: seg000:C0D0o
seg000:C058		    dw offset off_C052
seg000:C05A word_C05A	    dw 0C800h		    ; DATA XREF: seg000:off_C0D6o
seg000:C05C		    dw 1
seg000:C05E word_C05E	    dw 0CD01h		    ; DATA XREF: seg000:off_C072o
seg000:C060		    dw 4
seg000:C062 word_C062	    dw 0CD4Ah		    ; DATA XREF: seg000:off_C06Eo
seg000:C064		    dw 5
seg000:C066 word_C066	    dw 0BC4Fh		    ; DATA XREF: seg000:off_C06Ao
seg000:C068		    dw 1
seg000:C06A off_C06A	    dw offset word_C066	    ; DATA XREF: seg000:C070o
seg000:C06C		    dw 0
seg000:C06E off_C06E	    dw offset word_C062	    ; DATA XREF: seg000:C074o
seg000:C070		    dw offset off_C06A
seg000:C072 off_C072	    dw offset word_C05E	    ; DATA XREF: seg000:C0D8o
seg000:C074		    dw offset off_C06E
seg000:C076 off_C076	    dw offset off_BF3A	    ; DATA XREF: seg000:linked_listo
seg000:C078		    dw offset off_BF4A
seg000:C07A off_C07A	    dw offset word_BF4E	    ; DATA XREF: seg000:C0E0o
seg000:C07C		    dw offset off_BF56
seg000:C07E off_C07E	    dw offset word_BF5A	    ; DATA XREF: seg000:C0E2o
seg000:C080		    dw offset off_BF7A
seg000:C082 off_C082	    dw offset word_BF4E	    ; DATA XREF: seg000:C0E4o
seg000:C084		    dw offset off_BF86
seg000:C086 off_C086	    dw offset word_BF4E	    ; DATA XREF: seg000:C0E6o
seg000:C088		    dw offset off_BF86
seg000:C08A off_C08A	    dw offset word_BF4E	    ; DATA XREF: seg000:C0E8o
seg000:C08C		    dw offset off_BF86
seg000:C08E off_C08E	    dw offset word_BF4E	    ; DATA XREF: seg000:C0EAo
seg000:C090		    dw offset off_BF86
seg000:C092 off_C092	    dw offset word_BF4E	    ; DATA XREF: seg000:C0ECo
seg000:C094		    dw offset off_BF86
seg000:C096 off_C096	    dw offset word_BF4E	    ; DATA XREF: seg000:C0EEo
seg000:C098		    dw offset off_BF86
seg000:C09A off_C09A	    dw offset word_BF4E	    ; DATA XREF: seg000:C0F0o
seg000:C09C		    dw offset off_BF86
seg000:C09E off_C09E	    dw offset word_BF4E	    ; DATA XREF: seg000:C0F2o
seg000:C0A0		    dw offset off_BF86
seg000:C0A2 off_C0A2	    dw offset word_BF4E	    ; DATA XREF: seg000:C0F4o
seg000:C0A4		    dw offset off_BFA6
seg000:C0A6 off_C0A6	    dw offset word_BF4E	    ; DATA XREF: seg000:C0F6o
seg000:C0A8		    dw offset off_BFBE
seg000:C0AA off_C0AA	    dw offset word_BF4E	    ; DATA XREF: seg000:C0F8o
seg000:C0AC		    dw offset off_BFBE
seg000:C0AE off_C0AE	    dw offset word_BF4E	    ; DATA XREF: seg000:C0FAo
seg000:C0B0		    dw offset off_BFBE
seg000:C0B2 off_C0B2	    dw offset word_BF4E	    ; DATA XREF: seg000:C0FCo
seg000:C0B4		    dw offset off_BFDA
seg000:C0B6 off_C0B6	    dw offset word_BF4E	    ; DATA XREF: seg000:C0FEo
seg000:C0B8		    dw offset off_BF86
seg000:C0BA off_C0BA	    dw offset word_BF4E	    ; DATA XREF: seg000:C100o
seg000:C0BC		    dw offset off_BF86
seg000:C0BE off_C0BE	    dw offset word_BF4E	    ; DATA XREF: seg000:C102o
seg000:C0C0		    dw offset off_C006
seg000:C0C2 off_C0C2	    dw offset word_BF4E	    ; DATA XREF: seg000:C104o
seg000:C0C4		    dw offset off_C026
seg000:C0C6 off_C0C6	    dw offset word_BF4E	    ; DATA XREF: seg000:C106o
seg000:C0C8		    dw offset off_C026
seg000:C0CA off_C0CA	    dw offset word_BF4E	    ; DATA XREF: seg000:C108o
seg000:C0CC		    dw offset off_C026
seg000:C0CE		    dw offset word_BF4E
seg000:C0D0		    dw offset off_C056
seg000:C0D2		    dw offset word_BF4E
seg000:C0D4		    dw offset off_BF56
seg000:C0D6 off_C0D6	    dw offset word_C05A	    ; DATA XREF: seg000:C10Eo
seg000:C0D8		    dw offset off_C072
seg000:C0DA word_C0DA	    dw 0BD27h		    ; DATA XREF: enter_BIOS?+4Ar
seg000:C0DA					    ; sub_C960+31r ...
seg000:C0DC off_C0DC	    dw offset word_BE9E	    ; DATA XREF: enter_BIOS?+72r
seg000:C0DC					    ; sub_CAD8+11r ...
seg000:C0DE linked_list	    dw offset off_C076	    ; DATA XREF: linked_list_0+17r
seg000:C0E0		    dw offset off_C07A
seg000:C0E2		    dw offset off_C07E
seg000:C0E4		    dw offset off_C082
seg000:C0E6		    dw offset off_C086
seg000:C0E8		    dw offset off_C08A
seg000:C0EA		    dw offset off_C08E
seg000:C0EC		    dw offset off_C092
seg000:C0EE		    dw offset off_C096
seg000:C0F0		    dw offset off_C09A
seg000:C0F2		    dw offset off_C09E
seg000:C0F4		    dw offset off_C0A2
seg000:C0F6		    dw offset off_C0A6
seg000:C0F8		    dw offset off_C0AA
seg000:C0FA		    dw offset off_C0AE
seg000:C0FC		    dw offset off_C0B2
seg000:C0FE		    dw offset off_C0B6
seg000:C100		    dw offset off_C0BA
seg000:C102		    dw offset off_C0BE
seg000:C104		    dw offset off_C0C2
seg000:C106		    dw offset off_C0C6
seg000:C108		    dw offset off_C0CA
seg000:C10A		    db 0CEh
seg000:C10B int_mask	    dw 0D2C0h
seg000:C10D		    db 0C0h ; À
seg000:C10E		    dw offset off_C0D6
seg000:C110		    dw offset unk_BCB6
seg000:C112 word_C112	    dw 464h		    ; DATA XREF: enter_BIOS?+B5r
seg000:C112					    ; enter_BIOS?+DBr ...
seg000:C114
seg000:C114 ; =============== S	U B R O	U T I N	E =======================================
seg000:C114
seg000:C114
seg000:C114 sub_C114	    proc near		    ; CODE XREF: enter_BIOS?+17p
seg000:C114		    call    sub_C346
seg000:C117		    xor	    ax,	ax
seg000:C119		    retn
seg000:C119 sub_C114	    endp
seg000:C119
seg000:C11A
seg000:C11A ; =============== S	U B R O	U T I N	E =======================================
seg000:C11A
seg000:C11A ; Attributes: bp-based frame
seg000:C11A
seg000:C11A sub_C11A	    proc near		    ; CODE XREF: enter_BIOS?+3Bp
seg000:C11A		    push    bp
seg000:C11B		    mov	    bp,	sp
seg000:C11D		    pop	    bp
seg000:C11E		    retn
seg000:C11E sub_C11A	    endp
seg000:C11E
seg000:C11F
seg000:C11F ; =============== S	U B R O	U T I N	E =======================================
seg000:C11F
seg000:C11F ; Attributes: bp-based frame
seg000:C11F
seg000:C11F sub_C11F	    proc near		    ; CODE XREF: sub_C9FC+CBp
seg000:C11F
seg000:C11F arg_0	    = word ptr	4
seg000:C11F
seg000:C11F		    push    bp
seg000:C120		    mov	    bp,	sp
seg000:C122		    push    si
seg000:C123		    cmp	    [bp+arg_0],	1
seg000:C127		    jnz	    short loc_C166
seg000:C129		    call    sub_C169
seg000:C12C		    cli
seg000:C12D		    push    60h	; '`'
seg000:C12F		    call    keyb_?_0
seg000:C132		    pop	    cx
seg000:C133		    push    59h	; 'Y'
seg000:C135		    call    keyb_send_arg
seg000:C138		    pop	    cx
seg000:C139		    xor	    si,	si
seg000:C13B		    jmp	    short loc_C13E
seg000:C13D ; ---------------------------------------------------------------------------
seg000:C13D
seg000:C13D loc_C13D:				    ; CODE XREF: sub_C11F+23j
seg000:C13D		    inc	    si
seg000:C13E
seg000:C13E loc_C13E:				    ; CODE XREF: sub_C11F+1Cj
seg000:C13E		    cmp	    si,	1000h
seg000:C142		    jl	    short loc_C13D
seg000:C144		    push    0B7h ; '·'
seg000:C147		    call    keyb_?_0
seg000:C14A		    pop	    cx
seg000:C14B		    push    76h	; 'v'
seg000:C14D		    call    keyb_?_0
seg000:C150		    pop	    cx
seg000:C151		    push    92h	; ''
seg000:C154		    call    keyb_?_0
seg000:C157		    pop	    cx
seg000:C158		    push    4
seg000:C15A		    call    keyb_?_0
seg000:C15D		    pop	    cx
seg000:C15E		    push    0FEh ; 'þ'
seg000:C161		    call    keyb_?_0
seg000:C164		    pop	    cx
seg000:C165		    hlt
seg000:C166 ; ---------------------------------------------------------------------------
seg000:C166
seg000:C166 loc_C166:				    ; CODE XREF: sub_C11F+8j
seg000:C166		    pop	    si
seg000:C167		    pop	    bp
seg000:C168		    retn
seg000:C168 sub_C11F	    endp
seg000:C168
seg000:C169
seg000:C169 ; =============== S	U B R O	U T I N	E =======================================
seg000:C169
seg000:C169 ; Attributes: bp-based frame
seg000:C169
seg000:C169 sub_C169	    proc near		    ; CODE XREF: sub_C11F+Ap
seg000:C169
seg000:C169 var_8	    = word ptr -8
seg000:C169 var_6	    = word ptr -6
seg000:C169 var_4	    = word ptr -4
seg000:C169 var_2	    = word ptr -2
seg000:C169
seg000:C169		    enter   8, 0
seg000:C16D		    push    si
seg000:C16E		    push    di
seg000:C16F		    xor	    si,	si
seg000:C171		    mov	    bx,	ds:word_470
seg000:C175		    shl	    bx,	1
seg000:C177		    mov	    di,	ds:word_A4EC[bx]
seg000:C17B		    mov	    ax,	380h
seg000:C17E		    sub	    ax,	di
seg000:C180		    mov	    [bp+var_8],	ax
seg000:C183		    mov	    bx,	ds:cmos_a4f2_idx_0
seg000:C187		    shl	    bx,	1
seg000:C189		    mov	    ax,	ds:word_A4F2[bx]
seg000:C18D		    mov	    [bp+var_6],	ax
seg000:C190		    mov	    bx,	ds:cmos_a4f2_idx_1
seg000:C194		    shl	    bx,	1
seg000:C196		    mov	    ax,	ds:word_A4F2[bx]
seg000:C19A		    mov	    [bp+var_4],	ax
seg000:C19D		    sar	    ax,	6
seg000:C1A0		    or	    si,	ax
seg000:C1A2		    cmp	    di,	100h
seg000:C1A6		    jl	    short loc_C1AB
seg000:C1A8		    or	    si,	1
seg000:C1AB
seg000:C1AB loc_C1AB:				    ; CODE XREF: sub_C169+3Dj
seg000:C1AB		    cmp	    di,	200h
seg000:C1AF		    jl	    short loc_C1B4
seg000:C1B1		    or	    si,	2
seg000:C1B4
seg000:C1B4 loc_C1B4:				    ; CODE XREF: sub_C169+46j
seg000:C1B4		    cmp	    di,	280h
seg000:C1B8		    jl	    short loc_C1BD
seg000:C1BA		    or	    si,	4
seg000:C1BD
seg000:C1BD loc_C1BD:				    ; CODE XREF: sub_C169+4Fj
seg000:C1BD		    cmp	    ds:cmos_a4f2_idx_1,	0
seg000:C1C2		    jz	    short loc_C1C8
seg000:C1C4		    or	    si,	80h
seg000:C1C8
seg000:C1C8 loc_C1C8:				    ; CODE XREF: sub_C169+59j
seg000:C1C8		    test    ds:cmos_a4f2_idx_1,	1
seg000:C1CE		    jz	    short loc_C1D3
seg000:C1D0		    or	    si,	8
seg000:C1D3
seg000:C1D3 loc_C1D3:				    ; CODE XREF: sub_C169+65j
seg000:C1D3		    push    si
seg000:C1D4		    push    1Fh
seg000:C1D6		    call    CMOS_write
seg000:C1D9		    pop	    cx
seg000:C1DA		    pop	    cx
seg000:C1DB		    mov	    si,	[bp+var_6]
seg000:C1DE		    add	    si,	[bp+var_4]
seg000:C1E1		    add	    si,	400h
seg000:C1E5		    sar	    si,	0Ah
seg000:C1E8		    test    ds:cmos_a4f2_idx_0,	1
seg000:C1EE		    jz	    short loc_C1F9
seg000:C1F0		    or	    si,	10h
seg000:C1F3		    mov	    ax,	[bp+var_8]
seg000:C1F6		    add	    [bp+var_6],	ax
seg000:C1F9
seg000:C1F9 loc_C1F9:				    ; CODE XREF: sub_C169+85j
seg000:C1F9		    push    si
seg000:C1FA		    push    20h	; ' '
seg000:C1FC		    call    CMOS_write
seg000:C1FF		    pop	    cx
seg000:C200		    pop	    cx
seg000:C201		    mov	    si,	ds:cmos_15h
seg000:C205		    shl	    si,	6
seg000:C208		    add	    si,	di
seg000:C20A		    push    si
seg000:C20B		    push    15h
seg000:C20D		    call    CMOS_write_x2
seg000:C210		    pop	    cx
seg000:C211		    pop	    cx
seg000:C212		    mov	    si,	ds:cmos_17h
seg000:C216		    shl	    si,	6
seg000:C219		    add	    si,	[bp+var_6]
seg000:C21C		    push    si
seg000:C21D		    push    17h
seg000:C21F		    call    CMOS_write_x2
seg000:C222		    pop	    cx
seg000:C223		    pop	    cx
seg000:C224		    mov	    ax,	ds:cmos_10h_?
seg000:C227		    shl	    ax,	4
seg000:C22A		    or	    ax,	ds:cmos_10h
seg000:C22E		    push    ax
seg000:C22F		    push    10h
seg000:C231		    call    CMOS_write
seg000:C234		    pop	    cx
seg000:C235		    pop	    cx
seg000:C236		    push    1Ch
seg000:C238		    call    CMOS_read_AL
seg000:C23B		    pop	    cx
seg000:C23C		    mov	    si,	ax
seg000:C23E		    and	    si,	0FF1Fh
seg000:C242		    mov	    ax,	ds:cmos_1Ch_0
seg000:C245		    shl	    ax,	5
seg000:C248		    mov	    dx,	ds:cmos_1Ch
seg000:C24C		    shl	    dx,	7
seg000:C24F		    or	    ax,	dx
seg000:C251		    or	    si,	ax
seg000:C253		    push    si
seg000:C254		    push    1Ch
seg000:C256		    call    CMOS_write
seg000:C259		    pop	    cx
seg000:C25A		    pop	    cx
seg000:C25B		    push    14h
seg000:C25D		    call    CMOS_read_AL
seg000:C260		    pop	    cx
seg000:C261		    mov	    si,	ax
seg000:C263		    and	    si,	0FF0Eh
seg000:C267		    mov	    ax,	ds:cmos_14h
seg000:C26A		    shl	    ax,	4
seg000:C26D		    or	    si,	ax
seg000:C26F		    mov	    [bp+var_2],	0
seg000:C274		    cmp	    ds:cmos_10h_?, 0
seg000:C279		    jz	    short loc_C27E
seg000:C27B		    inc	    [bp+var_2]
seg000:C27E
seg000:C27E loc_C27E:				    ; CODE XREF: sub_C169+110j
seg000:C27E		    cmp	    ds:cmos_10h, 0
seg000:C283		    jz	    short loc_C288
seg000:C285		    inc	    [bp+var_2]
seg000:C288
seg000:C288 loc_C288:				    ; CODE XREF: sub_C169+11Aj
seg000:C288		    cmp	    [bp+var_2],	0
seg000:C28C		    jz	    short loc_C294
seg000:C28E		    or	    si,	1
seg000:C291		    dec	    [bp+var_2]
seg000:C294
seg000:C294 loc_C294:				    ; CODE XREF: sub_C169+123j
seg000:C294		    mov	    ax,	[bp+var_2]
seg000:C297		    shl	    ax,	6
seg000:C29A		    or	    si,	ax
seg000:C29C		    push    si
seg000:C29D		    push    14h
seg000:C29F		    call    CMOS_write
seg000:C2A2		    pop	    cx
seg000:C2A3		    pop	    cx
seg000:C2A4		    cmp	    ds:cmos_19h, 0Fh
seg000:C2A9		    jl	    short loc_C2BC
seg000:C2AB		    mov	    si,	0F0h ; 'ð'
seg000:C2AE		    mov	    ax,	ds:cmos_19h
seg000:C2B1		    inc	    ax
seg000:C2B2		    push    ax
seg000:C2B3		    push    19h
seg000:C2B5		    call    CMOS_write
seg000:C2B8		    pop	    cx
seg000:C2B9		    pop	    cx
seg000:C2BA		    jmp	    short loc_C2C3
seg000:C2BC ; ---------------------------------------------------------------------------
seg000:C2BC
seg000:C2BC loc_C2BC:				    ; CODE XREF: sub_C169+140j
seg000:C2BC		    mov	    si,	ds:cmos_19h
seg000:C2C0		    shl	    si,	4
seg000:C2C3
seg000:C2C3 loc_C2C3:				    ; CODE XREF: sub_C169+151j
seg000:C2C3		    cmp	    ds:cmos_1Ah, 0Fh
seg000:C2C8		    jl	    short loc_C2DB
seg000:C2CA		    or	    si,	0Fh
seg000:C2CD		    mov	    ax,	ds:cmos_1Ah
seg000:C2D0		    inc	    ax
seg000:C2D1		    push    ax
seg000:C2D2		    push    1Ah
seg000:C2D4		    call    CMOS_write
seg000:C2D7		    pop	    cx
seg000:C2D8		    pop	    cx
seg000:C2D9		    jmp	    short loc_C2DF
seg000:C2DB ; ---------------------------------------------------------------------------
seg000:C2DB
seg000:C2DB loc_C2DB:				    ; CODE XREF: sub_C169+15Fj
seg000:C2DB		    or	    si,	ds:cmos_1Ah
seg000:C2DF
seg000:C2DF loc_C2DF:				    ; CODE XREF: sub_C169+170j
seg000:C2DF		    push    si
seg000:C2E0		    push    12h
seg000:C2E2		    call    CMOS_write
seg000:C2E5		    pop	    cx
seg000:C2E6		    pop	    cx
seg000:C2E7		    mov	    ax,	ds:cmos_1Dh
seg000:C2EA		    dec	    ax
seg000:C2EB		    push    ax
seg000:C2EC		    push    1Dh
seg000:C2EE		    call    CMOS_write
seg000:C2F1		    pop	    cx
seg000:C2F2		    pop	    cx
seg000:C2F3		    mov	    si,	ds:cmos_21h
seg000:C2F7		    shl	    si,	4
seg000:C2FA		    push    si
seg000:C2FB		    push    21h	; '!'
seg000:C2FD		    call    CMOS_write
seg000:C300		    pop	    cx
seg000:C301		    pop	    cx
seg000:C302		    xor	    si,	si
seg000:C304		    cmp	    ds:cmos_?_6, si
seg000:C308		    jnz	    short loc_C30F
seg000:C30A		    mov	    ax,	1
seg000:C30D		    jmp	    short loc_C311
seg000:C30F ; ---------------------------------------------------------------------------
seg000:C30F
seg000:C30F loc_C30F:				    ; CODE XREF: sub_C169+19Fj
seg000:C30F		    xor	    ax,	ax
seg000:C311
seg000:C311 loc_C311:				    ; CODE XREF: sub_C169+1A4j
seg000:C311		    or	    si,	ax
seg000:C313		    cmp	    ds:cmos_?_7, 0
seg000:C318		    jnz	    short loc_C31F
seg000:C31A		    mov	    ax,	8
seg000:C31D		    jmp	    short loc_C321
seg000:C31F ; ---------------------------------------------------------------------------
seg000:C31F
seg000:C31F loc_C31F:				    ; CODE XREF: sub_C169+1AFj
seg000:C31F		    xor	    ax,	ax
seg000:C321
seg000:C321 loc_C321:				    ; CODE XREF: sub_C169+1B4j
seg000:C321		    or	    si,	ax
seg000:C323		    mov	    ax,	ds:cmos_?_8
seg000:C326		    shl	    ax,	4
seg000:C329		    or	    si,	ax
seg000:C32B		    push    si
seg000:C32C		    push    1Eh
seg000:C32E		    call    CMOS_write
seg000:C331		    pop	    cx
seg000:C332		    pop	    cx
seg000:C333		    mov	    si,	ds:cmos_35h
seg000:C337		    push    si
seg000:C338		    push    35h	; '5'
seg000:C33A		    call    CMOS_write
seg000:C33D		    pop	    cx
seg000:C33E		    pop	    cx
seg000:C33F		    call    sub_C5E1
seg000:C342		    pop	    di
seg000:C343		    pop	    si
seg000:C344		    leave
seg000:C345		    retn
seg000:C345 sub_C169	    endp
seg000:C345
seg000:C346
seg000:C346 ; =============== S	U B R O	U T I N	E =======================================
seg000:C346
seg000:C346 ; Attributes: bp-based frame
seg000:C346
seg000:C346 sub_C346	    proc near		    ; CODE XREF: sub_C114p
seg000:C346
seg000:C346 var_4	    = word ptr -4
seg000:C346 var_2	    = word ptr -2
seg000:C346
seg000:C346		    enter   4, 0
seg000:C34A		    push    si
seg000:C34B		    push    di
seg000:C34C		    push    0Eh
seg000:C34E		    call    CMOS_read_AL
seg000:C351		    pop	    cx
seg000:C352		    test    ax,	20h
seg000:C355		    jz	    short loc_C35D
seg000:C357		    call    biosOpts_to_ram
seg000:C35A		    jmp	    loc_C5BA
seg000:C35D ; ---------------------------------------------------------------------------
seg000:C35D
seg000:C35D loc_C35D:				    ; CODE XREF: sub_C346+Fj
seg000:C35D		    push    0
seg000:C35F		    call    sub_D3AF
seg000:C362		    pop	    cx
seg000:C363		    push    1Fh
seg000:C365		    call    CMOS_read_AL
seg000:C368		    pop	    cx
seg000:C369		    mov	    si,	ax
seg000:C36B		    test    si,	4
seg000:C36F		    jz	    short loc_C379
seg000:C371		    mov	    ds:word_470, 2
seg000:C377		    jmp	    short loc_C393
seg000:C379 ; ---------------------------------------------------------------------------
seg000:C379
seg000:C379 loc_C379:				    ; CODE XREF: sub_C346+29j
seg000:C379		    test    si,	2
seg000:C37D		    jz	    short loc_C387
seg000:C37F		    mov	    ds:word_470, 1
seg000:C385		    jmp	    short loc_C393
seg000:C387 ; ---------------------------------------------------------------------------
seg000:C387
seg000:C387 loc_C387:				    ; CODE XREF: sub_C346+37j
seg000:C387		    test    si,	1
seg000:C38B		    jz	    short loc_C393
seg000:C38D		    mov	    ds:word_470, 0
seg000:C393
seg000:C393 loc_C393:				    ; CODE XREF: sub_C346+31j
seg000:C393					    ; sub_C346+3Fj ...
seg000:C393		    mov	    bx,	ds:word_470
seg000:C397		    shl	    bx,	1
seg000:C399		    mov	    ax,	ds:word_A4EC[bx]
seg000:C39D		    mov	    [bp+var_4],	ax
seg000:C3A0		    mov	    ax,	380h
seg000:C3A3		    sub	    ax,	[bp+var_4]
seg000:C3A6		    mov	    [bp+var_2],	ax
seg000:C3A9		    mov	    ax,	si
seg000:C3AB		    and	    ax,	70h
seg000:C3AE		    sar	    ax,	3
seg000:C3B1		    mov	    ds:cmos_a4f2_idx_1,	ax
seg000:C3B4		    test    si,	8
seg000:C3B8		    jz	    short loc_C3BF
seg000:C3BA		    or	    ds:cmos_a4f2_idx_1,	1
seg000:C3BF
seg000:C3BF loc_C3BF:				    ; CODE XREF: sub_C346+72j
seg000:C3BF		    push    20h	; ' '
seg000:C3C1		    call    CMOS_read_AL
seg000:C3C4		    pop	    cx
seg000:C3C5		    mov	    si,	ax
seg000:C3C7		    mov	    di,	si
seg000:C3C9		    and	    di,	0Fh
seg000:C3CC		    shl	    di,	0Ah
seg000:C3CF		    add	    di,	0FC00h
seg000:C3D3		    mov	    bx,	ds:cmos_a4f2_idx_1
seg000:C3D7		    shl	    bx,	1
seg000:C3D9		    sub	    di,	ds:word_A4F2[bx]
seg000:C3DD		    or	    di,	di
seg000:C3DF		    jge	    short loc_C3E3
seg000:C3E1		    xor	    di,	di
seg000:C3E3
seg000:C3E3 loc_C3E3:				    ; CODE XREF: sub_C346+99j
seg000:C3E3		    cmp	    di,	1C00h
seg000:C3E7		    jle	    short loc_C3F1
seg000:C3E9		    mov	    ds:cmos_a4f2_idx_0,	0Eh
seg000:C3EF		    jmp	    short loc_C3F9
seg000:C3F1 ; ---------------------------------------------------------------------------
seg000:C3F1
seg000:C3F1 loc_C3F1:				    ; CODE XREF: sub_C346+A1j
seg000:C3F1		    mov	    ax,	di
seg000:C3F3		    sar	    ax,	9
seg000:C3F6		    mov	    ds:cmos_a4f2_idx_0,	ax
seg000:C3F9
seg000:C3F9 loc_C3F9:				    ; CODE XREF: sub_C346+A9j
seg000:C3F9					    ; DATA XREF: seg000:9820o
seg000:C3F9		    test    si,	10h
seg000:C3FD		    jz	    short loc_C407
seg000:C3FF		    or	    ds:cmos_a4f2_idx_0,	1
seg000:C404		    add	    di,	[bp+var_2]
seg000:C407
seg000:C407 loc_C407:				    ; CODE XREF: sub_C346+B7j
seg000:C407		    mov	    ax,	ds:cmos_a4f2_idx_0
seg000:C40A		    and	    ax,	ds:cmos_a4f2_idx_1
seg000:C40E		    test    ax,	1
seg000:C411		    jz	    short loc_C42C
seg000:C413		    dec	    ds:cmos_a4f2_idx_1
seg000:C417		    jmp	    short loc_C42C
seg000:C419 ; ---------------------------------------------------------------------------
seg000:C419
seg000:C419 loc_C419:				    ; CODE XREF: sub_C346+109j
seg000:C419		    cmp	    ds:cmos_a4f2_idx_0,	1
seg000:C41E		    jle	    short loc_C427
seg000:C420		    sub	    ds:cmos_a4f2_idx_0,	2
seg000:C425		    jmp	    short loc_C42C
seg000:C427 ; ---------------------------------------------------------------------------
seg000:C427
seg000:C427 loc_C427:				    ; CODE XREF: sub_C346+D8j
seg000:C427		    sub	    ds:cmos_a4f2_idx_1,	2
seg000:C42C
seg000:C42C loc_C42C:				    ; CODE XREF: sub_C346+CBj
seg000:C42C					    ; sub_C346+D1j ...
seg000:C42C		    push    34h	; '4'
seg000:C42E		    call    CMOS_read_AL
seg000:C431		    pop	    cx
seg000:C432		    shl	    ax,	8
seg000:C435		    mov	    bx,	ds:cmos_a4f2_idx_0
seg000:C439		    shl	    bx,	1
seg000:C43B		    mov	    dx,	ds:word_A4F2[bx]
seg000:C43F		    mov	    bx,	ds:cmos_a4f2_idx_1
seg000:C443		    shl	    bx,	1
seg000:C445		    add	    dx,	ds:word_A4F2[bx]
seg000:C449		    add	    dx,	400h
seg000:C44D		    cmp	    ax,	dx
seg000:C44F		    jl	    short loc_C419
seg000:C451		    push    15h
seg000:C453		    call    CMOS_read_AX
seg000:C456		    pop	    cx
seg000:C457		    mov	    si,	ax
seg000:C459		    mov	    ax,	si
seg000:C45B		    sub	    ax,	[bp+var_4]
seg000:C45E		    sar	    ax,	6
seg000:C461		    mov	    ds:cmos_15h, ax
seg000:C464		    push    17h
seg000:C466		    call    CMOS_read_AX
seg000:C469		    pop	    cx
seg000:C46A		    mov	    si,	ax
seg000:C46C		    mov	    ax,	si
seg000:C46E		    sub	    ax,	di
seg000:C470		    sar	    ax,	6
seg000:C473		    mov	    ds:cmos_17h, ax
seg000:C476		    push    10h
seg000:C478		    call    CMOS_read_AL
seg000:C47B		    pop	    cx
seg000:C47C		    and	    ax,	0F0h
seg000:C47F		    sar	    ax,	4
seg000:C482		    mov	    ds:cmos_10h_?, ax
seg000:C485		    push    10h
seg000:C487		    call    CMOS_read_AL
seg000:C48A		    pop	    cx
seg000:C48B		    and	    ax,	0Fh
seg000:C48E		    mov	    ds:cmos_10h, ax
seg000:C491		    push    1Ch
seg000:C493		    call    CMOS_read_AL
seg000:C496		    pop	    cx
seg000:C497		    and	    ax,	60h
seg000:C49A		    sar	    ax,	5
seg000:C49D		    mov	    ds:cmos_1Ch_0, ax
seg000:C4A0		    push    14h
seg000:C4A2		    call    CMOS_read_AL
seg000:C4A5		    pop	    cx
seg000:C4A6		    and	    ax,	30h
seg000:C4A9		    sar	    ax,	4
seg000:C4AC		    mov	    ds:cmos_14h, ax
seg000:C4AF		    push    1Ch
seg000:C4B1		    call    CMOS_read_AL
seg000:C4B4		    pop	    cx
seg000:C4B5		    and	    ax,	80h
seg000:C4B8		    sar	    ax,	7
seg000:C4BB		    mov	    ds:cmos_1Ch, ax
seg000:C4BE		    push    1Dh
seg000:C4C0		    call    CMOS_read_AL
seg000:C4C3		    pop	    cx
seg000:C4C4		    inc	    ax
seg000:C4C5		    and	    ax,	0FFh
seg000:C4C8		    mov	    ds:cmos_1Dh, ax
seg000:C4CB		    push    21h	; '!'
seg000:C4CD		    call    CMOS_read_AL
seg000:C4D0		    pop	    cx
seg000:C4D1		    mov	    si,	ax
seg000:C4D3		    mov	    ax,	si
seg000:C4D5		    sar	    ax,	4
seg000:C4D8		    mov	    ds:cmos_21h, ax
seg000:C4DB		    push    12h
seg000:C4DD		    call    CMOS_read_AL
seg000:C4E0		    pop	    cx
seg000:C4E1		    mov	    si,	ax
seg000:C4E3		    and	    si,	0F0h
seg000:C4E7		    sar	    si,	4
seg000:C4EA		    cmp	    si,	0Fh
seg000:C4ED		    jnz	    short loc_C4FB
seg000:C4EF		    push    19h
seg000:C4F1		    call    CMOS_read_AL
seg000:C4F4		    pop	    cx
seg000:C4F5		    dec	    ax
seg000:C4F6		    mov	    ds:cmos_19h, ax
seg000:C4F9		    jmp	    short loc_C4FF
seg000:C4FB ; ---------------------------------------------------------------------------
seg000:C4FB
seg000:C4FB loc_C4FB:				    ; CODE XREF: sub_C346+1A7j
seg000:C4FB		    mov	    ds:cmos_19h, si
seg000:C4FF
seg000:C4FF loc_C4FF:				    ; CODE XREF: sub_C346+1B3j
seg000:C4FF		    push    12h
seg000:C501		    call    CMOS_read_AL
seg000:C504		    pop	    cx
seg000:C505		    mov	    si,	ax
seg000:C507		    and	    si,	0Fh
seg000:C50A		    cmp	    si,	0Fh
seg000:C50D		    jnz	    short loc_C51B
seg000:C50F		    push    1Ah
seg000:C511		    call    CMOS_read_AL
seg000:C514		    pop	    cx
seg000:C515		    dec	    ax
seg000:C516		    mov	    ds:cmos_1Ah, ax
seg000:C519		    jmp	    short loc_C51F
seg000:C51B ; ---------------------------------------------------------------------------
seg000:C51B
seg000:C51B loc_C51B:				    ; CODE XREF: sub_C346+1C7j
seg000:C51B		    mov	    ds:cmos_1Ah, si
seg000:C51F
seg000:C51F loc_C51F:				    ; CODE XREF: sub_C346+1D3j
seg000:C51F		    cmp	    ds:byte_4CA, 0FFh
seg000:C524		    jnz	    short loc_C52E
seg000:C526		    xor	    ax,	ax
seg000:C528		    mov	    ds:cmos_1Ah, ax
seg000:C52B		    mov	    ds:cmos_19h, ax
seg000:C52E
seg000:C52E loc_C52E:				    ; CODE XREF: sub_C346+1DEj
seg000:C52E		    push    1Eh
seg000:C530		    call    CMOS_read_AL
seg000:C533		    pop	    cx
seg000:C534		    mov	    si,	ax
seg000:C536		    test    ds:byte_4EE, 80h
seg000:C53B		    jz	    short loc_C561
seg000:C53D		    cmp	    ds:cmos_19h, 64h ; 'd'
seg000:C542		    jz	    short loc_C551
seg000:C544		    cmp	    ds:cmos_19h, 0
seg000:C549		    jz	    short loc_C551
seg000:C54B		    mov	    ds:cmos_19h, 0
seg000:C551
seg000:C551 loc_C551:				    ; CODE XREF: sub_C346+1FCj
seg000:C551					    ; sub_C346+203j
seg000:C551		    cmp	    ds:cmos_1Ah, 64h ; 'd'
seg000:C556		    jz	    short loc_C57B
seg000:C558		    cmp	    ds:cmos_1Ah, 0
seg000:C55D		    jz	    short loc_C57B
seg000:C55F		    jmp	    short loc_C575
seg000:C561 ; ---------------------------------------------------------------------------
seg000:C561
seg000:C561 loc_C561:				    ; CODE XREF: sub_C346+1F5j
seg000:C561		    cmp	    ds:cmos_19h, 64h ; 'd'
seg000:C566		    jnz	    short loc_C56E
seg000:C568		    mov	    ds:cmos_19h, 0
seg000:C56E
seg000:C56E loc_C56E:				    ; CODE XREF: sub_C346+220j
seg000:C56E		    cmp	    ds:cmos_1Ah, 64h ; 'd'
seg000:C573		    jnz	    short loc_C57B
seg000:C575
seg000:C575 loc_C575:				    ; CODE XREF: sub_C346+219j
seg000:C575		    mov	    ds:cmos_1Ah, 0
seg000:C57B
seg000:C57B loc_C57B:				    ; CODE XREF: sub_C346+210j
seg000:C57B					    ; sub_C346+217j ...
seg000:C57B		    mov	    ax,	si
seg000:C57D		    and	    ax,	3
seg000:C580		    cmp	    ax,	1
seg000:C583		    jnz	    short loc_C589
seg000:C585		    xor	    ax,	ax
seg000:C587		    jmp	    short loc_C58C
seg000:C589 ; ---------------------------------------------------------------------------
seg000:C589
seg000:C589 loc_C589:				    ; CODE XREF: sub_C346+23Dj
seg000:C589		    mov	    ax,	1
seg000:C58C
seg000:C58C loc_C58C:				    ; CODE XREF: sub_C346+241j
seg000:C58C		    mov	    ds:cmos_?_6, ax
seg000:C58F		    mov	    ax,	si
seg000:C591		    and	    ax,	0Ch
seg000:C594		    cmp	    ax,	8
seg000:C597		    jnz	    short loc_C59D
seg000:C599		    xor	    ax,	ax
seg000:C59B		    jmp	    short loc_C5A0
seg000:C59D ; ---------------------------------------------------------------------------
seg000:C59D
seg000:C59D loc_C59D:				    ; CODE XREF: sub_C346+251j
seg000:C59D		    mov	    ax,	1
seg000:C5A0
seg000:C5A0 loc_C5A0:				    ; CODE XREF: sub_C346+255j
seg000:C5A0		    mov	    ds:cmos_?_7, ax
seg000:C5A3		    mov	    ax,	si
seg000:C5A5		    and	    ax,	30h
seg000:C5A8		    sar	    ax,	4
seg000:C5AB		    mov	    ds:cmos_?_8, ax
seg000:C5AE		    push    35h	; '5'
seg000:C5B0		    call    CMOS_read_AL
seg000:C5B3		    pop	    cx
seg000:C5B4		    and	    ax,	1
seg000:C5B7		    mov	    ds:cmos_35h, ax
seg000:C5BA
seg000:C5BA loc_C5BA:				    ; CODE XREF: sub_C346+14j
seg000:C5BA		    pop	    di
seg000:C5BB		    pop	    si
seg000:C5BC		    leave
seg000:C5BD		    retn
seg000:C5BD sub_C346	    endp
seg000:C5BD
seg000:C5BE
seg000:C5BE ; =============== S	U B R O	U T I N	E =======================================
seg000:C5BE
seg000:C5BE
seg000:C5BE biosOpts_to_ram proc near		    ; CODE XREF: sub_C346+11p
seg000:C5BE		    push    si
seg000:C5BF		    xor	    si,	si
seg000:C5C1		    jmp	    short loc_C5D7
seg000:C5C3 ; ---------------------------------------------------------------------------
seg000:C5C3
seg000:C5C3 loc_C5C3:				    ; CODE XREF: biosOpts_to_ram+1Cj
seg000:C5C3		    mov	    ax,	si
seg000:C5C5		    imul    ax,	0Fh
seg000:C5C8		    mov	    bx,	ax
seg000:C5CA		    mov	    ax,	ds:word_BD2E[bx]
seg000:C5CE		    mov	    bx,	si
seg000:C5D0		    shl	    bx,	1
seg000:C5D2		    mov	    [bx+464h], ax
seg000:C5D6		    inc	    si
seg000:C5D7
seg000:C5D7 loc_C5D7:				    ; CODE XREF: biosOpts_to_ram+3j
seg000:C5D7		    cmp	    si,	18h
seg000:C5DA		    jl	    short loc_C5C3
seg000:C5DC		    call    sub_D433
seg000:C5DF		    pop	    si
seg000:C5E0		    retn
seg000:C5E0 biosOpts_to_ram endp
seg000:C5E0
seg000:C5E1
seg000:C5E1 ; =============== S	U B R O	U T I N	E =======================================
seg000:C5E1
seg000:C5E1 ; Attributes: bp-based frame
seg000:C5E1
seg000:C5E1 sub_C5E1	    proc near		    ; CODE XREF: sub_C169+1D6p
seg000:C5E1
seg000:C5E1 var_2	    = word ptr -2
seg000:C5E1
seg000:C5E1		    enter   2, 0
seg000:C5E5		    push    si
seg000:C5E6		    push    di
seg000:C5E7		    xor	    si,	si
seg000:C5E9		    mov	    [bp+var_2],	si
seg000:C5EC		    mov	    di,	10h
seg000:C5EF		    jmp	    short loc_C606
seg000:C5F1 ; ---------------------------------------------------------------------------
seg000:C5F1
seg000:C5F1 loc_C5F1:				    ; CODE XREF: sub_C5E1+28j
seg000:C5F1		    push    di
seg000:C5F2		    call    CMOS_read_AL
seg000:C5F5		    pop	    cx
seg000:C5F6		    add	    si,	ax
seg000:C5F8		    cmp	    si,	0FFh
seg000:C5FC		    jle	    short loc_C605
seg000:C5FE		    sub	    si,	100h
seg000:C602		    inc	    [bp+var_2]
seg000:C605
seg000:C605 loc_C605:				    ; CODE XREF: sub_C5E1+1Bj
seg000:C605		    inc	    di
seg000:C606
seg000:C606 loc_C606:				    ; CODE XREF: sub_C5E1+Ej
seg000:C606		    cmp	    di,	2Dh ; '-'
seg000:C609		    jle	    short loc_C5F1
seg000:C60B		    mov	    ax,	si
seg000:C60D		    shl	    ax,	8
seg000:C610		    add	    ax,	[bp+var_2]
seg000:C613		    push    ax
seg000:C614		    push    2Eh	; '.'
seg000:C616		    call    CMOS_write_x2
seg000:C619		    pop	    cx
seg000:C61A		    pop	    cx
seg000:C61B		    pop	    di
seg000:C61C		    pop	    si
seg000:C61D		    leave
seg000:C61E		    retn
seg000:C61E sub_C5E1	    endp
seg000:C61E
seg000:C61F
seg000:C61F ; =============== S	U B R O	U T I N	E =======================================
seg000:C61F
seg000:C61F ; Attributes: bp-based frame
seg000:C61F
seg000:C61F CMOS_write	    proc near		    ; CODE XREF: sub_C169+6Dp
seg000:C61F					    ; sub_C169+93p ...
seg000:C61F
seg000:C61F arg_0	    = byte ptr	4
seg000:C61F arg_2	    = byte ptr	6
seg000:C61F
seg000:C61F		    push    bp
seg000:C620		    mov	    bp,	sp
seg000:C622		    mov	    al,	[bp+arg_0]
seg000:C625		    out	    70h, al	    ; CMOS Memory:
seg000:C625					    ; used by real-time	clock
seg000:C627		    jmp	    short $+2
seg000:C629		    mov	    al,	[bp+arg_2]
seg000:C62C		    out	    71h, al	    ; CMOS Memory:
seg000:C62C					    ; used by real-time	clock
seg000:C62E		    pop	    bp
seg000:C62F		    retn
seg000:C62F CMOS_write	    endp
seg000:C62F
seg000:C630
seg000:C630 ; =============== S	U B R O	U T I N	E =======================================
seg000:C630
seg000:C630 ; Attributes: bp-based frame
seg000:C630
seg000:C630 CMOS_write_x2   proc near		    ; CODE XREF: sub_C169+A4p
seg000:C630					    ; sub_C169+B6p ...
seg000:C630
seg000:C630 arg_0	    = word ptr	4
seg000:C630 arg_2	    = word ptr	6
seg000:C630
seg000:C630		    push    bp
seg000:C631		    mov	    bp,	sp
seg000:C633		    mov	    ax,	[bp+arg_2]
seg000:C636		    and	    ax,	0FFh
seg000:C639		    push    ax
seg000:C63A		    push    [bp+arg_0]
seg000:C63D		    call    CMOS_write
seg000:C640		    mov	    sp,	bp
seg000:C642		    mov	    ax,	[bp+arg_2]
seg000:C645		    sar	    ax,	8
seg000:C648		    and	    ax,	0FFh
seg000:C64B		    push    ax
seg000:C64C		    mov	    ax,	[bp+arg_0]
seg000:C64F		    inc	    ax
seg000:C650		    push    ax
seg000:C651		    call    CMOS_write
seg000:C654		    mov	    sp,	bp
seg000:C656		    pop	    bp
seg000:C657		    retn
seg000:C657 CMOS_write_x2   endp
seg000:C657
seg000:C658
seg000:C658 ; =============== S	U B R O	U T I N	E =======================================
seg000:C658
seg000:C658 ; Attributes: bp-based frame
seg000:C658
seg000:C658 CMOS_read_AL    proc near		    ; CODE XREF: sub_A641+18p
seg000:C658					    ; sub_A771+1Ap ...
seg000:C658
seg000:C658 arg_0	    = byte ptr	4
seg000:C658
seg000:C658		    push    bp
seg000:C659		    mov	    bp,	sp
seg000:C65B		    mov	    al,	[bp+arg_0]
seg000:C65E		    out	    70h, al	    ; CMOS Memory:
seg000:C65E					    ; used by real-time	clock
seg000:C660		    jmp	    short $+2
seg000:C662		    in	    al,	71h	    ; CMOS Memory
seg000:C664		    xor	    ah,	ah
seg000:C666		    pop	    bp
seg000:C667		    retn
seg000:C667 CMOS_read_AL    endp
seg000:C667
seg000:C668
seg000:C668 ; =============== S	U B R O	U T I N	E =======================================
seg000:C668
seg000:C668 ; Attributes: bp-based frame
seg000:C668
seg000:C668 CMOS_read_AX    proc near		    ; CODE XREF: sub_C346+10Dp
seg000:C668					    ; sub_C346+120p
seg000:C668
seg000:C668 arg_0	    = word ptr	4
seg000:C668
seg000:C668		    push    bp
seg000:C669		    mov	    bp,	sp
seg000:C66B		    push    [bp+arg_0]
seg000:C66E		    call    CMOS_read_AL
seg000:C671		    pop	    cx
seg000:C672		    push    ax
seg000:C673		    mov	    ax,	[bp+arg_0]
seg000:C676		    inc	    ax
seg000:C677		    push    ax
seg000:C678		    call    CMOS_read_AL
seg000:C67B		    pop	    cx
seg000:C67C		    shl	    ax,	8
seg000:C67F		    mov	    dx,	ax
seg000:C681		    pop	    ax
seg000:C682		    add	    ax,	dx
seg000:C684		    pop	    bp
seg000:C685		    retn
seg000:C685 CMOS_read_AX    endp
seg000:C685
seg000:C686
seg000:C686 ; =============== S	U B R O	U T I N	E =======================================
seg000:C686
seg000:C686 ; Attributes: bp-based frame
seg000:C686
seg000:C686 sub_C686	    proc near		    ; CODE XREF: sub_A6AD+2Fp
seg000:C686					    ; sub_A70B+46p ...
seg000:C686
seg000:C686 var_A	    = byte ptr -0Ah
seg000:C686 var_9	    = byte ptr -9
seg000:C686 var_4	    = byte ptr -4
seg000:C686 var_3	    = byte ptr -3
seg000:C686 var_2	    = byte ptr -2
seg000:C686 arg_0	    = word ptr	4
seg000:C686 arg_2	    = word ptr	6
seg000:C686 arg_4	    = word ptr	8
seg000:C686 arg_6	    = word ptr	0Ah
seg000:C686
seg000:C686		    enter   0Ah, 0
seg000:C68A		    mov	    al,	20h ; ' '
seg000:C68C		    mov	    [bp+var_3],	al
seg000:C68F		    mov	    [bp+var_A],	al
seg000:C692		    mov	    [bp+var_4],	4Bh ; 'K'
seg000:C696		    mov	    [bp+var_2],	0
seg000:C69A		    push    5
seg000:C69C		    lea	    ax,	[bp+var_9]
seg000:C69F		    push    ax
seg000:C6A0		    push    [bp+arg_4]
seg000:C6A3		    call    sub_D309
seg000:C6A6		    add	    sp,	6
seg000:C6A9		    cmp	    [bp+arg_6],	0
seg000:C6AD		    jz	    short loc_C6C1
seg000:C6AF		    lea	    ax,	[bp+var_A]
seg000:C6B2		    push    ax
seg000:C6B3		    push    [bp+arg_2]
seg000:C6B6		    push    [bp+arg_0]
seg000:C6B9		    call    mem_copy?_0
seg000:C6BC		    add	    sp,	6
seg000:C6BF		    jmp	    short locret_C6D1
seg000:C6C1 ; ---------------------------------------------------------------------------
seg000:C6C1
seg000:C6C1 loc_C6C1:				    ; CODE XREF: sub_C686+27j
seg000:C6C1		    lea	    ax,	[bp+var_A]
seg000:C6C4		    push    ax
seg000:C6C5		    push    [bp+arg_2]
seg000:C6C8		    push    [bp+arg_0]
seg000:C6CB		    call    string_copy?
seg000:C6CE		    add	    sp,	6
seg000:C6D1
seg000:C6D1 locret_C6D1:			    ; CODE XREF: sub_C686+39j
seg000:C6D1		    leave
seg000:C6D2		    retn
seg000:C6D2 sub_C686	    endp
seg000:C6D2
seg000:C6D3
seg000:C6D3 ; =============== S	U B R O	U T I N	E =======================================
seg000:C6D3
seg000:C6D3 ; Attributes: bp-based frame
seg000:C6D3
seg000:C6D3 sub_C6D3	    proc near		    ; CODE XREF: sub_A594+A1p
seg000:C6D3					    ; sub_A641+59p
seg000:C6D3
seg000:C6D3 var_6	    = byte ptr -6
seg000:C6D3 var_5	    = byte ptr -5
seg000:C6D3 var_4	    = byte ptr -4
seg000:C6D3 var_2	    = byte ptr -2
seg000:C6D3 arg_0	    = word ptr	4
seg000:C6D3 arg_2	    = word ptr	6
seg000:C6D3 arg_4	    = word ptr	8
seg000:C6D3
seg000:C6D3		    enter   6, 0
seg000:C6D7		    mov	    [bp+var_2],	0
seg000:C6DB		    push    4
seg000:C6DD		    lea	    ax,	[bp+var_6]
seg000:C6E0		    push    ax
seg000:C6E1		    push    [bp+arg_4]
seg000:C6E4		    call    sub_D309
seg000:C6E7		    add	    sp,	6
seg000:C6EA		    cmp	    [bp+var_6],	20h ; ' '
seg000:C6EE		    jnz	    short loc_C712
seg000:C6F0		    cmp	    [bp+var_5],	20h ; ' '
seg000:C6F4		    jnz	    short loc_C712
seg000:C6F6		    cmp	    [bp+var_4],	20h ; ' '
seg000:C6FA		    jnz	    short loc_C700
seg000:C6FC		    mov	    [bp+var_4],	30h ; '0'
seg000:C700
seg000:C700 loc_C700:				    ; CODE XREF: sub_C6D3+27j
seg000:C700		    lea	    ax,	[bp+var_4]
seg000:C703		    push    ax
seg000:C704		    push    [bp+arg_2]
seg000:C707		    push    [bp+arg_0]
seg000:C70A		    call    string_copy?
seg000:C70D		    add	    sp,	6
seg000:C710		    jmp	    short locret_C722
seg000:C712 ; ---------------------------------------------------------------------------
seg000:C712
seg000:C712 loc_C712:				    ; CODE XREF: sub_C6D3+1Bj
seg000:C712					    ; sub_C6D3+21j
seg000:C712		    lea	    ax,	[bp+var_6]
seg000:C715		    push    ax
seg000:C716		    push    [bp+arg_2]
seg000:C719		    push    [bp+arg_0]
seg000:C71C		    call    string_copy?
seg000:C71F		    add	    sp,	6
seg000:C722
seg000:C722 locret_C722:			    ; CODE XREF: sub_C6D3+3Dj
seg000:C722		    leave
seg000:C723		    retn
seg000:C723 sub_C6D3	    endp
seg000:C723
seg000:C724
seg000:C724 ; =============== S	U B R O	U T I N	E =======================================
seg000:C724
seg000:C724 ; Attributes: bp-based frame
seg000:C724
seg000:C724 sub_C724	    proc near		    ; CODE XREF: sub_C9FC+B8p
seg000:C724		    push    bp
seg000:C725		    mov	    bp,	sp
seg000:C727		    pop	    bp
seg000:C728		    retn
seg000:C728 sub_C724	    endp
seg000:C728
seg000:C729
seg000:C729 ; =============== S	U B R O	U T I N	E =======================================
seg000:C729
seg000:C729 ; Attributes: bp-based frame
seg000:C729
seg000:C729 keyb_?_0	    proc near		    ; CODE XREF: sub_B79D+7Cp
seg000:C729					    ; sub_B79D+106p ...
seg000:C729
seg000:C729 arg_0	    = byte ptr	4
seg000:C729
seg000:C729		    push    bp
seg000:C72A		    mov	    bp,	sp
seg000:C72C		    mov	    cx,	0FFFFh
seg000:C72F
seg000:C72F loc_C72F:				    ; CODE XREF: keyb_?_0+Cj
seg000:C72F		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:C72F					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:C72F					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:C72F					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:C72F					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:C72F					    ;	 +------------------------------+-----------------------------------+
seg000:C72F					    ; 4:  INH	  0=keyboard communications inhibited
seg000:C72F					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:C72F					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:C72F					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:C72F					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:C731		    test    al,	2
seg000:C733		    jz	    short loc_C74B
seg000:C735		    loop    loc_C72F
seg000:C737		    mov	    ax,	0FFFFh
seg000:C73A		    mov	    ax,	0DBDDh
seg000:C73D		    push    ax
seg000:C73E		    push    0Ah
seg000:C740		    push    0
seg000:C742		    call    string_copy?
seg000:C745		    mov	    sp,	bp
seg000:C747
seg000:C747 loc_C747:				    ; CODE XREF: keyb_?_0:loc_C747j
seg000:C747		    jmp	    short loc_C747
seg000:C749 ; ---------------------------------------------------------------------------
seg000:C749		    jmp	    short loc_C752
seg000:C74B ; ---------------------------------------------------------------------------
seg000:C74B
seg000:C74B loc_C74B:				    ; CODE XREF: keyb_?_0+Aj
seg000:C74B		    mov	    al,	[bp+arg_0]
seg000:C74E		    out	    64h, al	    ; 8042 keyboard controller command register.
seg000:C750		    xor	    ax,	ax
seg000:C752
seg000:C752 loc_C752:				    ; CODE XREF: keyb_?_0+20j
seg000:C752		    pop	    bp
seg000:C753		    retn
seg000:C753 keyb_?_0	    endp
seg000:C753
seg000:C754
seg000:C754 ; =============== S	U B R O	U T I N	E =======================================
seg000:C754
seg000:C754 ; Attributes: bp-based frame
seg000:C754
seg000:C754 keyb_send_arg   proc near		    ; CODE XREF: sub_B79D+88p
seg000:C754					    ; sub_B79D+10Cp ...
seg000:C754
seg000:C754 arg_0	    = byte ptr	4
seg000:C754
seg000:C754		    push    bp
seg000:C755		    mov	    bp,	sp
seg000:C757		    mov	    cx,	0FFFFh
seg000:C75A
seg000:C75A loc_C75A:				    ; CODE XREF: keyb_send_arg+Cj
seg000:C75A		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:C75A					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:C75A					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:C75A					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:C75A					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:C75A					    ;	 +------------------------------+-----------------------------------+
seg000:C75A					    ; 4:  INH	  0=keyboard communications inhibited
seg000:C75A					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:C75A					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:C75A					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:C75A					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:C75C		    test    al,	2
seg000:C75E		    jz	    short loc_C767
seg000:C760		    loop    loc_C75A
seg000:C762		    mov	    ax,	0FFFFh
seg000:C765		    jmp	    short loc_C76E
seg000:C767 ; ---------------------------------------------------------------------------
seg000:C767
seg000:C767 loc_C767:				    ; CODE XREF: keyb_send_arg+Aj
seg000:C767		    mov	    al,	[bp+arg_0]
seg000:C76A		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:C76C		    xor	    ax,	ax
seg000:C76E
seg000:C76E loc_C76E:				    ; CODE XREF: keyb_send_arg+11j
seg000:C76E		    pop	    bp
seg000:C76F		    retn
seg000:C76F keyb_send_arg   endp
seg000:C76F
seg000:C770
seg000:C770 ; =============== S	U B R O	U T I N	E =======================================
seg000:C770
seg000:C770 ; Attributes: bp-based frame
seg000:C770
seg000:C770 enter_BIOS?	    proc near		    ; CODE XREF: ColrWarm_Boot+4F8p
seg000:C770					    ; cmd_mem_search+35p
seg000:C770
seg000:C770 var_11	    = byte ptr -11h
seg000:C770 var_10	    = byte ptr -10h
seg000:C770 var_F	    = byte ptr -0Fh
seg000:C770 var_E	    = word ptr -0Eh
seg000:C770 var_C	    = word ptr -0Ch
seg000:C770 var_A	    = word ptr -0Ah
seg000:C770 var_8	    = word ptr -8
seg000:C770 var_6	    = word ptr -6
seg000:C770
seg000:C770		    mov	    ax,	cs
seg000:C772		    mov	    ds,	ax
seg000:C774		    mov	    es,	ax
seg000:C776		    enter   12h, 0
seg000:C77A		    push    si
seg000:C77B		    push    di
seg000:C77C		    xor	    di,	di
seg000:C77E		    mov	    [bp+var_F],	0
seg000:C782		    mov	    ds:byte_4A4, 0
seg000:C787		    call    sub_C114
seg000:C78A		    or	    ax,	ax
seg000:C78C		    jz	    short loc_C791
seg000:C78E		    jmp	    loc_CAD4
seg000:C791 ; ---------------------------------------------------------------------------
seg000:C791
seg000:C791 loc_C791:				    ; CODE XREF: enter_BIOS?+1Cj
seg000:C791		    call    sub_CB54
seg000:C794		    mov	    word ptr ds:loc_38+2, ax
seg000:C797		    mov	    [bp+var_11], 0FFh
seg000:C79B		    mov	    [bp+var_10], 0
seg000:C79F
seg000:C79F loc_C79F:				    ; CODE XREF: sub_C9FC+C2j
seg000:C79F		    cmp	    [bp+var_11], 0
seg000:C7A3		    jz	    short loc_C7C8
seg000:C7A5		    push    di
seg000:C7A6		    call    sub_CB9F
seg000:C7A9		    pop	    cx
seg000:C7AA		    push    di
seg000:C7AB		    call    sub_C11A
seg000:C7AE		    pop	    cx
seg000:C7AF		    mov	    [bp+var_11], 0
seg000:C7B3		    mov	    ax,	di
seg000:C7B5		    imul    ax,	3Ah
seg000:C7B8		    mov	    bx,	ax
seg000:C7BA		    mov	    si,	ds:word_C0DA[bx]
seg000:C7BE		    mov	    [bp+var_A],	0
seg000:C7C3		    mov	    [bp+var_8],	0FFFFh
seg000:C7C8
seg000:C7C8 loc_C7C8:				    ; CODE XREF: enter_BIOS?+33j
seg000:C7C8		    mov	    ax,	[bp+var_A]
seg000:C7CB		    cmp	    ax,	[bp+var_8]
seg000:C7CE		    jnz	    short loc_C7D3
seg000:C7D0		    jmp	    loc_C859
seg000:C7D3 ; ---------------------------------------------------------------------------
seg000:C7D3
seg000:C7D3 loc_C7D3:				    ; CODE XREF: enter_BIOS?+5Ej
seg000:C7D3		    mov	    [bp+var_8],	ax
seg000:C7D6		    push    si
seg000:C7D7		    call    bios_input_?
seg000:C7DA		    pop	    cx
seg000:C7DB		    mov	    ax,	di
seg000:C7DD		    imul    ax,	3Ah
seg000:C7E0		    mov	    bx,	ax
seg000:C7E2		    mov	    ax,	ds:off_C0DC[bx]
seg000:C7E6		    mov	    [bp+var_E],	ax
seg000:C7E9		    mov	    al,	[si+9]
seg000:C7EC		    mov	    ah,	0
seg000:C7EE		    mov	    [bp+var_C],	ax
seg000:C7F1		    jmp	    short loc_C7F7
seg000:C7F3 ; ---------------------------------------------------------------------------
seg000:C7F3
seg000:C7F3 loc_C7F3:				    ; CODE XREF: enter_BIOS?:loc_C7FFj
seg000:C7F3		    add	    [bp+var_E],	4
seg000:C7F7
seg000:C7F7 loc_C7F7:				    ; CODE XREF: enter_BIOS?+81j
seg000:C7F7		    mov	    ax,	[bp+var_C]
seg000:C7FA		    dec	    [bp+var_C]
seg000:C7FD		    or	    ax,	ax
seg000:C7FF
seg000:C7FF loc_C7FF:
seg000:C7FF		    jnz	    short loc_C7F3
seg000:C801		    mov	    bx,	[bp+var_E]
seg000:C804		    push    word ptr [bx+2]
seg000:C807		    mov	    al,	[bx+1]
seg000:C80A		    mov	    ah,	0
seg000:C80C		    push    ax
seg000:C80D		    mov	    al,	[bx]
seg000:C80F		    mov	    ah,	0
seg000:C811		    push    ax
seg000:C812		    call    mem_copy?_0
seg000:C815		    add	    sp,	6
seg000:C818		    cmp	    byte ptr [si+2], 2
seg000:C81C		    jnz	    short loc_C859
seg000:C81E		    mov	    ax,	di
seg000:C820		    imul    ax,	3Ah
seg000:C823		    mov	    bx,	ax
seg000:C825		    mov	    bx,	ds:word_C112[bx]
seg000:C829		    mov	    ax,	[bp+var_A]
seg000:C82C		    shl	    ax,	1
seg000:C82E		    add	    bx,	ax
seg000:C830		    mov	    ax,	[bx]
seg000:C832		    mov	    [bp+var_C],	ax
seg000:C835		    push    di
seg000:C836		    push    0FFFFh
seg000:C838		    push    ax
seg000:C839		    push    si
seg000:C83A		    call    sub_CC19
seg000:C83D		    add	    sp,	8
seg000:C840		    mov	    [bp+var_C],	ax
seg000:C843		    push    ax
seg000:C844		    mov	    ax,	di
seg000:C846		    imul    ax,	3Ah
seg000:C849		    mov	    bx,	ax
seg000:C84B		    mov	    bx,	ds:word_C112[bx]
seg000:C84F		    mov	    ax,	[bp+var_A]
seg000:C852		    shl	    ax,	1
seg000:C854		    add	    bx,	ax
seg000:C856		    pop	    ax
seg000:C857		    mov	    [bx], ax
seg000:C859
seg000:C859 loc_C859:				    ; CODE XREF: enter_BIOS?+60j
seg000:C859					    ; enter_BIOS?+ACj
seg000:C859		    cmp	    byte ptr [si+2], 3
seg000:C85D		    jz	    short loc_C871
seg000:C85F		    cmp	    byte ptr [si+2], 4
seg000:C863		    jz	    short loc_C871
seg000:C865		    cmp	    byte ptr [si+2], 5
seg000:C869		    jz	    short loc_C871
seg000:C86B		    cmp	    byte ptr [si+2], 6
seg000:C86F		    jnz	    short loc_C883
seg000:C871
seg000:C871 loc_C871:				    ; CODE XREF: enter_BIOS?+EDj
seg000:C871					    ; enter_BIOS?+F3j ...
seg000:C871		    mov	    al,	[si+1]
seg000:C874		    mov	    ah,	0
seg000:C876		    push    ax
seg000:C877		    mov	    al,	[si]
seg000:C879		    mov	    ah,	0
seg000:C87B		    push    ax
seg000:C87C		    call    set_cursor
seg000:C87F		    pop	    cx
seg000:C880		    pop	    cx
seg000:C881		    jmp	    short loc_C88C
seg000:C883 ; ---------------------------------------------------------------------------
seg000:C883
seg000:C883 loc_C883:				    ; CODE XREF: enter_BIOS?+FFj
seg000:C883		    push    0
seg000:C885		    push    19h
seg000:C887		    call    set_cursor
seg000:C88A		    pop	    cx
seg000:C88B		    pop	    cx
seg000:C88C
seg000:C88C loc_C88C:				    ; CODE XREF: enter_BIOS?+111j
seg000:C88C		    mov	    word ptr ds:unk_4CC, 0
seg000:C892		    cmp	    [bp+var_F],	0
seg000:C896		    jz	    short loc_C89E
seg000:C898		    mov	    [bp+var_F],	0
seg000:C89C		    jmp	    short loc_C8A9
seg000:C89E ; ---------------------------------------------------------------------------
seg000:C89E
seg000:C89E loc_C89E:				    ; CODE XREF: enter_BIOS?+126j
seg000:C89E		    push    di
seg000:C89F		    call    get_keypress
seg000:C8A2		    pop	    cx
seg000:C8A3		    mov	    [bp+var_6],	ax
seg000:C8A6		    mov	    word ptr ds:unk_4CC, ax
seg000:C8A9
seg000:C8A9 loc_C8A9:				    ; CODE XREF: enter_BIOS?+12Cj
seg000:C8A9		    mov	    ax,	[bp+var_6]
seg000:C8AC		    mov	    cx,	13h
seg000:C8AF		    mov	    bx,	offset ctrl_char_table?	; "\b"
seg000:C8B2
seg000:C8B2 loc_C8B2:				    ; CODE XREF: enter_BIOS?+149j
seg000:C8B2		    cmp	    cs:[bx], ax
seg000:C8B5		    jz	    short loc_C8BE
seg000:C8B7		    inc	    bx
seg000:C8B8		    inc	    bx
seg000:C8B9		    loop    loc_C8B2
seg000:C8BB		    jmp	    loc_CAB1
seg000:C8BE ; ---------------------------------------------------------------------------
seg000:C8BE
seg000:C8BE loc_C8BE:				    ; CODE XREF: enter_BIOS?+145j
seg000:C8BE		    jmp	    word ptr cs:[bx+26h]
seg000:C8BE enter_BIOS?	    endp
seg000:C8BE
seg000:C8BE ; ---------------------------------------------------------------------------
seg000:C8C2 ctrl_char_table? db	8,0		    ; DATA XREF: enter_BIOS?+13Fo
seg000:C8C4		    db 9,0
seg000:C8C6		    db 0Dh,0
seg000:C8C8		    db 1Bh,0
seg000:C8CA		    db ' ',0
seg000:C8CC a0		    db '0',0
seg000:C8CE a1_0	    db '1',0
seg000:C8D0 a2		    db '2',0
seg000:C8D2 a3		    db '3',0
seg000:C8D4 a4_0	    db '4',0
seg000:C8D6 a5		    db '5',0
seg000:C8D8 a6		    db '6',0
seg000:C8DA a7		    db '7',0
seg000:C8DC a8_0	    db '8',0
seg000:C8DE a9		    db '9',0
seg000:C8E0		    dw 4800h
seg000:C8E2		    dw 4B00h
seg000:C8E4		    dw 4D00h
seg000:C8E6		    dw 5000h
seg000:C8E8		    dw offset sub_C9FC
seg000:C8EA		    dw offset sub_C960
seg000:C8EC		    dw offset sub_C960
seg000:C8EE		    dw offset sub_C90E
seg000:C8F0		    dw offset sub_C9CA
seg000:C8F2		    dw offset loc_CA52
seg000:C8F4		    dw offset loc_CA52
seg000:C8F6		    dw offset loc_CA52
seg000:C8F8		    dw offset loc_CA52
seg000:C8FA		    dw offset loc_CA52
seg000:C8FC		    dw offset loc_CA52
seg000:C8FE		    dw offset loc_CA52
seg000:C900 off_C900	    dw offset loc_CA52	    ; DATA XREF: seg000:off_BF3Ao
seg000:C902		    dw offset loc_CA52
seg000:C904		    dw offset loc_CA52
seg000:C906		    dw offset loc_C927
seg000:C908		    dw offset sub_C93B
seg000:C90A		    dw offset loc_C945
seg000:C90C		    dw offset sub_C931
seg000:C90E
seg000:C90E ; =============== S	U B R O	U T I N	E =======================================
seg000:C90E
seg000:C90E
seg000:C90E sub_C90E	    proc near		    ; DATA XREF: seg000:C8EEo
seg000:C90E		    call    Bios_finish_save ; Bios_finish_save	returns
seg000:C90E					    ; FFFF = No
seg000:C90E					    ; 1	= Yes
seg000:C911		    mov	    [bp-2], ax
seg000:C914		    or	    ax,	ax
seg000:C916		    jnz	    short loc_C920
seg000:C918		    mov	    word ptr [bp-8], 0FFFFh
seg000:C91D		    jmp	    bios_exit
seg000:C920 ; ---------------------------------------------------------------------------
seg000:C920
seg000:C920 loc_C920:				    ; CODE XREF: sub_C90E+8j
seg000:C920		    mov	    byte ptr [bp-10h], 0FFh
seg000:C924		    jmp	    bios_exit
seg000:C924 sub_C90E	    endp
seg000:C924
seg000:C927 ; ---------------------------------------------------------------------------
seg000:C927
seg000:C927 loc_C927:				    ; DATA XREF: seg000:C906o
seg000:C927		    mov	    al,	[si+3]
seg000:C92A		    mov	    ah,	0
seg000:C92C		    mov	    [bp-0Ah], ax
seg000:C92F		    jmp	    short loc_C94D
seg000:C931
seg000:C931 ; =============== S	U B R O	U T I N	E =======================================
seg000:C931
seg000:C931
seg000:C931 sub_C931	    proc near		    ; DATA XREF: seg000:C90Co
seg000:C931		    mov	    al,	[si+4]
seg000:C934		    mov	    ah,	0
seg000:C936		    mov	    [bp-0Ah], ax
seg000:C939		    jmp	    short loc_C94D
seg000:C939 sub_C931	    endp
seg000:C939
seg000:C93B
seg000:C93B ; =============== S	U B R O	U T I N	E =======================================
seg000:C93B
seg000:C93B
seg000:C93B sub_C93B	    proc near		    ; DATA XREF: seg000:C908o
seg000:C93B		    mov	    al,	[si+6]
seg000:C93E		    mov	    ah,	0
seg000:C940		    mov	    [bp-0Ah], ax
seg000:C943		    jmp	    short loc_C94D
seg000:C945 ; ---------------------------------------------------------------------------
seg000:C945
seg000:C945 loc_C945:				    ; DATA XREF: seg000:C90Ao
seg000:C945		    mov	    al,	[si+5]
seg000:C948		    mov	    ah,	0
seg000:C94A		    mov	    [bp-0Ah], ax
seg000:C94D
seg000:C94D loc_C94D:				    ; CODE XREF: seg000:C92Fj
seg000:C94D					    ; sub_C931+8j ...
seg000:C94D		    push    di
seg000:C94E		    push    word ptr [bp-0Ah]
seg000:C951		    push    word ptr [bp-8]
seg000:C954		    push    si
seg000:C955		    call    sub_CAD8
seg000:C958		    add	    sp,	8
seg000:C95B		    mov	    si,	ax
seg000:C95D		    jmp	    bios_exit
seg000:C95D sub_C93B	    endp
seg000:C95D
seg000:C960
seg000:C960 ; =============== S	U B R O	U T I N	E =======================================
seg000:C960
seg000:C960
seg000:C960 sub_C960	    proc near		    ; DATA XREF: seg000:C8EAo
seg000:C960					    ; seg000:C8ECo
seg000:C960		    push    di
seg000:C961		    push    0
seg000:C963		    push    word ptr [bp-8]
seg000:C966		    push    si
seg000:C967		    call    sub_CAD8
seg000:C96A		    add	    sp,	8
seg000:C96D		    mov	    al,	[si+2]
seg000:C970		    mov	    ah,	0
seg000:C972		    mov	    [bp-4], ax
seg000:C975		    cmp	    ax,	4
seg000:C978		    jz	    short loc_C97F
seg000:C97A		    cmp	    ax,	5
seg000:C97D		    jnz	    short loc_C9A9
seg000:C97F
seg000:C97F loc_C97F:				    ; CODE XREF: sub_C960+18j
seg000:C97F					    ; sub_C960:loc_C9A7j
seg000:C97F		    add	    si,	0Fh
seg000:C982		    inc	    word ptr [bp-0Ah]
seg000:C985		    cmp	    byte ptr [si], 0FFh
seg000:C988		    jnz	    short loc_C99A
seg000:C98A		    mov	    ax,	di
seg000:C98C		    imul    ax,	3Ah
seg000:C98F		    mov	    bx,	ax
seg000:C991		    mov	    si,	ds:word_C0DA[bx]
seg000:C995		    mov	    word ptr [bp-0Ah], 0
seg000:C99A
seg000:C99A loc_C99A:				    ; CODE XREF: sub_C960+28j
seg000:C99A		    mov	    al,	[si+2]
seg000:C99D		    mov	    ah,	0
seg000:C99F		    cmp	    ax,	[bp-4]
seg000:C9A2		    jz	    short loc_C9A7
seg000:C9A4		    jmp	    bios_exit
seg000:C9A7 ; ---------------------------------------------------------------------------
seg000:C9A7
seg000:C9A7 loc_C9A7:				    ; CODE XREF: sub_C960+42j
seg000:C9A7		    jmp	    short loc_C97F
seg000:C9A9 ; ---------------------------------------------------------------------------
seg000:C9A9
seg000:C9A9 loc_C9A9:				    ; CODE XREF: sub_C960+1Dj
seg000:C9A9		    add	    si,	0Fh
seg000:C9AC		    inc	    word ptr [bp-0Ah]
seg000:C9AF		    cmp	    byte ptr [si], 0FFh
seg000:C9B2		    jz	    short loc_C9B7
seg000:C9B4		    jmp	    bios_exit
seg000:C9B7 ; ---------------------------------------------------------------------------
seg000:C9B7
seg000:C9B7 loc_C9B7:				    ; CODE XREF: sub_C960+52j
seg000:C9B7		    mov	    ax,	di
seg000:C9B9		    imul    ax,	3Ah
seg000:C9BC		    mov	    bx,	ax
seg000:C9BE		    mov	    si,	ds:word_C0DA[bx]
seg000:C9C2		    mov	    word ptr [bp-0Ah], 0
seg000:C9C7		    jmp	    bios_exit
seg000:C9C7 sub_C960	    endp
seg000:C9C7
seg000:C9CA
seg000:C9CA ; =============== S	U B R O	U T I N	E =======================================
seg000:C9CA
seg000:C9CA
seg000:C9CA sub_C9CA	    proc near		    ; DATA XREF: seg000:C8F0o
seg000:C9CA		    cmp	    byte ptr [si+2], 3
seg000:C9CE		    jb	    short loc_C9D3
seg000:C9D0		    jmp	    loc_CA64
seg000:C9D3 ; ---------------------------------------------------------------------------
seg000:C9D3
seg000:C9D3 loc_C9D3:				    ; CODE XREF: sub_C9CA+4j
seg000:C9D3		    mov	    ax,	di
seg000:C9D5		    imul    ax,	3Ah
seg000:C9D8		    mov	    bx,	ax
seg000:C9DA		    mov	    bx,	ds:word_C112[bx]
seg000:C9DE		    mov	    ax,	[bp-0Ah]
seg000:C9E1		    shl	    ax,	1
seg000:C9E3		    add	    bx,	ax
seg000:C9E5		    mov	    ax,	[bx]
seg000:C9E7		    mov	    [bp-0Ch], ax
seg000:C9EA		    inc	    word ptr [bp-0Ch]
seg000:C9ED		    mov	    ax,	[si+0Bh]
seg000:C9F0		    cmp	    ax,	[bp-0Ch]
seg000:C9F3		    jg	    short loc_CA29
seg000:C9F5		    mov	    word ptr [bp-0Ch], 0
seg000:C9FA		    jmp	    short loc_CA29
seg000:C9FA sub_C9CA	    endp
seg000:C9FA
seg000:C9FC
seg000:C9FC ; =============== S	U B R O	U T I N	E =======================================
seg000:C9FC
seg000:C9FC
seg000:C9FC sub_C9FC	    proc near		    ; DATA XREF: seg000:C8E8o
seg000:C9FC		    cmp	    byte ptr [si+2], 3
seg000:CA00		    jnb	    short loc_CA64
seg000:CA02		    mov	    ax,	di
seg000:CA04		    imul    ax,	3Ah
seg000:CA07		    mov	    bx,	ax
seg000:CA09		    mov	    bx,	ds:word_C112[bx]
seg000:CA0D		    mov	    ax,	[bp-0Ah]
seg000:CA10		    shl	    ax,	1
seg000:CA12		    add	    bx,	ax
seg000:CA14		    mov	    ax,	[bx]
seg000:CA16		    mov	    [bp-0Ch], ax
seg000:CA19		    dec	    word ptr [bp-0Ch]
seg000:CA1C		    cmp	    word ptr [bp-0Ch], 0
seg000:CA20		    jge	    short loc_CA29
seg000:CA22		    mov	    ax,	[si+0Bh]
seg000:CA25		    dec	    ax
seg000:CA26		    mov	    [bp-0Ch], ax
seg000:CA29
seg000:CA29 loc_CA29:				    ; CODE XREF: sub_C9CA+29j
seg000:CA29					    ; sub_C9CA+30j ...
seg000:CA29		    push    di
seg000:CA2A		    push    0FFFFh
seg000:CA2C		    push    word ptr [bp-0Ch]
seg000:CA2F		    push    si
seg000:CA30		    call    sub_CC19
seg000:CA33		    add	    sp,	8
seg000:CA36		    mov	    [bp-0Ch], ax
seg000:CA39		    push    ax
seg000:CA3A		    mov	    ax,	di
seg000:CA3C		    imul    ax,	3Ah
seg000:CA3F		    mov	    bx,	ax
seg000:CA41		    mov	    bx,	ds:word_C112[bx]
seg000:CA41					    ; CODE XREF: ColrWarm_Boot:loc_63AAp
seg000:CA45		    mov	    ax,	[bp-0Ah]
seg000:CA48		    shl	    ax,	1
seg000:CA4A		    add	    bx,	ax
seg000:CA4C		    pop	    ax
seg000:CA4D		    mov	    [bx], ax
seg000:CA4F		    jmp	    short bios_exit
seg000:CA51 ; ---------------------------------------------------------------------------
seg000:CA51		    nop
seg000:CA52
seg000:CA52 loc_CA52:				    ; DATA XREF: seg000:C8F2o
seg000:CA52					    ; seg000:C8F4o ...
seg000:CA52		    cmp	    byte ptr [si+2], 3
seg000:CA56		    jz	    short loc_CA69
seg000:CA58		    cmp	    byte ptr [si+2], 4
seg000:CA5C		    jz	    short loc_CA69
seg000:CA5E		    cmp	    byte ptr [si+2], 5
seg000:CA62		    jz	    short loc_CA69
seg000:CA64
seg000:CA64 loc_CA64:				    ; CODE XREF: sub_C9CA+6j
seg000:CA64					    ; sub_C9FC+4j
seg000:CA64		    call    outChar_VGA
seg000:CA67		    jmp	    short bios_exit
seg000:CA69 ; ---------------------------------------------------------------------------
seg000:CA69
seg000:CA69 loc_CA69:				    ; CODE XREF: sub_C9FC+5Aj
seg000:CA69					    ; sub_C9FC+60j ...
seg000:CA69		    push    si
seg000:CA6A		    push    word ptr [bp-6]
seg000:CA6D		    push    di
seg000:CA6E		    push    word ptr [bp-0Ah]
seg000:CA71		    call    sub_CCE7
seg000:CA74		    add	    sp,	8
seg000:CA77		    mov	    [bp-6], ax
seg000:CA7A		    cmp	    byte ptr [si+2], 4
seg000:CA7E		    jz	    short loc_CA86
seg000:CA80		    cmp	    byte ptr [si+2], 5
seg000:CA84		    jnz	    short loc_CA95
seg000:CA86
seg000:CA86 loc_CA86:				    ; CODE XREF: sub_C9FC+82j
seg000:CA86		    push    si
seg000:CA87		    call    sub_A512
seg000:CA8A		    pop	    cx
seg000:CA8B		    cmp	    ax,	0FFFFh
seg000:CA8E		    jnz	    short loc_CA95
seg000:CA90		    mov	    word ptr [bp-6], 0FFFFh
seg000:CA95
seg000:CA95 loc_CA95:				    ; CODE XREF: sub_C9FC+88j
seg000:CA95					    ; sub_C9FC+92j
seg000:CA95		    mov	    ds:byte_4A4, 0
seg000:CA9A		    cmp	    word ptr [bp-6], 0FFFFh
seg000:CA9E		    jz	    short loc_CAA6
seg000:CAA0		    mov	    byte ptr [bp-0Fh], 0FFh
seg000:CAA4		    jmp	    short bios_exit
seg000:CAA6 ; ---------------------------------------------------------------------------
seg000:CAA6
seg000:CAA6 loc_CAA6:				    ; CODE XREF: sub_C9FC+A2j
seg000:CAA6		    mov	    byte ptr [bp-0Fh], 0
seg000:CAAA		    push    si
seg000:CAAB		    call    bad_RTC_input?
seg000:CAAE		    pop	    cx
seg000:CAAF		    jmp	    short bios_exit
seg000:CAB1 ; ---------------------------------------------------------------------------
seg000:CAB1
seg000:CAB1 loc_CAB1:				    ; CODE XREF: enter_BIOS?+14Bj
seg000:CAB1		    push    word ptr [bp-6]
seg000:CAB4		    call    sub_C724
seg000:CAB7		    pop	    cx
seg000:CAB8
seg000:CAB8 bios_exit:				    ; CODE XREF: sub_C90E+Fj
seg000:CAB8					    ; sub_C90E+16j ...
seg000:CAB8		    cmp	    byte ptr [bp-10h], 0
seg000:CABC		    jnz	    short loc_CAC1
seg000:CABE		    jmp	    loc_C79F
seg000:CAC1 ; ---------------------------------------------------------------------------
seg000:CAC1
seg000:CAC1 loc_CAC1:				    ; CODE XREF: sub_C9FC+C0j
seg000:CAC1		    call    sub_CB86
seg000:CAC4		    push    word ptr [bp-2]
seg000:CAC7		    call    sub_C11F
seg000:CACA		    pop	    cx
seg000:CACB		    cmp	    word ptr [bp-2], 1
seg000:CACF		    jnz	    short loc_CAD4
seg000:CAD1		    call    near ptr ColrWarm_Boot
seg000:CAD4
seg000:CAD4 loc_CAD4:				    ; CODE XREF: enter_BIOS?+1Ej
seg000:CAD4					    ; sub_C9FC+D3j
seg000:CAD4		    pop	    di
seg000:CAD5		    pop	    si
seg000:CAD6		    leave
seg000:CAD7		    retn
seg000:CAD7 sub_C9FC	    endp ; sp-analysis failed
seg000:CAD7
seg000:CAD8
seg000:CAD8 ; =============== S	U B R O	U T I N	E =======================================
seg000:CAD8
seg000:CAD8 ; Attributes: bp-based frame
seg000:CAD8
seg000:CAD8 sub_CAD8	    proc near		    ; CODE XREF: sub_C93B+1Ap
seg000:CAD8					    ; sub_C960+7p
seg000:CAD8
seg000:CAD8 var_2	    = word ptr -2
seg000:CAD8 arg_0	    = word ptr	4
seg000:CAD8 arg_2	    = word ptr	6
seg000:CAD8 arg_4	    = word ptr	8
seg000:CAD8 arg_6	    = word ptr	0Ah
seg000:CAD8
seg000:CAD8		    enter   2, 0
seg000:CADC		    push    si
seg000:CADD		    push    di
seg000:CADE		    mov	    si,	[bp+arg_0]
seg000:CAE1		    mov	    ax,	[bp+arg_6]
seg000:CAE4		    imul    ax,	3Ah
seg000:CAE7		    mov	    bx,	ax
seg000:CAE9		    mov	    di,	ds:off_C0DC[bx]
seg000:CAED		    mov	    al,	[si+9]
seg000:CAF0		    mov	    ah,	0
seg000:CAF2		    mov	    [bp+var_2],	ax
seg000:CAF5		    cmp	    byte ptr [si+2], 2
seg000:CAF9		    jnz	    short loc_CB15
seg000:CAFB		    push    [bp+arg_6]
seg000:CAFE		    push    0
seg000:CB00		    mov	    bx,	[bp+arg_2]
seg000:CB03		    shl	    bx,	1
seg000:CB05		    push    word ptr [bx+464h]
seg000:CB09		    push    si
seg000:CB0A		    call    sub_CC19
seg000:CB0D		    add	    sp,	8
seg000:CB10		    jmp	    short loc_CB15
seg000:CB12 ; ---------------------------------------------------------------------------
seg000:CB12
seg000:CB12 loc_CB12:				    ; CODE XREF: sub_CAD8+45j
seg000:CB12		    add	    di,	4
seg000:CB15
seg000:CB15 loc_CB15:				    ; CODE XREF: sub_CAD8+21j
seg000:CB15					    ; sub_CAD8+38j
seg000:CB15		    mov	    ax,	[bp+var_2]
seg000:CB18		    dec	    [bp+var_2]
seg000:CB1B		    or	    ax,	ax
seg000:CB1D		    jnz	    short loc_CB12
seg000:CB1F		    push    word ptr [di+2]
seg000:CB22		    mov	    al,	[di+1]
seg000:CB25		    mov	    ah,	0
seg000:CB27		    push    ax
seg000:CB28		    mov	    al,	[di]
seg000:CB2A		    mov	    ah,	0
seg000:CB2C		    push    ax
seg000:CB2D		    call    string_copy?
seg000:CB30		    add	    sp,	6
seg000:CB33		    mov	    ax,	[bp+arg_6]
seg000:CB36		    imul    ax,	3Ah
seg000:CB39		    mov	    bx,	ax
seg000:CB3B		    mov	    si,	ds:word_C0DA[bx]
seg000:CB3F		    jmp	    short loc_CB44
seg000:CB41 ; ---------------------------------------------------------------------------
seg000:CB41
seg000:CB41 loc_CB41:				    ; CODE XREF: sub_CAD8+74j
seg000:CB41		    add	    si,	0Fh
seg000:CB44
seg000:CB44 loc_CB44:				    ; CODE XREF: sub_CAD8+67j
seg000:CB44		    mov	    ax,	[bp+arg_4]
seg000:CB47		    dec	    [bp+arg_4]
seg000:CB4A		    or	    ax,	ax
seg000:CB4C		    jnz	    short loc_CB41
seg000:CB4E		    mov	    ax,	si
seg000:CB50		    pop	    di
seg000:CB51		    pop	    si
seg000:CB52		    leave
seg000:CB53		    retn
seg000:CB53 sub_CAD8	    endp
seg000:CB53
seg000:CB54
seg000:CB54 ; =============== S	U B R O	U T I N	E =======================================
seg000:CB54
seg000:CB54
seg000:CB54 sub_CB54	    proc near		    ; CODE XREF: enter_BIOS?:loc_C791p
seg000:CB54		    push    si
seg000:CB55		    mov	    si,	0B800h
seg000:CB58		    push    ds
seg000:CB59		    mov	    ax,	40h ; '@'
seg000:CB5C		    mov	    ds,	ax
seg000:CB5E		    assume ds:nothing
seg000:CB5E		    mov	    ax,	ds:10h
seg000:CB61		    and	    ax,	30h
seg000:CB64		    cmp	    ax,	30h ; '0'
seg000:CB67		    pop	    ds
seg000:CB68		    assume ds:nothing
seg000:CB68		    jnz	    short loc_CB74
seg000:CB6A		    mov	    ax,	7
seg000:CB6D		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:CB6D					    ; AL = mode
seg000:CB6F		    mov	    si,	0B000h
seg000:CB72		    jmp	    short loc_CB79
seg000:CB74 ; ---------------------------------------------------------------------------
seg000:CB74
seg000:CB74 loc_CB74:				    ; CODE XREF: sub_CB54+14j
seg000:CB74		    mov	    ax,	3
seg000:CB77		    int	    10h		    ; -	VIDEO -	SET VIDEO MODE
seg000:CB77					    ; AL = mode
seg000:CB79
seg000:CB79 loc_CB79:				    ; CODE XREF: sub_CB54+1Ej
seg000:CB79		    push    0
seg000:CB7B		    push    1Ah
seg000:CB7D		    call    set_cursor
seg000:CB80		    pop	    cx
seg000:CB81		    pop	    cx
seg000:CB82		    mov	    ax,	si
seg000:CB84		    pop	    si
seg000:CB85		    retn
seg000:CB85 sub_CB54	    endp
seg000:CB85
seg000:CB86
seg000:CB86 ; =============== S	U B R O	U T I N	E =======================================
seg000:CB86
seg000:CB86
seg000:CB86 sub_CB86	    proc near		    ; CODE XREF: sub_C9FC:loc_CAC1p
seg000:CB86		    push    20h	; ' '
seg000:CB88		    push    7D0h
seg000:CB8B		    push    0
seg000:CB8D		    push    0
seg000:CB8F		    call    sub_D293
seg000:CB92		    add	    sp,	8
seg000:CB95		    push    0
seg000:CB97		    push    0
seg000:CB99		    call    set_cursor
seg000:CB9C		    pop	    cx
seg000:CB9D		    pop	    cx
seg000:CB9E		    retn
seg000:CB9E sub_CB86	    endp
seg000:CB9E
seg000:CB9F
seg000:CB9F ; =============== S	U B R O	U T I N	E =======================================
seg000:CB9F
seg000:CB9F ; Attributes: bp-based frame
seg000:CB9F
seg000:CB9F sub_CB9F	    proc near		    ; CODE XREF: enter_BIOS?+36p
seg000:CB9F
seg000:CB9F var_2	    = word ptr -2
seg000:CB9F arg_0	    = word ptr	4
seg000:CB9F
seg000:CB9F		    enter   2, 0
seg000:CBA3		    push    si
seg000:CBA4		    push    di
seg000:CBA5		    mov	    si,	[bp+arg_0]
seg000:CBA8		    xor	    di,	di
seg000:CBAA		    push    20h	; ' '
seg000:CBAC		    push    7D0h
seg000:CBAF		    push    0
seg000:CBB1		    push    0
seg000:CBB3		    call    sub_D293
seg000:CBB6		    add	    sp,	8
seg000:CBB9		    push    si
seg000:CBBA		    call    linked_list_0
seg000:CBBD		    pop	    cx
seg000:CBBE		    push    si
seg000:CBBF		    call    sub_D028
seg000:CBC2		    pop	    cx
seg000:CBC3		    mov	    ax,	si
seg000:CBC5		    imul    ax,	3Ah
seg000:CBC8		    mov	    bx,	ax
seg000:CBCA		    mov	    ax,	ds:word_C0DA[bx]
seg000:CBCE		    mov	    [bp+var_2],	ax
seg000:CBD1		    jmp	    short loc_CC0D
seg000:CBD3 ; ---------------------------------------------------------------------------
seg000:CBD3
seg000:CBD3 loc_CBD3:				    ; CODE XREF: sub_CB9F+74j
seg000:CBD3		    push    si
seg000:CBD4		    push    0
seg000:CBD6		    mov	    ax,	si
seg000:CBD8		    imul    ax,	3Ah
seg000:CBDB		    mov	    bx,	ax
seg000:CBDD		    mov	    bx,	ds:word_C112[bx]
seg000:CBE1		    mov	    ax,	di
seg000:CBE3		    shl	    ax,	1
seg000:CBE5		    add	    bx,	ax
seg000:CBE7		    push    word ptr [bx]
seg000:CBE9		    mov	    ax,	[bp+var_2]
seg000:CBEC		    add	    [bp+var_2],	0Fh
seg000:CBF0		    push    ax
seg000:CBF1		    call    sub_CC19
seg000:CBF4		    add	    sp,	8
seg000:CBF7		    push    ax
seg000:CBF8		    mov	    ax,	si
seg000:CBFA		    imul    ax,	3Ah
seg000:CBFD		    mov	    bx,	ax
seg000:CBFF		    mov	    bx,	ds:word_C112[bx]
seg000:CC03		    mov	    ax,	di
seg000:CC05		    shl	    ax,	1
seg000:CC07		    add	    bx,	ax
seg000:CC09		    pop	    ax
seg000:CC0A		    mov	    [bx], ax
seg000:CC0C		    inc	    di
seg000:CC0D
seg000:CC0D loc_CC0D:				    ; CODE XREF: sub_CB9F+32j
seg000:CC0D		    mov	    bx,	[bp+var_2]
seg000:CC10		    cmp	    byte ptr [bx], 0FFh
seg000:CC13		    jnz	    short loc_CBD3
seg000:CC15		    pop	    di
seg000:CC16		    pop	    si
seg000:CC17		    leave
seg000:CC18		    retn
seg000:CC18 sub_CB9F	    endp
seg000:CC18
seg000:CC19
seg000:CC19 ; =============== S	U B R O	U T I N	E =======================================
seg000:CC19
seg000:CC19 ; Attributes: bp-based frame
seg000:CC19
seg000:CC19 sub_CC19	    proc near		    ; CODE XREF: enter_BIOS?+CAp
seg000:CC19					    ; sub_C9FC+34p ...
seg000:CC19
seg000:CC19 var_8	    = word ptr -8
seg000:CC19 var_6	    = word ptr -6
seg000:CC19 var_4	    = word ptr -4
seg000:CC19 var_2	    = word ptr -2
seg000:CC19 arg_0	    = word ptr	4
seg000:CC19 arg_2	    = word ptr	6
seg000:CC19 arg_4	    = word ptr	8
seg000:CC19 arg_6	    = word ptr	0Ah
seg000:CC19
seg000:CC19		    enter   8, 0
seg000:CC1D		    push    si
seg000:CC1E		    push    di
seg000:CC1F		    mov	    di,	[bp+arg_0]
seg000:CC22		    mov	    al,	[di]
seg000:CC24		    mov	    ah,	0
seg000:CC26		    mov	    [bp+var_8],	ax
seg000:CC29		    mov	    al,	[di+1]
seg000:CC2C		    mov	    ah,	0
seg000:CC2E		    mov	    [bp+var_6],	ax
seg000:CC31		    mov	    ax,	[di+0Bh]
seg000:CC34		    mov	    [bp+var_4],	ax
seg000:CC37		    mov	    al,	[di+2]
seg000:CC3A		    mov	    ah,	0
seg000:CC3C		    cmp	    ax,	6	    ; switch 7 cases
seg000:CC3F		    jbe	    short loc_CC44
seg000:CC41		    jmp	    loc_CCE0	    ; jumptable	0000CC48 default case
seg000:CC44 ; ---------------------------------------------------------------------------
seg000:CC44
seg000:CC44 loc_CC44:				    ; CODE XREF: sub_CC19+26j
seg000:CC44		    mov	    bx,	ax
seg000:CC46		    shl	    bx,	1
seg000:CC48		    jmp	    cs:off_CC4D[bx] ; switch jump
seg000:CC48 ; ---------------------------------------------------------------------------
seg000:CC4D off_CC4D	    dw offset loc_CC5B	    ; DATA XREF: sub_CC19+2Fr
seg000:CC4D		    dw offset loc_CC86	    ; jump table for switch statement
seg000:CC4D		    dw offset loc_CCC7
seg000:CC4D		    dw offset loc_CCC7
seg000:CC4D		    dw offset loc_CCC7
seg000:CC4D		    dw offset loc_CCC7
seg000:CC4D		    dw offset loc_CCC7
seg000:CC5B ; ---------------------------------------------------------------------------
seg000:CC5B
seg000:CC5B loc_CC5B:				    ; CODE XREF: sub_CC19+2Fj
seg000:CC5B					    ; DATA XREF: sub_CC19:off_CC4Do
seg000:CC5B		    mov	    si,	[di+0Dh]    ; jumptable	0000CC48 case 0
seg000:CC5E		    jmp	    short loc_CC80
seg000:CC60 ; ---------------------------------------------------------------------------
seg000:CC60
seg000:CC60 loc_CC60:				    ; CODE XREF: sub_CC19+6Bj
seg000:CC60		    push    word ptr [si+2]
seg000:CC63		    mov	    al,	[si+1]
seg000:CC66		    mov	    ah,	0
seg000:CC68		    add	    ax,	[bp+var_6]
seg000:CC6B		    push    ax
seg000:CC6C		    mov	    al,	[si]
seg000:CC6E		    mov	    ah,	0
seg000:CC70		    add	    ax,	[bp+var_8]
seg000:CC73		    push    ax
seg000:CC74		    call    string_copy?
seg000:CC77		    add	    sp,	6
seg000:CC7A		    dec	    [bp+var_4]
seg000:CC7D		    add	    si,	4
seg000:CC80
seg000:CC80 loc_CC80:				    ; CODE XREF: sub_CC19+45j
seg000:CC80		    cmp	    [bp+var_4],	0
seg000:CC84		    jnz	    short loc_CC60
seg000:CC86
seg000:CC86 loc_CC86:				    ; CODE XREF: sub_CC19+2Fj
seg000:CC86					    ; DATA XREF: sub_CC19:off_CC4Do
seg000:CC86		    mov	    si,	[di+0Dh]    ; jumptable	0000CC48 case 1
seg000:CC89		    mov	    ax,	[di+0Bh]
seg000:CC8C		    cmp	    ax,	[bp+arg_2]
seg000:CC8F		    jg	    short loc_CC96
seg000:CC91		    mov	    [bp+arg_2],	0
seg000:CC96
seg000:CC96 loc_CC96:				    ; CODE XREF: sub_CC19+76j
seg000:CC96		    mov	    ax,	[bp+arg_2]
seg000:CC99		    mov	    [bp+var_4],	ax
seg000:CC9C		    jmp	    short loc_CCA1
seg000:CC9E ; ---------------------------------------------------------------------------
seg000:CC9E
seg000:CC9E loc_CC9E:				    ; CODE XREF: sub_CC19+90j
seg000:CC9E		    add	    si,	4
seg000:CCA1
seg000:CCA1 loc_CCA1:				    ; CODE XREF: sub_CC19+83j
seg000:CCA1		    mov	    ax,	[bp+var_4]
seg000:CCA4		    dec	    [bp+var_4]
seg000:CCA7		    or	    ax,	ax
seg000:CCA9		    jnz	    short loc_CC9E
seg000:CCAB		    push    word ptr [si+2]
seg000:CCAE		    mov	    al,	[si+1]
seg000:CCB1		    mov	    ah,	0
seg000:CCB3		    add	    ax,	[bp+var_6]
seg000:CCB6		    push    ax
seg000:CCB7		    mov	    al,	[si]
seg000:CCB9		    mov	    ah,	0
seg000:CCBB		    add	    ax,	[bp+var_8]
seg000:CCBE		    push    ax
seg000:CCBF		    call    mem_copy?_0
seg000:CCC2		    add	    sp,	6
seg000:CCC5		    jmp	    short loc_CCE0  ; jumptable	0000CC48 default case
seg000:CCC7 ; ---------------------------------------------------------------------------
seg000:CCC7
seg000:CCC7 loc_CCC7:				    ; CODE XREF: sub_CC19+2Fj
seg000:CCC7					    ; DATA XREF: sub_CC19:off_CC4Do
seg000:CCC7		    mov	    ax,	[di+0Dh]    ; jumptable	0000CC48 cases 2-6
seg000:CCCA		    mov	    [bp+var_2],	ax
seg000:CCCD		    push    [bp+arg_6]
seg000:CCD0		    push    [bp+arg_4]
seg000:CCD3		    push    [bp+arg_2]
seg000:CCD6		    push    di
seg000:CCD7		    call    [bp+var_2]
seg000:CCDA		    add	    sp,	8
seg000:CCDD		    mov	    [bp+arg_2],	ax
seg000:CCE0
seg000:CCE0 loc_CCE0:				    ; CODE XREF: sub_CC19+28j
seg000:CCE0					    ; sub_CC19+ACj
seg000:CCE0		    mov	    ax,	[bp+arg_2]  ; jumptable	0000CC48 default case
seg000:CCE3		    pop	    di
seg000:CCE4		    pop	    si
seg000:CCE5		    leave
seg000:CCE6		    retn
seg000:CCE6 sub_CC19	    endp
seg000:CCE6
seg000:CCE7
seg000:CCE7 ; =============== S	U B R O	U T I N	E =======================================
seg000:CCE7
seg000:CCE7 ; Attributes: bp-based frame
seg000:CCE7
seg000:CCE7 sub_CCE7	    proc near		    ; CODE XREF: sub_C9FC+75p
seg000:CCE7					    ; sub_CCE7+2ADp
seg000:CCE7
seg000:CCE7 var_14	    = word ptr -14h
seg000:CCE7 var_12	    = word ptr -12h
seg000:CCE7 var_10	    = word ptr -10h
seg000:CCE7 var_E	    = word ptr -0Eh
seg000:CCE7 var_C	    = word ptr -0Ch
seg000:CCE7 var_A	    = word ptr -0Ah
seg000:CCE7 var_8	    = byte ptr -8
seg000:CCE7 arg_0	    = word ptr	4
seg000:CCE7 arg_2	    = word ptr	6
seg000:CCE7 arg_4	    = word ptr	8
seg000:CCE7 arg_6	    = word ptr	0Ah
seg000:CCE7
seg000:CCE7		    enter   14h, 0
seg000:CCEB		    push    si
seg000:CCEC		    push    di
seg000:CCED		    mov	    di,	[bp+arg_6]
seg000:CCF0		    cmp	    [bp+arg_4],	30h ; '0'
seg000:CCF4		    jl	    short loc_CCFC
seg000:CCF6		    cmp	    [bp+arg_4],	39h ; '9'
seg000:CCFA		    jle	    short loc_CD02
seg000:CCFC
seg000:CCFC loc_CCFC:				    ; CODE XREF: sub_CCE7+Dj
seg000:CCFC		    mov	    ax,	[bp+arg_4]
seg000:CCFF
seg000:CCFF loc_CCFF:
seg000:CCFF		    jmp	    loc_CFCD
seg000:CD02 ; ---------------------------------------------------------------------------
seg000:CD02
seg000:CD02 loc_CD02:				    ; CODE XREF: sub_CCE7+13j
seg000:CD02		    cmp	    byte ptr [di+2], 5
seg000:CD06		    jz	    short loc_CD0E
seg000:CD08		    cmp	    byte ptr [di+2], 4
seg000:CD0C		    jnz	    short loc_CD14
seg000:CD0E
seg000:CD0E loc_CD0E:				    ; CODE XREF: sub_CCE7+1Fj
seg000:CD0E		    mov	    al,	[di+2]
seg000:CD11		    mov	    ds:byte_4A4, al
seg000:CD14
seg000:CD14 loc_CD14:				    ; CODE XREF: sub_CCE7+25j
seg000:CD14		    mov	    al,	[di]
seg000:CD16		    mov	    ah,	0
seg000:CD18		    mov	    [bp+var_14], ax
seg000:CD1B		    mov	    al,	[di+1]
seg000:CD1E		    mov	    ah,	0
seg000:CD20		    mov	    [bp+var_12], ax
seg000:CD23		    mov	    ax,	[di+0Bh]
seg000:CD26		    dec	    ax
seg000:CD27		    mov	    [bp+var_10], ax
seg000:CD2A		    mov	    ax,	[bp+arg_2]
seg000:CD2D		    imul    ax,	3Ah
seg000:CD30		    mov	    bx,	ax
seg000:CD32		    mov	    ax,	ds:word_C112[bx]
seg000:CD36		    mov	    [bp+var_C],	ax
seg000:CD39		    mov	    si,	[bp+arg_0]
seg000:CD3C		    jmp	    short loc_CD42
seg000:CD3E ; ---------------------------------------------------------------------------
seg000:CD3E
seg000:CD3E loc_CD3E:				    ; CODE XREF: sub_CCE7+60j
seg000:CD3E		    add	    [bp+var_C],	2
seg000:CD42
seg000:CD42 loc_CD42:				    ; CODE XREF: sub_CCE7+55j
seg000:CD42		    mov	    ax,	si
seg000:CD44		    dec	    si
seg000:CD45		    or	    ax,	ax
seg000:CD47		    jnz	    short loc_CD3E
seg000:CD49
seg000:CD49 loc_CD49:
seg000:CD49		    mov	    bx,	[bp+var_C]
seg000:CD4C		    push    word ptr [bx]
seg000:CD4E		    call    sub_D389
seg000:CD51		    pop	    cx
seg000:CD52		    mov	    si,	ax
seg000:CD54		    mov	    al,	[di+0Bh]
seg000:CD57		    mov	    cl,	4
seg000:CD59		    sub	    cl,	al
seg000:CD5B		    shl	    cl,	2
seg000:CD5E		    mov	    ax,	si
seg000:CD60		    shl	    ax,	cl
seg000:CD62		    mov	    si,	ax
seg000:CD64		    mov	    [bp+var_E],	0
seg000:CD69		    jmp	    short loc_CD8F
seg000:CD6B ; ---------------------------------------------------------------------------
seg000:CD6B
seg000:CD6B loc_CD6B:				    ; CODE XREF: sub_CCE7+ACj
seg000:CD6B		    mov	    cl,	byte ptr [bp+var_E]
seg000:CD6E		    shl	    cl,	2
seg000:CD71		    mov	    ax,	0F000h
seg000:CD74		    shr	    ax,	cl
seg000:CD76		    and	    ax,	si
seg000:CD78		    mov	    cl,	3
seg000:CD7A		    sub	    cl,	byte ptr [bp+var_E]
seg000:CD7D		    shl	    cl,	2
seg000:CD80		    shr	    ax,	cl
seg000:CD82		    add	    al,	30h ; '0'
seg000:CD84		    lea	    bx,	[bp+var_8]
seg000:CD87		    add	    bx,	[bp+var_E]
seg000:CD8A		    mov	    [bx], al
seg000:CD8C		    inc	    [bp+var_E]
seg000:CD8F
seg000:CD8F loc_CD8F:				    ; CODE XREF: sub_CCE7+82j
seg000:CD8F		    cmp	    [bp+var_E],	4
seg000:CD93		    jb	    short loc_CD6B
seg000:CD95		    mov	    bx,	[bp+var_10]
seg000:CD98		    inc	    bx
seg000:CD99		    lea	    ax,	[bp+var_8]
seg000:CD9C		    add	    bx,	ax
seg000:CD9E		    mov	    byte ptr [bx], 0
seg000:CDA1		    xor	    si,	si
seg000:CDA3
seg000:CDA3 loc_CDA3:				    ; CODE XREF: sub_CCE7+154j
seg000:CDA3					    ; sub_CCE7+1F4j ...
seg000:CDA3		    mov	    al,	byte ptr [bp+arg_4]
seg000:CDA6		    mov	    [bp+si+var_8], al
seg000:CDA9		    lea	    ax,	[bp+var_8]
seg000:CDAC		    push    ax
seg000:CDAD		    push    [bp+var_12]
seg000:CDB0		    push    [bp+var_14]
seg000:CDB3		    call    string_copy?
seg000:CDB6		    add	    sp,	6
seg000:CDB9		    cmp	    si,	[bp+var_10]
seg000:CDBC		    jz	    short loc_CDBF
seg000:CDBE		    inc	    si
seg000:CDBF
seg000:CDBF loc_CDBF:				    ; CODE XREF: sub_CCE7+D5j
seg000:CDBF		    mov	    ax,	[bp+var_12]
seg000:CDC2		    add	    ax,	si
seg000:CDC4		    push    ax
seg000:CDC5		    push    [bp+var_14]
seg000:CDC8		    call    set_cursor
seg000:CDCB		    pop	    cx
seg000:CDCC		    pop	    cx
seg000:CDCD		    push    [bp+arg_2]
seg000:CDD0		    call    get_keypress
seg000:CDD3		    pop	    cx
seg000:CDD4		    mov	    [bp+arg_4],	ax
seg000:CDD7		    cmp	    si,	[bp+var_10]
seg000:CDDA		    jnz	    short loc_CE0F
seg000:CDDC		    mov	    al,	[di+2]
seg000:CDDF		    cmp	    al,	[di+11h]
seg000:CDE2		    jnz	    short loc_CE0F
seg000:CDE4		    cmp	    [bp+arg_4],	39h ; '9'
seg000:CDE8		    jle	    short loc_CDED
seg000:CDEA		    jmp	    loc_CF0D
seg000:CDED ; ---------------------------------------------------------------------------
seg000:CDED
seg000:CDED loc_CDED:				    ; CODE XREF: sub_CCE7+101j
seg000:CDED		    cmp	    [bp+arg_4],	30h ; '0'
seg000:CDF1		    jge	    short loc_CDF6
seg000:CDF3		    jmp	    loc_CF0D
seg000:CDF6 ; ---------------------------------------------------------------------------
seg000:CDF6
seg000:CDF6 loc_CDF6:				    ; CODE XREF: sub_CCE7+10Aj
seg000:CDF6		    mov	    al,	byte ptr [bp+arg_4]
seg000:CDF9		    mov	    [bp+si+var_8], al
seg000:CDFC		    lea	    ax,	[bp+var_8]
seg000:CDFF		    push    ax
seg000:CE00		    push    [bp+var_12]
seg000:CE03		    push    [bp+var_14]
seg000:CE06		    call    string_copy?
seg000:CE09		    add	    sp,	6
seg000:CE0C		    jmp	    loc_CF0D
seg000:CE0F ; ---------------------------------------------------------------------------
seg000:CE0F
seg000:CE0F loc_CE0F:				    ; CODE XREF: sub_CCE7+F3j
seg000:CE0F					    ; sub_CCE7+FBj
seg000:CE0F		    cmp	    [bp+arg_4],	4B00h
seg000:CE14		    jz	    short loc_CE19
seg000:CE16		    jmp	    loc_CEDE
seg000:CE19 ; ---------------------------------------------------------------------------
seg000:CE19
seg000:CE19 loc_CE19:				    ; CODE XREF: sub_CCE7+12Dj
seg000:CE19		    or	    si,	si
seg000:CE1B		    jz	    short loc_CE22
seg000:CE1D		    dec	    si
seg000:CE1E		    dec	    si
seg000:CE1F		    jmp	    loc_CEF0
seg000:CE22 ; ---------------------------------------------------------------------------
seg000:CE22
seg000:CE22 loc_CE22:				    ; CODE XREF: sub_CCE7+134j
seg000:CE22		    mov	    ax,	[bp+arg_2]
seg000:CE25		    imul    ax,	3Ah
seg000:CE28		    mov	    bx,	ax
seg000:CE2A		    mov	    ax,	ds:word_C0DA[bx]
seg000:CE2E		    cmp	    ax,	di
seg000:CE30		    jz	    short loc_CE3A
seg000:CE32		    mov	    al,	[di-0Dh]
seg000:CE35		    cmp	    al,	[di+2]
seg000:CE38		    jz	    short loc_CE3E
seg000:CE3A
seg000:CE3A loc_CE3A:				    ; CODE XREF: sub_CCE7+149j
seg000:CE3A		    dec	    si
seg000:CE3B		    jmp	    loc_CDA3
seg000:CE3E ; ---------------------------------------------------------------------------
seg000:CE3E
seg000:CE3E loc_CE3E:				    ; CODE XREF: sub_CCE7+151j
seg000:CE3E		    sub	    di,	0Fh
seg000:CE41		    dec	    [bp+arg_0]
seg000:CE44		    mov	    al,	[di]
seg000:CE46		    mov	    ah,	0
seg000:CE48		    mov	    [bp+var_14], ax
seg000:CE4B		    mov	    al,	[di+1]
seg000:CE4E		    mov	    ah,	0
seg000:CE50		    mov	    [bp+var_12], ax
seg000:CE53		    mov	    ax,	[di+0Bh]
seg000:CE56		    dec	    ax
seg000:CE57		    mov	    [bp+var_10], ax
seg000:CE5A		    mov	    ax,	[bp+arg_2]
seg000:CE5D		    imul    ax,	3Ah
seg000:CE60		    mov	    bx,	ax
seg000:CE62		    mov	    ax,	ds:word_C112[bx]
seg000:CE66		    mov	    [bp+var_C],	ax
seg000:CE69		    mov	    si,	[bp+arg_0]
seg000:CE6C		    jmp	    short loc_CE72
seg000:CE6E ; ---------------------------------------------------------------------------
seg000:CE6E
seg000:CE6E loc_CE6E:				    ; CODE XREF: sub_CCE7+190j
seg000:CE6E		    add	    [bp+var_C],	2
seg000:CE72
seg000:CE72 loc_CE72:				    ; CODE XREF: sub_CCE7+185j
seg000:CE72		    mov	    ax,	si
seg000:CE74		    dec	    si
seg000:CE75		    or	    ax,	ax
seg000:CE77		    jnz	    short loc_CE6E
seg000:CE79		    mov	    bx,	[bp+var_C]
seg000:CE7C		    push    word ptr [bx]
seg000:CE7E		    call    sub_D389
seg000:CE81		    pop	    cx
seg000:CE82		    mov	    si,	ax
seg000:CE84		    mov	    al,	[di+0Bh]
seg000:CE87		    mov	    cl,	4
seg000:CE89		    sub	    cl,	al
seg000:CE8B		    shl	    cl,	2
seg000:CE8E		    mov	    ax,	si
seg000:CE90		    shl	    ax,	cl
seg000:CE92		    mov	    si,	ax
seg000:CE94		    mov	    [bp+var_E],	0
seg000:CE99		    jmp	    short loc_CEBF
seg000:CE9B ; ---------------------------------------------------------------------------
seg000:CE9B
seg000:CE9B loc_CE9B:				    ; CODE XREF: sub_CCE7+1DCj
seg000:CE9B		    mov	    cl,	byte ptr [bp+var_E]
seg000:CE9E		    shl	    cl,	2
seg000:CEA1		    mov	    ax,	0F000h
seg000:CEA4		    shr	    ax,	cl
seg000:CEA6		    and	    ax,	si
seg000:CEA8		    mov	    cl,	3
seg000:CEAA		    sub	    cl,	byte ptr [bp+var_E]
seg000:CEAD		    shl	    cl,	2
seg000:CEB0		    shr	    ax,	cl
seg000:CEB2		    add	    al,	30h ; '0'
seg000:CEB4		    lea	    bx,	[bp+var_8]
seg000:CEB7		    add	    bx,	[bp+var_E]
seg000:CEBA		    mov	    [bx], al
seg000:CEBC		    inc	    [bp+var_E]
seg000:CEBF
seg000:CEBF loc_CEBF:				    ; CODE XREF: sub_CCE7+1B2j
seg000:CEBF		    cmp	    [bp+var_E],	4
seg000:CEC3		    jb	    short loc_CE9B
seg000:CEC5		    mov	    bx,	[bp+var_10]
seg000:CEC8		    inc	    bx
seg000:CEC9		    lea	    ax,	[bp+var_8]
seg000:CECC		    add	    bx,	ax
seg000:CECE		    mov	    byte ptr [bx], 0
seg000:CED1		    xor	    si,	si
seg000:CED3		    mov	    al,	[bp+var_8]
seg000:CED6		    mov	    ah,	0
seg000:CED8		    mov	    [bp+arg_4],	ax
seg000:CEDB		    jmp	    loc_CDA3
seg000:CEDE ; ---------------------------------------------------------------------------
seg000:CEDE
seg000:CEDE loc_CEDE:				    ; CODE XREF: sub_CCE7+12Fj
seg000:CEDE		    cmp	    [bp+arg_4],	4D00h
seg000:CEE3		    jnz	    short loc_CEFE
seg000:CEE5		    mov	    ax,	[bp+var_10]
seg000:CEE8		    dec	    ax
seg000:CEE9		    cmp	    ax,	si
seg000:CEEB		    jnz	    short loc_CEF0
seg000:CEED		    jmp	    loc_CDA3
seg000:CEF0 ; ---------------------------------------------------------------------------
seg000:CEF0
seg000:CEF0 loc_CEF0:				    ; CODE XREF: sub_CCE7+138j
seg000:CEF0					    ; sub_CCE7+204j
seg000:CEF0		    mov	    al,	[bp+si+var_8]
seg000:CEF3		    mov	    ah,	0
seg000:CEF5		    and	    ax,	0FFh
seg000:CEF8		    mov	    [bp+arg_4],	ax
seg000:CEFB		    jmp	    loc_CDA3
seg000:CEFE ; ---------------------------------------------------------------------------
seg000:CEFE
seg000:CEFE loc_CEFE:				    ; CODE XREF: sub_CCE7+1FCj
seg000:CEFE		    cmp	    [bp+arg_4],	39h ; '9'
seg000:CF02		    jg	    short loc_CF0D
seg000:CF04		    cmp	    [bp+arg_4],	30h ; '0'
seg000:CF08		    jl	    short loc_CF0D
seg000:CF0A		    jmp	    loc_CDA3
seg000:CF0D ; ---------------------------------------------------------------------------
seg000:CF0D
seg000:CF0D loc_CF0D:				    ; CODE XREF: sub_CCE7+103j
seg000:CF0D					    ; sub_CCE7+10Cj ...
seg000:CF0D		    xor	    si,	si
seg000:CF0F		    mov	    [bp+var_E],	si
seg000:CF12		    jmp	    short loc_CF30
seg000:CF14 ; ---------------------------------------------------------------------------
seg000:CF14
seg000:CF14 loc_CF14:				    ; CODE XREF: sub_CCE7+258j
seg000:CF14		    lea	    bx,	[bp+var_8]
seg000:CF17		    add	    bx,	[bp+var_E]
seg000:CF1A		    mov	    al,	[bx]
seg000:CF1C		    mov	    ah,	0
seg000:CF1E		    add	    ax,	0FFD0h
seg000:CF21		    mov	    cl,	3
seg000:CF23		    sub	    cl,	byte ptr [bp+var_E]
seg000:CF26		    shl	    cl,	2
seg000:CF29		    shl	    ax,	cl
seg000:CF2B		    add	    si,	ax
seg000:CF2D		    inc	    [bp+var_E]
seg000:CF30
seg000:CF30 loc_CF30:				    ; CODE XREF: sub_CCE7+22Bj
seg000:CF30		    cmp	    [bp+var_E],	4
seg000:CF34		    jnb	    short loc_CF41
seg000:CF36		    lea	    bx,	[bp+var_8]
seg000:CF39		    add	    bx,	[bp+var_E]
seg000:CF3C		    cmp	    byte ptr [bx], 0
seg000:CF3F		    jnz	    short loc_CF14
seg000:CF41
seg000:CF41 loc_CF41:				    ; CODE XREF: sub_CCE7+24Dj
seg000:CF41		    mov	    cl,	3
seg000:CF43		    sub	    cl,	byte ptr [bp+var_10]
seg000:CF46		    shl	    cl,	2
seg000:CF49		    mov	    ax,	si
seg000:CF4B		    shr	    ax,	cl
seg000:CF4D		    mov	    si,	ax
seg000:CF4F		    push    si
seg000:CF50		    call    sub_D361
seg000:CF53		    pop	    cx
seg000:CF54		    mov	    bx,	[bp+var_C]
seg000:CF57		    mov	    [bx], ax
seg000:CF59		    cmp	    [bp+arg_4],	39h ; '9'
seg000:CF5D		    jg	    short loc_CF9D
seg000:CF5F		    cmp	    [bp+arg_4],	30h ; '0'
seg000:CF63		    jl	    short loc_CF9D
seg000:CF65		    mov	    al,	[di+2]
seg000:CF68		    cmp	    al,	[di+11h]
seg000:CF6B		    jnz	    short loc_CF9D
seg000:CF6D		    mov	    al,	[di+10h]
seg000:CF70		    mov	    ah,	0
seg000:CF72		    push    ax
seg000:CF73		    mov	    al,	[di+0Fh]
seg000:CF76		    mov	    ah,	0
seg000:CF78		    push    ax
seg000:CF79		    call    set_cursor
seg000:CF7C		    pop	    cx
seg000:CF7D		    pop	    cx
seg000:CF7E		    mov	    ax,	di
seg000:CF80		    add	    ax,	0Fh
seg000:CF83		    push    ax
seg000:CF84		    push    [bp+arg_2]
seg000:CF87		    call    get_keypress
seg000:CF8A		    pop	    cx
seg000:CF8B		    push    ax
seg000:CF8C		    push    [bp+arg_2]
seg000:CF8F		    mov	    ax,	[bp+arg_0]
seg000:CF92		    inc	    ax
seg000:CF93		    push    ax
seg000:CF94		    call    sub_CCE7
seg000:CF97		    add	    sp,	8
seg000:CF9A		    mov	    [bp+arg_4],	ax
seg000:CF9D
seg000:CF9D loc_CF9D:				    ; CODE XREF: sub_CCE7+276j
seg000:CF9D					    ; sub_CCE7+27Cj ...
seg000:CF9D		    cmp	    byte ptr [di+2], 3
seg000:CFA1		    jnz	    short loc_CFB9
seg000:CFA3		    mov	    ax,	[di+0Dh]
seg000:CFA6		    mov	    [bp+var_A],	ax
seg000:CFA9		    mov	    bx,	[bp+var_C]
seg000:CFAC		    push    word ptr [bx]
seg000:CFAE		    push    di
seg000:CFAF		    call    [bp+var_A]
seg000:CFB2		    pop	    cx
seg000:CFB3		    pop	    cx
seg000:CFB4		    mov	    bx,	[bp+var_C]
seg000:CFB7		    mov	    [bx], ax
seg000:CFB9
seg000:CFB9 loc_CFB9:				    ; CODE XREF: sub_CCE7+2BAj
seg000:CFB9		    cmp	    [bp+arg_4],	39h ; '9'
seg000:CFBD		    jg	    short loc_CFC5
seg000:CFBF		    cmp	    [bp+arg_4],	30h ; '0'
seg000:CFC3		    jge	    short loc_CFCA
seg000:CFC5
seg000:CFC5 loc_CFC5:				    ; CODE XREF: sub_CCE7+2D6j
seg000:CFC5		    mov	    ax,	[bp+arg_4]
seg000:CFC8		    jmp	    short loc_CFCD
seg000:CFCA ; ---------------------------------------------------------------------------
seg000:CFCA
seg000:CFCA loc_CFCA:				    ; CODE XREF: sub_CCE7+2DCj
seg000:CFCA		    mov	    ax,	9
seg000:CFCD
seg000:CFCD loc_CFCD:				    ; CODE XREF: sub_CCE7:loc_CCFFj
seg000:CFCD					    ; sub_CCE7+2E1j
seg000:CFCD		    pop	    di
seg000:CFCE		    pop	    si
seg000:CFCF		    leave
seg000:CFD0		    retn
seg000:CFD0 sub_CCE7	    endp
seg000:CFD0
seg000:CFD0 ; ---------------------------------------------------------------------------
seg000:CFD1 word_CFD1	    dw 418h		    ; DATA XREF: linked_list_0+47o
seg000:CFD3		    dw offset aUseSpaceBacksp ;	" Use Space/Backspace to select	values,	"...
seg000:CFD5
seg000:CFD5 ; =============== S	U B R O	U T I N	E =======================================
seg000:CFD5
seg000:CFD5 ; Attributes: bp-based frame
seg000:CFD5
seg000:CFD5 linked_list_0   proc near		    ; CODE XREF: sub_CB9F+1Bp
seg000:CFD5
seg000:CFD5 arg_0	    = word ptr	4
seg000:CFD5
seg000:CFD5		    push    bp
seg000:CFD6		    mov	    bp,	sp
seg000:CFD8		    push    si
seg000:CFD9		    push    di
seg000:CFDA		    xor	    di,	di
seg000:CFDC		    jmp	    short loc_D017
seg000:CFDE ; ---------------------------------------------------------------------------
seg000:CFDE
seg000:CFDE loc_CFDE:				    ; CODE XREF: linked_list_0+45j
seg000:CFDE		    mov	    ax,	[bp+arg_0]
seg000:CFE1		    imul    ax,	3Ah
seg000:CFE4		    mov	    bx,	ax
seg000:CFE6		    mov	    ax,	di
seg000:CFE8		    shl	    ax,	1
seg000:CFEA		    add	    bx,	ax
seg000:CFEC		    mov	    si,	ds:linked_list[bx]
seg000:CFF0
seg000:CFF0 loc_CFF0:				    ; CODE XREF: linked_list_0+3Fj
seg000:CFF0		    mov	    bx,	[si]
seg000:CFF2		    mov	    al,	[bx+1]
seg000:CFF5		    mov	    ah,	0
seg000:CFF7		    push    ax
seg000:CFF8		    mov	    bx,	[si]
seg000:CFFA		    push    word ptr [bx+2]
seg000:CFFD		    mov	    bx,	[si]
seg000:CFFF		    mov	    al,	[bx]
seg000:D001		    mov	    ah,	0
seg000:D003		    push    ax
seg000:D004		    push    di
seg000:D005		    call    sub_D293
seg000:D008		    add	    sp,	8
seg000:D00B		    cmp	    word ptr [si+2], 0
seg000:D00F		    jz	    short loc_D016
seg000:D011		    mov	    si,	[si+2]
seg000:D014		    jmp	    short loc_CFF0
seg000:D016 ; ---------------------------------------------------------------------------
seg000:D016
seg000:D016 loc_D016:				    ; CODE XREF: linked_list_0+3Aj
seg000:D016		    inc	    di
seg000:D017
seg000:D017 loc_D017:				    ; CODE XREF: linked_list_0+7j
seg000:D017		    cmp	    di,	19h
seg000:D01A		    jl	    short loc_CFDE
seg000:D01C		    mov	    ax,	offset word_CFD1
seg000:D01F		    push    ax
seg000:D020		    call    sub_D194
seg000:D023		    pop	    cx
seg000:D024		    pop	    di
seg000:D025		    pop	    si
seg000:D026		    pop	    bp
seg000:D027		    retn
seg000:D027 linked_list_0   endp
seg000:D027
seg000:D028
seg000:D028 ; =============== S	U B R O	U T I N	E =======================================
seg000:D028
seg000:D028 ; Attributes: bp-based frame
seg000:D028
seg000:D028 sub_D028	    proc near		    ; CODE XREF: sub_CB9F+20p
seg000:D028
seg000:D028 arg_0	    = word ptr	4
seg000:D028
seg000:D028		    push    bp
seg000:D029		    mov	    bp,	sp
seg000:D02B		    push    si
seg000:D02C		    mov	    ax,	[bp+arg_0]
seg000:D02F		    imul    ax,	3Ah
seg000:D032		    mov	    bx,	ax
seg000:D034		    mov	    si,	ds:off_C0DC[bx]
seg000:D038		    jmp	    short loc_D051
seg000:D03A ; ---------------------------------------------------------------------------
seg000:D03A
seg000:D03A loc_D03A:				    ; CODE XREF: sub_D028+2Cj
seg000:D03A		    push    word ptr [si+2]
seg000:D03D		    mov	    al,	[si+1]
seg000:D040		    mov	    ah,	0
seg000:D042		    push    ax
seg000:D043		    mov	    al,	[si]
seg000:D045		    mov	    ah,	0
seg000:D047		    push    ax
seg000:D048		    call    string_copy?
seg000:D04B		    add	    sp,	6
seg000:D04E		    add	    si,	4
seg000:D051
seg000:D051 loc_D051:				    ; CODE XREF: sub_D028+10j
seg000:D051		    cmp	    byte ptr [si], 0FFh
seg000:D054		    jnz	    short loc_D03A
seg000:D056		    pop	    si
seg000:D057		    pop	    bp
seg000:D058		    retn
seg000:D058 sub_D028	    endp
seg000:D058
seg000:D058 ; ---------------------------------------------------------------------------
seg000:D059 Bios_finish_msg dw offset aAreYouFinished ;	DATA XREF: Bios_finish_save+Fr
seg000:D059					    ; "	Are You	Finished Making	Changes	<Y/N>?"...
seg000:D05B Bios_save_msg   dw offset aPressReturnToS ;	DATA XREF: Bios_finish_save+48r
seg000:D05B					    ; "	Press Return to	save changes or	Esc to"...
seg000:D05D
seg000:D05D ; =============== S	U B R O	U T I N	E =======================================
seg000:D05D
seg000:D05D ; Bios_finish_save returns
seg000:D05D ; FFFF = No
seg000:D05D ; 1	= Yes
seg000:D05D
seg000:D05D Bios_finish_save proc near		    ; CODE XREF: sub_C90Ep
seg000:D05D		    push    si
seg000:D05E		    push    20h	; ' '
seg000:D060		    push    4Eh	; 'N'
seg000:D062		    push    1
seg000:D064		    push    17h
seg000:D066		    call    sub_D293
seg000:D069		    add	    sp,	8
seg000:D06C		    push    ds:Bios_finish_msg
seg000:D070		    push    14h
seg000:D072		    push    17h
seg000:D074		    call    string_copy?
seg000:D077		    add	    sp,	6
seg000:D07A
seg000:D07A loc_D07A:				    ; CODE XREF: Bios_finish_save+38j
seg000:D07A		    call    get_keypress
seg000:D07D		    mov	    si,	ax
seg000:D07F		    cmp	    si,	4Eh ; 'N'
seg000:D082		    jz	    short loc_D089
seg000:D084		    cmp	    si,	6Eh ; 'n'
seg000:D087		    jnz	    short loc_D08D
seg000:D089
seg000:D089 loc_D089:				    ; CODE XREF: Bios_finish_save+25j
seg000:D089		    xor	    ax,	ax
seg000:D08B		    jmp	    short ret_
seg000:D08D ; ---------------------------------------------------------------------------
seg000:D08D
seg000:D08D loc_D08D:				    ; CODE XREF: Bios_finish_save+2Aj
seg000:D08D		    cmp	    si,	59h ; 'Y'
seg000:D090		    jz	    short loc_D097
seg000:D092		    cmp	    si,	79h ; 'y'
seg000:D095		    jnz	    short loc_D07A
seg000:D097
seg000:D097 loc_D097:				    ; CODE XREF: Bios_finish_save+33j
seg000:D097		    push    20h	; ' '
seg000:D099		    push    4Eh	; 'N'
seg000:D09B		    push    1
seg000:D09D		    push    17h
seg000:D09F		    call    sub_D293
seg000:D0A2		    add	    sp,	8
seg000:D0A5		    push    ds:Bios_save_msg
seg000:D0A9		    push    0Bh
seg000:D0AB		    push    17h
seg000:D0AD		    call    string_copy?
seg000:D0B0		    add	    sp,	6
seg000:D0B3
seg000:D0B3 loc_D0B3:				    ; CODE XREF: Bios_finish_save+68j
seg000:D0B3		    call    get_keypress
seg000:D0B6		    mov	    si,	ax
seg000:D0B8		    cmp	    si,	1Bh	    ; ECS ASCII	character
seg000:D0BB		    jnz	    short loc_D0C2  ; ENTER ASCII character
seg000:D0BD		    mov	    ax,	0FFFFh
seg000:D0C0		    jmp	    short ret_
seg000:D0C2 ; ---------------------------------------------------------------------------
seg000:D0C2
seg000:D0C2 loc_D0C2:				    ; CODE XREF: Bios_finish_save+5Ej
seg000:D0C2		    cmp	    si,	0Dh	    ; ENTER ASCII character
seg000:D0C5		    jnz	    short loc_D0B3
seg000:D0C7		    mov	    ax,	1
seg000:D0CA
seg000:D0CA ret_:				    ; CODE XREF: Bios_finish_save+2Ej
seg000:D0CA					    ; Bios_finish_save+63j
seg000:D0CA		    pop	    si
seg000:D0CB		    retn
seg000:D0CB Bios_finish_save endp
seg000:D0CB
seg000:D0CB ; ---------------------------------------------------------------------------
seg000:D0CC time_bad_msg    dw offset aInvalidTimeHr0 ;	DATA XREF: bad_RTC_input?+1Br
seg000:D0CC					    ; "	INVALID	TIME: Hr=00-23,	Min=00-59, Sec"...
seg000:D0CE date_bad_msg    dw offset aInvalidDateMon ;	DATA XREF: bad_RTC_input?+2Fr
seg000:D0CE					    ; "	INVALID	DATE: Mon=01-12, Day=01-Max/Mo"...
seg000:D0D0 value_bad_msg   dw offset aInvalidValueVa ;	DATA XREF: bad_RTC_input?+43r
seg000:D0D0					    ; "	INVALID	VALUE: Value entered is	not va"...
seg000:D0D2
seg000:D0D2 ; =============== S	U B R O	U T I N	E =======================================
seg000:D0D2
seg000:D0D2 ; Attributes: bp-based frame
seg000:D0D2
seg000:D0D2 bad_RTC_input?  proc near		    ; CODE XREF: sub_C9FC+AFp
seg000:D0D2
seg000:D0D2 arg_0	    = word ptr	4
seg000:D0D2
seg000:D0D2		    push    bp
seg000:D0D3		    mov	    bp,	sp
seg000:D0D5		    push    si
seg000:D0D6		    mov	    si,	[bp+arg_0]
seg000:D0D9		    push    20h	; ' '
seg000:D0DB		    push    4Eh	; 'N'
seg000:D0DD		    push    1
seg000:D0DF		    push    17h
seg000:D0E1		    call    sub_D293
seg000:D0E4		    add	    sp,	8
seg000:D0E7		    cmp	    byte ptr [si+2], 5
seg000:D0EB		    jnz	    short loc_D0FB
seg000:D0ED		    push    ds:time_bad_msg
seg000:D0F1		    push    0Ah
seg000:D0F3		    push    17h
seg000:D0F5		    call    mem_copy?_0
seg000:D0F8		    add	    sp,	6
seg000:D0FB
seg000:D0FB loc_D0FB:				    ; CODE XREF: bad_RTC_input?+19j
seg000:D0FB		    cmp	    byte ptr [si+2], 4
seg000:D0FF		    jnz	    short loc_D10F
seg000:D101		    push    ds:date_bad_msg
seg000:D105		    push    5
seg000:D107		    push    17h
seg000:D109		    call    mem_copy?_0
seg000:D10C		    add	    sp,	6
seg000:D10F
seg000:D10F loc_D10F:				    ; CODE XREF: bad_RTC_input?+2Dj
seg000:D10F		    cmp	    byte ptr [si+2], 3
seg000:D113		    jnz	    short loc_D123
seg000:D115		    push    ds:value_bad_msg
seg000:D119		    push    3
seg000:D11B		    push    17h
seg000:D11D		    call    mem_copy?_0
seg000:D120		    add	    sp,	6
seg000:D123
seg000:D123 loc_D123:				    ; CODE XREF: bad_RTC_input?+41j
seg000:D123					    ; bad_RTC_input?+57j
seg000:D123		    call    get_keypress
seg000:D126		    cmp	    ax,	1Bh
seg000:D129		    jnz	    short loc_D123
seg000:D12B		    push    0FFFFh
seg000:D12D		    call    sub_A641
seg000:D130		    pop	    cx
seg000:D131		    push    si
seg000:D132		    call    bios_input_?
seg000:D135		    pop	    cx
seg000:D136		    pop	    si
seg000:D137		    pop	    bp
seg000:D138		    retn
seg000:D138 bad_RTC_input?  endp
seg000:D138
seg000:D139
seg000:D139 ; =============== S	U B R O	U T I N	E =======================================
seg000:D139
seg000:D139 ; Attributes: bp-based frame
seg000:D139
seg000:D139 bios_input_?    proc near		    ; CODE XREF: enter_BIOS?+67p
seg000:D139					    ; bad_RTC_input?+60p
seg000:D139
seg000:D139 arg_0	    = word ptr	4
seg000:D139
seg000:D139		    push    bp
seg000:D13A		    mov	    bp,	sp
seg000:D13C		    push    si
seg000:D13D		    push    di
seg000:D13E		    mov	    bx,	[bp+arg_0]
seg000:D141		    mov	    al,	[bx+0Ah]
seg000:D144		    mov	    ah,	0
seg000:D146		    mov	    bx,	ax
seg000:D148		    shl	    bx,	1
seg000:D14A		    mov	    si,	ds:bios_input_msg[bx]
seg000:D14E		    xor	    di,	di
seg000:D150		    jmp	    short loc_D153
seg000:D152 ; ---------------------------------------------------------------------------
seg000:D152
seg000:D152 loc_D152:				    ; CODE XREF: bios_input_?+20j
seg000:D152		    inc	    di
seg000:D153
seg000:D153 loc_D153:				    ; CODE XREF: bios_input_?+17j
seg000:D153		    mov	    bx,	si
seg000:D155		    inc	    si
seg000:D156		    cmp	    byte ptr [bx], 0
seg000:D159		    jnz	    short loc_D152
seg000:D15B		    mov	    bx,	[bp+arg_0]
seg000:D15E		    mov	    al,	[bx+0Ah]
seg000:D161		    mov	    ah,	0
seg000:D163		    mov	    bx,	ax
seg000:D165		    shl	    bx,	1
seg000:D167		    mov	    si,	ds:bios_input_msg[bx]
seg000:D16B		    push    20h	; ' '
seg000:D16D		    push    4Eh	; 'N'
seg000:D16F		    push    1
seg000:D171		    push    17h
seg000:D173		    call    sub_D293
seg000:D176		    add	    sp,	8
seg000:D179		    push    si
seg000:D17A		    mov	    ax,	di
seg000:D17C		    mov	    bx,	2
seg000:D17F		    cwd
seg000:D180		    idiv    bx
seg000:D182		    mov	    dx,	28h ; '('
seg000:D185		    sub	    dx,	ax
seg000:D187		    push    dx
seg000:D188		    push    17h
seg000:D18A		    call    mem_copy?_0
seg000:D18D		    add	    sp,	6
seg000:D190		    pop	    di
seg000:D191		    pop	    si
seg000:D192		    pop	    bp
seg000:D193		    retn
seg000:D193 bios_input_?    endp
seg000:D193
seg000:D194
seg000:D194 ; =============== S	U B R O	U T I N	E =======================================
seg000:D194
seg000:D194 ; Attributes: bp-based frame
seg000:D194
seg000:D194 sub_D194	    proc near		    ; CODE XREF: linked_list_0+4Bp
seg000:D194
seg000:D194 arg_0	    = word ptr	4
seg000:D194
seg000:D194		    push    bp
seg000:D195		    mov	    bp,	sp
seg000:D197		    push    si
seg000:D198		    mov	    si,	[bp+arg_0]
seg000:D19B		    push    word ptr [si+2]
seg000:D19E		    mov	    al,	[si+1]
seg000:D1A1		    mov	    ah,	0
seg000:D1A3		    push    ax
seg000:D1A4		    mov	    al,	[si]
seg000:D1A6		    mov	    ah,	0
seg000:D1A8		    push    ax
seg000:D1A9		    call    mem_copy?_0
seg000:D1AC		    add	    sp,	6
seg000:D1AF		    pop	    si
seg000:D1B0		    pop	    bp
seg000:D1B1		    retn
seg000:D1B1 sub_D194	    endp
seg000:D1B1
seg000:D1B2
seg000:D1B2 ; =============== S	U B R O	U T I N	E =======================================
seg000:D1B2
seg000:D1B2
seg000:D1B2 outChar_VGA	    proc near		    ; CODE XREF: seg000:AAD5p
seg000:D1B2					    ; ide_?_17+20p ...
seg000:D1B2		    mov	    ah,	0Eh
seg000:D1B4		    mov	    al,	7
seg000:D1B6		    mov	    bl,	0
seg000:D1B8		    int	    10h		    ; -	VIDEO -	WRITE CHARACTER	AND ADVANCE CURSOR (TTY	WRITE)
seg000:D1B8					    ; AL = character, BH = display page	(alpha modes)
seg000:D1B8					    ; BL = foreground color (graphics modes)
seg000:D1BA		    retn
seg000:D1BA outChar_VGA	    endp
seg000:D1BA
seg000:D1BA ; ---------------------------------------------------------------------------
seg000:D1BB dw_table	    dw	0		    ; 0	; DATA XREF: string_copy?+Br
seg000:D1BB					    ; mem_copy?_0+Br ...
seg000:D1BB		    dw 0A0h		    ; 1
seg000:D1BB		    dw 140h		    ; 2
seg000:D1BB		    dw 1E0h		    ; 3
seg000:D1BB		    dw 280h		    ; 4
seg000:D1BB		    dw 320h		    ; 5
seg000:D1BB		    dw 3C0h		    ; 6
seg000:D1BB		    dw 460h		    ; 7
seg000:D1BB		    dw 500h		    ; 8
seg000:D1BB		    dw 5A0h		    ; 9
seg000:D1BB		    dw 640h		    ; 0Ah
seg000:D1BB		    dw 6E0h		    ; 0Bh
seg000:D1BB		    dw 780h		    ; 0Ch
seg000:D1BB		    dw 820h		    ; 0Dh
seg000:D1BB		    dw 8C0h		    ; 0Eh
seg000:D1BB		    dw 960h		    ; 0Fh
seg000:D1BB		    dw 0A00h		    ; 10h
seg000:D1BB		    dw 0AA0h		    ; 11h
seg000:D1BB		    dw 0B40h		    ; 12h
seg000:D1BB		    dw 0BE0h		    ; 13h
seg000:D1BB		    dw 0C80h		    ; 14h
seg000:D1BB		    dw 0D20h		    ; 15h
seg000:D1BB		    dw 0DC0h		    ; 16h
seg000:D1BB		    dw 0E60h		    ; 17h
seg000:D1BB		    dw 0F00h		    ; 18h
seg000:D1BB		    dw 0FA0h		    ; 19h
seg000:D1BB		    dw 1040h		    ; 1Ah
seg000:D1BB		    dw 10E0h		    ; 1Bh
seg000:D1BB		    dw 1180h		    ; 1Ch
seg000:D1BB		    dw 1220h		    ; 1Dh
seg000:D1BB		    dw 12C0h		    ; 1Eh
seg000:D1BB		    dw 1360h		    ; 1Fh
seg000:D1BB		    dw 1400h		    ; 20h
seg000:D1BB		    dw 14A0h		    ; 21h
seg000:D1BB		    dw 1540h		    ; 22h
seg000:D1BB		    dw 15E0h		    ; 23h
seg000:D1BB		    dw 1680h		    ; 24h
seg000:D1BB		    dw 1720h		    ; 25h
seg000:D1BB		    dw 17C0h		    ; 26h
seg000:D1BB		    dw 1860h		    ; 27h
seg000:D1BB		    dw 1900h		    ; 28h
seg000:D1BB		    dw 19A0h		    ; 29h
seg000:D1BB		    dw 1A40h		    ; 2Ah
seg000:D1BB		    dw 1AE0h		    ; 2Bh
seg000:D1BB		    dw 1B80h		    ; 2Ch
seg000:D1BB		    dw 1C20h		    ; 2Dh
seg000:D1BB		    dw 1CC0h		    ; 2Eh
seg000:D1BB		    dw 1D60h		    ; 2Fh
seg000:D1BB		    dw 1E00h		    ; 30h
seg000:D1BB		    dw 1EA0h		    ; 31h
seg000:D1BB		    dw 1F40h		    ; 32h
seg000:D221
seg000:D221 ; =============== S	U B R O	U T I N	E =======================================
seg000:D221
seg000:D221 ; Attributes: bp-based frame
seg000:D221
seg000:D221 string_copy?    proc near		    ; CODE XREF: sub_A946+6Ap
seg000:D221					    ; seg000:AAA9p ...
seg000:D221
seg000:D221 var_2	    = word ptr -2
seg000:D221 arg_0	    = word ptr	4
seg000:D221 arg_2	    = word ptr	6
seg000:D221 arg_4	    = word ptr	8
seg000:D221
seg000:D221		    enter   2, 0
seg000:D225		    push    si
seg000:D226		    push    di
seg000:D227		    mov	    bx,	[bp+arg_0]
seg000:D22A		    shl	    bx,	1
seg000:D22C		    mov	    ax,	ds:dw_table[bx]
seg000:D230		    mov	    dx,	[bp+arg_2]
seg000:D233		    shl	    dx,	1
seg000:D235		    add	    ax,	dx
seg000:D237		    mov	    [bp+var_2],	ax
seg000:D23A		    push    di
seg000:D23B		    push    si
seg000:D23C		    mov	    di,	[bp+var_2]
seg000:D23F		    mov	    si,	[bp+arg_4]
seg000:D242		    push    es
seg000:D243		    mov	    ax,	word ptr ds:loc_38+2
seg000:D246		    mov	    es,	ax
seg000:D248		    mov	    ah,	7
seg000:D24A		    cld
seg000:D24B
seg000:D24B loc_D24B:				    ; CODE XREF: string_copy?+30j
seg000:D24B		    lodsb
seg000:D24C		    or	    al,	al
seg000:D24E		    jz	    short loc_D253
seg000:D250		    stosw
seg000:D251		    jmp	    short loc_D24B
seg000:D253 ; ---------------------------------------------------------------------------
seg000:D253
seg000:D253 loc_D253:				    ; CODE XREF: string_copy?+2Dj
seg000:D253		    pop	    es
seg000:D254		    pop	    si
seg000:D255		    pop	    di
seg000:D256		    pop	    di
seg000:D257		    pop	    si
seg000:D258		    leave
seg000:D259		    retn
seg000:D259 string_copy?    endp
seg000:D259
seg000:D25A
seg000:D25A ; =============== S	U B R O	U T I N	E =======================================
seg000:D25A
seg000:D25A ; Attributes: bp-based frame
seg000:D25A
seg000:D25A mem_copy?_0	    proc near		    ; CODE XREF: sub_A946+53p
seg000:D25A					    ; seg000:AB0Fp ...
seg000:D25A
seg000:D25A var_2	    = word ptr -2
seg000:D25A arg_0	    = word ptr	4
seg000:D25A arg_2	    = word ptr	6
seg000:D25A arg_4	    = word ptr	8
seg000:D25A
seg000:D25A		    enter   2, 0
seg000:D25E		    push    si
seg000:D25F		    push    di
seg000:D260		    mov	    bx,	[bp+arg_0]
seg000:D263		    shl	    bx,	1
seg000:D265		    mov	    ax,	ds:dw_table[bx]
seg000:D269		    mov	    dx,	[bp+arg_2]
seg000:D26C		    shl	    dx,	1
seg000:D26E		    add	    ax,	dx
seg000:D270		    mov	    [bp+var_2],	ax
seg000:D273		    push    di
seg000:D274		    push    si
seg000:D275		    mov	    di,	[bp+var_2]
seg000:D278		    mov	    si,	[bp+arg_4]
seg000:D27B		    push    es
seg000:D27C		    mov	    ax,	word ptr ds:loc_38+2
seg000:D27F		    mov	    es,	ax
seg000:D281		    mov	    ah,	70h ; 'p'
seg000:D283		    cld
seg000:D284
seg000:D284 loc_D284:				    ; CODE XREF: mem_copy?_0+30j
seg000:D284		    lodsb
seg000:D285		    or	    al,	al
seg000:D287		    jz	    short loc_D28C
seg000:D289		    stosw
seg000:D28A		    jmp	    short loc_D284
seg000:D28C ; ---------------------------------------------------------------------------
seg000:D28C
seg000:D28C loc_D28C:				    ; CODE XREF: mem_copy?_0+2Dj
seg000:D28C		    pop	    es
seg000:D28D		    pop	    si
seg000:D28E		    pop	    di
seg000:D28F		    pop	    di
seg000:D290		    pop	    si
seg000:D291		    leave
seg000:D292		    retn
seg000:D292 mem_copy?_0	    endp
seg000:D292
seg000:D293
seg000:D293 ; =============== S	U B R O	U T I N	E =======================================
seg000:D293
seg000:D293 ; Attributes: bp-based frame
seg000:D293
seg000:D293 sub_D293	    proc near		    ; CODE XREF: error_handlr_?+1Dp
seg000:D293					    ; sub_CB86+9p ...
seg000:D293
seg000:D293 var_2	    = word ptr -2
seg000:D293 arg_0	    = word ptr	4
seg000:D293 arg_2	    = word ptr	6
seg000:D293 arg_4	    = word ptr	8
seg000:D293 arg_6	    = byte ptr	0Ah
seg000:D293
seg000:D293		    enter   2, 0
seg000:D297		    push    si
seg000:D298		    push    di
seg000:D299		    mov	    bx,	[bp+arg_0]
seg000:D29C		    shl	    bx,	1
seg000:D29E		    mov	    ax,	ds:dw_table[bx]
seg000:D2A2		    mov	    dx,	[bp+arg_2]
seg000:D2A5		    shl	    dx,	1
seg000:D2A7		    add	    ax,	dx
seg000:D2A9		    mov	    [bp+var_2],	ax
seg000:D2AC		    push    di
seg000:D2AD		    mov	    di,	[bp+var_2]
seg000:D2B0		    push    es
seg000:D2B1		    mov	    ax,	word ptr ds:loc_38+2
seg000:D2B4		    mov	    es,	ax
seg000:D2B6		    mov	    ah,	7
seg000:D2B8		    mov	    al,	[bp+arg_6]
seg000:D2BB		    mov	    cx,	[bp+arg_4]
seg000:D2BE		    cld
seg000:D2BF		    rep	stosw
seg000:D2C1		    pop	    es
seg000:D2C2		    pop	    di
seg000:D2C3		    pop	    di
seg000:D2C4		    pop	    si
seg000:D2C5		    leave
seg000:D2C6		    retn
seg000:D2C6 sub_D293	    endp
seg000:D2C6
seg000:D2C7
seg000:D2C7 ; =============== S	U B R O	U T I N	E =======================================
seg000:D2C7
seg000:D2C7 ; Attributes: bp-based frame
seg000:D2C7
seg000:D2C7 set_cursor	    proc near		    ; CODE XREF: dissasembler_?+22p
seg000:D2C7					    ; dissasembler_?+7Fp ...
seg000:D2C7
seg000:D2C7 arg_0	    = byte ptr	4
seg000:D2C7 arg_2	    = byte ptr	6
seg000:D2C7
seg000:D2C7		    push    bp
seg000:D2C8		    mov	    bp,	sp
seg000:D2CA		    mov	    ah,	2
seg000:D2CC		    mov	    dh,	[bp+arg_0]
seg000:D2CF		    mov	    dl,	[bp+arg_2]
seg000:D2D2		    mov	    bh,	0
seg000:D2D4		    int	    10h		    ; -	VIDEO -	SET CURSOR POSITION
seg000:D2D4					    ; DH,DL = row, column (0,0 = upper left)
seg000:D2D4					    ; BH = page	number
seg000:D2D6		    pop	    bp
seg000:D2D7		    retn
seg000:D2D7 set_cursor	    endp
seg000:D2D7
seg000:D2D8
seg000:D2D8 ; =============== S	U B R O	U T I N	E =======================================
seg000:D2D8
seg000:D2D8 ; Attributes: bp-based frame
seg000:D2D8
seg000:D2D8 get_keypress    proc near		    ; CODE XREF: pass_?+89p
seg000:D2D8					    ; sub_B79D+62p ...
seg000:D2D8
seg000:D2D8 arg_0	    = word ptr	4
seg000:D2D8
seg000:D2D8		    push    bp
seg000:D2D9		    mov	    bp,	sp
seg000:D2DB		    jmp	    short loc_D2ED
seg000:D2DD ; ---------------------------------------------------------------------------
seg000:D2DD
seg000:D2DD loc_D2DD:				    ; CODE XREF: get_keypress+1Aj
seg000:D2DD		    cmp	    [bp+arg_0],	0
seg000:D2E1		    jnz	    short loc_D2ED
seg000:D2E3		    mov	    al,	ds:byte_4A4
seg000:D2E6		    mov	    ah,	0
seg000:D2E8		    push    ax
seg000:D2E9		    call    sub_A641
seg000:D2EC		    pop	    cx
seg000:D2ED
seg000:D2ED loc_D2ED:				    ; CODE XREF: get_keypress+3j
seg000:D2ED					    ; get_keypress+9j
seg000:D2ED		    call    check_keyb
seg000:D2F0		    or	    ax,	ax
seg000:D2F2		    jz	    short loc_D2DD
seg000:D2F4		    mov	    ah,	0
seg000:D2F6		    int	    16h		    ; KEYBOARD - READ CHAR FROM	BUFFER,	WAIT IF	EMPTY
seg000:D2F6					    ; Return: AH = scan	code, AL = character
seg000:D2F8		    or	    al,	al
seg000:D2FA		    jz	    short loc_D2FE
seg000:D2FC		    xor	    ah,	ah
seg000:D2FE
seg000:D2FE loc_D2FE:				    ; CODE XREF: get_keypress+22j
seg000:D2FE		    pop	    bp
seg000:D2FF		    retn
seg000:D2FF get_keypress    endp
seg000:D2FF
seg000:D300
seg000:D300 ; =============== S	U B R O	U T I N	E =======================================
seg000:D300
seg000:D300
seg000:D300 check_keyb	    proc near		    ; CODE XREF: sub_B4BB:loc_B4D0p
seg000:D300					    ; set_pass+72p ...
seg000:D300		    mov	    ah,	1
seg000:D302		    int	    16h		    ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
seg000:D302					    ; Return: ZF clear if character in buffer
seg000:D302					    ; AH = scan	code, AL = character
seg000:D302					    ; ZF set if	no character in	buffer
seg000:D304		    jnz	    short locret_D308
seg000:D306		    xor	    ax,	ax
seg000:D308
seg000:D308 locret_D308:			    ; CODE XREF: check_keyb+4j
seg000:D308		    retn
seg000:D308 check_keyb	    endp
seg000:D308
seg000:D309
seg000:D309 ; =============== S	U B R O	U T I N	E =======================================
seg000:D309
seg000:D309 ; Attributes: bp-based frame
seg000:D309
seg000:D309 sub_D309	    proc near		    ; CODE XREF: seg000:AC3Ap
seg000:D309					    ; seg000:ACA5p ...
seg000:D309
seg000:D309 var_4	    = word ptr -4
seg000:D309 var_2	    = word ptr -2
seg000:D309 arg_0	    = word ptr	4
seg000:D309 arg_2	    = word ptr	6
seg000:D309 arg_4	    = word ptr	8
seg000:D309
seg000:D309		    enter   4, 0
seg000:D30D		    push    si
seg000:D30E		    push    di
seg000:D30F		    mov	    di,	[bp+arg_2]
seg000:D312		    mov	    si,	di
seg000:D314		    mov	    ax,	[bp+arg_4]
seg000:D317		    dec	    ax
seg000:D318		    add	    si,	ax
seg000:D31A		    mov	    [bp+var_2],	0Ah
seg000:D31F		    mov	    ax,	[bp+arg_4]
seg000:D322		    mov	    [bp+var_4],	ax
seg000:D325		    jmp	    short loc_D343
seg000:D327 ; ---------------------------------------------------------------------------
seg000:D327
seg000:D327 loc_D327:				    ; CODE XREF: sub_D309+3Ej
seg000:D327		    mov	    ax,	[bp+arg_0]
seg000:D32A		    cwd
seg000:D32B		    idiv    [bp+var_2]
seg000:D32E		    add	    dl,	30h ; '0'
seg000:D331		    mov	    [si], dl
seg000:D333		    dec	    si
seg000:D334		    mov	    ax,	[bp+arg_0]
seg000:D337		    mov	    bx,	0Ah
seg000:D33A		    cwd
seg000:D33B		    idiv    bx
seg000:D33D		    mov	    [bp+arg_0],	ax
seg000:D340		    dec	    [bp+var_4]
seg000:D343
seg000:D343 loc_D343:				    ; CODE XREF: sub_D309+1Cj
seg000:D343		    cmp	    [bp+var_4],	0
seg000:D347		    jg	    short loc_D327
seg000:D349		    jmp	    short loc_D352
seg000:D34B ; ---------------------------------------------------------------------------
seg000:D34B
seg000:D34B loc_D34B:				    ; CODE XREF: sub_D309+52j
seg000:D34B		    mov	    byte ptr [di], 20h ; ' '
seg000:D34E		    inc	    di
seg000:D34F		    dec	    [bp+arg_4]
seg000:D352
seg000:D352 loc_D352:				    ; CODE XREF: sub_D309+40j
seg000:D352		    cmp	    byte ptr [di], 30h ; '0'
seg000:D355		    jnz	    short loc_D35D
seg000:D357		    cmp	    [bp+arg_4],	1
seg000:D35B		    jg	    short loc_D34B
seg000:D35D
seg000:D35D loc_D35D:				    ; CODE XREF: sub_D309+4Cj
seg000:D35D		    pop	    di
seg000:D35E		    pop	    si
seg000:D35F		    leave
seg000:D360		    retn
seg000:D360 sub_D309	    endp
seg000:D360
seg000:D361
seg000:D361 ; =============== S	U B R O	U T I N	E =======================================
seg000:D361
seg000:D361 ; Attributes: bp-based frame
seg000:D361
seg000:D361 sub_D361	    proc near		    ; CODE XREF: sub_A641+1Dp
seg000:D361					    ; sub_CCE7+269p ...
seg000:D361
seg000:D361 arg_0	    = word ptr	4
seg000:D361
seg000:D361		    push    bp
seg000:D362		    mov	    bp,	sp
seg000:D364		    push    si
seg000:D365		    mov	    ax,	[bp+arg_0]
seg000:D368		    mov	    ah,	al
seg000:D36A		    and	    al,	0Fh
seg000:D36C		    shr	    ah,	4
seg000:D36F		    aad
seg000:D371		    mov	    si,	ax
seg000:D373		    mov	    ax,	[bp+arg_0]
seg000:D376		    mov	    al,	ah
seg000:D378		    and	    al,	0Fh
seg000:D37A		    shr	    ah,	4
seg000:D37D		    aad
seg000:D37F		    mov	    ah,	0
seg000:D381		    imul    ax,	64h
seg000:D384		    add	    ax,	si
seg000:D386		    pop	    si
seg000:D387		    pop	    bp
seg000:D388		    retn
seg000:D388 sub_D361	    endp
seg000:D388
seg000:D389
seg000:D389 ; =============== S	U B R O	U T I N	E =======================================
seg000:D389
seg000:D389 ; Attributes: bp-based frame
seg000:D389
seg000:D389 sub_D389	    proc near		    ; CODE XREF: sub_CCE7+67p
seg000:D389					    ; sub_CCE7+197p ...
seg000:D389
seg000:D389 arg_0	    = word ptr	4
seg000:D389
seg000:D389		    push    bp
seg000:D38A		    mov	    bp,	sp
seg000:D38C		    push    si
seg000:D38D		    mov	    ax,	[bp+arg_0]
seg000:D390		    mov	    bx,	64h ; 'd'
seg000:D393		    cwd
seg000:D394		    idiv    bx
seg000:D396		    aam
seg000:D398		    shl	    al,	4
seg000:D39B		    shl	    ax,	4
seg000:D39E		    mov	    si,	ax
seg000:D3A0		    mov	    ax,	dx
seg000:D3A2		    aam
seg000:D3A4		    shl	    al,	4
seg000:D3A7		    shr	    ax,	4
seg000:D3AA		    or	    ax,	si
seg000:D3AC		    pop	    si
seg000:D3AD		    pop	    bp
seg000:D3AE		    retn
seg000:D3AE sub_D389	    endp
seg000:D3AE
seg000:D3AF
seg000:D3AF ; =============== S	U B R O	U T I N	E =======================================
seg000:D3AF
seg000:D3AF ; Attributes: bp-based frame
seg000:D3AF
seg000:D3AF sub_D3AF	    proc near		    ; CODE XREF: sub_A641+28p
seg000:D3AF					    ; sub_C346+19p
seg000:D3AF
seg000:D3AF var_4	    = word ptr -4
seg000:D3AF var_2	    = word ptr -2
seg000:D3AF arg_0	    = word ptr	4
seg000:D3AF
seg000:D3AF		    enter   4, 0
seg000:D3B3		    push    si
seg000:D3B4		    push    di
seg000:D3B5		    push    cx
seg000:D3B6		    push    dx
seg000:D3B7		    mov	    ah,	2
seg000:D3B9		    int	    1Ah		    ; CLOCK - READ REAL	TIME CLOCK (AT,XT286,CONV,PS)
seg000:D3B9					    ; Return: CH = hours in BCD
seg000:D3B9					    ; CL = minutes in BCD
seg000:D3B9					    ; DH = seconds in BCD
seg000:D3BB		    mov	    al,	ch
seg000:D3BD		    mov	    ah,	0
seg000:D3BF		    mov	    si,	ax
seg000:D3C1		    mov	    al,	cl
seg000:D3C3		    mov	    ah,	0
seg000:D3C5		    mov	    di,	ax
seg000:D3C7		    mov	    al,	dh
seg000:D3C9		    mov	    ah,	0
seg000:D3CB		    mov	    [bp+var_4],	ax
seg000:D3CE		    push    si
seg000:D3CF		    call    sub_D361
seg000:D3D2		    pop	    cx
seg000:D3D3		    mov	    ds:word_464, ax
seg000:D3D6		    push    di
seg000:D3D7		    call    sub_D361
seg000:D3DA		    pop	    cx
seg000:D3DB		    mov	    ds:word_466, ax
seg000:D3DE		    push    [bp+var_4]
seg000:D3E1		    call    sub_D361
seg000:D3E4		    pop	    cx
seg000:D3E5		    mov	    ds:word_468, ax
seg000:D3E8		    cmp	    [bp+arg_0],	0
seg000:D3EC		    jnz	    short loc_D42D
seg000:D3EE		    mov	    ah,	4
seg000:D3F0		    int	    1Ah		    ; CLOCK - READ DATE	FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
seg000:D3F0					    ; Return: DL = day in BCD
seg000:D3F0					    ; DH = month in BCD
seg000:D3F0					    ; CL = year	in BCD
seg000:D3F0					    ; CH = century (19h	or 20h)
seg000:D3F2		    mov	    al,	dh
seg000:D3F4		    mov	    ah,	0
seg000:D3F6		    mov	    si,	ax
seg000:D3F8		    mov	    al,	dl
seg000:D3FA		    mov	    ah,	0
seg000:D3FC		    mov	    di,	ax
seg000:D3FE		    mov	    al,	cl
seg000:D400		    mov	    ah,	0
seg000:D402		    mov	    [bp+var_4],	ax
seg000:D405		    mov	    al,	ch
seg000:D407		    mov	    ah,	0
seg000:D409		    mov	    [bp+var_2],	ax
seg000:D40C		    push    si
seg000:D40D		    call    sub_D361
seg000:D410		    pop	    cx
seg000:D411		    mov	    ds:word_46A, ax
seg000:D414		    push    di
seg000:D415		    call    sub_D361
seg000:D418		    pop	    cx
seg000:D419		    mov	    ds:word_46C, ax
seg000:D41C		    mov	    ax,	[bp+var_2]
seg000:D41F		    shl	    ax,	8
seg000:D422		    add	    ax,	[bp+var_4]
seg000:D425		    push    ax
seg000:D426		    call    sub_D361
seg000:D429		    pop	    cx
seg000:D42A		    mov	    ds:word_46E, ax
seg000:D42D
seg000:D42D loc_D42D:				    ; CODE XREF: sub_D3AF+3Dj
seg000:D42D		    pop	    dx
seg000:D42E		    pop	    cx
seg000:D42F		    pop	    di
seg000:D430		    pop	    si
seg000:D431		    leave
seg000:D432		    retn
seg000:D432 sub_D3AF	    endp
seg000:D432
seg000:D433
seg000:D433 ; =============== S	U B R O	U T I N	E =======================================
seg000:D433
seg000:D433 ; Attributes: bp-based frame
seg000:D433
seg000:D433 sub_D433	    proc near		    ; CODE XREF: sub_A512+5Cp
seg000:D433					    ; biosOpts_to_ram+1Ep
seg000:D433
seg000:D433 var_8	    = word ptr -8
seg000:D433 var_6	    = word ptr -6
seg000:D433 var_4	    = word ptr -4
seg000:D433 var_2	    = word ptr -2
seg000:D433
seg000:D433		    enter   8, 0
seg000:D437		    push    cx
seg000:D438		    push    dx
seg000:D439		    push    ds:word_464
seg000:D43D		    call    sub_D389
seg000:D440		    pop	    cx
seg000:D441		    mov	    [bp+var_8],	ax
seg000:D444		    push    ds:word_466
seg000:D448		    call    sub_D389
seg000:D44B		    pop	    cx
seg000:D44C		    mov	    [bp+var_6],	ax
seg000:D44F		    push    ds:word_468
seg000:D453		    call    sub_D389
seg000:D456		    pop	    cx
seg000:D457		    mov	    [bp+var_4],	ax
seg000:D45A		    mov	    ah,	2
seg000:D45C		    int	    1Ah		    ; CLOCK - READ REAL	TIME CLOCK (AT,XT286,CONV,PS)
seg000:D45C					    ; Return: CH = hours in BCD
seg000:D45C					    ; CL = minutes in BCD
seg000:D45C					    ; DH = seconds in BCD
seg000:D45E		    mov	    ch,	byte ptr [bp+var_8]
seg000:D461		    mov	    cl,	byte ptr [bp+var_6]
seg000:D464		    mov	    dh,	byte ptr [bp+var_4]
seg000:D467		    mov	    ah,	3
seg000:D469		    int	    1Ah		    ; CLOCK - SET REAL TIME CLOCK (AT,XT286,CONV,PS)
seg000:D469					    ; CH = hours in BCD, CL = minutes in BCD
seg000:D469					    ;  DH = seconds in BCD,DL =	01h if daylight	savings, 00h if	standard time
seg000:D469					    ; Return: CMOS clock set
seg000:D46B		    push    ds:word_46A
seg000:D46F		    call    sub_D389
seg000:D472		    pop	    cx
seg000:D473		    mov	    [bp+var_8],	ax
seg000:D476		    push    ds:word_46C
seg000:D47A		    call    sub_D389
seg000:D47D		    pop	    cx
seg000:D47E		    mov	    [bp+var_6],	ax
seg000:D481		    mov	    ax,	ds:word_46E
seg000:D484		    mov	    bx,	64h ; 'd'
seg000:D487		    cwd
seg000:D488		    idiv    bx
seg000:D48A		    push    dx
seg000:D48B		    call    sub_D389
seg000:D48E		    pop	    cx
seg000:D48F		    mov	    [bp+var_4],	ax
seg000:D492		    mov	    ax,	ds:word_46E
seg000:D495		    mov	    bx,	64h ; 'd'
seg000:D498		    cwd
seg000:D499		    idiv    bx
seg000:D49B		    push    ax
seg000:D49C		    call    sub_D389
seg000:D49F		    pop	    cx
seg000:D4A0		    mov	    [bp+var_2],	ax
seg000:D4A3		    mov	    dh,	byte ptr [bp+var_8]
seg000:D4A6		    mov	    dl,	byte ptr [bp+var_6]
seg000:D4A9		    mov	    cl,	byte ptr [bp+var_4]
seg000:D4AC		    mov	    ch,	byte ptr [bp+var_2]
seg000:D4AF		    mov	    ah,	5
seg000:D4B1		    int	    1Ah		    ; CLOCK - SET DATE IN REAL TIME CLOCK (AT,XT286,CONV,PS)
seg000:D4B1					    ; DL = day in BCD, DH = month in BCD, CL = year in BCD
seg000:D4B1					    ; CH = century (19h	or 20h)
seg000:D4B1					    ; Return: CMOS clock set
seg000:D4B3		    pop	    dx
seg000:D4B4		    pop	    cx
seg000:D4B5		    leave
seg000:D4B6		    retn
seg000:D4B6 sub_D433	    endp
seg000:D4B6
seg000:D4B6 ; ---------------------------------------------------------------------------
seg000:D4B7 aOff	    db ' -OFF-  ',0         ; DATA XREF: sub_A946+44o
seg000:D4B7					    ; sub_A946:loc_A9A1o
seg000:D4C0 aHard	    db ' Hard',0            ; DATA XREF: seg000:Hardo
seg000:D4C6 aEsdi	    db ' ESDI',0            ; DATA XREF: seg000:ESDIo
seg000:D4CC aDriveNotReadyC db 'Drive Not Ready! Can',27h,'t set drive type yet.',0
seg000:D4CC					    ; DATA XREF: seg000:hdd_not_readyo
seg000:D4F7 aNoWinchesterDisk db '      No Winchester Disk Controller.  '
seg000:D4F7					    ; DATA XREF: seg000:no_hdd_ctrlo
seg000:D51D spaces_lineend  db '    ',0             ; DATA XREF: seg000:AB15o
seg000:D51D					    ; seg000:AB2Fo ...
seg000:D522 spaces_line	    db '               ',0  ; DATA XREF: seg000:AA9Ao
seg000:D532 aNotPresent_0   db ' -Not Present- ',0  ; DATA XREF: seg000:loc_AB00o
seg000:D542 aTempest	    db ' Tempest    ',0     ; DATA XREF: seg000:ABFFo
seg000:D54F aDriveType	    db ' Drive Type ',0     ; DATA XREF: seg000:loc_AC16o
seg000:D55C aPasswordCont_0 db ' Password Control: ',0 ; DATA XREF: seg000:pass_200ho
seg000:D570 aMakeNoChanges  db ' Make No Changes ',0 ; DATA XREF: seg000:pass_1600ho
seg000:D582 aModifyPassword db ' Modify Password ',0 ; DATA XREF: seg000:pass_1600h_1o
seg000:D594 aModifyMode	    db '     Modify Mode ',0 ; DATA XREF: seg000:pass_1600h_0o
seg000:D5A6 aCurrentPasswor db 'Current Password:',0 ; DATA XREF: seg000:pass_402ho
seg000:D5B8 aXxxxxxxx	    db 'XXXXXXXX',0         ; DATA XREF: seg000:pass_1D02ho
seg000:D5C1 aNewPassword    db 'New Password:',0    ; DATA XREF: seg000:pass_403ho
seg000:D5CF aXxxxxxxxXxxxxx db 'XXXXXXXX XXXXXXXX',0 ; DATA XREF: seg000:pass_1403ho
seg000:D5E1 aPasswordMode   db 'Password Mode:',0   ; DATA XREF: seg000:pass_404ho
seg000:D5F0 aPrompt	    db 'Prompt',0           ; DATA XREF: seg000:pass_1404ho
seg000:D5F7 aNoprompt	    db 'Noprompt',0         ; DATA XREF: seg000:pass_1D04ho
seg000:D600 aEnterCurrentTi db ' Enter Current Time As HH:MM:SS In 24 Hour Format ',0
seg000:D600					    ; DATA XREF: seg000:bios_input_msgo
seg000:D633 aEnterCurrentDa db ' Enter Current Date as MM/DD/YYYY ',0
seg000:D633					    ; DATA XREF: seg000:BC96o
seg000:D656 aEnterSizeOfM_0 db ' Enter Size of MAIN Base RAM ',0 ; DATA XREF: seg000:BC98o
seg000:D674 aEnterSizeOfMai db ' Enter Size of MAIN Extended RAM ',0
seg000:D674					    ; DATA XREF: seg000:BC9Ao
seg000:D696 aEnterSizeOfEms db ' Enter Size of EMS RAM ',0 ; DATA XREF: seg000:BC9Co
seg000:D6AE aEnterSizeOfA_0 db ' Enter Size of Add-On Base RAM (Memory below 640K) ',0
seg000:D6AE					    ; DATA XREF: seg000:BC9Eo
seg000:D6E2 aEnterSizeOfAdd db ' Enter Size of Add-On Extended RAM (Memory above 1M) ',0
seg000:D6E2					    ; DATA XREF: seg000:BCA0o
seg000:D718 aEnterMachineOp db ' Enter Machine Operating Speed ',0 ; DATA XREF: seg000:BCA2o
seg000:D738 aEnterCacheCont db ' Enter Cache Control Option ',0 ; DATA XREF: seg000:BCA4o
seg000:D755 aEnterSerialPor db ' Enter Serial Port Configuration ',0
seg000:D755					    ; DATA XREF: seg000:BCA6o
seg000:D777 aEnterParallelP db ' Enter Parallel Port Configuration ',0
seg000:D777					    ; DATA XREF: seg000:BCA8o
seg000:D79B aPressSpaceToCh db ' Press SPACE to change system password; BACKSPACE to change passw'
seg000:D79B					    ; DATA XREF: seg000:BCAAo
seg000:D79B		    db 'ord mode',0
seg000:D7E5 aEnterDefaultVi db ' Enter Default Video Display Type Desired ',0
seg000:D7E5					    ; DATA XREF: seg000:BCACo
seg000:D810 aEnterVideoRefr db ' Enter Video Refresh Rate ',0 ; DATA XREF: seg000:BCAEo
seg000:D82B aEnterDriveToBo db ' Enter Drive To Boot From ',0 ; DATA XREF: seg000:BCB0o
seg000:D846 aEnterFloppyDri db ' Enter Floppy Drive Type (3-1/2" or 5-1/4") and capacity ',0
seg000:D846					    ; DATA XREF: seg000:BCB2o
seg000:D880 aEnterHardDiskF db ' Enter Hard Disk (Fixed) Disk Drive Type ',0
seg000:D880					    ; DATA XREF: seg000:BCB4o
seg000:D8AA aNotPresent	    db ' -Not Present-',0   ; DATA XREF: seg000:BCB9o
seg000:D8B9 a514360k	    db '  5-1/4" 360K ',0   ; DATA XREF: seg000:BCBDo
seg000:D8C8 a5141_2m	    db '  5-1/4" 1.2M ',0   ; DATA XREF: seg000:BCC1o
seg000:D8D7 a312720k	    db '  3-1/2" 720K ',0   ; DATA XREF: seg000:BCC5o
seg000:D8E6 a3121_4m	    db '  3-1/2" 1.4M ',0   ; DATA XREF: seg000:stru_BCC9o
seg000:D8F5 aEnterMfm300Mon db 'Enter MFM-300 Monitor ',0 ; DATA XREF: seg000:BCCDo
seg000:D90C aFloppyDrive0_0 db '       Floppy Drive 0 ',0 ; DATA XREF: seg000:BCD1o
seg000:D923 aHardDiskDrive0 db '    Hard Disk Drive 0 ',0 ; DATA XREF: seg000:BCD5o
seg000:D93A aFloppyThenHard db 'Floppy then Hard Disk ',0 ; DATA XREF: seg000:stru_BCD9o
seg000:D951 aEnhancedGraphi db ' Enhanced Graphics ',0 ; DATA XREF: seg000:BCDDo
seg000:D965 aColorCard40x25 db ' Color Card: 40x25 ',0 ; DATA XREF: seg000:BCE1o
seg000:D979 aColorCard80x25 db ' Color Card: 80x25 ',0 ; DATA XREF: seg000:BCE5o
seg000:D98D aMono_Card80x25 db ' Mono. Card: 80x25 ',0 ; DATA XREF: seg000:stru_BCE9o
seg000:D9A1 a60Hz	    db ' 60 Hz ',0          ; DATA XREF: seg000:BCEDo
seg000:D9A9 a50Hz	    db ' 50 Hz ',0          ; DATA XREF: seg000:stru_BCF1o
seg000:D9B1 aSlow	    db ' Slow ',0           ; DATA XREF: seg000:BCF5o
seg000:D9B8 aFast	    db ' Fast ',0           ; DATA XREF: seg000:BCF9o
seg000:D9BF aSmart	    db ' Smart ',0          ; DATA XREF: seg000:stru_BCFDo
seg000:D9C7 aCacheOffQOff   db ' Cache:OFF Q:OFF ',0 ; DATA XREF: seg000:BD01o
seg000:D9D9 aCacheOnQOff    db ' Cache: ON Q:OFF ',0 ; DATA XREF: seg000:BD05o
seg000:D9EB aCacheOnQ1	    db ' Cache: ON Q:  1 ',0 ; DATA XREF: seg000:BD09o
seg000:D9FD aCacheOnQ16	    db ' Cache: ON Q: 16 ',0 ; DATA XREF: seg000:stru_BD0Do
seg000:DA0F aEnable	    db '  Enable ',0        ; DATA XREF: seg000:BD11o
seg000:DA19 aDisable	    db ' Disable ',0        ; DATA XREF: seg000:stru_BD15o
seg000:DA19					    ; seg000:BD19o
seg000:DA23 aLpt1	    db '   LPT1: ',0        ; DATA XREF: seg000:BD1Do
seg000:DA2D aLpt2	    db '   LPT2: ',0        ; DATA XREF: seg000:BD21o
seg000:DA37 aLpt3	    db '   LPT3: ',0        ; DATA XREF: seg000:stru_BD25o
seg000:DA41 aTime	    db ' Time:',0           ; DATA XREF: seg000:stru_BEA0o
seg000:DA48 aDate	    db ' Date:',0           ; DATA XREF: seg000:stru_BEA0o
seg000:DA4F aMainRam	    db ' Main RAM:',0       ; DATA XREF: seg000:stru_BEA0o
seg000:DA5A aAddOnRam	    db ' Add-On RAM:',0     ; DATA XREF: seg000:stru_BEA0o
seg000:DA67 aOperatingSpeed db ' Operating Speed:',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DA79 aCacheControl   db ' Cache Control:',0  ; DATA XREF: seg000:stru_BEA0o
seg000:DA89 aSerialPort1Com db ' Serial Port 1 (COM1):',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DAA0 aSerialPort2Com db ' Serial Port 2 (COM2):',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DAB7 aParallelPortAs db ' Parallel Port Assignment:',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DAD2 aPasswordContro db ' Password Control:',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DAE5 aVideoDisplay   db ' Video Display:',0  ; DATA XREF: seg000:stru_BEA0o
seg000:DAF5 aVideoRefreshRa db ' Video Refresh Rate:',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DB0A aBootDrive	    db ' Boot Drive:',0     ; DATA XREF: seg000:stru_BEA0o
seg000:DB17 aFloppyDrive0   db ' Floppy Drive 0:',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DB28 aFloppyDrive1   db ' Floppy Drive 1:',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DB39 aDiskDrive0	    db ' Disk Drive 0:',0   ; DATA XREF: seg000:stru_BEA0o
seg000:DB48 aDiskDrive1	    db ' Disk Drive 1:',0   ; DATA XREF: seg000:stru_BEA0o
seg000:DB57 asc_DB57	    db '/',0                ; DATA XREF: seg000:stru_BEA0o
seg000:DB59 aBaseExtendedEm db 'BASE  EXTENDED  EMS',0 ; DATA XREF: seg000:stru_BEA0o
seg000:DB6D asc_DB6D	    db '---',0              ; DATA XREF: seg000:stru_BEA0o
seg000:DB71 aTotal	    db 'Total:',0           ; DATA XREF: seg000:stru_BEA0o
seg000:DB78 aCylinders	    db 'Cylinders:',0       ; DATA XREF: seg000:stru_BEA0o
seg000:DB83 aHeads	    db 'Heads:',0           ; DATA XREF: seg000:stru_BEA0o
seg000:DB8A aShipZone	    db 'Ship Zone:',0       ; DATA XREF: seg000:stru_BEA0o
seg000:DB95 aSectors	    db 'Sectors:',0         ; DATA XREF: seg000:stru_BEA0o
seg000:DB9E aPrecomp	    db 'Precomp:',0         ; DATA XREF: seg000:stru_BEA0o
seg000:DBA7 aCapacity	    db 'Capacity:',0        ; DATA XREF: seg000:stru_BEA0o
seg000:DBB1 aSystemHardware db 'System Hardware Setup/Configuration Program',0
seg000:DBB1					    ; DATA XREF: seg000:stru_BEA0o
seg000:DBDD aScpTimeout	    db 'SCP Timeout',0
seg000:DBE9 aUseSpaceBacksp db ' Use Space/Backspace to select values, Arrows to move, Esc when f'
seg000:DBE9					    ; DATA XREF: seg000:CFD3o
seg000:DBE9		    db 'inished ',0
seg000:DC33 aAreYouFinished db ' Are You Finished Making Changes <Y/N>? ',0
seg000:DC33					    ; DATA XREF: seg000:Bios_finish_msgo
seg000:DC5C aPressReturnToS db ' Press Return to save changes or Esc to ignore changes ',0
seg000:DC5C					    ; DATA XREF: seg000:Bios_save_msgo
seg000:DC94 aInvalidTimeHr0 db ' INVALID TIME: Hr=00-23, Min=00-59, Sec=00-59. ESC to cont. ',0
seg000:DC94					    ; DATA XREF: seg000:time_bad_msgo
seg000:DCD1 aInvalidDateMon db ' INVALID DATE: Mon=01-12, Day=01-Max/Mon, Yr=1980-2099. Esc to co'
seg000:DCD1					    ; DATA XREF: seg000:date_bad_msgo
seg000:DCD1		    db 'nt. ',0
seg000:DD17 aInvalidValueVa db ' INVALID VALUE: Value entered is not valid for this field. Esc to'
seg000:DD17					    ; DATA XREF: seg000:value_bad_msgo
seg000:DD17		    db ' cont. ',0
seg000:DD60 ; ---------------------------------------------------------------------------
seg000:DD60 ; START OF FUNCTION	CHUNK FOR sub_0
seg000:DD60
seg000:DD60 reset_vector:			    ; CODE XREF: seg000:reset_vector_0j
seg000:DD60		    cli
seg000:DD61		    cld
seg000:DD62		    mov	    al,	0
seg000:DD64		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DD66		    in	    al,	64h	    ; 8042 keyboard controller status register
seg000:DD66					    ; 7:  PERR	  1=parity error in data received from keyboard
seg000:DD66					    ;	 +----------- AT Mode ----------+------------ PS/2 Mode	------------+
seg000:DD66					    ; 6: |RxTO	  receive (Rx) timeout	| TO	  general timeout (Rx or Tx)|
seg000:DD66					    ; 5: |TxTO	  transmit (Tx)	timeout	| MOBF	  mouse	output buffer full  |
seg000:DD66					    ;	 +------------------------------+-----------------------------------+
seg000:DD66					    ; 4:  INH	  0=keyboard communications inhibited
seg000:DD66					    ; 3:  A2	  0=60h	was the	port last written to, 1=64h was	last
seg000:DD66					    ; 2:  SYS	  distinguishes	reset types: 0=cold reboot, 1=warm reboot
seg000:DD66					    ; 1:  IBF	  1=input buffer full (keyboard	can't accept data)
seg000:DD66					    ; 0:  OBF	  1=output buffer full (data from keyboard is available)
seg000:DD68		    and	    al,	4
seg000:DD6A		    jz	    short cold_boot
seg000:DD6C		    jmp	    loc_DF14
seg000:DD6F ; ---------------------------------------------------------------------------
seg000:DD6F
seg000:DD6F cold_boot:				    ; CODE XREF: sub_0+DD6Aj
seg000:DD6F		    push    dx
seg000:DD70		    push    ax
seg000:DD71		    mov	    dx,	9F4h
seg000:DD74		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:DD74					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:DD74					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:DD74					    ; 3: 1=read	high switches
seg000:DD74					    ; 4: 0=enable RAM parity checking
seg000:DD74					    ; 5: 0=enable I/O channel check
seg000:DD74					    ; 6: 0=hold	keyboard clock low
seg000:DD74					    ; 7: 0=enable kbrd
seg000:DD76		    mov	    al,	8
seg000:DD78		    out	    dx,	al
seg000:DD79		    pop	    ax
seg000:DD7A		    pop	    dx
seg000:DD7B		    jmp	    near ptr sub_0
seg000:DD7E ; ---------------------------------------------------------------------------
seg000:DD7E
seg000:DD7E DMA_PIC_regs:			    ; CODE XREF: sub_0+2CBj
seg000:DD7E		    mov	    si,	offset DMA_PIC_reg_ini
seg000:DD81		    lods    word ptr cs:[si]
seg000:DD83		    mov	    cx,	ax
seg000:DD85
seg000:DD85 DMA_PIC_loop:			    ; CODE XREF: sub_0+DD8Cj
seg000:DD85		    lods    word ptr cs:[si]
seg000:DD87		    mov	    dx,	ax
seg000:DD89		    lods    byte ptr cs:[si]
seg000:DD8B		    out	    dx,	al
seg000:DD8C		    loop    DMA_PIC_loop
seg000:DD8E		    mov	    al,	40h
seg000:DD90		    out	    0F2h, al
seg000:DD92		    or	    al,	80h
seg000:DD94		    out	    0F2h, al
seg000:DD96		    out	    8Ch, al
seg000:DD98		    mov	    al,	1
seg000:DD9A		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DD9C		    mov	    ax,	0C000h
seg000:DD9F		    mov	    es,	ax
seg000:DDA1		    assume es:nothing
seg000:DDA1		    mov	    ax,	es:0
seg000:DDA5		    cmp	    ax,	0AA55h
seg000:DDA8		    jnz	    short init_CGA_MDA
seg000:DDAA		    jmp	    short loc_DDFE
seg000:DDAC ; ---------------------------------------------------------------------------
seg000:DDAC		    nop
seg000:DDAD
seg000:DDAD init_CGA_MDA:			    ; CODE XREF: sub_0+DDA8j
seg000:DDAD		    mov	    al,	2
seg000:DDAF		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DDB1		    mov	    dx,	3B8h
seg000:DDB4		    mov	    al,	1
seg000:DDB6		    out	    dx,	al
seg000:DDB7		    mov	    al,	29h
seg000:DDB9		    out	    dx,	al
seg000:DDBA		    mov	    dx,	3D8h
seg000:DDBD		    mov	    al,	29h
seg000:DDBF		    out	    dx,	al
seg000:DDC0		    mov	    dx,	3D9h
seg000:DDC3		    mov	    al,	30h
seg000:DDC5		    out	    dx,	al
seg000:DDC6		    mov	    si,	offset init_CGA_table
seg000:DDC9		    mov	    cx,	10h
seg000:DDCC		    mov	    bl,	0
seg000:DDCE
seg000:DDCE CGA_MDA_init_loop:			    ; CODE XREF: sub_0+DDE8j
seg000:DDCE		    mov	    al,	bl
seg000:DDD0		    mov	    dx,	3D4h
seg000:DDD3		    out	    dx,	al	    ; Video: CRT cntrlr	addr
seg000:DDD3					    ; horizontal total
seg000:DDD4		    inc	    dx
seg000:DDD5		    mov	    al,	cs:[si]
seg000:DDD8		    out	    dx,	al	    ; Video: CRT controller internal registers
seg000:DDD9		    mov	    dx,	3B4h
seg000:DDDC		    mov	    al,	bl
seg000:DDDE		    out	    dx,	al	    ; Video: CRT cntrlr	addr
seg000:DDDE					    ; horizontal total
seg000:DDDF		    inc	    dx
seg000:DDE0		    mov	    al,	cs:[si+20h]
seg000:DDE4		    out	    dx,	al	    ; Video: CRT controller internal registers
seg000:DDE5		    inc	    si
seg000:DDE6		    inc	    bl
seg000:DDE8		    loop    CGA_MDA_init_loop
seg000:DDEA		    mov	    al,	3
seg000:DDEC		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DDEE		    mov	    ax,	0B000h
seg000:DDF1		    mov	    es,	ax
seg000:DDF3		    assume es:nothing
seg000:DDF3		    mov	    di,	0
seg000:DDF6		    mov	    ax,	720h
seg000:DDF9		    mov	    cx,	4000h
seg000:DDFC		    rep	stosw
seg000:DDFE
seg000:DDFE loc_DDFE:				    ; CODE XREF: sub_0+DDAAj
seg000:DDFE		    mov	    ax,	0B800h
seg000:DE01		    mov	    es,	ax
seg000:DE03		    assume es:nothing
seg000:DE03		    mov	    di,	0
seg000:DE06		    mov	    ax,	720h
seg000:DE09		    mov	    cx,	4000h
seg000:DE0C		    rep	stosw
seg000:DE0E		    mov	    al,	5
seg000:DE10		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DE12		    out	    0FBh, al	    ; AT 80287 data.
seg000:DE12					    ; 286 sends	opcodes	& operands and receives	results.
seg000:DE14		    in	    al,	0EEh
seg000:DE16		    mov	    ax,	40h
seg000:DE19		    mov	    ds,	ax
seg000:DE1B		    assume ds:nothing
seg000:DE1B		    mov	    word ptr ds:72h, 0
seg000:DE21		    mov	    ax,	0F000h
seg000:DE24		    mov	    ss,	ax
seg000:DE26		    assume ss:nothing
seg000:DE26		    mov	    sp,	202h
seg000:DE29		    mov	    al,	7
seg000:DE2B		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DE2D		    mov	    ax,	0E000h
seg000:DE30		    mov	    es,	ax
seg000:DE32		    assume es:nothing
seg000:DE32		    mov	    si,	8000h
seg000:DE35		    mov	    di,	0
seg000:DE38		    mov	    bp,	offset loc_DE3E
seg000:DE3B		    jmp	    ram_test
seg000:DE3E ; ---------------------------------------------------------------------------
seg000:DE3E
seg000:DE3E loc_DE3E:				    ; DATA XREF: sub_0+DE38o
seg000:DE3E		    jnb	    short loc_DE43
seg000:DE40		    jmp	    Error_Fatal
seg000:DE43 ; ---------------------------------------------------------------------------
seg000:DE43
seg000:DE43 loc_DE43:				    ; CODE XREF: sub_0:loc_DE3Ej
seg000:DE43		    mov	    al,	8
seg000:DE45		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DE47		    mov	    ax,	0F000h
seg000:DE4A		    mov	    es,	ax
seg000:DE4C		    assume es:nothing
seg000:DE4C		    mov	    si,	8000h
seg000:DE4F		    mov	    di,	0
seg000:DE52		    mov	    bp,	offset loc_DE58
seg000:DE55		    jmp	    ram_test
seg000:DE58 ; ---------------------------------------------------------------------------
seg000:DE58
seg000:DE58 loc_DE58:				    ; DATA XREF: sub_0+DE52o
seg000:DE58		    jnb	    short Protected_mode_on
seg000:DE5A		    jmp	    Error_Fatal
seg000:DE5D ; ---------------------------------------------------------------------------
seg000:DE5D
seg000:DE5D Protected_mode_on:			    ; CODE XREF: sub_0:loc_DE58j
seg000:DE5D		    mov	    al,	9
seg000:DE5F		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DE61		    mov	    ax,	0F000h
seg000:DE64		    mov	    es,	ax
seg000:DE66		    xor	    si,	si
seg000:DE68		    xor	    di,	di
seg000:DE6A		    mov	    cx,	8000h
seg000:DE6D		    rep	movs word ptr es:[di], word ptr	cs:[si]
seg000:DE70		    mov	    si,	offset loc_DF1A
seg000:DE73		    mov	    di,	offset reset_vector_0
seg000:DE76		    mov	    cx,	3
seg000:DE79		    rep	movs word ptr es:[di], word ptr	cs:[si]
seg000:DE7C		    mov	    si,	offset reset_vector_0
seg000:DE7F		    mov	    di,	offset loc_DF1A
seg000:DE82		    mov	    cx,	3
seg000:DE85		    rep	movs word ptr es:[di], word ptr	cs:[si]
seg000:DE88		    mov	    al,	8Fh
seg000:DE8A		    out	    70h, al	    ; CMOS Memory:
seg000:DE8A					    ;
seg000:DE8C		    mov	    ax,	0F000h
seg000:DE8F		    mov	    es,	ax
seg000:DE91		    mov	    si,	offset GDT_table
seg000:DE94		    lgdt    fword ptr es:[si+8]
seg000:DE99		    nop
seg000:DE9A		    cli
seg000:DE9B		    smsw    ax
seg000:DE9E		    or	    ax,	1
seg000:DEA1		    lmsw    ax
seg000:DEA4		    jmp	    far	ptr 20h:0DEA9h
seg000:DEA9 ; ---------------------------------------------------------------------------
seg000:DEA9
seg000:DEA9 Protected_mode_off:
seg000:DEA9		    mov	    ax,	10h
seg000:DEAC		    mov	    ds,	ax
seg000:DEAE		    assume ds:nothing
seg000:DEAE		    mov	    ax,	18h
seg000:DEB1		    mov	    es,	ax
seg000:DEB3		    assume es:nothing
seg000:DEB3		    xor	    si,	si
seg000:DEB5		    xor	    di,	di
seg000:DEB7		    mov	    cx,	8000h
seg000:DEBA		    cld
seg000:DEBB		    rep	movsw
seg000:DEBD		    mov	    ax,	ds:0
seg000:DEC0		    cmp	    ax,	0AA55h
seg000:DEC3		    pushf
seg000:DEC4		    mov	    eax, cr0
seg000:DEC7		    and	    ax,	0FFFEh
seg000:DECA		    mov	    cr0, eax
seg000:DECD		    jmp	    far	ptr 0F000h:0DED2h
seg000:DED2 ; ---------------------------------------------------------------------------
seg000:DED2		    popf
seg000:DED3		    jnz	    short VGAbios_shadow
seg000:DED5		    jmp	    short loc_DEEB
seg000:DED7 ; ---------------------------------------------------------------------------
seg000:DED7
seg000:DED7 VGAbios_shadow:			    ; CODE XREF: sub_0+DED3j
seg000:DED7		    mov	    ax,	0C000h
seg000:DEDA		    mov	    ds,	ax
seg000:DEDC		    assume ds:nothing
seg000:DEDC		    mov	    ax,	0E000h
seg000:DEDF		    mov	    es,	ax
seg000:DEE1		    assume es:nothing
seg000:DEE1		    mov	    si,	2
seg000:DEE4		    mov	    di,	si
seg000:DEE6		    mov	    cx,	1FFFh
seg000:DEE9		    rep	movsw
seg000:DEEB
seg000:DEEB loc_DEEB:				    ; CODE XREF: sub_0+DED5j
seg000:DEEB		    mov	    al,	0Bh
seg000:DEED		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DEEF		    mov	    al,	59h
seg000:DEF1		    call    test_PS2_ctrl
seg000:DEF4		    jnb	    short loc_DEFC
seg000:DEF6		    mov	    si,	offset aSystemControlP ; "System Control Processor failure! +++"
seg000:DEF9		    jmp	    short print_error_nr
seg000:DEFB ; ---------------------------------------------------------------------------
seg000:DEFB		    nop
seg000:DEFC
seg000:DEFC loc_DEFC:				    ; CODE XREF: sub_0+DEF4j
seg000:DEFC		    mov	    ah,	0B8h
seg000:DEFE		    call    Keyboard_command
seg000:DF01		    mov	    ah,	0F8h
seg000:DF03		    call    Keyboard_command
seg000:DF06		    mov	    ah,	4Bh
seg000:DF08		    call    Keyboard_command
seg000:DF0B		    mov	    ah,	69h
seg000:DF0D		    call    Keyboard_command
seg000:DF10		    mov	    al,	0Ch
seg000:DF12		    out	    80h, al	    ; manufacture's diagnostic checkpoint
seg000:DF14
seg000:DF14 loc_DF14:				    ; CODE XREF: sub_0+DD6Cj
seg000:DF14		    jmp	    far	ptr 0F000h:1050h
seg000:DF19 ; ---------------------------------------------------------------------------
seg000:DF19		    nop
seg000:DF1A
seg000:DF1A loc_DF1A:				    ; DATA XREF: sub_0+DE70o
seg000:DF1A					    ; sub_0+DE7Fo
seg000:DF1A		    jmp	    far	ptr 0F000h:0DD60h
seg000:DF1F ; ---------------------------------------------------------------------------
seg000:DF1F
seg000:DF1F Error_Fatal:			    ; CODE XREF: sub_0+DE40j
seg000:DF1F					    ; sub_0+DE5Aj
seg000:DF1F		    mov	    si,	offset aFatalSlushware ; "Fatal	Slushware RAM Error +++"
seg000:DF22
seg000:DF22 print_error_nr:			    ; CODE XREF: sub_0:loc_2Bj
seg000:DF22					    ; sub_0+233j ...
seg000:DF22		    mov	    bx,	si
seg000:DF24		    mov	    ax,	0B800h
seg000:DF27		    mov	    es,	ax
seg000:DF29		    assume es:nothing
seg000:DF29		    mov	    ax,	0B000h
seg000:DF2C		    mov	    ds,	ax
seg000:DF2E		    assume ds:nothing
seg000:DF2E		    cld
seg000:DF2F		    mov	    ah,	7
seg000:DF31		    mov	    di,	0
seg000:DF34		    mov	    si,	offset aError ;	"+++ ERROR:  "
seg000:DF37
seg000:DF37 loc_DF37:				    ; CODE XREF: sub_0+DF40j
seg000:DF37		    lods    byte ptr cs:[si]
seg000:DF39		    or	    al,	al
seg000:DF3B		    jz	    short loc_DF42
seg000:DF3D		    mov	    [di], ax
seg000:DF3F		    stosw
seg000:DF40		    jmp	    short loc_DF37
seg000:DF42 ; ---------------------------------------------------------------------------
seg000:DF42
seg000:DF42 loc_DF42:				    ; CODE XREF: sub_0+DF3Bj
seg000:DF42		    mov	    si,	bx
seg000:DF44
seg000:DF44 loc_DF44:				    ; CODE XREF: sub_0+DF4Dj
seg000:DF44		    lods    byte ptr cs:[si]
seg000:DF46		    or	    al,	al
seg000:DF48		    jz	    short error_continue
seg000:DF4A		    mov	    [di], ax
seg000:DF4C		    stosw
seg000:DF4D		    jmp	    short loc_DF44
seg000:DF4F ; ---------------------------------------------------------------------------
seg000:DF4F
seg000:DF4F error_continue:			    ; CODE XREF: sub_0+DF48j
seg000:DF4F		    mov	    si,	offset aFatalErrorCann ; "--- Fatal Error: Cannot Continue! ---"
seg000:DF52		    mov	    di,	0F00h
seg000:DF55
seg000:DF55 Print_FatalError:			    ; CODE XREF: sub_0+DF5Ej
seg000:DF55		    lods    byte ptr cs:[si]
seg000:DF57		    or	    al,	al
seg000:DF59		    jz	    short Siren_blink_Error
seg000:DF5B		    mov	    [di], ax
seg000:DF5D		    stosw
seg000:DF5E		    jmp	    short Print_FatalError
seg000:DF60 ; ---------------------------------------------------------------------------
seg000:DF60
seg000:DF60 Siren_blink_Error:			    ; CODE XREF: sub_0+DF59j
seg000:DF60					    ; DATA XREF: sub_0+DF76o
seg000:DF60		    mov	    al,	40h ; '@'
seg000:DF62		    out	    0F2h, al
seg000:DF64		    mov	    cx,	0A6h ; '¦'
seg000:DF67		    mov	    bx,	680h
seg000:DF6A		    mov	    bp,	offset loc_DF6F
seg000:DF6D		    jmp	    short PCSpeaker_On
seg000:DF6F ; ---------------------------------------------------------------------------
seg000:DF6F
seg000:DF6F loc_DF6F:				    ; DATA XREF: sub_0+DF6Ao
seg000:DF6F		    mov	    al,	0FFh
seg000:DF71		    out	    0F2h, al
seg000:DF73		    mov	    cx,	0A6h ; '¦'
seg000:DF76		    mov	    dx,	offset Siren_blink_Error
seg000:DF79		    jmp	    short delay
seg000:DF7B ; ---------------------------------------------------------------------------
seg000:DF7B
seg000:DF7B PCSpeaker_On:			    ; CODE XREF: sub_0+DF6Dj
seg000:DF7B		    mov	    al,	0B6h ; '¶'
seg000:DF7D		    out	    43h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:DF7F		    mov	    al,	bl
seg000:DF81		    out	    42h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:DF83		    mov	    al,	bh
seg000:DF85		    out	    42h, al	    ; Timer 8253-5 (AT:	8254.2).
seg000:DF87		    in	    al,	61h	    ; PC/XT PPI	port B bits:
seg000:DF87					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:DF87					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:DF87					    ; 3: 1=read	high switches
seg000:DF87					    ; 4: 0=enable RAM parity checking
seg000:DF87					    ; 5: 0=enable I/O channel check
seg000:DF87					    ; 6: 0=hold	keyboard clock low
seg000:DF87					    ; 7: 0=enable kbrd
seg000:DF89		    mov	    ah,	al
seg000:DF8B		    or	    al,	3
seg000:DF8D		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:DF8D					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:DF8D					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:DF8D					    ; 3: 1=read	high switches
seg000:DF8D					    ; 4: 0=enable RAM parity checking
seg000:DF8D					    ; 5: 0=enable I/O channel check
seg000:DF8D					    ; 6: 0=hold	keyboard clock low
seg000:DF8D					    ; 7: 0=enable kbrd
seg000:DF8F		    mov	    dx,	offset PCSpeaker_Off
seg000:DF92		    jmp	    short delay
seg000:DF94 ; ---------------------------------------------------------------------------
seg000:DF94
seg000:DF94 PCSpeaker_Off:			    ; DATA XREF: sub_0+DF8Fo
seg000:DF94		    mov	    al,	ah
seg000:DF96		    out	    61h, al	    ; PC/XT PPI	port B bits:
seg000:DF96					    ; 0: Tmr 2 gate ÍËÍ OR 03H=spkr ON
seg000:DF96					    ; 1: Tmr 2 data Í¼	AND 0fcH=spkr OFF
seg000:DF96					    ; 3: 1=read	high switches
seg000:DF96					    ; 4: 0=enable RAM parity checking
seg000:DF96					    ; 5: 0=enable I/O channel check
seg000:DF96					    ; 6: 0=hold	keyboard clock low
seg000:DF96					    ; 7: 0=enable kbrd
seg000:DF98		    jmp	    bp
seg000:DF9A ; ---------------------------------------------------------------------------
seg000:DF9A
seg000:DF9A delay:				    ; CODE XREF: sub_0+DF79j
seg000:DF9A					    ; sub_0+DF92j
seg000:DF9A		    mov	    bx,	cx
seg000:DF9C
seg000:DF9C delay_1:				    ; CODE XREF: sub_0+DFA2j
seg000:DF9C		    mov	    cx,	600h
seg000:DF9F
seg000:DF9F delay_2:				    ; CODE XREF: sub_0:delay_2j
seg000:DF9F		    loop    delay_2
seg000:DFA1		    dec	    bx
seg000:DFA2		    jnz	    short delay_1
seg000:DFA4		    jmp	    dx
seg000:DFA4 ; END OF FUNCTION CHUNK FOR	sub_0
seg000:DFA4 ; ---------------------------------------------------------------------------
seg000:DFA6 aFatalSlushware db 'Fatal Slushware RAM Error +++',0
seg000:DFA6					    ; DATA XREF: sub_0:Error_Fatalo
seg000:DFC4 GDT_table	    db	  0		    ; DATA XREF: load_GDT+24o
seg000:DFC4					    ; sub_0+DE91o ...
seg000:DFC5		    db	  0
seg000:DFC6		    db	  0
seg000:DFC7		    db	  0
seg000:DFC8		    db	  0
seg000:DFC9		    db	  0
seg000:DFCA		    db	  0
seg000:DFCB		    db	  0
seg000:DFCC GDT_base	    db 0FFh
seg000:DFCD		    db 0FFh
seg000:DFCE		    dw offset GDT_table
seg000:DFD0 GDT_size	    dw 930Fh
seg000:DFD2		    db	  0
seg000:DFD3		    db	  0
seg000:DFD4		    db 0FFh
seg000:DFD5		    db 0FFh
seg000:DFD6		    db	  0
seg000:DFD7		    db	  0
seg000:DFD8		    db 0FEh ; þ
seg000:DFD9		    db	93h ; 
seg000:DFDA		    db	  0
seg000:DFDB		    db 0FFh
seg000:DFDC		    db 0FFh
seg000:DFDD		    db 0FFh
seg000:DFDE		    db	  0
seg000:DFDF		    db	  0
seg000:DFE0		    db	0Eh
seg000:DFE1		    db	93h ; 
seg000:DFE2		    db	  0
seg000:DFE3		    db	  0
seg000:DFE4		    db 0FFh
seg000:DFE5		    db 0FFh
seg000:DFE6		    db	  0
seg000:DFE7		    db	  0
seg000:DFE8		    db	0Fh
seg000:DFE9		    db	9Bh ; 
seg000:DFEA		    db	  0
seg000:DFEB		    db	  0
seg000:DFEC		    db 0FFh
seg000:DFED		    db 0FFh
seg000:DFEE		    db	  0
seg000:DFEF		    db	  0
seg000:DFF0		    db	  0
seg000:DFF1		    db	93h ; 
seg000:DFF2		    db	8Fh ; 
seg000:DFF3		    db	  0
seg000:DFF4		    db 0FFh
seg000:DFF5		    db 0FFh
seg000:DFF6		    db	  0
seg000:DFF7		    db	  0
seg000:DFF8		    db 0FFh
seg000:DFF9		    db	9Bh ; 
seg000:DFFA		    db	  0
seg000:DFFB		    db 0FFh
seg000:DFFC		    db	  0
seg000:DFFD		    db	  0
seg000:DFFE		    db	  0
seg000:DFFF		    db	  0
seg000:E000		    db	  0
seg000:E001		    db	  0
seg000:E002		    db	  0
seg000:E003		    db	  0
seg000:E004		    db	  0
seg000:E005		    db	  0
seg000:E006		    db	  0
seg000:E007		    db	  0
seg000:E008		    db	4Dh ; M
seg000:E009		    db	46h ; F
seg000:E00A		    db	19h
seg000:E00B colorText	    dw 0B800h		    ; DATA XREF: erase_screen+5r
seg000:E00B					    ; PutChar_cursor+1Ar ...
seg000:E00D monoText	    dw 0B000h		    ; DATA XREF: erase_screen+14r
seg000:E00D					    ; PutChar_cursor+22r ...
seg000:E00F		    db	  0
seg000:E010		    db	  0
seg000:E011		    db	  0
seg000:E012		    db	  0
seg000:E013		    db	  0
seg000:E014		    db	  0
seg000:E015		    db	  0
seg000:E016		    db	  0
seg000:E017		    db	  0
seg000:E018		    db	  0
seg000:E019		    db	  0
seg000:E01A		    db	  0
seg000:E01B		    db	  0
seg000:E01C		    db	  0
seg000:E01D		    db	  0
seg000:E01E		    db	  0
seg000:E01F		    db	  0
seg000:E020		    db	  0
seg000:E021		    db	  0
seg000:E022		    db	  0
seg000:E023		    db	  0
seg000:E024		    db	  0
seg000:E025		    db	  0
seg000:E026		    db	  0
seg000:E027		    db	  0
seg000:E028		    db	  0
seg000:E029		    db	  0
seg000:E02A		    db	  0
seg000:E02B		    db	  0
seg000:E02C		    db	  0
seg000:E02D		    db	  0
seg000:E02E		    db	  0
seg000:E02F		    db	  0
seg000:E030		    db	  0
seg000:E031		    db	  0
seg000:E032		    db	  0
seg000:E033		    db	  0
seg000:E034		    db	  0
seg000:E035		    db	  0
seg000:E036		    db	  0
seg000:E037		    db	  0
seg000:E038		    db	  0
seg000:E039		    db	  0
seg000:E03A		    db	  0
seg000:E03B		    db	  0
seg000:E03C		    db	  0
seg000:E03D		    db	  0
seg000:E03E		    db	  0
seg000:E03F		    db	  0
seg000:E040		    db	  0
seg000:E041		    db	  0
seg000:E042		    db	  0
seg000:E043		    db	  0
seg000:E044		    db	  0
seg000:E045		    db	  0
seg000:E046		    db	  0
seg000:E047		    db	  0
seg000:E048		    db	  0
seg000:E049		    db	  0
seg000:E04A		    db	  0
seg000:E04B		    db	  0
seg000:E04C		    db	  0
seg000:E04D		    db	  0
seg000:E04E		    db	  0
seg000:E04F		    db	  0
seg000:E050		    db	  0
seg000:E051		    db	  0
seg000:E052		    db	  0
seg000:E053		    db	  0
seg000:E054		    db	  0
seg000:E055		    db	  0
seg000:E056		    db	  0
seg000:E057		    db	  0
seg000:E058		    db	  0
seg000:E059		    db	  0
seg000:E05A		    db	  0
seg000:E05B ; ---------------------------------------------------------------------------
seg000:E05B		    jmp	    near ptr ColrWarm_Boot
seg000:E05B ; ---------------------------------------------------------------------------
seg000:E05E aKeyboardLockAc db '[Keyboard lock active: the keyboard is disabled]',0Dh,0Ah,0
seg000:E05E					    ; DATA XREF: ColrWarm_Boot+515o
seg000:E05E					    ; ColrWarm_Boot+530Fo
seg000:E091 aSystemControlP db 'System Control Processor failure! +++',0
seg000:E091					    ; DATA XREF: ColrWarm_Boot+236o
seg000:E091					    ; ColrWarm_Boot+2BCo ...
seg000:E0B7 aBadConfigurati db 'Bad configuration information found in CMOS! +++',0
seg000:E0B7					    ; DATA XREF: test_cmos:checksum_bado
seg000:E0E8 aPleaseReplaceT db 'Please replace the back-up battery! +++',0
seg000:E0E8					    ; DATA XREF: test_cmos+3Fo
seg000:E110 aBaseMemorySize db 'Base memory size error!  SETUP: ',0
seg000:E110					    ; DATA XREF: ram_cmos_same_size?+15o
seg000:E131 aKActual	    db 'K  ACTUAL: ',0      ; DATA XREF: print_AX?+30o
seg000:E13D aK_1	    db 'K +++',0            ; DATA XREF: print_AX?+3Bo
seg000:E143 aExtendedMemory db 'Extended memory size error!  SETUP: ',0
seg000:E143					    ; DATA XREF: ram_cmos_same_size?+4Ao
seg000:E168 aErrorsFoundP_0 db '--- Errors found!  Please press <Esc> to continue ---',0
seg000:E168					    ; DATA XREF: test_print_error?+9o
seg000:E19E aPassword	    db 'Password: ',0       ; DATA XREF: password_enter+2o
seg000:E1A9 aPasswordSecuri db '+++ Password Security Violation: System Shutdown +++',0
seg000:E1A9					    ; DATA XREF: pass_violation+21o
seg000:E1DE disk_Error_table db	   6		    ; DATA XREF: disk_erro_print+6o
seg000:E1DE					    ; print_DiskError+12o
seg000:E1DF		    dw offset aDriveNotReady ; "Drive not ready"
seg000:E1E1		    db	  2
seg000:E1E2		    dw offset aInvalidAddress ;	"Invalid address mark"
seg000:E1E4		    db	  4
seg000:E1E5		    dw offset aSectorNotFound ;	"Sector	not found"
seg000:E1E7		    db	  5
seg000:E1E8		    dw offset aCannotResetDri ;	"Cannot	reset drive"
seg000:E1EA		    db	  7
seg000:E1EB		    dw offset aCannotResetDri ;	"Cannot	reset drive"
seg000:E1ED		    db	0Bh
seg000:E1EE		    dw offset aDriveNotReady ; "Drive not ready"
seg000:E1F0		    db	10h
seg000:E1F1		    dw offset aInvalidDataRea ;	"Invalid data read"
seg000:E1F3		    db	11h
seg000:E1F4		    dw offset aDataCorrected ; "Data corrected"
seg000:E1F6		    db	40h ; @
seg000:E1F7		    dw offset aSeekFailure  ; "Seek failure"
seg000:E1F9		    db	80h ; 
seg000:E1FA		    dw offset aDriveNotReady ; "Drive not ready"
seg000:E1FC		    db	81h ; 
seg000:E1FD		    dw offset aDiskNotBootabl ;	"Disk not bootable"
seg000:E1FF		    db	82h ; 
seg000:E200		    dw offset aMustRunSetupTo ;	"Must run SETUP	to boot	from Winchester"
seg000:E202		    db 0FFh
seg000:E203		    dw offset aDriveNotReady ; "Drive not ready"
seg000:E205		    db	10h
seg000:E206		    dw offset aCrcError	    ; "CRC error"
seg000:E208		    db	  8
seg000:E209		    dw offset aDmaOverrun   ; "DMA overrun"
seg000:E20B		    db	  1
seg000:E20C		    dw offset aDriveNotReady ; "Drive not ready"
seg000:E20E		    db	  0
seg000:E20F		    dw offset aBadDiskControl ;	"Bad disk controller"
seg000:E211 aDiskError	    db '+++ DISK ERROR:  ',0 ; DATA XREF: disk_erro_printo
seg000:E211					    ; print_DiskError+Co
seg000:E223 plus_newline    db '! +++'              ; DATA XREF: disk_erro_print+23o
seg000:E223					    ; print_DiskError+2Co
seg000:E228 newline	    db 0Dh,0Ah,0	    ; DATA XREF: sub_2253+25o
seg000:E228					    ; sub_2253:loc_2292o ...
seg000:E22B aDriveNotReady  db 'Drive not ready',0  ; DATA XREF: seg000:E1DFo
seg000:E22B					    ; seg000:E1EEo ...
seg000:E23B aCannotResetDri db 'Cannot reset drive',0 ; DATA XREF: seg000:E1E8o
seg000:E23B					    ; seg000:E1EBo
seg000:E24E aInvalidDataRea db 'Invalid data read',0 ; DATA XREF: seg000:E1F1o
seg000:E260 aDataCorrected  db 'Data corrected',0   ; DATA XREF: seg000:E1F4o
seg000:E26F aSeekFailure    db 'Seek failure',0     ; DATA XREF: seg000:E1F7o
seg000:E27C aBadDiskControl db 'Bad disk controller',0 ; DATA XREF: seg000:E20Fo
seg000:E290 aSectorNotFound db 'Sector not found',0 ; DATA XREF: seg000:E1E5o
seg000:E2A1 aInvalidAddress db 'Invalid address mark',0 ; DATA XREF: seg000:E1E2o
seg000:E2B6 aMustRunSetupTo db 'Must run SETUP to boot from Winchester',0
seg000:E2B6					    ; DATA XREF: seg000:E200o
seg000:E2DD aDiskNotBootabl db 'Disk not bootable',0 ; DATA XREF: seg000:E1FDo
seg000:E2EF aCrcError	    db 'CRC error',0        ; DATA XREF: seg000:E206o
seg000:E2F9 aDmaOverrun	    db 'DMA overrun',0      ; DATA XREF: seg000:E209o
seg000:E305 aChooseOneOfTheFo db 0Dh,0Ah	    ; DATA XREF: tests_menu+41o
seg000:E305		    db 0Ah
seg000:E305		    db 0Ah
seg000:E305		    db 0Ah
seg000:E305		    db 0Ah
seg000:E305		    db 0Ah
seg000:E305		    db 9,9,9,'CHOOSE ONE OF THE FOLLOWING:',0Dh,0Ah
seg000:E305		    db 0Ah
seg000:E305		    db 9,9,9,'1. DISK READ TEST',0Dh,0Ah
seg000:E305		    db 9,9,9,'2. KEYBOARD TEST',0Dh,0Ah
seg000:E305		    db 9,9,9,'3. BASE MEMORY TEST',0Dh,0Ah
seg000:E305		    db 9,9,9,'4. EXTENDED MEMORY TEST',0Dh,0Ah
seg000:E305		    db 9,9,9,'5. POWER-UP TEST',0Dh,0Ah
seg000:E305		    db 9,9,9,'6. EXIT',0Dh,0Ah
seg000:E305		    db 0Ah
seg000:E305		    db 0Ah
seg000:E305		    db 9,9,9,'ENTER YOUR CHOICE: ',0
seg000:E3C7		    db	  0
seg000:E3C8		    db	  0
seg000:E3C9		    db	  0
seg000:E3CA		    db	  0
seg000:E3CB		    db	  0
seg000:E3CC		    db	  0
seg000:E3CD		    db	  0
seg000:E3CE		    db	  0
seg000:E3CF		    db	  0
seg000:E3D0		    db	  0
seg000:E3D1		    db	  0
seg000:E3D2		    db	  0
seg000:E3D3		    db	  0
seg000:E3D4		    db	  0
seg000:E3D5		    db	  0
seg000:E3D6		    db	  0
seg000:E3D7		    db	  0
seg000:E3D8		    db	  0
seg000:E3D9		    db	  0
seg000:E3DA		    db	  0
seg000:E3DB		    db	  0
seg000:E3DC		    db	  0
seg000:E3DD		    db	  0
seg000:E3DE		    db	  0
seg000:E3DF		    db	  0
seg000:E3E0		    db	  0
seg000:E3E1		    db	  0
seg000:E3E2		    db	  0
seg000:E3E3		    db	  0
seg000:E3E4		    db	  0
seg000:E3E5		    db	  0
seg000:E3E6		    db	  0
seg000:E3E7		    db	  0
seg000:E3E8		    db	  0
seg000:E3E9		    db	  0
seg000:E3EA		    db	  0
seg000:E3EB		    db	  0
seg000:E3EC		    db	  0
seg000:E3ED		    db	  0
seg000:E3EE		    db	  0
seg000:E3EF		    db	  0
seg000:E3F0		    db	  0
seg000:E3F1		    db	  0
seg000:E3F2		    db	  0
seg000:E3F3		    db	  0
seg000:E3F4		    db	  0
seg000:E3F5		    db	  0
seg000:E3F6		    db	  0
seg000:E3F7		    db	  0
seg000:E3F8		    db	  0
seg000:E3F9		    db	  0
seg000:E3FA		    db	  0
seg000:E3FB		    db	  0
seg000:E3FC		    db	  0
seg000:E3FD		    db	  0
seg000:E3FE		    db	  0
seg000:E3FF		    db	  0
seg000:E400		    db	  0
seg000:E401 word_E401	    dw 132h		    ; DATA XREF: ide_detect_init?+59o
seg000:E401					    ; sub_34DC+Bo
seg000:E403		    db	  4
seg000:E404		    db	  0
seg000:E405		    db	  0
seg000:E406		    db	80h ; 
seg000:E407		    db	  0
seg000:E408		    db	  0
seg000:E409		    db	  0
seg000:E40A		    db	  0
seg000:E40B		    db	  0
seg000:E40C		    db	  0
seg000:E40D		    db	31h ; 1
seg000:E40E		    db	  1
seg000:E40F		    db	11h
seg000:E410		    db	  0
seg000:E411		    db	67h ; g
seg000:E412		    db	  2
seg000:E413		    db	  4
seg000:E414		    db	  0
seg000:E415		    db	  0
seg000:E416		    db	2Ch ; ,
seg000:E417		    db	  1
seg000:E418		    db	  0
seg000:E419		    db	  0
seg000:E41A		    db	  0
seg000:E41B		    db	  0
seg000:E41C		    db	  0
seg000:E41D		    db	67h ; g
seg000:E41E		    db	  2
seg000:E41F		    db	11h
seg000:E420		    db	  0
seg000:E421		    db 0BBh ; »
seg000:E422		    db	  2
seg000:E423		    db	  5
seg000:E424		    db	  0
seg000:E425		    db	  0
seg000:E426		    db	  0
seg000:E427		    db	  1
seg000:E428		    db	  0
seg000:E429		    db	  0
seg000:E42A		    db	  0
seg000:E42B		    db	  0
seg000:E42C		    db	  0
seg000:E42D		    db 0C6h ; Æ
seg000:E42E		    db	  2
seg000:E42F		    db	11h
seg000:E430		    db	  0
seg000:E431		    db 0ACh ; ¬
seg000:E432		    db	  3
seg000:E433		    db	  8
seg000:E434		    db	  0
seg000:E435		    db	  0
seg000:E436		    db	  0
seg000:E437		    db	  2
seg000:E438		    db	  0
seg000:E439		    db	  0
seg000:E43A		    db	  0
seg000:E43B		    db	  0
seg000:E43C		    db	  0
seg000:E43D		    db 0ACh ; ¬
seg000:E43E		    db	  3
seg000:E43F		    db	11h
seg000:E440		    db	  0
seg000:E441		    db 0ACh ; ¬
seg000:E442		    db	  3
seg000:E443		    db	  6
seg000:E444		    db	  0
seg000:E445		    db	  0
seg000:E446		    db	  0
seg000:E447		    db	  2
seg000:E448		    db	  0
seg000:E449		    db	  0
seg000:E44A		    db	  0
seg000:E44B		    db	  0
seg000:E44C		    db	  0
seg000:E44D		    db 0ACh ; ¬
seg000:E44E		    db	  3
seg000:E44F		    db	11h
seg000:E450		    db	  0
seg000:E451		    db	67h ; g
seg000:E452		    db	  2
seg000:E453		    db	  4
seg000:E454		    db	  0
seg000:E455		    db	  0
seg000:E456		    db 0FFh
seg000:E457		    db 0FFh
seg000:E458		    db	  0
seg000:E459		    db	  0
seg000:E45A		    db	  0
seg000:E45B		    db	  0
seg000:E45C		    db	  0
seg000:E45D		    db	67h ; g
seg000:E45E		    db	  2
seg000:E45F		    db	11h
seg000:E460		    db	  0
seg000:E461		    db 0BBh ; »
seg000:E462		    db	  2
seg000:E463		    db	  7
seg000:E464		    db	  0
seg000:E465		    db	  0
seg000:E466		    db	  0
seg000:E467		    db	  1
seg000:E468		    db	  0
seg000:E469		    db	  0
seg000:E46A		    db	  0
seg000:E46B		    db	  0
seg000:E46C		    db	  0
seg000:E46D		    db 0C6h ; Æ
seg000:E46E		    db	  2
seg000:E46F		    db	11h
seg000:E470		    db	  0
seg000:E471		    db 0DDh ; Ý
seg000:E472		    db	  2
seg000:E473		    db	  5
seg000:E474		    db	  0
seg000:E475		    db	  0
seg000:E476		    db 0FFh
seg000:E477		    db 0FFh
seg000:E478		    db	  0
seg000:E479		    db	  0
seg000:E47A		    db	  0
seg000:E47B		    db	  0
seg000:E47C		    db	  0
seg000:E47D		    db 0DDh ; Ý
seg000:E47E		    db	  2
seg000:E47F		    db	11h
seg000:E480		    db	  0
seg000:E481		    db	84h ; 
seg000:E482		    db	  3
seg000:E483		    db	0Fh
seg000:E484		    db	  0
seg000:E485		    db	  0
seg000:E486		    db 0FFh
seg000:E487		    db 0FFh
seg000:E488		    db	  0
seg000:E489		    db	  8
seg000:E48A		    db	  0
seg000:E48B		    db	  0
seg000:E48C		    db	  0
seg000:E48D		    db	85h ; 
seg000:E48E		    db	  3
seg000:E48F		    db	11h
seg000:E490		    db	  0
seg000:E491		    db	9Dh ; 
seg000:E492		    db	  3
seg000:E493		    db	  5
seg000:E494		    db	  0
seg000:E495		    db	  0
seg000:E496		    db	  0
seg000:E497		    db	  0
seg000:E498		    db	  0
seg000:E499		    db	  0
seg000:E49A		    db	  0
seg000:E49B		    db	  0
seg000:E49C		    db	  0
seg000:E49D		    db	9Eh ; 
seg000:E49E		    db	  3
seg000:E49F		    db	11h
seg000:E4A0		    db	  0
seg000:E4A1		    db	57h ; W
seg000:E4A2		    db	  3
seg000:E4A3		    db	  5
seg000:E4A4		    db	  0
seg000:E4A5		    db	  0
seg000:E4A6		    db 0FFh
seg000:E4A7		    db 0FFh
seg000:E4A8		    db	  0
seg000:E4A9		    db	  0
seg000:E4AA		    db	  0
seg000:E4AB		    db	  0
seg000:E4AC		    db	  0
seg000:E4AD		    db	57h ; W
seg000:E4AE		    db	  3
seg000:E4AF		    db	11h
seg000:E4B0		    db	  0
seg000:E4B1		    db	57h ; W
seg000:E4B2		    db	  3
seg000:E4B3		    db	  7
seg000:E4B4		    db	  0
seg000:E4B5		    db	  0
seg000:E4B6		    db 0FFh
seg000:E4B7		    db 0FFh
seg000:E4B8		    db	  0
seg000:E4B9		    db	  0
seg000:E4BA		    db	  0
seg000:E4BB		    db	  0
seg000:E4BC		    db	  0
seg000:E4BD		    db	57h ; W
seg000:E4BE		    db	  3
seg000:E4BF		    db	11h
seg000:E4C0		    db	  0
seg000:E4C1		    db	32h ; 2
seg000:E4C2		    db	  1
seg000:E4C3		    db	  8
seg000:E4C4		    db	  0
seg000:E4C5		    db	  0
seg000:E4C6		    db	80h ; 
seg000:E4C7		    db	  0
seg000:E4C8		    db	  0
seg000:E4C9		    db	  0
seg000:E4CA		    db	  0
seg000:E4CB		    db	  0
seg000:E4CC		    db	  0
seg000:E4CD		    db	3Fh ; ?
seg000:E4CE		    db	  1
seg000:E4CF		    db	11h
seg000:E4D0		    db	  0
seg000:E4D1		    db 0DDh ; Ý
seg000:E4D2		    db	  2
seg000:E4D3		    db	  7
seg000:E4D4		    db	  0
seg000:E4D5		    db	  0
seg000:E4D6		    db 0FFh
seg000:E4D7		    db 0FFh
seg000:E4D8		    db	  0
seg000:E4D9		    db	  0
seg000:E4DA		    db	  0
seg000:E4DB		    db	  0
seg000:E4DC		    db	  0
seg000:E4DD		    db 0DDh ; Ý
seg000:E4DE		    db	  2
seg000:E4DF		    db	11h
seg000:E4E0		    db	  0
seg000:E4E1		    db	  0
seg000:E4E2		    db	  0
seg000:E4E3		    db	  0
seg000:E4E4		    db	  0
seg000:E4E5		    db	  0
seg000:E4E6		    db	  0
seg000:E4E7		    db	  0
seg000:E4E8		    db	  0
seg000:E4E9		    db	  0
seg000:E4EA		    db	  0
seg000:E4EB		    db	  0
seg000:E4EC		    db	  0
seg000:E4ED		    db	  0
seg000:E4EE		    db	  0
seg000:E4EF		    db	  0
seg000:E4F0		    db	  0
seg000:E4F1		    db	64h ; d
seg000:E4F2		    db	  2
seg000:E4F3		    db	  4
seg000:E4F4		    db	  0
seg000:E4F5		    db	  0
seg000:E4F6		    db	  0
seg000:E4F7		    db	  0
seg000:E4F8		    db	  0
seg000:E4F9		    db	  0
seg000:E4FA		    db	  0
seg000:E4FB		    db	  0
seg000:E4FC		    db	  0
seg000:E4FD		    db	97h ; 
seg000:E4FE		    db	  2
seg000:E4FF		    db	11h
seg000:E500		    db	  0
seg000:E501		    db 0D1h ; Ñ
seg000:E502		    db	  3
seg000:E503		    db	  5
seg000:E504		    db	  0
seg000:E505		    db	  0
seg000:E506		    db	2Ch ; ,
seg000:E507		    db	  1
seg000:E508		    db	  0
seg000:E509		    db	  0
seg000:E50A		    db	  0
seg000:E50B		    db	  0
seg000:E50C		    db	  0
seg000:E50D		    db 0D1h ; Ñ
seg000:E50E		    db	  3
seg000:E50F		    db	11h
seg000:E510		    db	  0
seg000:E511		    db 0D1h ; Ñ
seg000:E512		    db	  3
seg000:E513		    db	  7
seg000:E514		    db	  0
seg000:E515		    db	  0
seg000:E516		    db 0FFh
seg000:E517		    db 0FFh
seg000:E518		    db	  0
seg000:E519		    db	  0
seg000:E51A		    db	  0
seg000:E51B		    db	  0
seg000:E51C		    db	  0
seg000:E51D		    db 0D1h ; Ñ
seg000:E51E		    db	  3
seg000:E51F		    db	11h
seg000:E520		    db	  0
seg000:E521		    db	  0
seg000:E522		    db	  4
seg000:E523		    db	  7
seg000:E524		    db	  0
seg000:E525		    db	  0
seg000:E526		    db	  0
seg000:E527		    db	  2
seg000:E528		    db	  0
seg000:E529		    db	  0
seg000:E52A		    db	  0
seg000:E52B		    db	  0
seg000:E52C		    db	  0
seg000:E52D		    db 0FFh
seg000:E52E		    db	  3
seg000:E52F		    db	11h
seg000:E530		    db	  0
seg000:E531		    db 0DDh ; Ý
seg000:E532		    db	  2
seg000:E533		    db	  5
seg000:E534		    db	  0
seg000:E535		    db	  0
seg000:E536		    db	2Ch ; ,
seg000:E537		    db	  1
seg000:E538		    db	  0
seg000:E539		    db	  0
seg000:E53A		    db	  0
seg000:E53B		    db	  0
seg000:E53C		    db	  0
seg000:E53D		    db 0DCh ; Ü
seg000:E53E		    db	  2
seg000:E53F		    db	11h
seg000:E540		    db	  0
seg000:E541		    db 0DDh ; Ý
seg000:E542		    db	  2
seg000:E543		    db	  7
seg000:E544		    db	  0
seg000:E545		    db	  0
seg000:E546		    db	2Ch ; ,
seg000:E547		    db	  1
seg000:E548		    db	  0
seg000:E549		    db	  0
seg000:E54A		    db	  0
seg000:E54B		    db	  0
seg000:E54C		    db	  0
seg000:E54D		    db 0DCh ; Ü
seg000:E54E		    db	  2
seg000:E54F		    db	11h
seg000:E550		    db	  0
seg000:E551		    db 0DDh ; Ý
seg000:E552		    db	  2
seg000:E553		    db	  5
seg000:E554		    db	  0
seg000:E555		    db	  0
seg000:E556		    db	2Ch ; ,
seg000:E557		    db	  1
seg000:E558		    db	  0
seg000:E559		    db	  0
seg000:E55A		    db	  0
seg000:E55B		    db	  0
seg000:E55C		    db	  0
seg000:E55D		    db 0DDh ; Ý
seg000:E55E		    db	  2
seg000:E55F		    db	11h
seg000:E560		    db	  0
seg000:E561		    db	32h ; 2
seg000:E562		    db	  1
seg000:E563		    db	  4
seg000:E564		    db	  0
seg000:E565		    db	  0
seg000:E566		    db	  0
seg000:E567		    db	  0
seg000:E568		    db	  0
seg000:E569		    db	  0
seg000:E56A		    db	  0
seg000:E56B		    db	  0
seg000:E56C		    db	  0
seg000:E56D		    db	50h ; P
seg000:E56E		    db	  1
seg000:E56F		    db	11h
seg000:E570		    db	  0
seg000:E571 unk_E571	    db	64h ; d		    ; DATA XREF: sub_98A5+D2o
seg000:E572		    db	  2
seg000:E573		    db	  2
seg000:E574		    db	  0
seg000:E575		    db	  0
seg000:E576		    db 0FFh
seg000:E577		    db 0FFh
seg000:E578		    db	  0
seg000:E579		    db	  0
seg000:E57A		    db	  0
seg000:E57B		    db	  0
seg000:E57C		    db	  0
seg000:E57D		    db	63h ; c
seg000:E57E		    db	  2
seg000:E57F		    db	11h
seg000:E580		    db	  3
seg000:E581 unk_E581	    db	67h ; g		    ; DATA XREF: sub_98A5+DCo
seg000:E582		    db	  2
seg000:E583		    db	  6
seg000:E584		    db	  0
seg000:E585		    db	  0
seg000:E586		    db	2Ch ; ,
seg000:E587		    db	  1
seg000:E588		    db	  0
seg000:E589		    db	  0
seg000:E58A		    db	  0
seg000:E58B		    db	  0
seg000:E58C		    db	  0
seg000:E58D		    db	67h ; g
seg000:E58E		    db	  2
seg000:E58F		    db	11h
seg000:E590		    db	  0
seg000:E591		    db 0CEh ; Î
seg000:E592		    db	  1
seg000:E593		    db	  8
seg000:E594		    db	  0
seg000:E595		    db	  0
seg000:E596		    db	  0
seg000:E597		    db	  1
seg000:E598		    db	  0
seg000:E599		    db	  0
seg000:E59A		    db	  0
seg000:E59B		    db	  0
seg000:E59C		    db	  0
seg000:E59D		    db 0FFh
seg000:E59E		    db	  1
seg000:E59F		    db	11h
seg000:E5A0		    db	  0
seg000:E5A1		    db	34h ; 4
seg000:E5A2		    db	  3
seg000:E5A3		    db	  3
seg000:E5A4		    db	  0
seg000:E5A5		    db	  0
seg000:E5A6		    db 0FFh
seg000:E5A7		    db 0FFh
seg000:E5A8		    db	  0
seg000:E5A9		    db	  0
seg000:E5AA		    db	  0
seg000:E5AB		    db	  0
seg000:E5AC		    db	  0
seg000:E5AD		    db	34h ; 4
seg000:E5AE		    db	  3
seg000:E5AF		    db	11h
seg000:E5B0		    db	  0
seg000:E5B1		    db 0D5h ; Õ
seg000:E5B2		    db	  3
seg000:E5B3		    db	  7
seg000:E5B4		    db	  0
seg000:E5B5		    db	  0
seg000:E5B6		    db 0FFh
seg000:E5B7		    db 0FFh
seg000:E5B8		    db	  0
seg000:E5B9		    db	  0
seg000:E5BA		    db	  0
seg000:E5BB		    db	  0
seg000:E5BC		    db	  0
seg000:E5BD		    db 0DAh ; Ú
seg000:E5BE		    db	  3
seg000:E5BF		    db	11h
seg000:E5C0		    db	  0
seg000:E5C1		    db 0F2h ; ò
seg000:E5C2		    db	  2
seg000:E5C3		    db	0Bh
seg000:E5C4		    db	  0
seg000:E5C5		    db	  0
seg000:E5C6		    db 0FFh
seg000:E5C7		    db 0FFh
seg000:E5C8		    db	  0
seg000:E5C9		    db	  8
seg000:E5CA		    db	  0
seg000:E5CB		    db	  0
seg000:E5CC		    db	  0
seg000:E5CD		    db 0F2h ; ò
seg000:E5CE		    db	  2
seg000:E5CF		    db	11h
seg000:E5D0		    db	  0
seg000:E5D1		    db	96h ; 
seg000:E5D2		    db	  3
seg000:E5D3		    db	0Fh
seg000:E5D4		    db	  0
seg000:E5D5		    db	  0
seg000:E5D6		    db 0FFh
seg000:E5D7		    db 0FFh
seg000:E5D8		    db	  0
seg000:E5D9		    db	  8
seg000:E5DA		    db	  0
seg000:E5DB		    db	  0
seg000:E5DC		    db	  0
seg000:E5DD		    db	97h ; 
seg000:E5DE		    db	  3
seg000:E5DF		    db	11h
seg000:E5E0		    db	  0
seg000:E5E1		    db 0DBh ; Û
seg000:E5E2		    db	  3
seg000:E5E3		    db	  5
seg000:E5E4		    db	  0
seg000:E5E5		    db	  0
seg000:E5E6		    db 0FFh
seg000:E5E7		    db 0FFh
seg000:E5E8		    db	  0
seg000:E5E9		    db	  0
seg000:E5EA		    db	  0
seg000:E5EB		    db	  0
seg000:E5EC		    db	  0
seg000:E5ED		    db 0DBh ; Û
seg000:E5EE		    db	  3
seg000:E5EF		    db	11h
seg000:E5F0		    db	  0
seg000:E5F1		    db	3Eh ; >
seg000:E5F2		    db	  3
seg000:E5F3		    db	  6
seg000:E5F4		    db	  0
seg000:E5F5		    db	  0
seg000:E5F6		    db	90h ; 
seg000:E5F7		    db	  1
seg000:E5F8		    db	  0
seg000:E5F9		    db	  0
seg000:E5FA		    db	  0
seg000:E5FB		    db	  0
seg000:E5FC		    db	  0
seg000:E5FD		    db	3Eh ; >
seg000:E5FE		    db	  3
seg000:E5FF		    db	11h
seg000:E600		    db	  0
seg000:E601		    db 0B9h ; ¹
seg000:E602		    db	  2
seg000:E603		    db	  4
seg000:E604		    db	  0
seg000:E605		    db	  0
seg000:E606		    db	  0
seg000:E607		    db	  0
seg000:E608		    db	  0
seg000:E609		    db	  0
seg000:E60A		    db	  0
seg000:E60B		    db	  0
seg000:E60C		    db	  0
seg000:E60D		    db 0B8h ; ¸
seg000:E60E		    db	  2
seg000:E60F		    db	11h
seg000:E610		    db	  0
seg000:E611		    db	67h ; g
seg000:E612		    db	  2
seg000:E613		    db	  4
seg000:E614		    db	  0
seg000:E615		    db	  0
seg000:E616		    db 0FFh
seg000:E617		    db 0FFh
seg000:E618		    db	  0
seg000:E619		    db	  0
seg000:E61A		    db	  0
seg000:E61B		    db	  0
seg000:E61C		    db	  0
seg000:E61D		    db	97h ; 
seg000:E61E		    db	  2
seg000:E61F		    db	11h
seg000:E620		    db	  2
seg000:E621		    db	67h ; g
seg000:E622		    db	  2
seg000:E623		    db	  4
seg000:E624		    db	  0
seg000:E625		    db	  0
seg000:E626		    db	80h ; 
seg000:E627		    db	  0
seg000:E628		    db	  0
seg000:E629		    db	  0
seg000:E62A		    db	  0
seg000:E62B		    db	  0
seg000:E62C		    db	  0
seg000:E62D		    db	97h ; 
seg000:E62E		    db	  2
seg000:E62F		    db	11h
seg000:E630		    db	  0
seg000:E631		    db	  0
seg000:E632		    db	  4
seg000:E633		    db	  9
seg000:E634		    db	  0
seg000:E635		    db	  0
seg000:E636		    db 0FFh
seg000:E637		    db 0FFh
seg000:E638		    db	  0
seg000:E639		    db	  8
seg000:E63A		    db	  0
seg000:E63B		    db	  0
seg000:E63C		    db	  0
seg000:E63D		    db	  0
seg000:E63E		    db	  4
seg000:E63F		    db	11h
seg000:E640		    db	  0
seg000:E641		    db	  0
seg000:E642 unk_E642	    db	  4		    ; DATA XREF: seg000:3929o
seg000:E643		    db	  5
seg000:E644		    db	  0
seg000:E645		    db	  0
seg000:E646		    db	  0
seg000:E647		    db	  2
seg000:E648		    db	  0
seg000:E649		    db	  0
seg000:E64A		    db	  0
seg000:E64B		    db	  0
seg000:E64C		    db	  0
seg000:E64D		    db	  0
seg000:E64E		    db	  4
seg000:E64F		    db	11h
seg000:E650		    db	  0
seg000:E651		    db	34h ; 4
seg000:E652		    db	  3
seg000:E653		    db	  6
seg000:E654		    db	  0
seg000:E655		    db	  0
seg000:E656		    db 0FFh
seg000:E657		    db 0FFh
seg000:E658		    db	  0
seg000:E659		    db	  0
seg000:E65A		    db	  0
seg000:E65B		    db	  0
seg000:E65C		    db	  0
seg000:E65D		    db	8Eh ; 
seg000:E65E		    db	  3
seg000:E65F		    db	11h
seg000:E660		    db	  0
seg000:E661		    db	67h ; g
seg000:E662		    db	  2
seg000:E663		    db	  4
seg000:E664		    db	  0
seg000:E665		    db	  0
seg000:E666		    db	32h ; 2
seg000:E667		    db	  1
seg000:E668		    db	  0
seg000:E669		    db	  0
seg000:E66A		    db	  0
seg000:E66B		    db	  0
seg000:E66C		    db	  0
seg000:E66D		    db 0ACh ; ¬
seg000:E66E		    db	  2
seg000:E66F		    db	11h
seg000:E670		    db	  2
seg000:E671		    db	9Dh ; 
seg000:E672		    db	  3
seg000:E673		    db	  9
seg000:E674		    db	  0
seg000:E675		    db	  0
seg000:E676		    db	  0
seg000:E677		    db	  0
seg000:E678		    db	  0
seg000:E679		    db	  8
seg000:E67A		    db	  0
seg000:E67B		    db	  0
seg000:E67C		    db	  0
seg000:E67D		    db	9Ch ; 
seg000:E67E		    db	  3
seg000:E67F		    db	11h
seg000:E680		    db	  0
seg000:E681		    db	  0
seg000:E682		    db	  4
seg000:E683		    db	  8
seg000:E684		    db	  0
seg000:E685		    db	  0
seg000:E686		    db	  0
seg000:E687		    db	  2
seg000:E688		    db	  0
seg000:E689		    db	  0
seg000:E68A		    db	  0
seg000:E68B		    db	  0
seg000:E68C		    db	  0
seg000:E68D		    db 0FFh
seg000:E68E		    db	  3
seg000:E68F		    db	11h
seg000:E690		    db	  0
seg000:E691		    db	  0
seg000:E692		    db	  4
seg000:E693		    db	  5
seg000:E694		    db	  0
seg000:E695		    db	  0
seg000:E696		    db	  0
seg000:E697		    db	  4
seg000:E698		    db	  0
seg000:E699		    db	  0
seg000:E69A		    db	  0
seg000:E69B		    db	  0
seg000:E69C		    db	  0
seg000:E69D		    db 0FFh
seg000:E69E		    db	  3
seg000:E69F		    db	11h
seg000:E6A0		    db	  0
seg000:E6A1		    db	67h ; g
seg000:E6A2		    db	  2
seg000:E6A3		    db	  8
seg000:E6A4		    db	  0
seg000:E6A5		    db	  0
seg000:E6A6		    db 0FFh
seg000:E6A7		    db 0FFh
seg000:E6A8		    db	  0
seg000:E6A9		    db	  0
seg000:E6AA		    db	  0
seg000:E6AB		    db	  0
seg000:E6AC		    db	  0
seg000:E6AD		    db	67h ; g
seg000:E6AE		    db	  2
seg000:E6AF		    db	11h
seg000:E6B0		    db	  0
seg000:E6B1		    db 0DDh ; Ý
seg000:E6B2		    db	  3
seg000:E6B3		    db	  5
seg000:E6B4		    db	  0
seg000:E6B5		    db	  0
seg000:E6B6		    db	  0
seg000:E6B7		    db	  0
seg000:E6B8		    db	  0
seg000:E6B9		    db	  0
seg000:E6BA		    db	  0
seg000:E6BB		    db	  0
seg000:E6BC		    db	  0
seg000:E6BD		    db 0DCh ; Ü
seg000:E6BE		    db	  3
seg000:E6BF		    db	11h
seg000:E6C0		    db	  0
seg000:E6C1		    db 0D0h ; Ð
seg000:E6C2		    db	  3
seg000:E6C3		    db	  5
seg000:E6C4		    db	  0
seg000:E6C5 unk_E6C5	    db	  0		    ; DATA XREF: seg000:392Bo
seg000:E6C6		    db 0FFh
seg000:E6C7		    db 0FFh
seg000:E6C8		    db	  0
seg000:E6C9		    db	  0
seg000:E6CA		    db	  0
seg000:E6CB		    db	  0
seg000:E6CC		    db	  0
seg000:E6CD		    db 0D0h ; Ð
seg000:E6CE		    db	  3
seg000:E6CF		    db	11h
seg000:E6D0		    db	  2
seg000:E6D1		    db	  8
seg000:E6D2		    db	  3
seg000:E6D3		    db	  8
seg000:E6D4		    db	  0
seg000:E6D5		    db	  0
seg000:E6D6		    db 0FFh
seg000:E6D7		    db 0FFh
seg000:E6D8		    db	  0
seg000:E6D9		    db	  0
seg000:E6DA		    db	  0
seg000:E6DB		    db	  0
seg000:E6DC		    db	  0
seg000:E6DD		    db	  7
seg000:E6DE		    db	  3
seg000:E6DF		    db	21h ; !
seg000:E6E0		    db	  0
seg000:E6E1		    db	  0
seg000:E6E2		    db	  0
seg000:E6E3		    db	  0
seg000:E6E4		    db	  0
seg000:E6E5		    db	  0
seg000:E6E6		    db	  0
seg000:E6E7		    db	  0
seg000:E6E8		    db	  0
seg000:E6E9		    db	  0
seg000:E6EA		    db	  0
seg000:E6EB		    db	  0
seg000:E6EC		    db	  0
seg000:E6ED		    db	  0
seg000:E6EE		    db	  0
seg000:E6EF		    db	  0
seg000:E6F0		    db	  0
seg000:E6F1		    db	  0
seg000:E6F2
seg000:E6F2 ; =============== S	U B R O	U T I N	E =======================================
seg000:E6F2
seg000:E6F2 ; Attributes: bp-based frame thunk
seg000:E6F2
seg000:E6F2 sub_E6F2	    proc far		    ; DATA XREF: seg000:FF15o
seg000:E6F2		    jmp	    loc_3517
seg000:E6F2 sub_E6F2	    endp
seg000:E6F2
seg000:E6F2 ; ---------------------------------------------------------------------------
seg000:E6F5		    db	  8
seg000:E6F6		    db	  0
seg000:E6F7		    db 0FCh ; ü
seg000:E6F8		    db	  1
seg000:E6F9		    db	  0
seg000:E6FA		    db	70h ; p
seg000:E6FB		    db	  0
seg000:E6FC		    db	  0
seg000:E6FD		    db	  0
seg000:E6FE		    db	  0
seg000:E6FF aFatalErrorCann db '--- Fatal Error: Cannot Continue! ---',0
seg000:E6FF					    ; DATA XREF: print_bad_ram+51o
seg000:E6FF					    ; sub_0:error_continueo
seg000:E725		    db	  0
seg000:E726		    db	  0
seg000:E727		    db	  0
seg000:E728		    db	  0
seg000:E729 byte_E729	    db 17h		    ; DATA XREF: sub_5900+67r
seg000:E72A byte_E72A	    db 4		    ; DATA XREF: sub_5900+5Er
seg000:E72B		    db	  0
seg000:E72C		    db	  3
seg000:E72D		    db	80h ; 
seg000:E72E		    db	  1
seg000:E72F		    db 0C0h ; À
seg000:E730		    db	  0
seg000:E731		    db	60h ; `
seg000:E732		    db	  0
seg000:E733		    db	30h ; 0
seg000:E734		    db	  0
seg000:E735		    db	18h
seg000:E736		    db	  0
seg000:E737		    db	0Ch
seg000:E738		    db	  0
seg000:E739
seg000:E739 ; =============== S	U B R O	U T I N	E =======================================
seg000:E739
seg000:E739 ; Attributes: thunk
seg000:E739
seg000:E739 sub_E739	    proc far		    ; DATA XREF: seg000:FF0Bo
seg000:E739		    jmp	    near ptr sub_58D4
seg000:E739 sub_E739	    endp
seg000:E739
seg000:E739 ; ---------------------------------------------------------------------------
seg000:E73C out_63h_regs_2  db 71h		    ; 0	; DATA XREF: sub_4E3E+2Fo
seg000:E73C		    db 50h		    ; 1
seg000:E73C		    db 59h		    ; 2
seg000:E73C		    db 0Ah		    ; 3
seg000:E73C		    db 1Fh		    ; 4
seg000:E73C		    db	6		    ; 5
seg000:E73C		    db 19h		    ; 6
seg000:E73C		    db 1Ch		    ; 7
seg000:E73C		    db	3		    ; 8
seg000:E73C		    db	7		    ; 9
seg000:E73C		    db	6		    ; 0Ah
seg000:E73C		    db	7		    ; 0Bh
seg000:E73C		    db	0		    ; 0Ch
seg000:E73C		    db	0		    ; 0Dh
seg000:E73C		    db	0		    ; 0Eh
seg000:E73C		    db	0		    ; 0Fh
seg000:E74C		    db 61h		    ; 0
seg000:E74C		    db 50h		    ; 1
seg000:E74C		    db 52h		    ; 2
seg000:E74C		    db 0Fh		    ; 3
seg000:E74C		    db 19h		    ; 4
seg000:E74C		    db	6		    ; 5
seg000:E74C		    db 19h		    ; 6
seg000:E74C		    db 19h		    ; 7
seg000:E74C		    db	3		    ; 8
seg000:E74C		    db 0Dh		    ; 9
seg000:E74C		    db 0Bh		    ; 0Ah
seg000:E74C		    db 0Ch		    ; 0Bh
seg000:E74C		    db	0		    ; 0Ch
seg000:E74C		    db	0		    ; 0Dh
seg000:E74C		    db	0		    ; 0Eh
seg000:E74C		    db	0		    ; 0Fh
seg000:E75C out_63h_regs_1  db 71h		    ; 0	; DATA XREF: sub_4E3E+24o
seg000:E75C		    db 50h		    ; 1
seg000:E75C		    db 59h		    ; 2
seg000:E75C		    db 0Ah		    ; 3
seg000:E75C		    db 3Fh		    ; 4
seg000:E75C		    db	6		    ; 5
seg000:E75C		    db 32h		    ; 6
seg000:E75C		    db 39h		    ; 7
seg000:E75C		    db	3		    ; 8
seg000:E75C		    db	7		    ; 9
seg000:E75C		    db	6		    ; 0Ah
seg000:E75C		    db	7		    ; 0Bh
seg000:E75C		    db	0		    ; 0Ch
seg000:E75C		    db	0		    ; 0Dh
seg000:E75C		    db	0		    ; 0Eh
seg000:E75C		    db	0		    ; 0Fh
seg000:E76C		    db 61h		    ; 0
seg000:E76C		    db 50h		    ; 1
seg000:E76C		    db 52h		    ; 2
seg000:E76C		    db 0Fh		    ; 3
seg000:E76C		    db 32h		    ; 4
seg000:E76C		    db	6		    ; 5
seg000:E76C		    db 32h		    ; 6
seg000:E76C		    db 32h		    ; 7
seg000:E76C		    db	3		    ; 8
seg000:E76C		    db 0Dh		    ; 9
seg000:E76C		    db 0Bh		    ; 0Ah
seg000:E76C		    db 0Ch		    ; 0Bh
seg000:E76C		    db	0		    ; 0Ch
seg000:E76C		    db	0		    ; 0Dh
seg000:E76C		    db	0		    ; 0Eh
seg000:E76C		    db	0		    ; 0Fh
seg000:E77C out_63h_regs_3  db 71h		    ; 0	; DATA XREF: sub_4E3E+3Ao
seg000:E77C		    db 50h		    ; 1
seg000:E77C		    db 59h		    ; 2
seg000:E77C		    db 0Ah		    ; 3
seg000:E77C		    db 3Fh		    ; 4
seg000:E77C		    db	6		    ; 5
seg000:E77C		    db 32h		    ; 6
seg000:E77C		    db 39h		    ; 7
seg000:E77C		    db	3		    ; 8
seg000:E77C		    db	6		    ; 9
seg000:E77C		    db	6		    ; 0Ah
seg000:E77C		    db	7		    ; 0Bh
seg000:E77C		    db	0		    ; 0Ch
seg000:E77C		    db	0		    ; 0Dh
seg000:E77C		    db	0		    ; 0Eh
seg000:E77C		    db	0		    ; 0Fh
seg000:E78C		    db 61h		    ; 0
seg000:E78C		    db 50h		    ; 1
seg000:E78C		    db 52h		    ; 2
seg000:E78C		    db 0Fh		    ; 3
seg000:E78C		    db 32h		    ; 4
seg000:E78C		    db	6		    ; 5
seg000:E78C		    db 32h		    ; 6
seg000:E78C		    db 32h		    ; 7
seg000:E78C		    db	3		    ; 8
seg000:E78C		    db 0Ch		    ; 9
seg000:E78C		    db 0Bh		    ; 0Ah
seg000:E78C		    db 0Ch		    ; 0Bh
seg000:E78C		    db	0		    ; 0Ch
seg000:E78C		    db	0		    ; 0Dh
seg000:E78C		    db	0		    ; 0Eh
seg000:E78C		    db	0		    ; 0Fh
seg000:E79C ascii_table_?   db 'A'                  ; DATA XREF: sub_6881:loc_6896r
seg000:E79C					    ; sub_68E2+4r
seg000:E79D ascii_table_2?  db 'X'                  ; DATA XREF: sub_6881+1Cr
seg000:E79D					    ; sub_68E2+Cr
seg000:E79E		    db	42h ; B
seg000:E79F		    db	58h ; X
seg000:E7A0		    db	43h ; C
seg000:E7A1		    db	58h ; X
seg000:E7A2		    db	44h ; D
seg000:E7A3		    db	58h ; X
seg000:E7A4		    db	53h ; S
seg000:E7A5		    db	49h ; I
seg000:E7A6		    db	44h ; D
seg000:E7A7		    db	49h ; I
seg000:E7A8		    db	42h ; B
seg000:E7A9		    db	50h ; P
seg000:E7AA		    db	53h ; S
seg000:E7AB		    db	50h ; P
seg000:E7AC		    db	43h ; C
seg000:E7AD		    db	53h ; S
seg000:E7AE		    db	44h ; D
seg000:E7AF		    db	53h ; S
seg000:E7B0		    db	53h ; S
seg000:E7B1		    db	53h ; S
seg000:E7B2		    db	45h ; E
seg000:E7B3		    db	53h ; S
seg000:E7B4		    db	49h ; I
seg000:E7B5		    db	50h ; P
seg000:E7B6		    db	46h ; F
seg000:E7B7		    db	4Ch ; L
seg000:E7B8		    db	49h ; I
seg000:E7B9		    db	50h ; P
seg000:E7BA aCnyc	    db 'CNYC',0             ; DATA XREF: sub_68E2:loc_6913r
seg000:E7BA					    ; sub_68E2+3Er ...
seg000:E7BF		    db	  0
seg000:E7C0		    db	  0
seg000:E7C1		    db	  0
seg000:E7C2 aOpep	    db 'OPEP',0
seg000:E7C7		    db	  0
seg000:E7C8		    db	  0
seg000:E7C9		    db	  0
seg000:E7CA aAnca	    db 'ANCA',0
seg000:E7CF		    db	  0
seg000:E7D0		    db	  0
seg000:E7D1		    db	  0
seg000:E7D2 aZnrzlpgn	    db 'ZNRZLPGN',0
seg000:E7DB		    db	  0
seg000:E7DC		    db	  0
seg000:E7DD		    db	  0
seg000:E7DE aIdiepundvnvo   db 'IDIEPUNDVNVO',0
seg000:E7EB		    db	  0
seg000:E7EC		    db	  0
seg000:E7ED		    db	  0
seg000:E7EE		    db	  0
seg000:E7EF		    db	  0
seg000:E7F0		    db	  0
seg000:E7F1		    db	  0
seg000:E7F2		    db	  0
seg000:E7F3		    db	  0
seg000:E7F4		    db	  0
seg000:E7F5		    db	  0
seg000:E7F6		    db	  0
seg000:E7F7		    db	  0
seg000:E7F8		    db	  0
seg000:E7F9		    db	  0
seg000:E7FA		    db	  0
seg000:E7FB		    db	  0
seg000:E7FC		    db	  0
seg000:E7FD		    db	  0
seg000:E7FE		    db	  0
seg000:E7FF		    db	  0
seg000:E800		    db	  0
seg000:E801		    db	  0
seg000:E802		    db	  0
seg000:E803		    db	  0
seg000:E804		    db	  0
seg000:E805		    db	  0
seg000:E806		    db	  0
seg000:E807		    db	  0
seg000:E808		    db	  0
seg000:E809		    db	  0
seg000:E80A		    db	  0
seg000:E80B		    db	  0
seg000:E80C		    db	  0
seg000:E80D		    db	  0
seg000:E80E		    db	  0
seg000:E80F		    db	  0
seg000:E810		    db	  0
seg000:E811		    db	  0
seg000:E812		    db	  0
seg000:E813		    db	  0
seg000:E814		    db	  0
seg000:E815		    db	  0
seg000:E816		    db	  0
seg000:E817		    db	  0
seg000:E818		    db	  0
seg000:E819		    db	  0
seg000:E81A		    db	  0
seg000:E81B		    db	  0
seg000:E81C		    db	  0
seg000:E81D		    db	  0
seg000:E81E		    db	  0
seg000:E81F		    db	  0
seg000:E820		    db	  0
seg000:E821		    db	  0
seg000:E822		    db	  0
seg000:E823		    db	  0
seg000:E824		    db	  0
seg000:E825		    db	  0
seg000:E826		    db	  0
seg000:E827		    db	  0
seg000:E828		    db	  0
seg000:E829		    db	  0
seg000:E82A		    db	  0
seg000:E82B		    db	  0
seg000:E82C		    db	  0
seg000:E82D		    db	  0
seg000:E82E
seg000:E82E ; =============== S	U B R O	U T I N	E =======================================
seg000:E82E
seg000:E82E ; Attributes: thunk
seg000:E82E
seg000:E82E sub_E82E	    proc far		    ; DATA XREF: seg000:FF0Fo
seg000:E82E		    jmp	    near ptr sub_729C
seg000:E82E sub_E82E	    endp
seg000:E82E
seg000:E831
seg000:E831 ; =============== S	U B R O	U T I N	E =======================================
seg000:E831
seg000:E831
seg000:E831 pass_is_enabled proc near		    ; CODE XREF: password_check+1p
seg000:E831		    mov	    ah,	0B9h ; '¹'
seg000:E833		    call    Keyboard_command
seg000:E836		    call    Keyboard_readyWait
seg000:E839		    call    Keyboard_read
seg000:E83C		    mov	    ah,	2
seg000:E83E		    cmp	    al,	24h ; '$'
seg000:E840		    jb	    short locret_E862
seg000:E842		    mov	    ah,	0BAh ; 'º'
seg000:E844		    call    Keyboard_command
seg000:E847		    call    Keyboard_readyWait
seg000:E84A		    call    Keyboard_read
seg000:E84D		    mov	    ah,	2
seg000:E84F		    cmp	    al,	0
seg000:E851		    jnz	    short locret_E862
seg000:E853		    mov	    al,	35h ; '5'
seg000:E855		    call    read_cmos
seg000:E858		    mov	    ah,	1
seg000:E85A		    and	    al,	1
seg000:E85C		    cmp	    al,	1
seg000:E85E		    jz	    short locret_E862
seg000:E860		    mov	    ah,	0
seg000:E862
seg000:E862 locret_E862:			    ; CODE XREF: pass_is_enabled+Fj
seg000:E862					    ; pass_is_enabled+20j ...
seg000:E862		    retn
seg000:E862 pass_is_enabled endp
seg000:E862
seg000:E863
seg000:E863 ; =============== S	U B R O	U T I N	E =======================================
seg000:E863
seg000:E863
seg000:E863 sub_E863	    proc near		    ; CODE XREF: password_?_1+9p
seg000:E863		    push    ax
seg000:E864		    mov	    ah,	60h ; '`'
seg000:E866		    call    Keyboard_command
seg000:E869		    call    Keyboard_readyWait
seg000:E86C		    mov	    al,	44h ; 'D'
seg000:E86E		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:E870		    pop	    ax
seg000:E871		    retn
seg000:E871 sub_E863	    endp
seg000:E871
seg000:E872
seg000:E872 ; =============== S	U B R O	U T I N	E =======================================
seg000:E872
seg000:E872
seg000:E872 sub_E872	    proc near		    ; CODE XREF: password_?_1+13p
seg000:E872		    push    ax
seg000:E873		    mov	    ah,	60h ; '`'
seg000:E875		    call    Keyboard_command
seg000:E878		    call    Keyboard_readyWait
seg000:E87B		    mov	    al,	45h ; 'E'
seg000:E87D		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:E87F		    pop	    ax
seg000:E880		    retn
seg000:E880 sub_E872	    endp
seg000:E880
seg000:E881
seg000:E881 ; =============== S	U B R O	U T I N	E =======================================
seg000:E881
seg000:E881
seg000:E881 password_enter  proc near		    ; CODE XREF: password_check+21p
seg000:E881					    ; password_?_1+Cp
seg000:E881		    push    ax
seg000:E882		    push    si
seg000:E883		    mov	    si,	offset aPassword ; "Password: "
seg000:E886		    call    print_null_terminated
seg000:E889		    mov	    ah,	0BBh ; '»'
seg000:E88B		    call    Keyboard_command
seg000:E88E		    call    Keyboard_readyWait
seg000:E891		    mov	    al,	0
seg000:E893		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:E895		    mov	    byte ptr cs:loc_505+3, al
seg000:E899		    pop	    si
seg000:E89A		    pop	    ax
seg000:E89B		    retn
seg000:E89B password_enter  endp
seg000:E89B
seg000:E89C
seg000:E89C ; =============== S	U B R O	U T I N	E =======================================
seg000:E89C
seg000:E89C
seg000:E89C pass_violation  proc near		    ; CODE XREF: password_check+24p
seg000:E89C					    ; password_?_1+10p
seg000:E89C		    push    ax
seg000:E89D		    push    cx
seg000:E89E		    push    si
seg000:E89F		    mov	    cx,	5
seg000:E8A2
seg000:E8A2 loc_E8A2:				    ; CODE XREF: pass_violation+9j
seg000:E8A2					    ; pass_violation+11j ...
seg000:E8A2		    call    Keyboard_read
seg000:E8A5		    jb	    short loc_E8A2
seg000:E8A7		    cmp	    al,	0FFh
seg000:E8A9		    jz	    short loc_E8C5
seg000:E8AB		    cmp	    al,	0FEh ; 'þ'
seg000:E8AD		    jnz	    short loc_E8A2
seg000:E8AF		    loop    loc_E8A2
seg000:E8B1		    mov	    si,	offset newline ; "\r\n"
seg000:E8B4		    call    print_null_terminated
seg000:E8B7		    mov	    si,	offset newline ; "\r\n"
seg000:E8BA		    call    print_null_terminated
seg000:E8BD		    mov	    si,	offset aPasswordSecuri ; "+++ Password Security	Violation: System"...
seg000:E8C0		    call    print_null_terminated
seg000:E8C3		    cli
seg000:E8C4		    hlt
seg000:E8C5 ; ---------------------------------------------------------------------------
seg000:E8C5
seg000:E8C5 loc_E8C5:				    ; CODE XREF: pass_violation+Dj
seg000:E8C5		    mov	    cx,	0Ah
seg000:E8C8
seg000:E8C8 loc_E8C8:				    ; CODE XREF: pass_violation+2Fj
seg000:E8C8		    call    sub_224A
seg000:E8CB		    loop    loc_E8C8
seg000:E8CD		    pop	    si
seg000:E8CE		    pop	    cx
seg000:E8CF		    pop	    ax
seg000:E8D0		    retn
seg000:E8D0 pass_violation  endp
seg000:E8D0
seg000:E8D1
seg000:E8D1 ; =============== S	U B R O	U T I N	E =======================================
seg000:E8D1
seg000:E8D1
seg000:E8D1 password_check  proc near		    ; CODE XREF: ColrWarm_Boot+3FAp
seg000:E8D1		    push    ax
seg000:E8D2		    call    pass_is_enabled
seg000:E8D5		    cmp	    ah,	1
seg000:E8D8		    ja	    short loc_E8FB
seg000:E8DA		    jb	    short loc_E8EF
seg000:E8DC		    mov	    ah,	0BBh ; '»'
seg000:E8DE		    call    Keyboard_command
seg000:E8E1		    call    Keyboard_readyWait
seg000:E8E4		    mov	    al,	2
seg000:E8E6		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:E8E8		    mov	    byte ptr cs:loc_505+3, al
seg000:E8EC		    jmp	    short loc_E901
seg000:E8EE ; ---------------------------------------------------------------------------
seg000:E8EE		    nop
seg000:E8EF
seg000:E8EF loc_E8EF:				    ; CODE XREF: password_check+9j
seg000:E8EF		    call    test_print_error?
seg000:E8F2		    call    password_enter
seg000:E8F5		    call    pass_violation
seg000:E8F8		    jmp	    short loc_E901
seg000:E8FA ; ---------------------------------------------------------------------------
seg000:E8FA		    nop
seg000:E8FB
seg000:E8FB loc_E8FB:				    ; CODE XREF: password_check+7j
seg000:E8FB		    mov	    byte ptr cs:loc_505+3, 6
seg000:E901
seg000:E901 loc_E901:				    ; CODE XREF: password_check+1Bj
seg000:E901					    ; password_check+27j
seg000:E901		    pop	    ax
seg000:E902		    retn
seg000:E902 password_check  endp
seg000:E902
seg000:E903
seg000:E903 ; =============== S	U B R O	U T I N	E =======================================
seg000:E903
seg000:E903
seg000:E903 password_?_1    proc near		    ; CODE XREF: ColrWarm_Boot+4F5p
seg000:E903					    ; ColrWarm_Boot+597p ...
seg000:E903		    push    ax
seg000:E904		    mov	    al,	byte ptr cs:loc_505+3
seg000:E908		    cmp	    al,	2
seg000:E90A		    jnz	    short loc_E91A
seg000:E90C		    call    sub_E863
seg000:E90F		    call    password_enter
seg000:E912		    sti
seg000:E913		    call    pass_violation
seg000:E916		    call    sub_E872
seg000:E919		    sti
seg000:E91A
seg000:E91A loc_E91A:				    ; CODE XREF: password_?_1+7j
seg000:E91A		    pop	    ax
seg000:E91B		    retn
seg000:E91B password_?_1    endp
seg000:E91B
seg000:E91C
seg000:E91C ; =============== S	U B R O	U T I N	E =======================================
seg000:E91C
seg000:E91C
seg000:E91C sub_E91C	    proc near		    ; CODE XREF: sub_350D+ADp
seg000:E91C		    push    ax
seg000:E91D		    mov	    al,	byte ptr cs:loc_505+3
seg000:E921		    cmp	    al,	2
seg000:E923		    jnz	    short loc_E935
seg000:E925		    mov	    ah,	0BBh ; '»'
seg000:E927		    call    Keyboard_command
seg000:E92A		    call    Keyboard_readyWait
seg000:E92D		    mov	    al,	1
seg000:E92F		    out	    60h, al	    ; 8042 keyboard controller data register.
seg000:E931		    mov	    byte ptr cs:loc_505+3, al
seg000:E935
seg000:E935 loc_E935:				    ; CODE XREF: sub_E91C+7j
seg000:E935		    pop	    ax
seg000:E936		    retn
seg000:E936 sub_E91C	    endp
seg000:E936
seg000:E936 ; ---------------------------------------------------------------------------
seg000:E937		    db	  0
seg000:E938		    db	  0
seg000:E939		    db	  0
seg000:E93A		    db	  0
seg000:E93B		    db	  0
seg000:E93C		    db	  0
seg000:E93D		    db	  0
seg000:E93E		    db	  0
seg000:E93F		    db	  0
seg000:E940		    db	  0
seg000:E941		    db	  0
seg000:E942		    db	  0
seg000:E943		    db	  0
seg000:E944		    db	  0
seg000:E945		    db	  0
seg000:E946		    db	  0
seg000:E947		    db	  0
seg000:E948		    db	  0
seg000:E949		    db	  0
seg000:E94A		    db	  0
seg000:E94B		    db	  0
seg000:E94C		    db	  0
seg000:E94D		    db	  0
seg000:E94E		    db	  0
seg000:E94F		    db	  0
seg000:E950		    db	  0
seg000:E951		    db	  0
seg000:E952		    db	  0
seg000:E953		    db	  0
seg000:E954		    db	  0
seg000:E955		    db	  0
seg000:E956		    db	  0
seg000:E957		    db	  0
seg000:E958		    db	  0
seg000:E959		    db	  0
seg000:E95A		    db	  0
seg000:E95B		    db	  0
seg000:E95C		    db	  0
seg000:E95D		    db	  0
seg000:E95E		    db	  0
seg000:E95F		    db	  0
seg000:E960		    db	  0
seg000:E961		    db	  0
seg000:E962		    db	  0
seg000:E963		    db	  0
seg000:E964		    db	  0
seg000:E965		    db	  0
seg000:E966		    db	  0
seg000:E967		    db	  0
seg000:E968		    db	  0
seg000:E969		    db	  0
seg000:E96A		    db	  0
seg000:E96B		    db	  0
seg000:E96C		    db	  0
seg000:E96D		    db	  0
seg000:E96E		    db	  0
seg000:E96F		    db	  0
seg000:E970		    db	  0
seg000:E971		    db	  0
seg000:E972		    db	  0
seg000:E973		    db	  0
seg000:E974		    db	  0
seg000:E975		    db	  0
seg000:E976		    db	  0
seg000:E977		    db	  0
seg000:E978		    db	  0
seg000:E979		    db	  0
seg000:E97A		    db	  0
seg000:E97B		    db	  0
seg000:E97C		    db	  0
seg000:E97D		    db	  0
seg000:E97E		    db	  0
seg000:E97F		    db	  0
seg000:E980		    db	  0
seg000:E981		    db	  0
seg000:E982		    db	  0
seg000:E983		    db	  0
seg000:E984		    db	  0
seg000:E985		    db	  0
seg000:E986		    db	  0
seg000:E987
seg000:E987 ; =============== S	U B R O	U T I N	E =======================================
seg000:E987
seg000:E987 ; Attributes: thunk
seg000:E987
seg000:E987 sub_E987	    proc far		    ; DATA XREF: seg000:FEF5o
seg000:E987		    jmp	    loc_7488
seg000:E987 sub_E987	    endp
seg000:E987
seg000:E987 ; ---------------------------------------------------------------------------
seg000:E98A		    db	  0
seg000:E98B		    db	  0
seg000:E98C		    db	  0
seg000:E98D		    db	  0
seg000:E98E		    db	  0
seg000:E98F		    db	  0
seg000:E990		    db	  0
seg000:E991		    db	  0
seg000:E992		    db	  0
seg000:E993		    db	  0
seg000:E994		    db	  0
seg000:E995		    db	  0
seg000:E996		    db	83h ; 
seg000:E997		    db 0C4h ; Ä
seg000:E998		    db	10h
seg000:E999 ; ---------------------------------------------------------------------------
seg000:E999		    jmp	    loc_7488
seg000:E999 ; ---------------------------------------------------------------------------
seg000:E99C aMfm300MonitorV db 'MFM-300 Monitor, Version 3.2C',0Dh,0Ah
seg000:E99C					    ; DATA XREF: ColrWarm_Boot+5281o
seg000:E99C		    db 'Memory Size: ',0
seg000:E9C9 aK_0	    db 'K',0Dh,0Ah          ; DATA XREF: ColrWarm_Boot:loc_631Bo
seg000:E9CC aEnter?ForHelp_ db 'Enter "?" for help.',0Dh,0Ah,0
seg000:E9CC					    ; DATA XREF: ColrWarm_Boot+52C6o
seg000:E9E2 aK		    db 'K + ',0             ; DATA XREF: ColrWarm_Boot+5295o
seg000:E9E2					    ; ColrWarm_Boot+52A6o
seg000:E9E7 aK64kCache	    db 'K + 64K Cache',0Dh,0Ah,0
seg000:E9F7		    db	  0
seg000:E9F8		    db	1Bh
seg000:E9F9 a1234567890Qwerty db '1234567890-=',8,9,'qwertyuiop[]',0Dh
seg000:EA14		    db	  4
seg000:EA15		    db	61h ; a
seg000:EA16		    db	73h ; s
seg000:EA17		    db	64h ; d
seg000:EA18		    db	66h ; f
seg000:EA19		    db	67h ; g
seg000:EA1A		    db	68h ; h
seg000:EA1B		    db	6Ah ; j
seg000:EA1C		    db	6Bh ; k
seg000:EA1D		    db	6Ch ; l
seg000:EA1E		    db	3Bh ; ;
seg000:EA1F		    db	27h ; '
seg000:EA20		    db	60h ; `
seg000:EA21		    db	  2
seg000:EA22		    db	5Ch ; \
seg000:EA23		    db	7Ah ; z
seg000:EA24		    db	78h ; x
seg000:EA25		    db	63h ; c
seg000:EA26		    db	76h ; v
seg000:EA27		    db	62h ; b
seg000:EA28		    db	6Eh ; n
seg000:EA29		    db	6Dh ; m
seg000:EA2A		    db	2Ch ; ,
seg000:EA2B		    db	2Eh ; .
seg000:EA2C		    db	2Fh ; /
seg000:EA2D		    db	  1
seg000:EA2E		    db	2Ah ; *
seg000:EA2F		    db	  8
seg000:EA30		    db	20h
seg000:EA31		    db	40h ; @
seg000:EA32		    db	3Bh ; ;
seg000:EA33		    db	3Ch ; <
seg000:EA34		    db	3Dh ; =
seg000:EA35		    db	3Eh ; >
seg000:EA36		    db	3Fh ; ?
seg000:EA37		    db	40h ; @
seg000:EA38		    db	41h ; A
seg000:EA39		    db	42h ; B
seg000:EA3A		    db	43h ; C
seg000:EA3B		    db	44h ; D
seg000:EA3C		    db	20h
seg000:EA3D		    db	10h
seg000:EA3E		    db	47h ; G
seg000:EA3F		    db	48h ; H
seg000:EA40		    db	49h ; I
seg000:EA41		    db	2Dh ; -
seg000:EA42		    db	4Bh ; K
seg000:EA43		    db 0F0h ; ð
seg000:EA44		    db	4Dh ; M
seg000:EA45		    db	2Bh ; +
seg000:EA46		    db	4Fh ; O
seg000:EA47		    db	50h ; P
seg000:EA48		    db	51h ; Q
seg000:EA49		    db	80h ; 
seg000:EA4A		    db	53h ; S
seg000:EA4B		    db	0Dh
seg000:EA4C		    db	  0
seg000:EA4D		    db	5Ch ; \
seg000:EA4E		    db	85h ; 
seg000:EA4F		    db	86h ; 
seg000:EA50		    db	  0
seg000:EA51		    db	1Bh
seg000:EA52		    db	21h ; !
seg000:EA53		    db	40h ; @
seg000:EA54		    db	23h ; #
seg000:EA55		    db	24h ; $
seg000:EA56		    db	25h ; %
seg000:EA57		    db	5Eh ; ^
seg000:EA58		    db	26h ; &
seg000:EA59		    db	2Ah ; *
seg000:EA5A		    db	28h ; (
seg000:EA5B		    db	29h ; )
seg000:EA5C		    db	5Fh ; _
seg000:EA5D		    db	2Bh ; +
seg000:EA5E		    db	  8
seg000:EA5F		    db	0Fh
seg000:EA60		    db	51h ; Q
seg000:EA61		    db	57h ; W
seg000:EA62		    db	45h ; E
seg000:EA63		    db	52h ; R
seg000:EA64		    db	54h ; T
seg000:EA65		    db	59h ; Y
seg000:EA66		    db	55h ; U
seg000:EA67		    db	49h ; I
seg000:EA68		    db	4Fh ; O
seg000:EA69		    db	50h ; P
seg000:EA6A		    db	7Bh ; {
seg000:EA6B		    db	7Dh ; }
seg000:EA6C		    db	0Dh
seg000:EA6D		    db	  4
seg000:EA6E		    db	41h ; A
seg000:EA6F		    db	53h ; S
seg000:EA70		    db	44h ; D
seg000:EA71		    db	46h ; F
seg000:EA72		    db	47h ; G
seg000:EA73		    db	48h ; H
seg000:EA74		    db	4Ah ; J
seg000:EA75		    db	4Bh ; K
seg000:EA76		    db	4Ch ; L
seg000:EA77		    db	3Ah ; :
seg000:EA78		    db	22h ; "
seg000:EA79		    db	7Eh ; ~
seg000:EA7A		    db	  2
seg000:EA7B		    db	7Ch ; |
seg000:EA7C		    db	5Ah ; Z
seg000:EA7D		    db	58h ; X
seg000:EA7E		    db	43h ; C
seg000:EA7F		    db	56h ; V
seg000:EA80		    db	42h ; B
seg000:EA81		    db	4Eh ; N
seg000:EA82		    db	4Dh ; M
seg000:EA83		    db	3Ch ; <
seg000:EA84		    db	3Eh ; >
seg000:EA85		    db	3Fh ; ?
seg000:EA86		    db	  1
seg000:EA87		    db	2Ah ; *
seg000:EA88		    db	  8
seg000:EA89		    db	20h
seg000:EA8A		    db	40h ; @
seg000:EA8B		    db	54h ; T
seg000:EA8C		    db	55h ; U
seg000:EA8D		    db	56h ; V
seg000:EA8E		    db	57h ; W
seg000:EA8F		    db	58h ; X
seg000:EA90		    db	59h ; Y
seg000:EA91		    db	5Ah ; Z
seg000:EA92		    db	5Bh ; [
seg000:EA93		    db	5Ch ; \
seg000:EA94		    db	5Dh ; ]
seg000:EA95		    db	20h
seg000:EA96		    db	10h
seg000:EA97 a7894561230_    db '789-456+1230.',0Dh,0
seg000:EAA6		    db	7Ch ; |
seg000:EAA7		    db	87h ; 
seg000:EAA8		    db	88h ; 
seg000:EAA9		    db	  0
seg000:EAAA		    db	1Bh
seg000:EAAB		    db	  0
seg000:EAAC		    db	  3
seg000:EAAD		    db	  0
seg000:EAAE		    db	  0
seg000:EAAF		    db	  0
seg000:EAB0		    db	1Eh
seg000:EAB1		    db	  0
seg000:EAB2		    db	  0
seg000:EAB3		    db	  0
seg000:EAB4		    db	  0
seg000:EAB5		    db	1Fh
seg000:EAB6		    db	  0
seg000:EAB7		    db	7Fh ; 
seg000:EAB8		    db	94h ; 
seg000:EAB9		    db	11h
seg000:EABA		    db	17h
seg000:EABB		    db	  5
seg000:EABC		    db	12h
seg000:EABD		    db	14h
seg000:EABE		    db	19h
seg000:EABF		    db	15h
seg000:EAC0		    db	  9
seg000:EAC1		    db	0Fh
seg000:EAC2		    db	10h
seg000:EAC3		    db	1Bh
seg000:EAC4		    db	1Dh
seg000:EAC5		    db	0Ah
seg000:EAC6		    db	  4
seg000:EAC7		    db	  1
seg000:EAC8		    db	13h
seg000:EAC9		    db	  4
seg000:EACA		    db	  6
seg000:EACB		    db	  7
seg000:EACC		    db	  8
seg000:EACD		    db	0Ah
seg000:EACE		    db	0Bh
seg000:EACF		    db	0Ch
seg000:EAD0		    db	  0
seg000:EAD1		    db	  0
seg000:EAD2		    db	  0
seg000:EAD3		    db	  2
seg000:EAD4		    db	1Ch
seg000:EAD5		    db	1Ah
seg000:EAD6		    db	18h
seg000:EAD7		    db	  3
seg000:EAD8		    db	16h
seg000:EAD9		    db	  2
seg000:EADA		    db	0Eh
seg000:EADB		    db	0Dh
seg000:EADC		    db	  0
seg000:EADD		    db	  0
seg000:EADE		    db	  0
seg000:EADF		    db	  1
seg000:EAE0		    db	96h ; 
seg000:EAE1		    db	  8
seg000:EAE2		    db	20h
seg000:EAE3		    db	  0
seg000:EAE4		    db	5Eh ; ^
seg000:EAE5		    db	5Fh ; _
seg000:EAE6		    db	60h ; `
seg000:EAE7		    db	61h ; a
seg000:EAE8		    db	62h ; b
seg000:EAE9		    db	63h ; c
seg000:EAEA		    db	64h ; d
seg000:EAEB		    db	65h ; e
seg000:EAEC		    db	66h ; f
seg000:EAED		    db	67h ; g
seg000:EAEE		    db	  0
seg000:EAEF		    db	  0
seg000:EAF0		    db	77h ; w
seg000:EAF1		    db	8Dh ; 
seg000:EAF2		    db	84h ; 
seg000:EAF3		    db	8Eh ; 
seg000:EAF4		    db	73h ; s
seg000:EAF5		    db	8Fh ; 
seg000:EAF6		    db	74h ; t
seg000:EAF7		    db	90h ; 
seg000:EAF8		    db	75h ; u
seg000:EAF9		    db	91h ; 
seg000:EAFA		    db	76h ; v
seg000:EAFB		    db	92h ; 
seg000:EAFC		    db	93h ; 
seg000:EAFD		    db	0Ah
seg000:EAFE		    db	  0
seg000:EAFF		    db	  0
seg000:EB00		    db	89h ; 
seg000:EB01		    db	8Ah ; 
seg000:EB02		    db	  0
seg000:EB03		    db 0F0h ; ð
seg000:EB04		    db	78h ; x
seg000:EB05		    db	79h ; y
seg000:EB06		    db	7Ah ; z
seg000:EB07		    db	7Bh ; {
seg000:EB08		    db	7Ch ; |
seg000:EB09		    db	7Dh ; }
seg000:EB0A		    db	7Eh ; ~
seg000:EB0B		    db	7Fh ; 
seg000:EB0C		    db	80h ; 
seg000:EB0D		    db	81h ; 
seg000:EB0E		    db	82h ; 
seg000:EB0F		    db	83h ; 
seg000:EB10		    db 0F0h ; ð
seg000:EB11		    db 0A5h ; ¥
seg000:EB12		    db	10h
seg000:EB13		    db	11h
seg000:EB14		    db	12h
seg000:EB15		    db	13h
seg000:EB16		    db	14h
seg000:EB17		    db	15h
seg000:EB18		    db	16h
seg000:EB19		    db	17h
seg000:EB1A		    db	18h
seg000:EB1B		    db	19h
seg000:EB1C		    db 0F0h ; ð
seg000:EB1D		    db 0F0h ; ð
seg000:EB1E		    db 0F0h ; ð
seg000:EB1F		    db	  4
seg000:EB20		    db	1Eh
seg000:EB21		    db	1Fh
seg000:EB22		    db	20h
seg000:EB23		    db	21h ; !
seg000:EB24		    db	22h ; "
seg000:EB25		    db	23h ; #
seg000:EB26		    db	24h ; $
seg000:EB27		    db	25h ; %
seg000:EB28		    db	26h ; &
seg000:EB29		    db 0F0h ; ð
seg000:EB2A		    db 0F0h ; ð
seg000:EB2B		    db 0F0h ; ð
seg000:EB2C		    db	  2
seg000:EB2D		    db 0F0h ; ð
seg000:EB2E		    db	2Ch ; ,
seg000:EB2F		    db	2Dh ; -
seg000:EB30		    db	2Eh ; .
seg000:EB31		    db	2Fh ; /
seg000:EB32		    db	30h ; 0
seg000:EB33		    db	31h ; 1
seg000:EB34		    db	32h ; 2
seg000:EB35		    db 0F0h ; ð
seg000:EB36		    db 0F0h ; ð
seg000:EB37		    db 0F0h ; ð
seg000:EB38		    db	  1
seg000:EB39		    db 0F0h ; ð
seg000:EB3A		    db	  8
seg000:EB3B		    db	20h
seg000:EB3C		    db	40h ; @
seg000:EB3D		    db	68h ; h
seg000:EB3E		    db	69h ; i
seg000:EB3F		    db	6Ah ; j
seg000:EB40		    db	6Bh ; k
seg000:EB41		    db	6Ch ; l
seg000:EB42		    db	6Dh ; m
seg000:EB43		    db	6Eh ; n
seg000:EB44		    db	6Fh ; o
seg000:EB45		    db	70h ; p
seg000:EB46		    db	71h ; q
seg000:EB47		    db	20h
seg000:EB48		    db	10h
seg000:EB49		    db	97h ; 
seg000:EB4A		    db	98h ; 
seg000:EB4B		    db	99h ; 
seg000:EB4C		    db 0F0h ; ð
seg000:EB4D		    db	9Bh ; 
seg000:EB4E		    db	  0
seg000:EB4F		    db	9Dh ; 
seg000:EB50		    db 0F0h ; ð
seg000:EB51		    db	9Fh ; 
seg000:EB52		    db 0A0h ;  
seg000:EB53		    db 0A1h ; ¡
seg000:EB54		    db 0A2h ; ¢
seg000:EB55		    db 0A3h ; £
seg000:EB56		    db	  0
seg000:EB57		    db	  0
seg000:EB58		    db	  0
seg000:EB59		    db	8Bh ; 
seg000:EB5A		    db	8Ch ; 
seg000:EB5B		    db	  0
seg000:EB5C		    db	  0
seg000:EB5D		    db	  0
seg000:EB5E		    db	  0
seg000:EB5F		    db	  0
seg000:EB60		    db	  0
seg000:EB61		    db	  0
seg000:EB62		    db	  0
seg000:EB63		    db	  0
seg000:EB64		    db	  0
seg000:EB65		    db	  0
seg000:EB66		    db	  0
seg000:EB67		    db	  0
seg000:EB68		    db	  0
seg000:EB69		    db	  0
seg000:EB6A		    db	  0
seg000:EB6B		    db	  2
seg000:EB6C		    db	  2
seg000:EB6D		    db	  2
seg000:EB6E		    db	  2
seg000:EB6F		    db	  2
seg000:EB70		    db	  2
seg000:EB71		    db	  2
seg000:EB72		    db	  2
seg000:EB73		    db	  2
seg000:EB74		    db	  2
seg000:EB75		    db	  0
seg000:EB76		    db	  0
seg000:EB77		    db	  0
seg000:EB78		    db	  4
seg000:EB79		    db	  2
seg000:EB7A		    db	  2
seg000:EB7B		    db	  2
seg000:EB7C		    db	  2
seg000:EB7D		    db	  2
seg000:EB7E		    db	  2
seg000:EB7F		    db	  2
seg000:EB80		    db	  2
seg000:EB81		    db	  2
seg000:EB82		    db	  0
seg000:EB83		    db	  0
seg000:EB84		    db	  0
seg000:EB85		    db	  4
seg000:EB86		    db	  0
seg000:EB87		    db	  2
seg000:EB88		    db	  2
seg000:EB89		    db	  2
seg000:EB8A		    db	  2
seg000:EB8B		    db	  2
seg000:EB8C		    db	  2
seg000:EB8D		    db	  2
seg000:EB8E		    db	  0
seg000:EB8F		    db	  0
seg000:EB90		    db	  0
seg000:EB91		    db	  4
seg000:EB92		    db	  0
seg000:EB93		    db	  4
seg000:EB94		    db	  0
seg000:EB95		    db	48h ; H
seg000:EB96		    db	  0
seg000:EB97		    db	  0
seg000:EB98		    db	  0
seg000:EB99		    db	  0
seg000:EB9A		    db	  0
seg000:EB9B		    db	  0
seg000:EB9C		    db	  0
seg000:EB9D		    db	  0
seg000:EB9E		    db	  0
seg000:EB9F		    db	  0
seg000:EBA0		    db	48h ; H
seg000:EBA1		    db	48h ; H
seg000:EBA2		    db	11h
seg000:EBA3		    db	11h
seg000:EBA4		    db	11h
seg000:EBA5		    db	10h
seg000:EBA6		    db	11h
seg000:EBA7		    db	11h
seg000:EBA8		    db	11h
seg000:EBA9		    db	10h
seg000:EBAA		    db	11h
seg000:EBAB		    db	11h
seg000:EBAC		    db	11h
seg000:EBAD		    db	79h ; y
seg000:EBAE		    db	10h
seg000:EBAF		    db	10h
seg000:EBB0		    db	  0
seg000:EBB1		    db	  0
seg000:EBB2		    db	  0
seg000:EBB3		    db	  0
seg000:EBB4		    db	  0
seg000:EBB5		    db	  0
seg000:EBB6		    db	  8
seg000:EBB7		    db	0Ch
seg000:EBB8		    db	  8
seg000:EBB9		    db	  8
seg000:EBBA		    db	  8
seg000:EBBB		    db	  8
seg000:EBBC		    db	  8
seg000:EBBD		    db	  8
seg000:EBBE		    db	  8
seg000:EBBF		    db	  8
seg000:EBC0		    db	  8
seg000:EBC1		    db	  8
seg000:EBC2		    db	  0
seg000:EBC3		    db	0Eh
seg000:EBC4		    db	  8
seg000:EBC5		    db	  8
seg000:EBC6		    db	  8
seg000:EBC7		    db	  8
seg000:EBC8		    db	  8
seg000:EBC9		    db	  8
seg000:EBCA		    db	  8
seg000:EBCB		    db	  8
seg000:EBCC		    db	  8
seg000:EBCD		    db	  8
seg000:EBCE		    db	  0
seg000:EBCF		    db	  0
seg000:EBD0		    db	  0
seg000:EBD1		    db	  0
seg000:EBD2		    db	  8
seg000:EBD3		    db	  8
seg000:EBD4		    db	  8
seg000:EBD5		    db	  8
seg000:EBD6		    db	  8
seg000:EBD7		    db	  8
seg000:EBD8		    db	  8
seg000:EBD9		    db	  8
seg000:EBDA		    db	  8
seg000:EBDB		    db	  0
seg000:EBDC		    db	  0
seg000:EBDD		    db	  0
seg000:EBDE		    db	  0
seg000:EBDF		    db	  0
seg000:EBE0		    db	  8
seg000:EBE1		    db	  8
seg000:EBE2		    db	  8
seg000:EBE3		    db	  8
seg000:EBE4		    db	  8
seg000:EBE5		    db	  8
seg000:EBE6		    db	  8
seg000:EBE7		    db	  0
seg000:EBE8		    db	  0
seg000:EBE9		    db	  0
seg000:EBEA		    db	  0
seg000:EBEB		    db	  4
seg000:EBEC		    db	  0
seg000:EBED		    db	  0
seg000:EBEE		    db	  0
seg000:EBEF		    db	0Fh
seg000:EBF0		    db	0Fh
seg000:EBF1		    db	0Fh
seg000:EBF2		    db	0Fh
seg000:EBF3		    db	0Fh
seg000:EBF4		    db	0Fh
seg000:EBF5		    db	0Fh
seg000:EBF6		    db	0Fh
seg000:EBF7		    db	0Fh
seg000:EBF8		    db	0Fh
seg000:EBF9		    db	  0
seg000:EBFA		    db	  0
seg000:EBFB		    db	0Dh
seg000:EBFC		    db	0Dh
seg000:EBFD		    db	0Dh
seg000:EBFE		    db	  4
seg000:EBFF		    db	0Dh
seg000:EC00		    db	  4
seg000:EC01		    db	0Dh
seg000:EC02		    db	  4
seg000:EC03		    db	0Dh
seg000:EC04		    db	0Dh
seg000:EC05		    db	0Dh
seg000:EC06		    db	0Dh
seg000:EC07		    db	0Dh
seg000:EC08		    db	  0
seg000:EC09		    db	  0
seg000:EC0A		    db	  0
seg000:EC0B		    db	0Fh
seg000:EC0C		    db	0Fh
seg000:EC0D		    db	  0
seg000:EC0E		    db	  0
seg000:EC0F		    db	  0
seg000:EC10		    db	  0
seg000:EC11		    db	  0
seg000:EC12		    db	  0
seg000:EC13		    db	  0
seg000:EC14		    db	  0
seg000:EC15		    db	  0
seg000:EC16		    db	  0
seg000:EC17		    db	  0
seg000:EC18		    db	  0
seg000:EC19		    db	  0
seg000:EC1A		    db	  0
seg000:EC1B		    db	  0
seg000:EC1C		    db	  0
seg000:EC1D		    db	  0
seg000:EC1E		    db	  0
seg000:EC1F		    db	  0
seg000:EC20		    db	  0
seg000:EC21		    db	  0
seg000:EC22		    db	  0
seg000:EC23		    db	  0
seg000:EC24		    db	  0
seg000:EC25		    db	  0
seg000:EC26		    db	  0
seg000:EC27		    db	  0
seg000:EC28		    db	  0
seg000:EC29		    db	  0
seg000:EC2A		    db	  0
seg000:EC2B		    db	  0
seg000:EC2C		    db	  0
seg000:EC2D		    db	  0
seg000:EC2E		    db	  0
seg000:EC2F		    db	  0
seg000:EC30		    db	  0
seg000:EC31		    db	  0
seg000:EC32		    db	  0
seg000:EC33		    db	  0
seg000:EC34		    db	  0
seg000:EC35		    db	  0
seg000:EC36		    db	  0
seg000:EC37		    db	  0
seg000:EC38		    db	  0
seg000:EC39		    db	  0
seg000:EC3A		    db	  0
seg000:EC3B		    db	  0
seg000:EC3C		    db	  0
seg000:EC3D		    db	  0
seg000:EC3E		    db	  0
seg000:EC3F		    db	  0
seg000:EC40		    db	  0
seg000:EC41		    db	  0
seg000:EC42		    db	  0
seg000:EC43		    db	  0
seg000:EC44		    db	  0
seg000:EC45		    db	  0
seg000:EC46		    db	  0
seg000:EC47		    db	  0
seg000:EC48		    db	  0
seg000:EC49		    db	  0
seg000:EC4A		    db	  0
seg000:EC4B		    db	  0
seg000:EC4C		    db	  0
seg000:EC4D		    db	  0
seg000:EC4E		    db	  0
seg000:EC4F		    db	  0
seg000:EC50		    db	  0
seg000:EC51		    db	  0
seg000:EC52		    db	  0
seg000:EC53		    db	  0
seg000:EC54		    db	  0
seg000:EC55		    db	  0
seg000:EC56		    db	  0
seg000:EC57		    db	  0
seg000:EC58		    db	  0
seg000:EC59
seg000:EC59 ; =============== S	U B R O	U T I N	E =======================================
seg000:EC59
seg000:EC59
seg000:EC59 fdd_?_4	    proc far		    ; DATA XREF: seg000:FF09o
seg000:EC59		    jmp	    near ptr fdd_?_3
seg000:EC59 fdd_?_4	    endp
seg000:EC59
seg000:EC59 ; ---------------------------------------------------------------------------
seg000:EC5C aPressAnyKeyToCon db 9,9,9,'    - Press any key to continue -',0Dh,0Ah,0
seg000:EC5C					    ; DATA XREF: cmd_colorBar+49o
seg000:EC83		    db	  0
seg000:EC84		    db	40h ; @
seg000:EC85		    db	  0
seg000:EC86		    db	40h ; @
seg000:EC87		    db	  0
seg000:EC88		    db	40h ; @
seg000:EC89		    db	  0
seg000:EC8A		    db	40h ; @
seg000:EC8B		    db	  0
seg000:EC8C		    db	40h ; @
seg000:EC8D		    db	  0
seg000:EC8E		    db	40h ; @
seg000:EC8F		    db	  0
seg000:EC90		    db	40h ; @
seg000:EC91		    db	  0
seg000:EC92		    db	40h ; @
seg000:EC93 seg_EC93	    dw	0		    ; 0	; DATA XREF: sub_4459+16r
seg000:EC93		    dw 140h		    ; 1
seg000:EC93		    dw 280h		    ; 2
seg000:EC93		    dw 3C0h		    ; 3
seg000:EC93		    dw 500h		    ; 4
seg000:EC93		    dw 640h		    ; 5
seg000:EC93		    dw 780h		    ; 6
seg000:EC93		    dw 8C0h		    ; 7
seg000:EC93		    dw 0A00h		    ; 8
seg000:EC93		    dw 0B40h		    ; 9
seg000:EC93		    dw 0C80h		    ; 0Ah
seg000:EC93		    dw 0DC0h		    ; 0Bh
seg000:EC93		    dw 0F00h		    ; 0Ch
seg000:EC93		    dw 1040h		    ; 0Dh
seg000:EC93		    dw 1180h		    ; 0Eh
seg000:EC93		    dw 12C0h		    ; 0Fh
seg000:EC93		    dw 1400h		    ; 10h
seg000:EC93		    dw 1540h		    ; 11h
seg000:EC93		    dw 1680h		    ; 12h
seg000:EC93		    dw 17C0h		    ; 13h
seg000:EC93		    dw 1900h		    ; 14h
seg000:EC93		    dw 1A40h		    ; 15h
seg000:EC93		    dw 1B80h		    ; 16h
seg000:EC93		    dw 1CC0h		    ; 17h
seg000:EC93		    dw 1E00h		    ; 18h
seg000:EC93		    dw 4000h		    ; 19h
seg000:EC93		    dw 4000h		    ; 1Ah
seg000:EC93		    dw 4000h		    ; 1Bh
seg000:EC93		    dw 4000h		    ; 1Ch
seg000:EC93		    dw 4000h		    ; 1Dh
seg000:EC93		    dw 4000h		    ; 1Eh
seg000:EC93		    dw 4000h		    ; 1Fh
seg000:EC93		    dw 4000h		    ; 20h
seg000:ECD5 word_ECD5	    dw	0		    ; 0	; DATA XREF: PutChar_cursor+9r
seg000:ECD5		    dw 0A0h		    ; 1
seg000:ECD5		    dw 140h		    ; 2
seg000:ECD5		    dw 1E0h		    ; 3
seg000:ECD5		    dw 280h		    ; 4
seg000:ECD5		    dw 320h		    ; 5
seg000:ECD5		    dw 3C0h		    ; 6
seg000:ECD5		    dw 460h		    ; 7
seg000:ECD5		    dw 500h		    ; 8
seg000:ECD5		    dw 5A0h		    ; 9
seg000:ECD5		    dw 640h		    ; 0Ah
seg000:ECD5		    dw 6E0h		    ; 0Bh
seg000:ECD5		    dw 780h		    ; 0Ch
seg000:ECD5		    dw 820h		    ; 0Dh
seg000:ECD5		    dw 8C0h		    ; 0Eh
seg000:ECD5		    dw 960h		    ; 0Fh
seg000:ECD5		    dw 0A00h		    ; 10h
seg000:ECD5		    dw 0AA0h		    ; 11h
seg000:ECD5		    dw 0B40h		    ; 12h
seg000:ECD5		    dw 0BE0h		    ; 13h
seg000:ECD5		    dw 0C80h		    ; 14h
seg000:ECD5		    dw 0D20h		    ; 15h
seg000:ECD5		    dw 0DC0h		    ; 16h
seg000:ECD5		    dw 0E60h		    ; 17h
seg000:ECD5		    dw 0F00h		    ; 18h
seg000:ECD5		    dw 0FA0h		    ; 19h
seg000:ECD5		    dw 1040h		    ; 1Ah
seg000:ECD5		    dw 10E0h		    ; 1Bh
seg000:ECD5		    dw 1180h		    ; 1Ch
seg000:ECD5		    dw 1220h		    ; 1Dh
seg000:ECD5		    dw 12C0h		    ; 1Eh
seg000:ECD5		    dw 1360h		    ; 1Fh
seg000:ECD5		    dw 1400h		    ; 20h
seg000:ECD5		    dw 14A0h		    ; 21h
seg000:ECD5		    dw 1540h		    ; 22h
seg000:ECD5		    dw 15E0h		    ; 23h
seg000:ECD5		    dw 1680h		    ; 24h
seg000:ECD5		    dw 1720h		    ; 25h
seg000:ECD5		    dw 17C0h		    ; 26h
seg000:ECD5		    dw 1860h		    ; 27h
seg000:ECD5		    dw 1900h		    ; 28h
seg000:ECD5		    dw 19A0h		    ; 29h
seg000:ECD5		    dw 1A40h		    ; 2Ah
seg000:ECD5		    dw 1AE0h		    ; 2Bh
seg000:ECD5		    dw 1B80h		    ; 2Ch
seg000:ECD5		    dw 1C20h		    ; 2Dh
seg000:ECD5		    dw 1CC0h		    ; 2Eh
seg000:ECD5		    dw 1D60h		    ; 2Fh
seg000:ECD5		    dw 1E00h		    ; 30h
seg000:ECD5		    dw 1EA0h		    ; 31h
seg000:ECD5		    dw 1F40h		    ; 32h
seg000:ECD5		    dw 1FE0h		    ; 33h
seg000:ED3D		    db	  0
seg000:ED3E		    db	  0
seg000:ED3F		    db	  0
seg000:ED40		    db	  0
seg000:ED41		    db	  0
seg000:ED42		    db	  0
seg000:ED43		    db	  0
seg000:ED44		    db	  0
seg000:ED45		    db	  0
seg000:ED46		    db	  0
seg000:ED47		    db	  0
seg000:ED48		    db	  0
seg000:ED49		    db	  0
seg000:ED4A		    db	  0
seg000:ED4B		    db	  0
seg000:ED4C		    db	  0
seg000:ED4D		    db	  0
seg000:ED4E		    db	  0
seg000:ED4F		    db	  0
seg000:ED50		    db	  0
seg000:ED51		    db	  0
seg000:ED52		    db	  0
seg000:ED53		    db	  0
seg000:ED54		    db	  0
seg000:ED55		    db	  0
seg000:ED56		    db	  0
seg000:ED57		    db	  0
seg000:ED58		    db	  0
seg000:ED59		    db	  0
seg000:ED5A		    db	  0
seg000:ED5B		    db	  0
seg000:ED5C		    db	  0
seg000:ED5D		    db	  0
seg000:ED5E		    db	  0
seg000:ED5F		    db	  0
seg000:ED60		    db	  0
seg000:ED61		    db	  0
seg000:ED62		    db	  0
seg000:ED63		    db	  0
seg000:ED64		    db	  0
seg000:ED65		    db	  0
seg000:ED66		    db	  0
seg000:ED67		    db	  0
seg000:ED68		    db	  0
seg000:ED69		    db	  0
seg000:ED6A		    db	  0
seg000:ED6B		    db	  0
seg000:ED6C		    db	  0
seg000:ED6D		    db	  0
seg000:ED6E		    db	  0
seg000:ED6F		    db	  0
seg000:ED70		    db	  0
seg000:ED71		    db	  0
seg000:ED72		    db	  0
seg000:ED73		    db	  0
seg000:ED74		    db	  0
seg000:ED75		    db	  0
seg000:ED76		    db	  0
seg000:ED77		    db	  0
seg000:ED78		    db	  0
seg000:ED79		    db	  0
seg000:ED7A		    db	  0
seg000:ED7B		    db	  0
seg000:ED7C		    db	  0
seg000:ED7D		    db	  0
seg000:ED7E		    db	  0
seg000:ED7F		    db	  0
seg000:ED80		    db	  0
seg000:ED81		    db	  0
seg000:ED82		    db	  0
seg000:ED83		    db	  0
seg000:ED84		    db	  0
seg000:ED85		    db	  0
seg000:ED86		    db	  0
seg000:ED87		    db	  0
seg000:ED88		    db	  0
seg000:ED89		    db	  0
seg000:ED8A		    db	  0
seg000:ED8B		    db	  0
seg000:ED8C		    db	  0
seg000:ED8D		    db	  0
seg000:ED8E		    db	  0
seg000:ED8F		    db	  0
seg000:ED90		    db	  0
seg000:ED91		    db	  0
seg000:ED92		    db	  0
seg000:ED93		    db	  0
seg000:ED94		    db	  0
seg000:ED95		    db	  0
seg000:ED96		    db	  0
seg000:ED97		    db	  0
seg000:ED98		    db	  0
seg000:ED99		    db	  0
seg000:ED9A		    db	  0
seg000:ED9B		    db	  0
seg000:ED9C		    db	  0
seg000:ED9D		    db	  0
seg000:ED9E		    db	  0
seg000:ED9F		    db	  0
seg000:EDA0		    db	  0
seg000:EDA1		    db	  0
seg000:EDA2		    db	  0
seg000:EDA3		    db	  0
seg000:EDA4		    db	  0
seg000:EDA5		    db	  0
seg000:EDA6		    db	  0
seg000:EDA7		    db	  0
seg000:EDA8		    db	  0
seg000:EDA9		    db	  0
seg000:EDAA		    db	  0
seg000:EDAB		    db	  0
seg000:EDAC		    db	  0
seg000:EDAD		    db	  0
seg000:EDAE		    db	  0
seg000:EDAF		    db	  0
seg000:EDB0		    db	  0
seg000:EDB1		    db	  0
seg000:EDB2		    db	  0
seg000:EDB3		    db	  0
seg000:EDB4		    db	  0
seg000:EDB5		    db	  0
seg000:EDB6		    db	  0
seg000:EDB7		    db	  0
seg000:EDB8		    db	  0
seg000:EDB9		    db	  0
seg000:EDBA		    db	  0
seg000:EDBB		    db	  0
seg000:EDBC		    db	  0
seg000:EDBD		    db	  0
seg000:EDBE		    db	  0
seg000:EDBF		    db	  0
seg000:EDC0		    db	  0
seg000:EDC1		    db	  0
seg000:EDC2		    db	  0
seg000:EDC3		    db	  0
seg000:EDC4		    db	  0
seg000:EDC5		    db	  0
seg000:EDC6		    db	  0
seg000:EDC7		    db	  0
seg000:EDC8		    db	  0
seg000:EDC9		    db	  0
seg000:EDCA		    db	  0
seg000:EDCB		    db	  0
seg000:EDCC		    db	  0
seg000:EDCD		    db	  0
seg000:EDCE		    db	  0
seg000:EDCF		    db	  0
seg000:EDD0		    db	  0
seg000:EDD1		    db	  0
seg000:EDD2		    db	  0
seg000:EDD3		    db	  0
seg000:EDD4		    db	  0
seg000:EDD5		    db	  0
seg000:EDD6		    db	  0
seg000:EDD7		    db	  0
seg000:EDD8		    db	  0
seg000:EDD9		    db	  0
seg000:EDDA		    db	  0
seg000:EDDB		    db	  0
seg000:EDDC		    db	  0
seg000:EDDD		    db	  0
seg000:EDDE		    db	  0
seg000:EDDF		    db	  0
seg000:EDE0		    db	  0
seg000:EDE1		    db	  0
seg000:EDE2		    db	  0
seg000:EDE3		    db	  0
seg000:EDE4		    db	  0
seg000:EDE5		    db	  0
seg000:EDE6		    db	  0
seg000:EDE7		    db	  0
seg000:EDE8		    db	  0
seg000:EDE9		    db	  0
seg000:EDEA		    db	  0
seg000:EDEB		    db	  0
seg000:EDEC		    db	  0
seg000:EDED		    db	  0
seg000:EDEE		    db	  0
seg000:EDEF		    db	  0
seg000:EDF0		    db	  0
seg000:EDF1		    db	  0
seg000:EDF2		    db	  0
seg000:EDF3		    db	  0
seg000:EDF4		    db	  0
seg000:EDF5		    db	  0
seg000:EDF6		    db	  0
seg000:EDF7		    db	  0
seg000:EDF8		    db	  0
seg000:EDF9		    db	  0
seg000:EDFA		    db	  0
seg000:EDFB		    db	  0
seg000:EDFC		    db	  0
seg000:EDFD		    db	  0
seg000:EDFE		    db	  0
seg000:EDFF		    db	  0
seg000:EE00		    db	  0
seg000:EE01		    db	  0
seg000:EE02		    db	  0
seg000:EE03		    db	  0
seg000:EE04		    db	  0
seg000:EE05		    db	  0
seg000:EE06		    db	  0
seg000:EE07		    db	  0
seg000:EE08		    db	  0
seg000:EE09		    db	  0
seg000:EE0A		    db	  0
seg000:EE0B		    db	  0
seg000:EE0C		    db	  0
seg000:EE0D		    db	  0
seg000:EE0E		    db	  0
seg000:EE0F		    db	  0
seg000:EE10		    db	  0
seg000:EE11		    db	  0
seg000:EE12		    db	  0
seg000:EE13		    db	  0
seg000:EE14		    db	  0
seg000:EE15		    db	  0
seg000:EE16		    db	  0
seg000:EE17		    db	  0
seg000:EE18		    db	  0
seg000:EE19		    db	  0
seg000:EE1A		    db	  0
seg000:EE1B		    db	  0
seg000:EE1C		    db	  0
seg000:EE1D		    db	  0
seg000:EE1E		    db	  0
seg000:EE1F		    db	  0
seg000:EE20		    db	  0
seg000:EE21		    db	  0
seg000:EE22		    db	  0
seg000:EE23		    db	  0
seg000:EE24		    db	  0
seg000:EE25		    db	  0
seg000:EE26		    db	  0
seg000:EE27		    db	  0
seg000:EE28		    db	  0
seg000:EE29		    db	  0
seg000:EE2A		    db	  0
seg000:EE2B		    db	  0
seg000:EE2C		    db	  0
seg000:EE2D		    db	  0
seg000:EE2E		    db	  0
seg000:EE2F		    db	  0
seg000:EE30		    db	  0
seg000:EE31		    db	  0
seg000:EE32		    db	  0
seg000:EE33		    db	  0
seg000:EE34		    db	  0
seg000:EE35		    db	  0
seg000:EE36		    db	  0
seg000:EE37		    db	  0
seg000:EE38		    db	  0
seg000:EE39		    db	  0
seg000:EE3A		    db	  0
seg000:EE3B		    db	  0
seg000:EE3C		    db	  0
seg000:EE3D		    db	  0
seg000:EE3E		    db	  0
seg000:EE3F		    db	  0
seg000:EE40		    db	  0
seg000:EE41		    db	  0
seg000:EE42		    db	  0
seg000:EE43		    db	  0
seg000:EE44		    db	  0
seg000:EE45		    db	  0
seg000:EE46		    db	  0
seg000:EE47		    db	  0
seg000:EE48		    db	  0
seg000:EE49		    db	  0
seg000:EE4A		    db	  0
seg000:EE4B		    db	  0
seg000:EE4C		    db	  0
seg000:EE4D		    db	  0
seg000:EE4E		    db	  0
seg000:EE4F		    db	  0
seg000:EE50		    db	  0
seg000:EE51		    db	  0
seg000:EE52		    db	  0
seg000:EE53		    db	  0
seg000:EE54		    db	  0
seg000:EE55		    db	  0
seg000:EE56		    db	  0
seg000:EE57		    db	  0
seg000:EE58		    db	  0
seg000:EE59		    db	  0
seg000:EE5A		    db	  0
seg000:EE5B		    db	  0
seg000:EE5C		    db	  0
seg000:EE5D		    db	  0
seg000:EE5E		    db	  0
seg000:EE5F		    db	  0
seg000:EE60		    db	  0
seg000:EE61		    db	  0
seg000:EE62		    db	  0
seg000:EE63		    db	  0
seg000:EE64		    db	  0
seg000:EE65		    db	  0
seg000:EE66		    db	  0
seg000:EE67		    db	  0
seg000:EE68		    db	  0
seg000:EE69		    db	  0
seg000:EE6A		    db	  0
seg000:EE6B		    db	  0
seg000:EE6C		    db	  0
seg000:EE6D		    db	  0
seg000:EE6E		    db	  0
seg000:EE6F		    db	  0
seg000:EE70		    db	  0
seg000:EE71		    db	  0
seg000:EE72		    db	  0
seg000:EE73		    db	  0
seg000:EE74		    db	  0
seg000:EE75		    db	  0
seg000:EE76		    db	  0
seg000:EE77		    db	  0
seg000:EE78		    db	  0
seg000:EE79		    db	  0
seg000:EE7A		    db	  0
seg000:EE7B		    db	  0
seg000:EE7C		    db	  0
seg000:EE7D		    db	  0
seg000:EE7E		    db	  0
seg000:EE7F		    db	  0
seg000:EE80		    db	  0
seg000:EE81		    db	  0
seg000:EE82		    db	  0
seg000:EE83		    db	  0
seg000:EE84		    db	  0
seg000:EE85		    db	  0
seg000:EE86		    db	  0
seg000:EE87		    db	  0
seg000:EE88		    db	  0
seg000:EE89		    db	  0
seg000:EE8A		    db	  0
seg000:EE8B		    db	  0
seg000:EE8C		    db	  0
seg000:EE8D		    db	  0
seg000:EE8E		    db	  0
seg000:EE8F		    db	  0
seg000:EE90		    db	  0
seg000:EE91		    db	  0
seg000:EE92		    db	  0
seg000:EE93		    db	  0
seg000:EE94		    db	  0
seg000:EE95		    db	  0
seg000:EE96		    db	  0
seg000:EE97		    db	  0
seg000:EE98		    db	  0
seg000:EE99		    db	  0
seg000:EE9A		    db	  0
seg000:EE9B		    db	  0
seg000:EE9C		    db	  0
seg000:EE9D		    db	  0
seg000:EE9E		    db	  0
seg000:EE9F		    db	  0
seg000:EEA0		    db	  0
seg000:EEA1		    db	  0
seg000:EEA2		    db	  0
seg000:EEA3		    db	  0
seg000:EEA4		    db	  0
seg000:EEA5		    db	  0
seg000:EEA6		    db	  0
seg000:EEA7		    db	  0
seg000:EEA8		    db	  0
seg000:EEA9		    db	  0
seg000:EEAA		    db	  0
seg000:EEAB		    db	  0
seg000:EEAC		    db	  0
seg000:EEAD		    db	  0
seg000:EEAE		    db	  0
seg000:EEAF		    db	  0
seg000:EEB0		    db	  0
seg000:EEB1		    db	  0
seg000:EEB2		    db	  0
seg000:EEB3		    db	  0
seg000:EEB4		    db	  0
seg000:EEB5		    db	  0
seg000:EEB6		    db	  0
seg000:EEB7		    db	  0
seg000:EEB8		    db	  0
seg000:EEB9		    db	  0
seg000:EEBA		    db	  0
seg000:EEBB		    db	  0
seg000:EEBC		    db	  0
seg000:EEBD		    db	  0
seg000:EEBE		    db	  0
seg000:EEBF		    db	  0
seg000:EEC0		    db	  0
seg000:EEC1		    db	  0
seg000:EEC2		    db	  0
seg000:EEC3		    db	  0
seg000:EEC4		    db	  0
seg000:EEC5		    db	  0
seg000:EEC6		    db	  0
seg000:EEC7		    db	  0
seg000:EEC8		    db	  0
seg000:EEC9		    db	  0
seg000:EECA		    db	  0
seg000:EECB		    db	  0
seg000:EECC		    db	  0
seg000:EECD		    db	  0
seg000:EECE		    db	  0
seg000:EECF		    db	  0
seg000:EED0		    db	  0
seg000:EED1		    db	  0
seg000:EED2		    db	  0
seg000:EED3		    db	  0
seg000:EED4		    db	  0
seg000:EED5		    db	  0
seg000:EED6		    db	  0
seg000:EED7		    db	  0
seg000:EED8		    db	  0
seg000:EED9		    db	  0
seg000:EEDA		    db	  0
seg000:EEDB		    db	  0
seg000:EEDC		    db	  0
seg000:EEDD		    db	  0
seg000:EEDE		    db	  0
seg000:EEDF		    db	  0
seg000:EEE0		    db	  0
seg000:EEE1		    db	  0
seg000:EEE2		    db	  0
seg000:EEE3		    db	  0
seg000:EEE4		    db	  0
seg000:EEE5		    db	  0
seg000:EEE6		    db	  0
seg000:EEE7		    db	  0
seg000:EEE8		    db	  0
seg000:EEE9		    db	  0
seg000:EEEA		    db	  0
seg000:EEEB		    db	  0
seg000:EEEC		    db	  0
seg000:EEED		    db	  0
seg000:EEEE		    db	  0
seg000:EEEF		    db	  0
seg000:EEF0		    db	  0
seg000:EEF1		    db	  0
seg000:EEF2		    db	  0
seg000:EEF3		    db	  0
seg000:EEF4		    db	  0
seg000:EEF5		    db	  0
seg000:EEF6		    db	  0
seg000:EEF7		    db	  0
seg000:EEF8		    db	  0
seg000:EEF9		    db	  0
seg000:EEFA		    db	  0
seg000:EEFB		    db	  0
seg000:EEFC		    db	  0
seg000:EEFD		    db	  0
seg000:EEFE		    db	  0
seg000:EEFF		    db	  0
seg000:EF00		    db	  0
seg000:EF01		    db	  0
seg000:EF02		    db	  0
seg000:EF03		    db	  0
seg000:EF04		    db	  0
seg000:EF05		    db	  0
seg000:EF06		    db	  0
seg000:EF07		    db	  0
seg000:EF08		    db	  0
seg000:EF09		    db	  0
seg000:EF0A		    db	  0
seg000:EF0B		    db	  0
seg000:EF0C		    db	  0
seg000:EF0D		    db	  0
seg000:EF0E		    db	  0
seg000:EF0F		    db	  0
seg000:EF10		    db	  0
seg000:EF11		    db	  0
seg000:EF12		    db	  0
seg000:EF13		    db	  0
seg000:EF14		    db	  0
seg000:EF15		    db	  0
seg000:EF16		    db	  0
seg000:EF17		    db	  0
seg000:EF18		    db	  0
seg000:EF19		    db	  0
seg000:EF1A		    db	  0
seg000:EF1B		    db	  0
seg000:EF1C		    db	  0
seg000:EF1D		    db	  0
seg000:EF1E		    db	  0
seg000:EF1F		    db	  0
seg000:EF20		    db	  0
seg000:EF21		    db	  0
seg000:EF22		    db	  0
seg000:EF23		    db	  0
seg000:EF24		    db	  0
seg000:EF25		    db	  0
seg000:EF26		    db	  0
seg000:EF27		    db	  0
seg000:EF28		    db	  0
seg000:EF29		    db	  0
seg000:EF2A		    db	  0
seg000:EF2B		    db	  0
seg000:EF2C		    db	  0
seg000:EF2D		    db	  0
seg000:EF2E		    db	  0
seg000:EF2F		    db	  0
seg000:EF30		    db	  0
seg000:EF31		    db	  0
seg000:EF32		    db	  0
seg000:EF33		    db	  0
seg000:EF34		    db	  0
seg000:EF35		    db	  0
seg000:EF36		    db	  0
seg000:EF37		    db	  0
seg000:EF38		    db	  0
seg000:EF39		    db	  0
seg000:EF3A		    db	  0
seg000:EF3B		    db	  0
seg000:EF3C		    db	  0
seg000:EF3D		    db	  0
seg000:EF3E		    db	  0
seg000:EF3F		    db	  0
seg000:EF40		    db	  0
seg000:EF41		    db	  0
seg000:EF42		    db	  0
seg000:EF43		    db	  0
seg000:EF44		    db	  0
seg000:EF45		    db	  0
seg000:EF46		    db	  0
seg000:EF47		    db	  0
seg000:EF48		    db	  0
seg000:EF49		    db	  0
seg000:EF4A		    db	  0
seg000:EF4B		    db	  0
seg000:EF4C		    db	  0
seg000:EF4D		    db	  0
seg000:EF4E		    db	  0
seg000:EF4F		    db	  0
seg000:EF50		    db	  0
seg000:EF51		    db	  0
seg000:EF52		    db	  0
seg000:EF53		    db	  0
seg000:EF54		    db	  0
seg000:EF55		    db	  0
seg000:EF56		    db	  0
seg000:EF57
seg000:EF57 ; =============== S	U B R O	U T I N	E =======================================
seg000:EF57
seg000:EF57
seg000:EF57 page_fault	    proc far		    ; DATA XREF: seg000:off_FEFFo
seg000:EF57
seg000:EF57 ; FUNCTION CHUNK AT	seg000:405F SIZE 00000019 BYTES
seg000:EF57
seg000:EF57		    jmp	    Int_complete
seg000:EF57 page_fault	    endp
seg000:EF57
seg000:EF57 ; ---------------------------------------------------------------------------
seg000:EF5A aCmosMemoryFail db 'CMOS Memory Failure! +++',0
seg000:EF5A					    ; DATA XREF: test_cmos:bits_erroro
seg000:EF73 aKeyboardNotRes db 'Keyboard not responding or not connected! +++',0
seg000:EF73					    ; DATA XREF: ColrWarm_Boot+3EFo
seg000:EFA1 aTimerInterrupt db 'Timer interrupt failure! +++',0
seg000:EFA1					    ; DATA XREF: ColrWarm_Boot:loc_146Bo
seg000:EFA1					    ; test_powerUp:timer_failureo
seg000:EFBE		    db	  0
seg000:EFBF		    db	  0
seg000:EFC0		    db	  0
seg000:EFC1		    db	  0
seg000:EFC2		    db	  0
seg000:EFC3		    db	  0
seg000:EFC4		    db	  0
seg000:EFC5		    db	  0
seg000:EFC6		    db	  0
seg000:EFC7		    db 0DFh ; ß
seg000:EFC8		    db	  2
seg000:EFC9		    db	25h ; %
seg000:EFCA		    db	  2
seg000:EFCB		    db	0Fh
seg000:EFCC		    db	1Bh
seg000:EFCD		    db 0FFh
seg000:EFCE		    db	54h ; T
seg000:EFCF		    db 0F6h ; ö
seg000:EFD0		    db	0Fh
seg000:EFD1		    db	  8
seg000:EFD2
seg000:EFD2 ; =============== S	U B R O	U T I N	E =======================================
seg000:EFD2
seg000:EFD2
seg000:EFD2 printing_1	    proc far		    ; DATA XREF: seg000:FF11o
seg000:EFD2		    jmp	    near ptr printing_0
seg000:EFD2 printing_1	    endp
seg000:EFD2
seg000:EFD2 ; ---------------------------------------------------------------------------
seg000:EFD5 aWillBeRunInZ300M db ' will be run in Z-300 mode - continue (Y/N)? ',7,0
seg000:F004 aTheTests	    db 'The tests',0
seg000:F00E aSetup	    db 'SETUP',0
seg000:F014		    db	  0
seg000:F015		    db	  0
seg000:F016		    db	  0
seg000:F017		    db	  0
seg000:F018		    db	  0
seg000:F019		    db	  0
seg000:F01A		    db	  0
seg000:F01B		    db	  0
seg000:F01C		    db	  0
seg000:F01D		    db	  0
seg000:F01E		    db	  0
seg000:F01F		    db	  0
seg000:F020		    db	  0
seg000:F021		    db	  0
seg000:F022		    db	  0
seg000:F023		    db	  0
seg000:F024		    db	  0
seg000:F025		    db	  0
seg000:F026		    db	  0
seg000:F027		    db	  0
seg000:F028		    db	  0
seg000:F029		    db	  0
seg000:F02A		    db	  0
seg000:F02B		    db	  0
seg000:F02C		    db	  0
seg000:F02D		    db	  0
seg000:F02E		    db	  0
seg000:F02F		    db	  0
seg000:F030		    db	  0
seg000:F031		    db	  0
seg000:F032		    db	  0
seg000:F033		    db	  0
seg000:F034		    db	  0
seg000:F035		    db	  0
seg000:F036		    db	  0
seg000:F037		    db	  0
seg000:F038		    db	  0
seg000:F039		    db	  0
seg000:F03A		    db	  0
seg000:F03B		    db	  0
seg000:F03C		    db	  0
seg000:F03D		    db	  0
seg000:F03E		    db	  0
seg000:F03F		    db	  0
seg000:F040		    db	  0
seg000:F041		    db	  0
seg000:F042		    db	  0
seg000:F043		    db	  0
seg000:F044		    db	  0
seg000:F045		    db	  0
seg000:F046		    db	  0
seg000:F047		    db	  0
seg000:F048		    db	  0
seg000:F049		    db	  0
seg000:F04A		    db	  0
seg000:F04B		    db	  0
seg000:F04C		    db	  0
seg000:F04D		    db	  0
seg000:F04E		    db	  0
seg000:F04F		    db	  0
seg000:F050		    db	  0
seg000:F051		    db	  0
seg000:F052		    db	  0
seg000:F053		    db	  0
seg000:F054		    db	  0
seg000:F055		    db	  0
seg000:F056		    db	  0
seg000:F057		    db	  0
seg000:F058		    db	  0
seg000:F059		    db	  0
seg000:F05A		    db	  0
seg000:F05B		    db	  0
seg000:F05C		    db	  0
seg000:F05D		    db	  0
seg000:F05E		    db	  0
seg000:F05F		    db	  0
seg000:F060 word_F060	    dw 0		    ; DATA XREF: sub_877A+16o
seg000:F060					    ; sub_877A+2Bo ...
seg000:F062		    db	  0
seg000:F063		    db	  0
seg000:F064		    db	  0
seg000:F065
seg000:F065 ; =============== S	U B R O	U T I N	E =======================================
seg000:F065
seg000:F065 ; Attributes: thunk
seg000:F065
seg000:F065 FPU_error	    proc far		    ; DATA XREF: seg000:dw_table_2o
seg000:F065		    jmp	    near ptr FPU_error_0
seg000:F065 FPU_error	    endp
seg000:F065
seg000:F065 ; ---------------------------------------------------------------------------
seg000:F068 aError	    db '+++ ERROR:  ',0     ; DATA XREF: cache_bad+11o
seg000:F068					    ; print_AX?+22o ...
seg000:F075 aErrorMemoryParit db 0Dh,0Ah	    ; DATA XREF: NMI_handler+23o
seg000:F075		    db '+++ ERROR:  Memory parity failure! +++',0Dh,0Ah,0
seg000:F0A0		    db	  0
seg000:F0A1		    db	  0
seg000:F0A2		    db	  0
seg000:F0A3		    db	  0
seg000:F0A4		    db	38h ; 8
seg000:F0A5		    db	28h ; (
seg000:F0A6		    db	2Dh ; -
seg000:F0A7		    db	0Ah
seg000:F0A8		    db	1Fh
seg000:F0A9		    db	  6
seg000:F0AA		    db	19h
seg000:F0AB		    db	1Ch
seg000:F0AC		    db	  2
seg000:F0AD		    db	  7
seg000:F0AE		    db	  6
seg000:F0AF		    db	  7
seg000:F0B0		    db	  0
seg000:F0B1		    db	  0
seg000:F0B2		    db	  0
seg000:F0B3		    db	  0
seg000:F0B4 init_CGA_table  db 71h		    ; 0	; DATA XREF: ColrWarm_Boot+109o
seg000:F0B4					    ; sub_0+DDC6o
seg000:F0B4		    db 50h		    ; 1
seg000:F0B4		    db 59h		    ; 2
seg000:F0B4		    db 0Ah		    ; 3
seg000:F0B4		    db 1Fh		    ; 4
seg000:F0B4		    db	6		    ; 5
seg000:F0B4		    db 19h		    ; 6
seg000:F0B4		    db 1Ch		    ; 7
seg000:F0B4		    db	2		    ; 8
seg000:F0B4		    db	7		    ; 9
seg000:F0B4		    db	6		    ; 0Ah
seg000:F0B4		    db	7		    ; 0Bh
seg000:F0B4		    db	0		    ; 0Ch
seg000:F0B4		    db	0		    ; 0Dh
seg000:F0B4		    db	0		    ; 0Eh
seg000:F0B4		    db	0		    ; 0Fh
seg000:F0C4		    db	38h ; 8
seg000:F0C5		    db	28h ; (
seg000:F0C6		    db	2Dh ; -
seg000:F0C7		    db	0Ah
seg000:F0C8		    db	7Fh ; 
seg000:F0C9		    db	  6
seg000:F0CA		    db	64h ; d
seg000:F0CB		    db	70h ; p
seg000:F0CC		    db	  2
seg000:F0CD		    db	  1
seg000:F0CE		    db	  6
seg000:F0CF		    db	  7
seg000:F0D0		    db	  0
seg000:F0D1		    db	  0
seg000:F0D2		    db	  0
seg000:F0D3		    db	  0
seg000:F0D4 init_MDA_table  db 61h		    ; 0	; DATA XREF: ColrWarm_Boot+128o
seg000:F0D4		    db 50h		    ; 1
seg000:F0D4		    db 52h		    ; 2
seg000:F0D4		    db 0Fh		    ; 3
seg000:F0D4		    db 19h		    ; 4
seg000:F0D4		    db	6		    ; 5
seg000:F0D4		    db 19h		    ; 6
seg000:F0D4		    db 19h		    ; 7
seg000:F0D4		    db	2		    ; 8
seg000:F0D4		    db 0Dh		    ; 9
seg000:F0D4		    db 0Bh		    ; 0Ah
seg000:F0D4		    db 0Ch		    ; 0Bh
seg000:F0D4		    db	0		    ; 0Ch
seg000:F0D4		    db	0		    ; 0Dh
seg000:F0D4		    db	0		    ; 0Eh
seg000:F0D4		    db	0		    ; 0Fh
seg000:F0E4 word_F0E4	    dw 2838h		    ; DATA XREF: hw_init+4Eo
seg000:F0E6		    db	2Dh ; -
seg000:F0E7		    db	0Ah
seg000:F0E8		    db	26h ; &
seg000:F0E9		    db	  2
seg000:F0EA		    db	19h
seg000:F0EB		    db	20h
seg000:F0EC		    db	  2
seg000:F0ED		    db	  7
seg000:F0EE		    db	  6
seg000:F0EF		    db	  7
seg000:F0F0		    db	  0
seg000:F0F1		    db	  0
seg000:F0F2		    db	  0
seg000:F0F3		    db	  0
seg000:F0F4		    dw 5071h
seg000:F0F6		    db	59h ; Y
seg000:F0F7		    db	0Ah
seg000:F0F8		    db	26h ; &
seg000:F0F9		    db	  2
seg000:F0FA		    db	19h
seg000:F0FB		    db	20h
seg000:F0FC		    db	  2
seg000:F0FD		    db	  7
seg000:F0FE		    db	  6
seg000:F0FF		    db	  7
seg000:F100		    db	  0
seg000:F101		    db	  0
seg000:F102		    db	  0
seg000:F103		    db	  0
seg000:F104		    dw 2838h
seg000:F106		    db	2Dh ; -
seg000:F107		    db	0Ah
seg000:F108		    db	7Fh ; 
seg000:F109		    db	  6
seg000:F10A		    db	64h ; d
seg000:F10B		    db	70h ; p
seg000:F10C		    db	  2
seg000:F10D		    db	  1
seg000:F10E		    db	  6
seg000:F10F		    db	  7
seg000:F110		    db	  0
seg000:F111		    db	  0
seg000:F112		    db	  0
seg000:F113		    db	  0
seg000:F114		    dw 5061h
seg000:F116		    db	52h ; R
seg000:F117		    db	0Fh
seg000:F118		    db	19h
seg000:F119		    db	  6
seg000:F11A		    db	19h
seg000:F11B		    db	19h
seg000:F11C		    db	  2
seg000:F11D		    db	0Dh
seg000:F11E		    db	0Bh
seg000:F11F		    db	0Ch
seg000:F120		    db	  0
seg000:F121		    db	  0
seg000:F122		    db	  0
seg000:F123		    db	  0
seg000:F124 menmonics_table assembler <offset str_AD, 40h, 10h>	; DATA XREF: addembler?+2Do
seg000:F124					    ; "ADÄ"
seg000:F128		    assembler <offset str_AD, 80h, 10h>	; "ADÄ"
seg000:F12C		    assembler <offset str_AD, 40h, 90h>	; "ADÄ"
seg000:F130		    assembler <offset str_AD, 80h, 90h>	; "ADÄ"
seg000:F134		    assembler <offset str_AD, 40h, 0A4h> ; "ADÄ"
seg000:F138		    assembler <offset str_AD, 80h, 0A4h> ; "ADÄ"
seg000:F13C		    assembler <offset str_PUSpPUSH, 11h, 0> ; "PUSÈPUSHÆ"
seg000:F140		    assembler <offset str_O+5, 11h, 0>
seg000:F144		    assembler <offset str_O, 40h, 10h> ; "OÒOUÔPOÐPOPÆ"
seg000:F148		    assembler <offset str_O, 80h, 10h> ; "OÒOUÔPOÐPOPÆ"
seg000:F14C		    assembler <offset str_O, 40h, 90h> ; "OÒOUÔPOÐPOPÆ"
seg000:F150		    assembler <offset str_O, 80h, 90h> ; "OÒOUÔPOÐPOPÆ"
seg000:F154		    assembler <offset str_O, 40h, 0A4h>	; "OÒOUÔPOÐPOPÆ"
seg000:F158		    assembler <offset str_O, 80h, 0A4h>	; "OÒOUÔPOÐPOPÆ"
seg000:F15C		    assembler <offset str_PUSpPUSH, 12h, 0> ; "PUSÈPUSHÆ"
seg000:F160		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F164		    assembler <offset str_ADpAD, 40h, 10h> ; "ADÃ"
seg000:F168		    assembler <offset str_ADpAD, 80h, 10h> ; "ADÃ"
seg000:F16C		    assembler <offset str_ADpAD, 40h, 90h> ; "ADÃ"
seg000:F170		    assembler <offset str_ADpAD, 80h, 90h> ; "ADÃ"
seg000:F174		    assembler <offset str_ADpAD, 40h, 0A4h> ; "ADÃ"
seg000:F178		    assembler <offset str_ADpAD, 80h, 0A4h> ; "ADÃ"
seg000:F17C		    assembler <offset str_PUSpPUSH, 13h, 0> ; "PUSÈPUSHÆ"
seg000:F180		    assembler <offset str_O+5, 13h, 0>
seg000:F184		    assembler <offset aSbScasScasEsCsSs, 40h, 10h> ; "SBÂSCASÂSCAS×ESºCSºSSºDSº"
seg000:F188		    assembler <offset aSbScasScasEsCsSs, 80h, 10h> ; "SBÂSCASÂSCAS×ESºCSºSSºDSº"
seg000:F18C		    assembler <offset aSbScasScasEsCsSs, 40h, 90h> ; "SBÂSCASÂSCAS×ESºCSºSSºDSº"
seg000:F190		    assembler <offset aSbScasScasEsCsSs, 80h, 90h> ; "SBÂSCASÂSCAS×ESºCSºSSºDSº"
seg000:F194		    assembler <offset aSbScasScasEsCsSs, 40h, 0A4h> ; "SBÂSCASÂSCAS×ESºCSºSSºDSº"
seg000:F198		    assembler <offset aSbScasScasEsCsSs, 80h, 0A4h> ; "SBÂSCASÂSCAS×ESºCSºSSºDSº"
seg000:F19C		    assembler <offset str_PUSpPUSH, 14h, 0> ; "PUSÈPUSHÆ"
seg000:F1A0		    assembler <offset str_O+5, 14h, 0>
seg000:F1A4		    assembler <offset str_AN, 40h, 10h>	; "ANÄ"
seg000:F1A8		    assembler <offset str_AN, 80h, 10h>	; "ANÄ"
seg000:F1AC		    assembler <offset str_AN, 40h, 90h>	; "ANÄ"
seg000:F1B0		    assembler <offset str_AN, 80h, 90h>	; "ANÄ"
seg000:F1B4		    assembler <offset str_AN, 40h, 0A4h> ; "ANÄ"
seg000:F1B8		    assembler <offset str_AN, 80h, 0A4h> ; "ANÄ"
seg000:F1BC		    assembler <offset aSbScasScasEsCsSs+0Dh, 0,	0>
seg000:F1C0		    assembler <offset str_CM+10h, 0, 0>
seg000:F1C4		    assembler <offset str_SU, 40h, 10h>	; "SUÂ"
seg000:F1C8		    assembler <offset str_SU, 80h, 10h>	; "SUÂ"
seg000:F1CC		    assembler <offset str_SU, 40h, 90h>	; "SUÂ"
seg000:F1D0		    assembler <offset str_SU, 80h, 90h>	; "SUÂ"
seg000:F1D4		    assembler <offset str_SU, 40h, 0A4h> ; "SUÂ"
seg000:F1D8		    assembler <offset str_SU, 80h, 0A4h> ; "SUÂ"
seg000:F1DC		    assembler <offset aSbScasScasEsCsSs+10h, 0,	0>
seg000:F1E0		    assembler <offset str_CM+13h, 0, 0>
seg000:F1E4		    assembler <offset str_XO, 40h, 10h>	; "XOÒ"
seg000:F1E8		    assembler <offset str_XO, 80h, 10h>	; "XOÒ"
seg000:F1EC		    assembler <offset str_XO, 40h, 90h>	; "XOÒ"
seg000:F1F0		    assembler <offset str_XO, 80h, 90h>	; "XOÒ"
seg000:F1F4		    assembler <offset str_XO, 40h, 0A4h> ; "XOÒ"
seg000:F1F8		    assembler <offset str_XO, 80h, 0A4h> ; "XOÒ"
seg000:F1FC		    assembler <offset aSbScasScasEsCsSs+13h, 0,	0>
seg000:F200		    assembler <offset mnemonics+3, 0, 0>
seg000:F204		    assembler <offset str_CM, 40h, 10h>	; "CMÐCMPSÂCMPS×CWÄDAÁDAÓ"
seg000:F208		    assembler <offset str_CM, 80h, 10h>	; "CMÐCMPSÂCMPS×CWÄDAÁDAÓ"
seg000:F20C		    assembler <offset str_CM, 40h, 90h>	; "CMÐCMPSÂCMPS×CWÄDAÁDAÓ"
seg000:F210		    assembler <offset str_CM, 80h, 90h>	; "CMÐCMPSÂCMPS×CWÄDAÁDAÓ"
seg000:F214		    assembler <offset str_CM, 40h, 0A4h> ; "CMÐCMPSÂCMPS×CWÄDAÁDAÓ"
seg000:F218		    assembler <offset str_CM, 80h, 0A4h> ; "CMÐCMPSÂCMPS×CWÄDAÁDAÓ"
seg000:F21C		    assembler <offset aSbScasScasEsCsSs+16h, 0,	0>
seg000:F220		    assembler <offset mnemonics+0Ch, 0,	0>
seg000:F224		    assembler <offset aInInInt03IntIreJ, 9, 0> ; "INÃINÔINT    03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F228		    assembler <offset aInInInt03IntIreJ, 0Ah, 0> ; "INÃINÔINT	 03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F22C		    assembler <offset aInInInt03IntIreJ, 0Bh, 0> ; "INÃINÔINT	 03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F230		    assembler <offset aInInInt03IntIreJ, 0Ch, 0> ; "INÃINÔINT	 03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F234		    assembler <offset aInInInt03IntIreJ, 0Dh, 0> ; "INÃINÔINT	 03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F238		    assembler <offset aInInInt03IntIreJ, 0Eh, 0> ; "INÃINÔINT	 03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F23C		    assembler <offset aInInInt03IntIreJ, 0Fh, 0> ; "INÃINÔINT	 03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F240		    assembler <offset aInInInt03IntIreJ, 10h, 0> ; "INÃINÔINT	 03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F244		    assembler <offset aDe, 9, 0> ; "DEÃ"
seg000:F248		    assembler <offset aDe, 0Ah,	0> ; "DEÃ"
seg000:F24C		    assembler <offset aDe, 0Bh,	0> ; "DEÃ"
seg000:F250		    assembler <offset aDe, 0Ch,	0> ; "DEÃ"
seg000:F254		    assembler <offset aDe, 0Dh,	0> ; "DEÃ"
seg000:F258		    assembler <offset aDe, 0Eh,	0> ; "DEÃ"
seg000:F25C		    assembler <offset aDe, 0Fh,	0> ; "DEÃ"
seg000:F260		    assembler <offset aDe, 10h,	0> ; "DEÃ"
seg000:F264		    assembler <offset str_PUSpPUSH, 9, 0> ; "PUSÈPUSHÆ"
seg000:F268		    assembler <offset str_PUSpPUSH, 0Ah, 0> ; "PUSÈPUSHÆ"
seg000:F26C		    assembler <offset str_PUSpPUSH, 0Bh, 0> ; "PUSÈPUSHÆ"
seg000:F270		    assembler <offset str_PUSpPUSH, 0Ch, 0> ; "PUSÈPUSHÆ"
seg000:F274		    assembler <offset str_PUSpPUSH, 0Dh, 0> ; "PUSÈPUSHÆ"
seg000:F278		    assembler <offset str_PUSpPUSH, 0Eh, 0> ; "PUSÈPUSHÆ"
seg000:F27C		    assembler <offset str_PUSpPUSH, 0Fh, 0> ; "PUSÈPUSHÆ"
seg000:F280		    assembler <offset str_PUSpPUSH, 10h, 0> ; "PUSÈPUSHÆ"
seg000:F284		    assembler <offset str_O+5, 9, 0>
seg000:F288		    assembler <offset str_O+5, 0Ah, 0>
seg000:F28C		    assembler <offset str_O+5, 0Bh, 0>
seg000:F290		    assembler <offset str_O+5, 0Ch, 0>
seg000:F294		    assembler <offset str_O+5, 0Dh, 0>
seg000:F298		    assembler <offset str_O+5, 0Eh, 0>
seg000:F29C		    assembler <offset str_O+5, 0Fh, 0>
seg000:F2A0		    assembler <offset str_O+5, 10h, 0>
seg000:F2A4		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2A8		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2AC		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2B0		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2B4		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2B8		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2BC		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2C0		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2C4		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2C8		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2CC		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2D0		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2D4		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2D8		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2DC		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2E0		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F2E4		    assembler <offset aJmpJnJnJnJnJpJJp+13h, 40h, 45h>
seg000:F2E8		    assembler <offset aJmpJnJnJnJnJpJJp+0Ah, 40h, 45h>
seg000:F2EC		    assembler <offset aInInInt03IntIreJ+1Dh, 40h, 45h>
seg000:F2F0		    assembler <offset aInInInt03IntIreJ+1Ah, 40h, 45h>
seg000:F2F4		    assembler <offset aJmpJnJnJnJnJpJJp+1Ah, 40h, 45h>
seg000:F2F8		    assembler <offset aJmpJnJnJnJnJpJJp+7, 40h,	45h>
seg000:F2FC		    assembler <offset aInInInt03IntIreJ+1Fh, 40h, 45h>
seg000:F300		    assembler <offset aInInInt03IntIreJ+18h, 40h, 45h>
seg000:F304		    assembler <offset aJmpJnJnJnJnJpJJp+18h, 40h, 45h>
seg000:F308		    assembler <offset aJmpJnJnJnJnJpJJp+0Dh, 40h, 45h>
seg000:F30C		    assembler <offset aJmpJnJnJnJnJpJJp+15h, 40h, 45h>
seg000:F310		    assembler <offset aJmpJnJnJnJnJpJJp+10h, 40h, 45h>
seg000:F314		    assembler <offset aInInInt03IntIreJ+2Dh, 40h, 45h>
seg000:F318		    assembler <offset aInInInt03IntIreJ+2Ah, 40h, 45h>
seg000:F31C		    assembler <offset aInInInt03IntIreJ+2Fh, 40h, 45h>
seg000:F320		    assembler <offset aInInInt03IntIreJ+28h, 40h, 45h>
seg000:F324		    db	  0
seg000:F325		    db	  0
seg000:F326		    db	40h ; @
seg000:F327		    db	9Ch ; 
seg000:F328		    db	  0
seg000:F329		    db	  0
seg000:F32A		    db	80h ; 
seg000:F32B		    db	9Ch ; 
seg000:F32C		    db	  0
seg000:F32D		    db	  0
seg000:F32E		    db	40h ; @
seg000:F32F		    db	9Ch ; 
seg000:F330		    db	  0
seg000:F331		    db	  0
seg000:F332		    db	40h ; @
seg000:F333		    db	9Dh ; 
seg000:F334		    assembler <offset str_TESpWAIp, 40h, 10h> ;	"TESÔWAIÔXCHÇXLAT   BYTE PTR [BXÝ"
seg000:F338		    assembler <offset str_TESpWAIp, 80h, 10h> ;	"TESÔWAIÔXCHÇXLAT   BYTE PTR [BXÝ"
seg000:F33C		    assembler <offset str_TESpWAIp+8, 40h, 10h>
seg000:F340		    assembler <offset str_TESpWAIp+8, 80h, 10h>
seg000:F344		    assembler <offset aLocLodsLodsLooLo+1Dh, 40h, 10h>
seg000:F348		    assembler <offset aLocLodsLodsLooLo+1Dh, 80h, 10h>
seg000:F34C		    assembler <offset aLocLodsLodsLooLo+1Dh, 40h, 90h>
seg000:F350		    assembler <offset aLocLodsLodsLooLo+1Dh, 80h, 90h>
seg000:F354		    assembler <offset aLocLodsLodsLooLo+1Dh, 0A0h, 10h>
seg000:F358		    assembler <offset aJmpJnJnJnJnJpJJp+23h, 80h, 10h>
seg000:F35C		    assembler <offset aLocLodsLodsLooLo+1Dh, 0A0h, 90h>
seg000:F360		    assembler <offset str_O+5, 80h, 8>
seg000:F364		    assembler <offset aNeNo+3, 0, 0>
seg000:F368		    assembler <offset str_TESpWAIp+8, 8Ah, 0A0h>
seg000:F36C		    assembler <offset str_TESpWAIp+8, 8Bh, 0A0h>
seg000:F370		    assembler <offset str_TESpWAIp+8, 8Ch, 0A0h>
seg000:F374		    assembler <offset str_TESpWAIp+8, 8Dh, 0A0h>
seg000:F378		    assembler <offset str_TESpWAIp+8, 8Eh, 0A0h>
seg000:F37C		    assembler <offset str_TESpWAIp+8, 8Fh, 0A0h>
seg000:F380		    assembler <offset str_TESpWAIp+8, 90h, 0A0h>
seg000:F384		    assembler <offset str_CALL+5, 0, 0>
seg000:F388		    assembler <offset str_CM+0Dh, 0, 0>
seg000:F38C		    assembler <offset str_CALL,	0C0h, 4> ; "CALLÆCB×"
seg000:F390		    assembler <offset str_TESpWAIp+4, 0, 0>
seg000:F394		    assembler <offset str_PUSpPUSH+4, 0, 0>
seg000:F398		    assembler <offset str_O+8, 0, 0>
seg000:F39C		    assembler <offset aRoSah+3,	0, 0>
seg000:F3A0		    assembler <offset aJmpJnJnJnJnJpJJp+1Ch, 0,	0>
seg000:F3A4		    assembler <offset aLocLodsLodsLooLo+1Dh, 40h, 0A2h>
seg000:F3A8		    assembler <offset aLocLodsLodsLooLo+1Dh, 80h, 0A2h>
seg000:F3AC		    assembler <offset aLocLodsLodsLooLo+1Dh, 40h, 22h>
seg000:F3B0		    assembler <offset aLocLodsLodsLooLo+1Dh, 80h, 22h>
seg000:F3B4		    assembler <offset aLocLodsLodsLooLo+20h, 0,	0>
seg000:F3B8		    assembler <offset aLocLodsLodsLooLo+25h, 0,	0>
seg000:F3BC		    assembler <offset str_CM+3,	0, 0>
seg000:F3C0		    assembler <offset str_CM+8,	0, 0>
seg000:F3C4		    assembler <offset str_TESpWAIp, 40h, 0A4h> ; "TESÔWAIÔXCHÇXLAT   BYTE PTR [BXÝ"
seg000:F3C8		    assembler <offset str_TESpWAIp, 80h, 0A4h> ; "TESÔWAIÔXCHÇXLAT   BYTE PTR [BXÝ"
seg000:F3CC		    assembler <offset aStStosStos+3, 0,	0>
seg000:F3D0		    assembler <offset aStStosStos+8, 0,	0>
seg000:F3D4		    assembler <offset aLocLodsLodsLooLo+4, 0, 0>
seg000:F3D8		    assembler <offset aLocLodsLodsLooLo+9, 0, 0>
seg000:F3DC		    assembler <offset aSbScasScasEsCsSs+3, 0, 0>
seg000:F3E0		    assembler <offset aSbScasScasEsCsSs+8, 0, 0>
seg000:F3E4		    assembler <offset aLocLodsLodsLooLo+1Dh, 41h, 84h>
seg000:F3E8		    assembler <offset aLocLodsLodsLooLo+1Dh, 42h, 84h>
seg000:F3EC		    assembler <offset aLocLodsLodsLooLo+1Dh, 43h, 84h>
seg000:F3F0		    assembler <offset aLocLodsLodsLooLo+1Dh, 44h, 84h>
seg000:F3F4		    assembler <offset aLocLodsLodsLooLo+1Dh, 45h, 84h>
seg000:F3F8		    assembler <offset aLocLodsLodsLooLo+1Dh, 46h, 84h>
seg000:F3FC		    assembler <offset aLocLodsLodsLooLo+1Dh, 47h, 84h>
seg000:F400		    assembler <offset aLocLodsLodsLooLo+1Dh, 48h, 84h>
seg000:F404		    assembler <offset aLocLodsLodsLooLo+1Dh, 89h, 84h>
seg000:F408		    assembler <offset aLocLodsLodsLooLo+1Dh, 8Ah, 84h>
seg000:F40C		    assembler <offset aLocLodsLodsLooLo+1Dh, 8Bh, 84h>
seg000:F410		    assembler <offset aLocLodsLodsLooLo+1Dh, 8Ch, 84h>
seg000:F414		    assembler <offset aLocLodsLodsLooLo+1Dh, 8Dh, 84h>
seg000:F418		    assembler <offset aLocLodsLodsLooLo+1Dh, 8Eh, 84h>
seg000:F41C		    assembler <offset aLocLodsLodsLooLo+1Dh, 8Fh, 84h>
seg000:F420		    assembler <offset aLocLodsLodsLooLo+1Dh, 90h, 84h>
seg000:F424		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F428		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F42C		    assembler <offset aRepnReRet+5, 80h, 4>
seg000:F430		    assembler <offset aRepnReRet+5, 0, 0>
seg000:F434		    assembler <offset aJmpJnJnJnJnJpJJp+26h, 0C0h, 90h>
seg000:F438		    assembler <offset aJmpJnJnJnJnJpJJp+20h, 0C0h, 90h>
seg000:F43C		    assembler <offset aLocLodsLodsLooLo+1Dh, 40h, 8Ch>
seg000:F440		    assembler <offset aLocLodsLodsLooLo+1Dh, 80h, 8Ch>
seg000:F444		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F448		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F44C		    assembler <offset aRepnReRet+8, 80h, 4>
seg000:F450		    assembler <offset aRepnReRet+8, 0, 0>
seg000:F454		    assembler <offset aInInInt03IntIreJ+6, 0, 0>
seg000:F458		    assembler <offset aInInInt03IntIreJ+3, 40h,	4>
seg000:F45C		    assembler <offset aInInInt03IntIreJ+10h, 0,	0>
seg000:F460		    assembler <offset aInInInt03IntIreJ+14h, 0,	0>
seg000:F464		    db	  1
seg000:F465		    db	  0
seg000:F466		    db	80h ; 
seg000:F467		    db	19h
seg000:F468		    db	  1
seg000:F469		    db	  0
seg000:F46A		    db 0C0h ; À
seg000:F46B		    db	19h
seg000:F46C		    db	  1
seg000:F46D		    db	  0
seg000:F46E		    db	42h ; B
seg000:F46F		    db	98h ; 
seg000:F470		    db	  1
seg000:F471		    db	  0
seg000:F472		    db	82h ; 
seg000:F473		    db	98h ; 
seg000:F474		    assembler <offset mnemonics+9, 40h,	4>
seg000:F478		    assembler <offset mnemonics+6, 40h,	4>
seg000:F47C		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F480		    assembler <offset str_TESpWAIp+0Ch,	0, 0>
seg000:F484		    assembler <offset aDiEs+3, 0, 19h>
seg000:F488		    assembler <offset aDiEs+3, 0, 19h>
seg000:F48C		    assembler <offset aDiEs+3, 0, 19h>
seg000:F490		    assembler <offset aDiEs+3, 0, 19h>
seg000:F494		    assembler <offset aDiEs+3, 0, 19h>
seg000:F498		    assembler <offset aDiEs+3, 0, 19h>
seg000:F49C		    assembler <offset aDiEs+3, 0, 19h>
seg000:F4A0		    assembler <offset aDiEs+3, 0, 19h>
seg000:F4A4		    assembler <offset aLocLodsLodsLooLo+17h, 40h, 45h>
seg000:F4A8		    assembler <offset aLocLodsLodsLooLo+12h, 40h, 45h>
seg000:F4AC		    assembler <offset aLocLodsLodsLooLo+0Eh, 40h, 45h>
seg000:F4B0		    assembler <offset aInInInt03IntIreJ+24h, 40h, 45h>
seg000:F4B4		    assembler <offset aImuI+4, 40h, 0A4h>
seg000:F4B8		    assembler <offset aImuI+4, 80h, 0A4h>
seg000:F4BC		    assembler <offset str_O+2, 40h, 24h>
seg000:F4C0		    assembler <offset str_O+2, 80h, 24h>
seg000:F4C4		    assembler <offset str_CLA, 80h, 44h> ; "CALÌ"
seg000:F4C8		    assembler <offset aJm, 80h,	44h> ; "JMÐ"
seg000:F4CC		    assembler <offset aJmpJnJnJnJnJpJJp, 0C0h, 4> ; "JMPÆJNÃJNÚJNÏJNÓJPÏJÏJPÅJÓJÚLAHÆLDÓLEÁL"...
seg000:F4D0		    assembler <offset aJm, 40h,	45h> ; "JMÐ"
seg000:F4D4		    assembler <offset aImuI+4, 4Bh, 0A0h>
seg000:F4D8		    assembler <offset aImuI+4, 8Bh, 0A0h>
seg000:F4DC		    assembler <offset str_O+2, 4Bh, 20h>
seg000:F4E0		    assembler <offset str_O+2, 8Bh, 20h>
seg000:F4E4		    assembler <offset aLocLodsLodsLooLo, 0, 0> ; "LOCËLODSÂLODS×LOOÐLOOPÅLOOPNÅMOÖMOVSÂMO"...
seg000:F4E8		    assembler <offset mnemonics, 0, 0> ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F4EC		    assembler <offset aRepnReRet, 0, 0>	; "REPNÅREÔRETÆ"
seg000:F4F0		    assembler <offset aRep, 0, 0> ; "REPÅ"
seg000:F4F4		    assembler <offset aHl, 0, 0> ; "HLÔ"
seg000:F4F8		    assembler <offset str_CMpCM, 0, 0> ; "CMÃ"
seg000:F4FC		    db	  2
seg000:F4FD		    db	  0
seg000:F4FE		    db	40h ; @
seg000:F4FF		    db	98h ; 
seg000:F500		    db	  2
seg000:F501		    db	  0
seg000:F502		    db	80h ; 
seg000:F503		    db	98h ; 
seg000:F504		    assembler <offset str_CLplusCL, 0, 0> ; "CLÃ"
seg000:F508		    assembler <offset aSt_0, 0,	0> ; "STÃ"
seg000:F50C		    assembler <offset str_CLpCMpCM, 0, 0> ; "CLÉ"
seg000:F510		    assembler <offset aStStosStos, 0, 0> ; "STÉSTOSÂSTOS×"
seg000:F514		    assembler <offset str_CL, 0, 0> ; "CLÄ"
seg000:F518		    assembler <offset aSt, 0, 0> ; "STÄ"
seg000:F51C		    db	  3
seg000:F51D		    db	  0
seg000:F51E		    db	40h ; @
seg000:F51F		    db	98h ; 
seg000:F520		    db	  3
seg000:F521		    db	  0
seg000:F522		    db	80h ; 
seg000:F523		    db	98h ; 
seg000:F524 ass_string_table dw	offset str_AD	    ; DATA XREF: assembler_?_0+E5r
seg000:F524					    ; "ADÄ"
seg000:F526		    dw offset str_O	    ; "OÒOUÔPOÐPOPÆ"
seg000:F528		    dw offset str_ADpAD	    ; "ADÃ"
seg000:F52A		    dw offset aSbScasScasEsCsSs	; "SBÂSCASÂSCAS×ESºCSºSSºDSº"
seg000:F52C		    dw offset str_AN	    ; "ANÄ"
seg000:F52E		    dw offset str_SU	    ; "SUÂ"
seg000:F530		    dw offset str_XO	    ; "XOÒ"
seg000:F532		    dw offset str_CM	    ; "CMÐCMPSÂCMPS×CWÄDAÁDAÓ"
seg000:F534		    dw offset aRo	    ; "ROÌ"
seg000:F536		    dw offset aRoSah	    ; "ROÒSAHÆ"
seg000:F538		    dw offset aRc	    ; "RCÌ"
seg000:F53A		    dw offset aRc_0	    ; "RCÒ"
seg000:F53C		    dw offset aSh_0	    ; "SHÌ"
seg000:F53E		    dw offset aSh	    ; "SHÒ"
seg000:F540		    dw offset mnemonics	    ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F542		    dw offset aSa	    ; "SAÒ"
seg000:F544		    dw offset str_TESpWAIp  ; "TESÔWAIÔXCHÇXLAT	  BYTE PTR [BXÝ"
seg000:F546		    dw offset mnemonics	    ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F548		    dw offset str_NOpO	    ; "NOÔ"
seg000:F54A		    dw offset aNeNo	    ; "NEÇNOÐ"
seg000:F54C		    dw offset aMu	    ; "MUÌ"
seg000:F54E		    dw offset aImuI	    ; "IMUÌIÎ"
seg000:F550		    dw offset aDiEs	    ; "DIÖESÃ"
seg000:F552		    dw offset aIdi	    ; "IDIÖ"
seg000:F554		    dw offset aInInInt03IntIreJ	; "INÃINÔINT	03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCX"...
seg000:F556		    dw offset aDe	    ; "DEÃ"
seg000:F558		    dw offset str_CLA	    ; "CALÌ"
seg000:F55A		    dw offset str_CALL	    ; "CALLÆCB×"
seg000:F55C		    dw offset aJm	    ; "JMÐ"
seg000:F55E		    dw offset aJmpJnJnJnJnJpJJp	; "JMPÆJNÃJNÚJNÏJNÓJPÏJÏJPÅJÓJÚLAHÆLDÓLEÁL"...
seg000:F560		    dw offset str_PUSpPUSH  ; "PUSÈPUSHÆ"
seg000:F562		    dw offset mnemonics	    ; "??¿AAÁAAÄAAÍAAÓ"
seg000:F564 mnemonics	    db '??¿AAÁAAÄAAÍAAÓ'    ; DATA XREF: seg000:F160o
seg000:F564					    ; seg000:F2A4o ...
seg000:F573 str_ADpAD	    db 'ADÃ'                ; DATA XREF: seg000:F164o
seg000:F573					    ; seg000:F168o ...
seg000:F576 str_AD	    db 'ADÄ'                ; DATA XREF: seg000:menmonics_tableo
seg000:F576					    ; seg000:F128o ...
seg000:F579 str_AN	    db 'ANÄ'                ; DATA XREF: seg000:F1A4o
seg000:F579					    ; seg000:F1A8o ...
seg000:F57C str_CLA	    db 'CALÌ'               ; DATA XREF: seg000:F4C4o
seg000:F57C					    ; seg000:F558o
seg000:F580 str_CALL	    db 'CALLÆCB×'           ; DATA XREF: seg000:F38Co
seg000:F580					    ; seg000:F55Ao ...
seg000:F588 str_CLplusCL    db 'CLÃ'                ; DATA XREF: seg000:F504o
seg000:F58B str_CL	    db 'CLÄ'                ; DATA XREF: seg000:F514o
seg000:F58E str_CLpCMpCM    db 'CLÉ'                ; DATA XREF: seg000:F50Co
seg000:F591 str_CMpCM	    db 'CMÃ'                ; DATA XREF: seg000:F4F8o
seg000:F594 str_CM	    db 'CMÐCMPSÂCMPS×CWÄDAÁDAÓ' ; DATA XREF: seg000:F204o
seg000:F594					    ; seg000:F208o ...
seg000:F5AA aDe		    db 'DEÃ'                ; DATA XREF: seg000:F244o
seg000:F5AA					    ; seg000:F248o ...
seg000:F5AD aDiEs	    db 'DIÖESÃ'             ; DATA XREF: seg000:F550o
seg000:F5AD					    ; seg000:F484o ...
seg000:F5B3 aHl		    db 'HLÔ'                ; DATA XREF: seg000:F4F4o
seg000:F5B6 aIdi	    db 'IDIÖ'               ; DATA XREF: seg000:F552o
seg000:F5BA aImuI	    db 'IMUÌIÎ'             ; DATA XREF: seg000:F54Eo
seg000:F5BA					    ; seg000:F4B4o ...
seg000:F5C0 aInInInt03IntIreJ db 'INÃINÔINT    03ÈINTÏIREÔJÁJAÅJÂJBÅJÃJCXÚJÇJGÅJÌJLÅ'
seg000:F5C0					    ; DATA XREF: seg000:F224o
seg000:F5C0					    ; seg000:F228o ...
seg000:F5F2 aJm		    db 'JMÐ'                ; DATA XREF: seg000:F4C8o
seg000:F5F2					    ; seg000:F4D0o ...
seg000:F5F5 aJmpJnJnJnJnJpJJp db 'JMPÆJNÃJNÚJNÏJNÓJPÏJÏJPÅJÓJÚLAHÆLDÓLEÁLEÓ'
seg000:F5F5					    ; DATA XREF: seg000:F4CCo
seg000:F5F5					    ; seg000:F55Eo ...
seg000:F61E aLocLodsLodsLooLo db 'LOCËLODSÂLODS×LOOÐLOOPÅLOOPNÅMOÖMOVSÂMOVS×'
seg000:F61E					    ; DATA XREF: seg000:F4E4o
seg000:F61E					    ; seg000:F3D4o ...
seg000:F648 aMu		    db 'MUÌ'                ; DATA XREF: seg000:F54Co
seg000:F64B aNeNo	    db 'NEÇNOÐ'             ; DATA XREF: seg000:F54Ao
seg000:F64B					    ; seg000:F364o
seg000:F651 str_NOpO	    db 'NOÔ'                ; DATA XREF: seg000:F548o
seg000:F654 str_O	    db 'OÒOUÔPOÐPOPÆ'       ; DATA XREF: seg000:F144o
seg000:F654					    ; seg000:F148o ...
seg000:F660 str_PUSpPUSH    db 'PUSÈPUSHÆ'          ; DATA XREF: seg000:F13Co
seg000:F660					    ; seg000:F15Co ...
seg000:F669 aRc		    db 'RCÌ'                ; DATA XREF: seg000:F538o
seg000:F66C aRc_0	    db 'RCÒ'                ; DATA XREF: seg000:F53Ao
seg000:F66F aRep	    db 'REPÅ'               ; DATA XREF: seg000:F4F0o
seg000:F673 aRepnReRet	    db 'REPNÅREÔRETÆ'       ; DATA XREF: seg000:F4ECo
seg000:F673					    ; seg000:F42Co ...
seg000:F67F aRo		    db 'ROÌ'                ; DATA XREF: seg000:F534o
seg000:F682 aRoSah	    db 'ROÒSAHÆ'            ; DATA XREF: seg000:F536o
seg000:F682					    ; seg000:F39Co
seg000:F689 aSa		    db 'SAÒ'                ; DATA XREF: seg000:F542o
seg000:F68C aSbScasScasEsCsSs db 'SBÂSCASÂSCAS×ESºCSºSSºDSº' ; DATA XREF: seg000:F184o
seg000:F68C					    ; seg000:F188o ...
seg000:F6A5 aSh_0	    db 'SHÌ'                ; DATA XREF: seg000:F53Co
seg000:F6A8 aSh		    db 'SHÒ'                ; DATA XREF: seg000:F53Eo
seg000:F6AB aSt_0	    db 'STÃ'                ; DATA XREF: seg000:F508o
seg000:F6AE aSt		    db 'STÄ'                ; DATA XREF: seg000:F518o
seg000:F6B1 aStStosStos	    db 'STÉSTOSÂSTOS×'      ; DATA XREF: seg000:F510o
seg000:F6B1					    ; seg000:F3CCo ...
seg000:F6BE str_SU	    db 'SUÂ'                ; DATA XREF: seg000:F1C4o
seg000:F6BE					    ; seg000:F1C8o ...
seg000:F6C1 str_TESpWAIp    db 'TESÔWAIÔXCHÇXLAT   BYTE PTR [BXÝ' ; DATA XREF: seg000:F334o
seg000:F6C1					    ; seg000:F338o ...
seg000:F6E1 str_XO	    db 'XOÒ'                ; DATA XREF: seg000:F1E4o
seg000:F6E1					    ; seg000:F1E8o ...
seg000:F6E4 aAl		    db 'AL',0               ; DATA XREF: seg000:registers_tableo
seg000:F6E7 aCl		    db 'CL',0               ; DATA XREF: seg000:F722o
seg000:F6EA aDl		    db 'DL',0               ; DATA XREF: seg000:F724o
seg000:F6ED aBl		    db 'BL',0               ; DATA XREF: seg000:F726o
seg000:F6F0 aAh		    db 'AH',0               ; DATA XREF: seg000:F728o
seg000:F6F3 aCh		    db 'CH',0               ; DATA XREF: seg000:F72Ao
seg000:F6F6 aDh		    db 'DH',0               ; DATA XREF: seg000:F72Co
seg000:F6F9 aBh		    db 'BH',0               ; DATA XREF: seg000:F72Eo
seg000:F6FC aAx		    db 'AX',0               ; DATA XREF: seg000:F730o
seg000:F6FF aCx		    db 'CX',0               ; DATA XREF: seg000:F732o
seg000:F702 aDx		    db 'DX',0               ; DATA XREF: seg000:F734o
seg000:F705 aBx		    db 'BX',0               ; DATA XREF: seg000:F736o
seg000:F708 aSp		    db 'SP',0               ; DATA XREF: seg000:F738o
seg000:F70B aBp		    db 'BP',0               ; DATA XREF: seg000:F73Ao
seg000:F70E aSi		    db 'SI',0               ; DATA XREF: seg000:F73Co
seg000:F711 aDi		    db 'DI',0               ; DATA XREF: seg000:F73Eo
seg000:F714 aEs		    db 'ES',0               ; DATA XREF: seg000:F740o
seg000:F717 aCs		    db 'CS',0               ; DATA XREF: seg000:F742o
seg000:F71A aSs		    db 'SS',0               ; DATA XREF: seg000:F744o
seg000:F71D aDs		    db 'DS',0               ; DATA XREF: seg000:F746o
seg000:F720 registers_table dw offset aAl	    ; DATA XREF: registers_?+16r
seg000:F720					    ; registers_?+41r ...
seg000:F720					    ; "AL"
seg000:F722		    dw offset aCl	    ; "CL"
seg000:F724		    dw offset aDl	    ; "DL"
seg000:F726		    dw offset aBl	    ; "BL"
seg000:F728		    dw offset aAh	    ; "AH"
seg000:F72A		    dw offset aCh	    ; "CH"
seg000:F72C		    dw offset aDh	    ; "DH"
seg000:F72E		    dw offset aBh	    ; "BH"
seg000:F730		    dw offset aAx	    ; "AX"
seg000:F732		    dw offset aCx	    ; "CX"
seg000:F734		    dw offset aDx	    ; "DX"
seg000:F736		    dw offset aBx	    ; "BX"
seg000:F738		    dw offset aSp	    ; "SP"
seg000:F73A		    dw offset aBp	    ; "BP"
seg000:F73C		    dw offset aSi	    ; "SI"
seg000:F73E		    dw offset aDi	    ; "DI"
seg000:F740		    dw offset aEs	    ; "ES"
seg000:F742		    dw offset aCs	    ; "CS"
seg000:F744		    dw offset aSs	    ; "SS"
seg000:F746		    dw offset aDs	    ; "DS"
seg000:F748 string_end	    db	  0		    ; DATA XREF: seg000:Ptr_size_stringo
seg000:F749 aBytePtr_0	    db 'BYTE PTR ',0        ; DATA XREF: seg000:F77Bo
seg000:F753 aWordPtr	    db 'WORD PTR ',0        ; DATA XREF: seg000:F77Do
seg000:F75D aDwordPtr	    db 'DWORD PTR ',0       ; DATA XREF: seg000:F77Fo
seg000:F768 a?Ptr	    db '? PTR ',0           ; DATA XREF: seg000:F781o
seg000:F76F aBytePtr	    db 'BYTE PTR ',0        ; DATA XREF: seg000:F783o
seg000:F779 Ptr_size_string dw offset string_end    ; DATA XREF: sub_8548+7r
seg000:F77B		    dw offset aBytePtr_0    ; "BYTE PTR	"
seg000:F77D		    dw offset aWordPtr	    ; "WORD PTR	"
seg000:F77F		    dw offset aDwordPtr	    ; "DWORD PTR "
seg000:F781		    dw offset a?Ptr	    ; "? PTR "
seg000:F783		    dw offset aBytePtr	    ; "BYTE PTR	"
seg000:F785 aBxSi	    db '[BX+SI',0           ; DATA XREF: seg000:off_F7B1o
seg000:F78C aBxDi	    db '[BX+DI',0           ; DATA XREF: seg000:F7B3o
seg000:F793 aBpSi	    db '[BP+SI',0           ; DATA XREF: seg000:F7B5o
seg000:F79A aBpDi	    db '[BP+DI',0           ; DATA XREF: seg000:F7B7o
seg000:F7A1 aSi_0	    db '[SI',0              ; DATA XREF: seg000:F7B9o
seg000:F7A5 aDi_0	    db '[DI',0              ; DATA XREF: seg000:F7BBo
seg000:F7A9 aBp_0	    db '[BP',0              ; DATA XREF: seg000:F7BDo
seg000:F7AD aBx_0	    db '[BX',0              ; DATA XREF: seg000:F7BFo
seg000:F7B1 off_F7B1	    dw offset aBxSi	    ; DATA XREF: assembler_?+7Dr
seg000:F7B1					    ; "[BX+SI"
seg000:F7B3		    dw offset aBxDi	    ; "[BX+DI"
seg000:F7B5		    dw offset aBpSi	    ; "[BP+SI"
seg000:F7B7		    dw offset aBpDi	    ; "[BP+DI"
seg000:F7B9		    dw offset aSi_0	    ; "[SI"
seg000:F7BB		    dw offset aDi_0	    ; "[DI"
seg000:F7BD		    dw offset aBp_0	    ; "[BP"
seg000:F7BF		    dw offset aBx_0	    ; "[BX"
seg000:F7C1 compare_char    db '&'                  ; 0 ; DATA XREF: print_addembler?+5Ao
seg000:F7C1		    db '.'                  ; 1
seg000:F7C1		    db '6'                  ; 2
seg000:F7C1		    db '>'                  ; 3
seg000:F7C1		    db 'ð'                  ; 4
seg000:F7C1		    db 'ò'                  ; 5
seg000:F7C1		    db 'ó'                  ; 6
seg000:F7C8 aErrorsFoundPle db '--- Errors found!  Please unlock keyboard, then press <Esc> to co'
seg000:F7C8					    ; DATA XREF: test_print_error?+18o
seg000:F7C8		    db 'ntinue ---',0
seg000:F814 aParityHardware db 'Parity hardware failure!  Address: ',0
seg000:F814					    ; DATA XREF: print_bad_parity+6o
seg000:F838 aBit	    db ', Bit: ',0          ; DATA XREF: print_bad_ram+13o
seg000:F840		    db	  0
seg000:F841
seg000:F841 ; =============== S	U B R O	U T I N	E =======================================
seg000:F841
seg000:F841
seg000:F841 load_DSAX_compa_0 proc far		    ; DATA XREF: seg000:FF07o
seg000:F841		    jmp	    near ptr load_DSAX_compa
seg000:F841 load_DSAX_compa_0 endp
seg000:F841
seg000:F841 ; ---------------------------------------------------------------------------
seg000:F844		    db	  0
seg000:F845		    db	  0
seg000:F846		    db	  0
seg000:F847		    db	  0
seg000:F848		    db	  0
seg000:F849		    db	  0
seg000:F84A		    db	  0
seg000:F84B		    db	  0
seg000:F84C		    db	  0
seg000:F84D
seg000:F84D ; =============== S	U B R O	U T I N	E =======================================
seg000:F84D
seg000:F84D
seg000:F84D load_DSAX_0	    proc far		    ; DATA XREF: seg000:FF05o
seg000:F84D
seg000:F84D ; FUNCTION CHUNK AT	seg000:286A SIZE 0000000B BYTES
seg000:F84D
seg000:F84D		    jmp	    load_DSAX
seg000:F84D load_DSAX_0	    endp
seg000:F84D
seg000:F84D ; ---------------------------------------------------------------------------
seg000:F850 plusplus	    db ' +++',0             ; DATA XREF: cache_bad+36o
seg000:F850					    ; print_bad_ram:loc_8E6Co ...
seg000:F855		    db	  0
seg000:F856		    db	  0
seg000:F857		    db	  0
seg000:F858		    db	  0
seg000:F859
seg000:F859 ; =============== S	U B R O	U T I N	E =======================================
seg000:F859
seg000:F859 ; Attributes: thunk
seg000:F859
seg000:F859 sub_F859	    proc far		    ; DATA XREF: seg000:FF0Do
seg000:F859		    jmp	    near ptr sub_A114
seg000:F859 sub_F859	    endp
seg000:F859
seg000:F859 ; ---------------------------------------------------------------------------
seg000:F85C aRamFailureAddr db 'RAM failure!  Address: ',0
seg000:F85C					    ; DATA XREF: print_bad_ram:loc_8E37o
seg000:F874 aChipU	    db ', Chip: U',0        ; DATA XREF: print_bad_ram+33o
seg000:F874					    ; print_bad_parity+10o
seg000:F87E aIncorrectVideo db 'Incorrect video configuration - Please run SETUP! +++',0
seg000:F87E					    ; DATA XREF: Video_init_?+98o
seg000:F8B4 aDivideByZero   db 0Dh,0Ah		    ; DATA XREF: div_by_zero+7o
seg000:F8B4		    db '+++ Divide by zero! +++',0Dh,0Ah,0
seg000:F8D0 aOverflow	    db 0Dh,0Ah		    ; DATA XREF: overflow+7o
seg000:F8D0		    db '+++ Overflow! +++',0Dh,0Ah,0
seg000:F8E6 aWildInterrupt  db 0Dh,0Ah		    ; DATA XREF: sub_1BFB+7o
seg000:F8E6		    db '+++ Wild interrupt! +++',0Dh,0Ah,0
seg000:F902 aWildHardwareIn db 0Dh,0Ah
seg000:F902		    db '+++ Wild hardware interrupt! +++',0Dh,0Ah,0
seg000:F927 aNonMaskableInt db 0Dh,0Ah		    ; DATA XREF: NMI_handler+38o
seg000:F927		    db '+++ Non-maskable interrupt! +++',0Dh,0Ah,0
seg000:F94B unk_F94B	    db 0C6h ; Æ		    ; DATA XREF: sub_34DC+12o
seg000:F94C		    db	  3
seg000:F94D		    db	  9
seg000:F94E		    db	  0
seg000:F94F		    db	  0
seg000:F950		    db 0FFh
seg000:F951		    db 0FFh
seg000:F952		    db	  0
seg000:F953		    db	  8
seg000:F954		    db	  0
seg000:F955		    db	  0
seg000:F956		    db	  0
seg000:F957		    db 0C6h ; Æ
seg000:F958		    db	  3
seg000:F959		    db	23h ; #
seg000:F95A		    db	  0
seg000:F95B		    db	64h ; d
seg000:F95C		    db	  2
seg000:F95D		    db	  4
seg000:F95E		    db	  0
seg000:F95F		    db	  0
seg000:F960		    db 0FFh
seg000:F961		    db 0FFh
seg000:F962		    db	  0
seg000:F963		    db	  0
seg000:F964		    db	  0
seg000:F965		    db	  0
seg000:F966		    db	  0
seg000:F967		    db	64h ; d
seg000:F968		    db	  2
seg000:F969		    db	10h
seg000:F96A		    db	  0
seg000:F96B		    db	  0
seg000:F96C		    db	  4
seg000:F96D		    db	0Fh
seg000:F96E		    db	  0
seg000:F96F		    db	  0
seg000:F970		    db 0FFh
seg000:F971		    db 0FFh
seg000:F972		    db	  0
seg000:F973		    db	  8
seg000:F974		    db	  0
seg000:F975		    db	  0
seg000:F976		    db	  0
seg000:F977		    db	  0
seg000:F978		    db	  4
seg000:F979		    db	11h
seg000:F97A		    db	  0
seg000:F97B		    db	  0
seg000:F97C		    db	  4
seg000:F97D		    db	  5
seg000:F97E		    db	  0
seg000:F97F		    db	  0
seg000:F980		    db 0FFh
seg000:F981		    db 0FFh
seg000:F982		    db	  0
seg000:F983		    db	  0
seg000:F984		    db	  0
seg000:F985		    db	  0
seg000:F986		    db	  0
seg000:F987		    db	  0
seg000:F988		    db	  4
seg000:F989		    db	11h
seg000:F98A		    db	  0
seg000:F98B		    db	  0
seg000:F98C		    db	  4
seg000:F98D		    db	  7
seg000:F98E		    db	  0
seg000:F98F		    db	  0
seg000:F990		    db 0FFh
seg000:F991		    db 0FFh
seg000:F992		    db	  0
seg000:F993		    db	  0
seg000:F994		    db	  0
seg000:F995		    db	  0
seg000:F996		    db	  0
seg000:F997		    db	  0
seg000:F998		    db	  4
seg000:F999		    db	11h
seg000:F99A		    db	  0
seg000:F99B		    db	  0
seg000:F99C		    db	  4
seg000:F99D		    db	  9
seg000:F99E		    db	  0
seg000:F99F		    db	  0
seg000:F9A0		    db 0FFh
seg000:F9A1		    db 0FFh
seg000:F9A2		    db	  0
seg000:F9A3		    db	  8
seg000:F9A4		    db	  0
seg000:F9A5		    db	  0
seg000:F9A6		    db	  0
seg000:F9A7		    db	  0
seg000:F9A8		    db	  4
seg000:F9A9		    db	11h
seg000:F9AA		    db	  1
seg000:F9AB		    db	68h ; h
seg000:F9AC		    db	  3
seg000:F9AD		    db	  6
seg000:F9AE		    db	  0
seg000:F9AF		    db	  0
seg000:F9B0		    db	8Ah ; 
seg000:F9B1		    db	  2
seg000:F9B2		    db	  0
seg000:F9B3		    db	  0
seg000:F9B4		    db	  0
seg000:F9B5		    db	  0
seg000:F9B6		    db	  0
seg000:F9B7		    db	67h ; g
seg000:F9B8		    db	  3
seg000:F9B9		    db	11h
seg000:F9BA		    db	  1
seg000:F9BB		    db	68h ; h
seg000:F9BC		    db	  3
seg000:F9BD		    db	  7
seg000:F9BE		    db	  0
seg000:F9BF		    db	  0
seg000:F9C0		    db	8Ah ; 
seg000:F9C1		    db	  2
seg000:F9C2		    db	  0
seg000:F9C3		    db	  0
seg000:F9C4		    db	  0
seg000:F9C5		    db	  0
seg000:F9C6		    db	  0
seg000:F9C7		    db	67h ; g
seg000:F9C8		    db	  3
seg000:F9C9		    db	11h
seg000:F9CA		    db	  1
seg000:F9CB		    db	68h ; h
seg000:F9CC		    db	  3
seg000:F9CD		    db	  7
seg000:F9CE		    db	  0
seg000:F9CF		    db	  0
seg000:F9D0		    db	8Ah ; 
seg000:F9D1		    db	  2
seg000:F9D2		    db	  0
seg000:F9D3		    db	  0
seg000:F9D4		    db	  0
seg000:F9D5		    db	  0
seg000:F9D6		    db	  0
seg000:F9D7		    db	67h ; g
seg000:F9D8		    db	  3
seg000:F9D9		    db	11h
seg000:F9DA		    db	  0
seg000:F9DB		    db 0C5h ; Å
seg000:F9DC		    db	  3
seg000:F9DD		    db	  5
seg000:F9DE		    db	  0
seg000:F9DF		    db	  0
seg000:F9E0		    db 0FFh
seg000:F9E1		    db 0FFh
seg000:F9E2		    db	  0
seg000:F9E3		    db	  0
seg000:F9E4		    db	  0
seg000:F9E5		    db	  0
seg000:F9E6		    db	  0
seg000:F9E7		    db 0C5h ; Å
seg000:F9E8		    db	  3
seg000:F9E9		    db	11h
seg000:F9EA		    db	  0
seg000:F9EB		    db 0C5h ; Å
seg000:F9EC		    db	  3
seg000:F9ED		    db	0Ah
seg000:F9EE		    db	  0
seg000:F9EF		    db	  0
seg000:F9F0		    db 0FFh
seg000:F9F1		    db 0FFh
seg000:F9F2		    db	  0
seg000:F9F3		    db	  0
seg000:F9F4		    db	  0
seg000:F9F5		    db	  0
seg000:F9F6		    db	  0
seg000:F9F7		    db 0C5h ; Å
seg000:F9F8		    db	  3
seg000:F9F9		    db	11h
seg000:F9FA		    db	  0
seg000:F9FB		    db 0B8h ; ¸
seg000:F9FC		    db	  3
seg000:F9FD		    db	  3
seg000:F9FE		    db	  0
seg000:F9FF		    db	  0
seg000:FA00		    db 0FFh
seg000:FA01		    db 0FFh
seg000:FA02		    db	  0
seg000:FA03		    db	  0
seg000:FA04		    db	  0
seg000:FA05		    db	  0
seg000:FA06		    db	  0
seg000:FA07		    db 0B8h ; ¸
seg000:FA08		    db	  3
seg000:FA09		    db	1Dh
seg000:FA0A		    db	  2
seg000:FA0B		    db 0B8h ; ¸
seg000:FA0C		    db	  3
seg000:FA0D		    db	  5
seg000:FA0E		    db	  0
seg000:FA0F		    db	  0
seg000:FA10		    db 0FFh
seg000:FA11		    db 0FFh
seg000:FA12		    db	  0
seg000:FA13		    db	  0
seg000:FA14		    db	  0
seg000:FA15		    db	  0
seg000:FA16		    db	  0
seg000:FA17		    db 0B8h ; ¸
seg000:FA18		    db	  3
seg000:FA19		    db	1Dh
seg000:FA1A		    db	  2
seg000:FA1B		    db 0A8h ; ¨
seg000:FA1C		    db	  3
seg000:FA1D		    db	  7
seg000:FA1E		    db	  0
seg000:FA1F		    db	  0
seg000:FA20		    db 0FFh
seg000:FA21		    db 0FFh
seg000:FA22		    db	  0
seg000:FA23		    db	  0
seg000:FA24		    db	  0
seg000:FA25		    db	  0
seg000:FA26		    db	  0
seg000:FA27		    db 0A8h ; ¨
seg000:FA28		    db	  3
seg000:FA29		    db	24h ; $
seg000:FA2A		    db	  2
seg000:FA2B		    db 0E4h ; ä
seg000:FA2C		    db	  3
seg000:FA2D		    db	0Ch
seg000:FA2E		    db	  0
seg000:FA2F		    db	  0
seg000:FA30		    db 0FFh
seg000:FA31		    db 0FFh
seg000:FA32		    db	  0
seg000:FA33		    db	  0
seg000:FA34		    db	  0
seg000:FA35		    db	  0
seg000:FA36		    db	  0
seg000:FA37		    db 0E4h ; ä
seg000:FA38		    db	  3
seg000:FA39		    db	24h ; $
seg000:FA3A		    db	  2
seg000:FA3B		    db 0F9h ; ù
seg000:FA3C		    db	  2
seg000:FA3D		    db	  8
seg000:FA3E		    db	  0
seg000:FA3F		    db	  0
seg000:FA40		    db 0FFh
seg000:FA41		    db 0FFh
seg000:FA42		    db	  0
seg000:FA43		    db	  0
seg000:FA44		    db	  0
seg000:FA45		    db	  0
seg000:FA46		    db	  0
seg000:FA47		    db 0F9h ; ù
seg000:FA48		    db	  2
seg000:FA49		    db	27h ; '
seg000:FA4A		    db	  0
seg000:FA4B		    db	9Eh ; 
seg000:FA4C		    db	  2
seg000:FA4D		    db	  8
seg000:FA4E		    db	  0
seg000:FA4F		    db	  0
seg000:FA50		    db 0FFh
seg000:FA51		    db 0FFh
seg000:FA52		    db	  0
seg000:FA53		    db	  0
seg000:FA54		    db	  0
seg000:FA55		    db	  0
seg000:FA56		    db	  0
seg000:FA57		    db	9Eh ; 
seg000:FA58		    db	  2
seg000:FA59		    db	1Dh
seg000:FA5A		    db	  2
seg000:FA5B		    db	  0
seg000:FA5C		    db	  0
seg000:FA5D		    db	  0
seg000:FA5E		    db	  0
seg000:FA5F		    db	  0
seg000:FA60		    db	  0
seg000:FA61		    db	  0
seg000:FA62		    db	  0
seg000:FA63		    db	  0
seg000:FA64		    db	  0
seg000:FA65		    db	  0
seg000:FA66		    db	  0
seg000:FA67		    db	  0
seg000:FA68		    db	  0
seg000:FA69		    db	  0
seg000:FA6A		    db	  0
seg000:FA6B		    db	  0
seg000:FA6C		    db	  0
seg000:FA6D		    db	  0
seg000:FA6E some_table	    dw 0		    ; DATA XREF: load_some_table+29o
seg000:FA6E					    ; sub_498A+46o
seg000:FA70		    dw 0
seg000:FA72		    dw 0
seg000:FA74		    dw 0
seg000:FA76		    dw 817Eh
seg000:FA78		    dw 81A5h
seg000:FA7A		    dw 99BDh
seg000:FA7C		    dw 7E81h
seg000:FA7E		    dw 0FF7Eh
seg000:FA80		    dw 0FFDBh
seg000:FA82		    dw 0E7C3h
seg000:FA84		    dw 7EFFh
seg000:FA86		    dw 0FE6Ch
seg000:FA88		    dw 0FEFEh
seg000:FA8A		    dw 387Ch
seg000:FA8C		    dw 10h
seg000:FA8E		    dw 3810h
seg000:FA90		    dw 0FE7Ch
seg000:FA92		    dw 387Ch
seg000:FA94		    dw 10h
seg000:FA96		    dw 7C38h
seg000:FA98		    dw 0FE38h
seg000:FA9A		    dw 7CFEh
seg000:FA9C		    dw 7C38h
seg000:FA9E		    dw 1010h
seg000:FAA0		    db	38h ; 8
seg000:FAA1		    db	7Ch ; |
seg000:FAA2		    db 0FEh ; þ
seg000:FAA3		    db	7Ch ; |
seg000:FAA4		    db	38h ; 8
seg000:FAA5		    db	7Ch ; |
seg000:FAA6		    db	  0
seg000:FAA7		    db	  0
seg000:FAA8		    db	18h
seg000:FAA9		    db	3Ch ; <
seg000:FAAA		    db	3Ch ; <
seg000:FAAB		    db	18h
seg000:FAAC		    db	  0
seg000:FAAD		    db	  0
seg000:FAAE		    db 0FFh
seg000:FAAF		    db 0FFh
seg000:FAB0		    db 0E7h ; ç
seg000:FAB1		    db 0C3h ; Ã
seg000:FAB2		    db 0C3h ; Ã
seg000:FAB3		    db 0E7h ; ç
seg000:FAB4		    db 0FFh
seg000:FAB5		    db 0FFh
seg000:FAB6		    db	  0
seg000:FAB7		    db	3Ch ; <
seg000:FAB8		    db	66h ; f
seg000:FAB9		    db	42h ; B
seg000:FABA		    db	42h ; B
seg000:FABB		    db	66h ; f
seg000:FABC		    db	3Ch ; <
seg000:FABD		    db	  0
seg000:FABE		    db 0FFh
seg000:FABF		    db 0C3h ; Ã
seg000:FAC0		    db	99h ; 
seg000:FAC1		    db 0BDh ; ½
seg000:FAC2		    db 0BDh ; ½
seg000:FAC3		    db	99h ; 
seg000:FAC4		    db 0C3h ; Ã
seg000:FAC5		    db 0FFh
seg000:FAC6		    db	0Fh
seg000:FAC7		    db	  7
seg000:FAC8		    db	0Fh
seg000:FAC9		    db	7Dh ; }
seg000:FACA		    db 0CCh ; Ì
seg000:FACB		    db 0CCh ; Ì
seg000:FACC		    db 0CCh ; Ì
seg000:FACD		    db	78h ; x
seg000:FACE		    db	3Ch ; <
seg000:FACF		    db	66h ; f
seg000:FAD0		    db	66h ; f
seg000:FAD1		    db	66h ; f
seg000:FAD2		    db	3Ch ; <
seg000:FAD3		    db	18h
seg000:FAD4		    db	7Eh ; ~
seg000:FAD5		    db	18h
seg000:FAD6		    db	3Fh ; ?
seg000:FAD7		    db	33h ; 3
seg000:FAD8		    db	3Fh ; ?
seg000:FAD9		    db	30h ; 0
seg000:FADA		    db	30h ; 0
seg000:FADB		    db	70h ; p
seg000:FADC		    db 0F0h ; ð
seg000:FADD		    db 0E0h ; à
seg000:FADE		    db	7Fh ; 
seg000:FADF		    db	63h ; c
seg000:FAE0		    db	7Fh ; 
seg000:FAE1		    db	63h ; c
seg000:FAE2		    db	63h ; c
seg000:FAE3		    db	67h ; g
seg000:FAE4		    db 0E6h ; æ
seg000:FAE5		    db 0C0h ; À
seg000:FAE6		    db	99h ; 
seg000:FAE7		    db	5Ah ; Z
seg000:FAE8		    dw 0E73Ch
seg000:FAEA word_FAEA	    dw 3CE7h
seg000:FAEC		    dw 995Ah
seg000:FAEE		    dw 0E080h
seg000:FAF0		    dw 0FEF8h
seg000:FAF2		    dw 0E0F8h
seg000:FAF4		    dw 80h
seg000:FAF6		    dw 0E02h
seg000:FAF8		    db	3Eh ; >
seg000:FAF9		    db 0FEh ; þ
seg000:FAFA		    db	3Eh ; >
seg000:FAFB		    db	0Eh
seg000:FAFC		    db	  2
seg000:FAFD		    db	  0
seg000:FAFE		    db	18h
seg000:FAFF		    db	3Ch ; <
seg000:FB00		    db	7Eh ; ~
seg000:FB01		    db	18h
seg000:FB02		    db	18h
seg000:FB03		    db	7Eh ; ~
seg000:FB04		    db	3Ch ; <
seg000:FB05		    db	18h
seg000:FB06		    db	66h ; f
seg000:FB07		    db	66h ; f
seg000:FB08		    db	66h ; f
seg000:FB09		    db	66h ; f
seg000:FB0A		    db	66h ; f
seg000:FB0B		    db	  0
seg000:FB0C		    db	66h ; f
seg000:FB0D		    db	  0
seg000:FB0E		    db	7Fh ; 
seg000:FB0F		    db 0DBh ; Û
seg000:FB10		    db 0DBh ; Û
seg000:FB11		    db	7Bh ; {
seg000:FB12		    db	1Bh
seg000:FB13		    db	1Bh
seg000:FB14		    db	1Bh
seg000:FB15		    db	  0
seg000:FB16		    db	3Eh ; >
seg000:FB17		    db	63h ; c
seg000:FB18		    db	38h ; 8
seg000:FB19		    db	6Ch ; l
seg000:FB1A		    db	6Ch ; l
seg000:FB1B		    db	38h ; 8
seg000:FB1C		    db 0CCh ; Ì
seg000:FB1D		    db	78h ; x
seg000:FB1E		    db	  0
seg000:FB1F		    db	  0
seg000:FB20		    db	  0
seg000:FB21		    db	  0
seg000:FB22		    db	7Eh ; ~
seg000:FB23		    db	7Eh ; ~
seg000:FB24		    db	7Eh ; ~
seg000:FB25		    db	  0
seg000:FB26		    db	18h
seg000:FB27		    db	3Ch ; <
seg000:FB28		    db	7Eh ; ~
seg000:FB29		    db	18h
seg000:FB2A		    db	7Eh ; ~
seg000:FB2B		    db	3Ch ; <
seg000:FB2C		    db	18h
seg000:FB2D		    db 0FFh
seg000:FB2E		    db	18h
seg000:FB2F		    db	3Ch ; <
seg000:FB30		    db	7Eh ; ~
seg000:FB31		    db	18h
seg000:FB32		    db	18h
seg000:FB33		    db	18h
seg000:FB34		    db	18h
seg000:FB35		    db	  0
seg000:FB36		    db	18h
seg000:FB37		    db	18h
seg000:FB38		    db	18h
seg000:FB39		    db	18h
seg000:FB3A		    db	7Eh ; ~
seg000:FB3B		    db	3Ch ; <
seg000:FB3C		    db	18h
seg000:FB3D		    db	  0
seg000:FB3E		    db	  0
seg000:FB3F		    db	18h
seg000:FB40		    db	0Ch
seg000:FB41		    db 0FEh ; þ
seg000:FB42		    db	0Ch
seg000:FB43		    db	18h
seg000:FB44		    db	  0
seg000:FB45		    db	  0
seg000:FB46		    db	  0
seg000:FB47		    db	30h ; 0
seg000:FB48		    db	60h ; `
seg000:FB49		    db 0FEh ; þ
seg000:FB4A		    db	60h ; `
seg000:FB4B		    db	30h ; 0
seg000:FB4C		    db	  0
seg000:FB4D		    db	  0
seg000:FB4E		    db	  0
seg000:FB4F		    db	  0
seg000:FB50		    db 0C0h ; À
seg000:FB51		    db 0C0h ; À
seg000:FB52		    db 0C0h ; À
seg000:FB53		    db 0FEh ; þ
seg000:FB54		    db	  0
seg000:FB55		    db	  0
seg000:FB56		    db	  0
seg000:FB57		    db	24h ; $
seg000:FB58		    db	66h ; f
seg000:FB59		    db 0FFh
seg000:FB5A		    db	66h ; f
seg000:FB5B		    db	24h ; $
seg000:FB5C		    db	  0
seg000:FB5D		    db	  0
seg000:FB5E		    db	  0
seg000:FB5F		    db	18h
seg000:FB60		    db	3Ch ; <
seg000:FB61		    db	7Eh ; ~
seg000:FB62		    db 0FFh
seg000:FB63		    db 0FFh
seg000:FB64		    db	  0
seg000:FB65		    db	  0
seg000:FB66		    db	  0
seg000:FB67		    db 0FFh
seg000:FB68		    db 0FFh
seg000:FB69		    db	7Eh ; ~
seg000:FB6A		    db	3Ch ; <
seg000:FB6B		    db	18h
seg000:FB6C		    db	  0
seg000:FB6D		    db	  0
seg000:FB6E		    db	  0
seg000:FB6F		    db	  0
seg000:FB70		    db	  0
seg000:FB71		    db	  0
seg000:FB72		    db	  0
seg000:FB73		    db	  0
seg000:FB74		    db	  0
seg000:FB75		    db	  0
seg000:FB76		    db	30h ; 0
seg000:FB77		    db	78h ; x
seg000:FB78		    db	78h ; x
seg000:FB79		    db	30h ; 0
seg000:FB7A		    db	30h ; 0
seg000:FB7B		    db	  0
seg000:FB7C		    db	30h ; 0
seg000:FB7D		    db	  0
seg000:FB7E		    db	6Ch ; l
seg000:FB7F		    db	6Ch ; l
seg000:FB80		    db	6Ch ; l
seg000:FB81		    db	  0
seg000:FB82		    db	  0
seg000:FB83		    db	  0
seg000:FB84		    db	  0
seg000:FB85		    db	  0
seg000:FB86		    db	6Ch ; l
seg000:FB87		    db	6Ch ; l
seg000:FB88		    db 0FEh ; þ
seg000:FB89		    db	6Ch ; l
seg000:FB8A		    db 0FEh ; þ
seg000:FB8B		    db	6Ch ; l
seg000:FB8C		    db	6Ch ; l
seg000:FB8D		    db	  0
seg000:FB8E		    db	30h ; 0
seg000:FB8F		    db	7Ch ; |
seg000:FB90		    db 0C0h ; À
seg000:FB91		    db	78h ; x
seg000:FB92		    db	0Ch
seg000:FB93		    db 0F8h ; ø
seg000:FB94		    db	30h ; 0
seg000:FB95		    db	  0
seg000:FB96		    db	  0
seg000:FB97		    db 0C6h ; Æ
seg000:FB98		    db 0CCh ; Ì
seg000:FB99		    db	18h
seg000:FB9A		    db	30h ; 0
seg000:FB9B		    db	66h ; f
seg000:FB9C		    db 0C6h ; Æ
seg000:FB9D		    db	  0
seg000:FB9E		    db	38h ; 8
seg000:FB9F		    db	6Ch ; l
seg000:FBA0		    db	38h ; 8
seg000:FBA1		    db	76h ; v
seg000:FBA2		    db 0DCh ; Ü
seg000:FBA3		    db 0CCh ; Ì
seg000:FBA4		    db	76h ; v
seg000:FBA5		    db	  0
seg000:FBA6		    db	60h ; `
seg000:FBA7		    db	60h ; `
seg000:FBA8		    db 0C0h ; À
seg000:FBA9		    db	  0
seg000:FBAA		    db	  0
seg000:FBAB		    db	  0
seg000:FBAC		    db	  0
seg000:FBAD		    db	  0
seg000:FBAE		    db	18h
seg000:FBAF		    db	30h ; 0
seg000:FBB0		    db	60h ; `
seg000:FBB1		    db	60h ; `
seg000:FBB2		    db	60h ; `
seg000:FBB3		    db	30h ; 0
seg000:FBB4		    db	18h
seg000:FBB5		    db	  0
seg000:FBB6		    db	60h ; `
seg000:FBB7		    db	30h ; 0
seg000:FBB8		    db	18h
seg000:FBB9		    db	18h
seg000:FBBA		    db	18h
seg000:FBBB		    db	30h ; 0
seg000:FBBC		    db	60h ; `
seg000:FBBD		    db	  0
seg000:FBBE		    db	  0
seg000:FBBF		    db	66h ; f
seg000:FBC0		    db	3Ch ; <
seg000:FBC1		    db 0FFh
seg000:FBC2		    db	3Ch ; <
seg000:FBC3		    db	66h ; f
seg000:FBC4		    db	  0
seg000:FBC5		    db	  0
seg000:FBC6		    db	  0
seg000:FBC7		    db	30h ; 0
seg000:FBC8		    db	30h ; 0
seg000:FBC9		    db 0FCh ; ü
seg000:FBCA		    db	30h ; 0
seg000:FBCB		    db	30h ; 0
seg000:FBCC		    db	  0
seg000:FBCD		    db	  0
seg000:FBCE		    db	  0
seg000:FBCF		    db	  0
seg000:FBD0		    db	  0
seg000:FBD1		    db	  0
seg000:FBD2		    db	  0
seg000:FBD3		    db	30h ; 0
seg000:FBD4		    db	30h ; 0
seg000:FBD5		    db	60h ; `
seg000:FBD6		    db	  0
seg000:FBD7		    db	  0
seg000:FBD8		    db	  0
seg000:FBD9		    db 0FCh ; ü
seg000:FBDA		    db	  0
seg000:FBDB		    db	  0
seg000:FBDC		    db	  0
seg000:FBDD		    db	  0
seg000:FBDE		    db	  0
seg000:FBDF		    db	  0
seg000:FBE0		    db	  0
seg000:FBE1		    db	  0
seg000:FBE2		    db	  0
seg000:FBE3		    db	30h ; 0
seg000:FBE4		    db	30h ; 0
seg000:FBE5		    db	  0
seg000:FBE6		    db	  6
seg000:FBE7		    db	0Ch
seg000:FBE8		    db	18h
seg000:FBE9		    db	30h ; 0
seg000:FBEA		    db	60h ; `
seg000:FBEB		    db 0C0h ; À
seg000:FBEC		    db	80h ; 
seg000:FBED		    db	  0
seg000:FBEE		    db	7Ch ; |
seg000:FBEF		    db 0C6h ; Æ
seg000:FBF0		    db 0CEh ; Î
seg000:FBF1		    db 0DEh ; Þ
seg000:FBF2		    db 0F6h ; ö
seg000:FBF3		    db 0E6h ; æ
seg000:FBF4		    db	7Ch ; |
seg000:FBF5		    db	  0
seg000:FBF6		    db	30h ; 0
seg000:FBF7		    db	70h ; p
seg000:FBF8		    db	30h ; 0
seg000:FBF9		    db	30h ; 0
seg000:FBFA		    db	30h ; 0
seg000:FBFB		    db	30h ; 0
seg000:FBFC		    db 0FCh ; ü
seg000:FBFD		    db	  0
seg000:FBFE		    db	78h ; x
seg000:FBFF		    db 0CCh ; Ì
seg000:FC00		    db	0Ch
seg000:FC01		    db	38h ; 8
seg000:FC02		    db	60h ; `
seg000:FC03		    db 0CCh ; Ì
seg000:FC04		    db 0FCh ; ü
seg000:FC05		    db	  0
seg000:FC06		    db	78h ; x
seg000:FC07		    db 0CCh ; Ì
seg000:FC08		    db	0Ch
seg000:FC09		    db	38h ; 8
seg000:FC0A		    db	0Ch
seg000:FC0B		    db 0CCh ; Ì
seg000:FC0C		    db	78h ; x
seg000:FC0D		    db	  0
seg000:FC0E		    db	1Ch
seg000:FC0F		    db	3Ch ; <
seg000:FC10		    db	6Ch ; l
seg000:FC11		    db 0CCh ; Ì
seg000:FC12		    db 0FEh ; þ
seg000:FC13		    db	0Ch
seg000:FC14		    db	1Eh
seg000:FC15		    db	  0
seg000:FC16		    db 0FCh ; ü
seg000:FC17		    db 0C0h ; À
seg000:FC18		    db 0F8h ; ø
seg000:FC19		    db	0Ch
seg000:FC1A		    db	0Ch
seg000:FC1B		    db 0CCh ; Ì
seg000:FC1C		    db	78h ; x
seg000:FC1D		    db	  0
seg000:FC1E		    db	38h ; 8
seg000:FC1F		    db	60h ; `
seg000:FC20		    db 0C0h ; À
seg000:FC21		    db 0F8h ; ø
seg000:FC22		    db 0CCh ; Ì
seg000:FC23		    db 0CCh ; Ì
seg000:FC24		    db	78h ; x
seg000:FC25		    db	  0
seg000:FC26		    db 0FCh ; ü
seg000:FC27		    db 0CCh ; Ì
seg000:FC28		    db	0Ch
seg000:FC29		    db	18h
seg000:FC2A		    db	30h ; 0
seg000:FC2B		    db	30h ; 0
seg000:FC2C		    db	30h ; 0
seg000:FC2D		    db	  0
seg000:FC2E		    db	78h ; x
seg000:FC2F		    db 0CCh ; Ì
seg000:FC30		    db 0CCh ; Ì
seg000:FC31		    db	78h ; x
seg000:FC32		    db 0CCh ; Ì
seg000:FC33		    db 0CCh ; Ì
seg000:FC34		    db	78h ; x
seg000:FC35		    db	  0
seg000:FC36		    db	78h ; x
seg000:FC37		    db 0CCh ; Ì
seg000:FC38		    db 0CCh ; Ì
seg000:FC39		    db	7Ch ; |
seg000:FC3A		    db	0Ch
seg000:FC3B		    db	18h
seg000:FC3C		    db	70h ; p
seg000:FC3D		    db	  0
seg000:FC3E		    db	  0
seg000:FC3F		    db	30h ; 0
seg000:FC40		    db	30h ; 0
seg000:FC41		    db	  0
seg000:FC42		    db	  0
seg000:FC43		    db	30h ; 0
seg000:FC44		    db	30h ; 0
seg000:FC45		    db	  0
seg000:FC46		    db	  0
seg000:FC47		    db	30h ; 0
seg000:FC48		    db	30h ; 0
seg000:FC49		    db	  0
seg000:FC4A		    db	  0
seg000:FC4B		    db	30h ; 0
seg000:FC4C		    db	30h ; 0
seg000:FC4D		    db	60h ; `
seg000:FC4E		    db	18h
seg000:FC4F		    db	30h ; 0
seg000:FC50		    db	60h ; `
seg000:FC51		    db 0C0h ; À
seg000:FC52		    db	60h ; `
seg000:FC53		    db	30h ; 0
seg000:FC54		    db	18h
seg000:FC55		    db	  0
seg000:FC56		    db	  0
seg000:FC57		    db	  0
seg000:FC58		    db 0FCh ; ü
seg000:FC59		    db	  0
seg000:FC5A		    db	  0
seg000:FC5B		    db 0FCh ; ü
seg000:FC5C		    db	  0
seg000:FC5D		    db	  0
seg000:FC5E		    db	60h ; `
seg000:FC5F		    db	30h ; 0
seg000:FC60		    db	18h
seg000:FC61		    db	0Ch
seg000:FC62		    db	18h
seg000:FC63		    db	30h ; 0
seg000:FC64		    db	60h ; `
seg000:FC65		    db	  0
seg000:FC66		    db	78h ; x
seg000:FC67		    db 0CCh ; Ì
seg000:FC68		    db	0Ch
seg000:FC69		    db	18h
seg000:FC6A		    db	30h ; 0
seg000:FC6B		    db	  0
seg000:FC6C		    db	30h ; 0
seg000:FC6D		    db	  0
seg000:FC6E		    db	7Ch ; |
seg000:FC6F		    db 0C6h ; Æ
seg000:FC70		    db 0DEh ; Þ
seg000:FC71		    db 0DEh ; Þ
seg000:FC72		    db 0DEh ; Þ
seg000:FC73		    db 0C0h ; À
seg000:FC74		    db	78h ; x
seg000:FC75		    db	  0
seg000:FC76		    db	30h ; 0
seg000:FC77		    db	78h ; x
seg000:FC78		    db 0CCh ; Ì
seg000:FC79		    db 0CCh ; Ì
seg000:FC7A		    db 0FCh ; ü
seg000:FC7B		    db 0CCh ; Ì
seg000:FC7C		    db 0CCh ; Ì
seg000:FC7D		    db	  0
seg000:FC7E		    db 0FCh ; ü
seg000:FC7F		    db	66h ; f
seg000:FC80		    db	66h ; f
seg000:FC81		    db	7Ch ; |
seg000:FC82		    db	66h ; f
seg000:FC83		    db	66h ; f
seg000:FC84		    db 0FCh ; ü
seg000:FC85		    db	  0
seg000:FC86		    db	3Ch ; <
seg000:FC87		    db	66h ; f
seg000:FC88		    db 0C0h ; À
seg000:FC89		    db 0C0h ; À
seg000:FC8A		    db 0C0h ; À
seg000:FC8B		    db	66h ; f
seg000:FC8C		    db	3Ch ; <
seg000:FC8D		    db	  0
seg000:FC8E		    db 0F8h ; ø
seg000:FC8F		    db	6Ch ; l
seg000:FC90		    db	66h ; f
seg000:FC91		    db	66h ; f
seg000:FC92		    db	66h ; f
seg000:FC93		    db	6Ch ; l
seg000:FC94		    db 0F8h ; ø
seg000:FC95		    db	  0
seg000:FC96		    db 0FEh ; þ
seg000:FC97		    db	62h ; b
seg000:FC98		    db	68h ; h
seg000:FC99		    db	78h ; x
seg000:FC9A		    db	68h ; h
seg000:FC9B		    db	62h ; b
seg000:FC9C		    db 0FEh ; þ
seg000:FC9D		    db	  0
seg000:FC9E		    db 0FEh ; þ
seg000:FC9F		    db	62h ; b
seg000:FCA0		    db	68h ; h
seg000:FCA1		    db	78h ; x
seg000:FCA2		    db	68h ; h
seg000:FCA3		    db	60h ; `
seg000:FCA4		    db 0F0h ; ð
seg000:FCA5		    db	  0
seg000:FCA6		    db	3Ch ; <
seg000:FCA7		    db	66h ; f
seg000:FCA8		    db 0C0h ; À
seg000:FCA9		    db 0C0h ; À
seg000:FCAA		    db 0CEh ; Î
seg000:FCAB		    db	66h ; f
seg000:FCAC		    db	3Eh ; >
seg000:FCAD		    db	  0
seg000:FCAE		    db 0CCh ; Ì
seg000:FCAF		    db 0CCh ; Ì
seg000:FCB0		    db 0CCh ; Ì
seg000:FCB1		    db 0FCh ; ü
seg000:FCB2		    db 0CCh ; Ì
seg000:FCB3		    db 0CCh ; Ì
seg000:FCB4		    db 0CCh ; Ì
seg000:FCB5		    db	  0
seg000:FCB6		    db	78h ; x
seg000:FCB7		    db	30h ; 0
seg000:FCB8		    db	30h ; 0
seg000:FCB9		    db	30h ; 0
seg000:FCBA		    db	30h ; 0
seg000:FCBB		    db	30h ; 0
seg000:FCBC		    db	78h ; x
seg000:FCBD		    db	  0
seg000:FCBE		    db	1Eh
seg000:FCBF		    db	0Ch
seg000:FCC0		    db	0Ch
seg000:FCC1		    db	0Ch
seg000:FCC2		    db 0CCh ; Ì
seg000:FCC3		    db 0CCh ; Ì
seg000:FCC4		    db	78h ; x
seg000:FCC5		    db	  0
seg000:FCC6		    db 0E6h ; æ
seg000:FCC7		    db	66h ; f
seg000:FCC8		    db	6Ch ; l
seg000:FCC9		    db	78h ; x
seg000:FCCA		    db	6Ch ; l
seg000:FCCB		    db	66h ; f
seg000:FCCC		    db 0E6h ; æ
seg000:FCCD		    db	  0
seg000:FCCE		    db 0F0h ; ð
seg000:FCCF		    db	60h ; `
seg000:FCD0		    db	60h ; `
seg000:FCD1		    db	60h ; `
seg000:FCD2		    db	62h ; b
seg000:FCD3		    db	66h ; f
seg000:FCD4		    db 0FEh ; þ
seg000:FCD5		    db	  0
seg000:FCD6		    db 0C6h ; Æ
seg000:FCD7		    db 0EEh ; î
seg000:FCD8		    db 0FEh ; þ
seg000:FCD9		    db 0FEh ; þ
seg000:FCDA		    db 0D6h ; Ö
seg000:FCDB		    db 0C6h ; Æ
seg000:FCDC		    db 0C6h ; Æ
seg000:FCDD		    db	  0
seg000:FCDE		    db 0C6h ; Æ
seg000:FCDF		    db 0E6h ; æ
seg000:FCE0		    db 0F6h ; ö
seg000:FCE1		    db 0DEh ; Þ
seg000:FCE2		    db 0CEh ; Î
seg000:FCE3		    db 0C6h ; Æ
seg000:FCE4		    db 0C6h ; Æ
seg000:FCE5		    db	  0
seg000:FCE6		    db	38h ; 8
seg000:FCE7		    db	6Ch ; l
seg000:FCE8		    db 0C6h ; Æ
seg000:FCE9		    db 0C6h ; Æ
seg000:FCEA		    db 0C6h ; Æ
seg000:FCEB		    db	6Ch ; l
seg000:FCEC		    db	38h ; 8
seg000:FCED		    db	  0
seg000:FCEE		    db 0FCh ; ü
seg000:FCEF		    db	66h ; f
seg000:FCF0		    db	66h ; f
seg000:FCF1		    db	7Ch ; |
seg000:FCF2		    db	60h ; `
seg000:FCF3		    db	60h ; `
seg000:FCF4		    db 0F0h ; ð
seg000:FCF5		    db	  0
seg000:FCF6		    db	78h ; x
seg000:FCF7		    db 0CCh ; Ì
seg000:FCF8		    db 0CCh ; Ì
seg000:FCF9		    db 0CCh ; Ì
seg000:FCFA		    db 0DCh ; Ü
seg000:FCFB		    db	78h ; x
seg000:FCFC		    db	1Ch
seg000:FCFD		    db	  0
seg000:FCFE		    db 0FCh ; ü
seg000:FCFF		    db	66h ; f
seg000:FD00		    db	66h ; f
seg000:FD01		    db	7Ch ; |
seg000:FD02		    db	6Ch ; l
seg000:FD03		    db	66h ; f
seg000:FD04		    db 0E6h ; æ
seg000:FD05		    db	  0
seg000:FD06		    db	78h ; x
seg000:FD07		    db 0CCh ; Ì
seg000:FD08		    db 0E0h ; à
seg000:FD09		    db	70h ; p
seg000:FD0A		    db	1Ch
seg000:FD0B		    db 0CCh ; Ì
seg000:FD0C		    db	78h ; x
seg000:FD0D		    db	  0
seg000:FD0E		    db 0FCh ; ü
seg000:FD0F		    db 0B4h ; ´
seg000:FD10		    db	30h ; 0
seg000:FD11		    db	30h ; 0
seg000:FD12		    db	30h ; 0
seg000:FD13		    db	30h ; 0
seg000:FD14		    db	78h ; x
seg000:FD15		    db	  0
seg000:FD16		    db 0CCh ; Ì
seg000:FD17		    db 0CCh ; Ì
seg000:FD18		    db 0CCh ; Ì
seg000:FD19		    db 0CCh ; Ì
seg000:FD1A		    db 0CCh ; Ì
seg000:FD1B		    db 0CCh ; Ì
seg000:FD1C		    db 0FCh ; ü
seg000:FD1D		    db	  0
seg000:FD1E		    db 0CCh ; Ì
seg000:FD1F		    db 0CCh ; Ì
seg000:FD20		    db 0CCh ; Ì
seg000:FD21		    db 0CCh ; Ì
seg000:FD22		    db 0CCh ; Ì
seg000:FD23		    db	78h ; x
seg000:FD24		    db	30h ; 0
seg000:FD25		    db	  0
seg000:FD26		    db 0C6h ; Æ
seg000:FD27		    db 0C6h ; Æ
seg000:FD28		    db 0C6h ; Æ
seg000:FD29		    db 0D6h ; Ö
seg000:FD2A		    db 0FEh ; þ
seg000:FD2B		    db 0EEh ; î
seg000:FD2C		    db 0C6h ; Æ
seg000:FD2D		    db	  0
seg000:FD2E		    db 0C6h ; Æ
seg000:FD2F		    db 0C6h ; Æ
seg000:FD30		    db	6Ch ; l
seg000:FD31		    db	38h ; 8
seg000:FD32		    db	38h ; 8
seg000:FD33		    db	6Ch ; l
seg000:FD34		    db 0C6h ; Æ
seg000:FD35		    db	  0
seg000:FD36		    db 0CCh ; Ì
seg000:FD37		    db 0CCh ; Ì
seg000:FD38		    db 0CCh ; Ì
seg000:FD39		    db	78h ; x
seg000:FD3A		    db	30h ; 0
seg000:FD3B		    db	30h ; 0
seg000:FD3C		    db	78h ; x
seg000:FD3D		    db	  0
seg000:FD3E		    db 0FEh ; þ
seg000:FD3F		    db 0C6h ; Æ
seg000:FD40		    db	8Ch ; 
seg000:FD41		    db	18h
seg000:FD42		    db	32h ; 2
seg000:FD43		    db	66h ; f
seg000:FD44		    db 0FEh ; þ
seg000:FD45		    db	  0
seg000:FD46		    db	78h ; x
seg000:FD47		    db	60h ; `
seg000:FD48		    db	60h ; `
seg000:FD49		    db	60h ; `
seg000:FD4A		    db	60h ; `
seg000:FD4B		    db	60h ; `
seg000:FD4C		    db	78h ; x
seg000:FD4D		    db	  0
seg000:FD4E		    db 0C0h ; À
seg000:FD4F		    db	60h ; `
seg000:FD50		    db	30h ; 0
seg000:FD51		    db	18h
seg000:FD52		    db	0Ch
seg000:FD53		    db	  6
seg000:FD54		    db	  2
seg000:FD55		    db	  0
seg000:FD56		    db	78h ; x
seg000:FD57		    db	18h
seg000:FD58		    db	18h
seg000:FD59		    db	18h
seg000:FD5A		    db	18h
seg000:FD5B		    db	18h
seg000:FD5C		    db	78h ; x
seg000:FD5D		    db	  0
seg000:FD5E		    db	10h
seg000:FD5F		    db	38h ; 8
seg000:FD60		    db	6Ch ; l
seg000:FD61		    db 0C6h ; Æ
seg000:FD62		    db	  0
seg000:FD63		    db	  0
seg000:FD64		    db	  0
seg000:FD65		    db	  0
seg000:FD66		    db	  0
seg000:FD67		    db	  0
seg000:FD68		    db	  0
seg000:FD69		    db	  0
seg000:FD6A		    db	  0
seg000:FD6B		    db	  0
seg000:FD6C		    db	  0
seg000:FD6D		    db 0FFh
seg000:FD6E		    db	30h ; 0
seg000:FD6F		    db	30h ; 0
seg000:FD70		    db	18h
seg000:FD71		    db	  0
seg000:FD72		    db	  0
seg000:FD73		    db	  0
seg000:FD74		    db	  0
seg000:FD75		    db	  0
seg000:FD76		    db	  0
seg000:FD77		    db	  0
seg000:FD78		    db	78h ; x
seg000:FD79		    db	0Ch
seg000:FD7A		    db	7Ch ; |
seg000:FD7B		    db 0CCh ; Ì
seg000:FD7C		    db	76h ; v
seg000:FD7D		    db	  0
seg000:FD7E		    db 0E0h ; à
seg000:FD7F		    db	60h ; `
seg000:FD80		    db	60h ; `
seg000:FD81		    db	7Ch ; |
seg000:FD82		    db	66h ; f
seg000:FD83		    db	66h ; f
seg000:FD84		    db 0DCh ; Ü
seg000:FD85		    db	  0
seg000:FD86		    db	  0
seg000:FD87		    db	  0
seg000:FD88		    db	78h ; x
seg000:FD89		    db 0CCh ; Ì
seg000:FD8A		    db 0C0h ; À
seg000:FD8B		    db 0CCh ; Ì
seg000:FD8C		    db	78h ; x
seg000:FD8D		    db	  0
seg000:FD8E		    db	1Ch
seg000:FD8F		    db	0Ch
seg000:FD90		    db	0Ch
seg000:FD91		    db	7Ch ; |
seg000:FD92		    db 0CCh ; Ì
seg000:FD93		    db 0CCh ; Ì
seg000:FD94		    db	76h ; v
seg000:FD95		    db	  0
seg000:FD96		    db	  0
seg000:FD97		    db	  0
seg000:FD98		    db	78h ; x
seg000:FD99		    db 0CCh ; Ì
seg000:FD9A		    db 0FCh ; ü
seg000:FD9B		    db 0C0h ; À
seg000:FD9C		    db	78h ; x
seg000:FD9D		    db	  0
seg000:FD9E		    db	38h ; 8
seg000:FD9F		    db	6Ch ; l
seg000:FDA0		    db	60h ; `
seg000:FDA1		    db 0F0h ; ð
seg000:FDA2		    db	60h ; `
seg000:FDA3		    db	60h ; `
seg000:FDA4		    db 0F0h ; ð
seg000:FDA5		    db	  0
seg000:FDA6		    db	  0
seg000:FDA7		    db	  0
seg000:FDA8		    db	76h ; v
seg000:FDA9		    db 0CCh ; Ì
seg000:FDAA		    db 0CCh ; Ì
seg000:FDAB		    db	7Ch ; |
seg000:FDAC		    db	0Ch
seg000:FDAD		    db 0F8h ; ø
seg000:FDAE		    db 0E0h ; à
seg000:FDAF		    db	60h ; `
seg000:FDB0		    db	6Ch ; l
seg000:FDB1		    db	76h ; v
seg000:FDB2		    db	66h ; f
seg000:FDB3		    db	66h ; f
seg000:FDB4		    db 0E6h ; æ
seg000:FDB5		    db	  0
seg000:FDB6		    db	30h ; 0
seg000:FDB7		    db	  0
seg000:FDB8		    db	70h ; p
seg000:FDB9		    db	30h ; 0
seg000:FDBA		    db	30h ; 0
seg000:FDBB		    db	30h ; 0
seg000:FDBC		    db	78h ; x
seg000:FDBD		    db	  0
seg000:FDBE		    db	0Ch
seg000:FDBF		    db	  0
seg000:FDC0		    db	0Ch
seg000:FDC1		    db	0Ch
seg000:FDC2		    db	0Ch
seg000:FDC3		    db 0CCh ; Ì
seg000:FDC4		    db 0CCh ; Ì
seg000:FDC5		    db	78h ; x
seg000:FDC6		    db 0E0h ; à
seg000:FDC7		    db	60h ; `
seg000:FDC8		    db	66h ; f
seg000:FDC9		    db	6Ch ; l
seg000:FDCA		    db	78h ; x
seg000:FDCB		    db	6Ch ; l
seg000:FDCC		    db 0E6h ; æ
seg000:FDCD		    db	  0
seg000:FDCE		    db	70h ; p
seg000:FDCF		    db	30h ; 0
seg000:FDD0		    db	30h ; 0
seg000:FDD1		    db	30h ; 0
seg000:FDD2		    db	30h ; 0
seg000:FDD3		    db	30h ; 0
seg000:FDD4		    db	78h ; x
seg000:FDD5		    db	  0
seg000:FDD6		    db	  0
seg000:FDD7		    db	  0
seg000:FDD8		    db 0CCh ; Ì
seg000:FDD9		    db 0FEh ; þ
seg000:FDDA		    db 0FEh ; þ
seg000:FDDB		    db 0D6h ; Ö
seg000:FDDC		    db 0C6h ; Æ
seg000:FDDD		    db	  0
seg000:FDDE		    db	  0
seg000:FDDF		    db	  0
seg000:FDE0		    db 0F8h ; ø
seg000:FDE1		    db 0CCh ; Ì
seg000:FDE2		    db 0CCh ; Ì
seg000:FDE3		    db 0CCh ; Ì
seg000:FDE4		    db 0CCh ; Ì
seg000:FDE5		    db	  0
seg000:FDE6		    db	  0
seg000:FDE7		    db	  0
seg000:FDE8		    db	78h ; x
seg000:FDE9		    db 0CCh ; Ì
seg000:FDEA		    db 0CCh ; Ì
seg000:FDEB		    db 0CCh ; Ì
seg000:FDEC		    db	78h ; x
seg000:FDED		    db	  0
seg000:FDEE		    db	  0
seg000:FDEF		    db	  0
seg000:FDF0		    db 0DCh ; Ü
seg000:FDF1		    db	66h ; f
seg000:FDF2		    db	66h ; f
seg000:FDF3		    db	7Ch ; |
seg000:FDF4		    db	60h ; `
seg000:FDF5		    db 0F0h ; ð
seg000:FDF6		    db	  0
seg000:FDF7		    db	  0
seg000:FDF8		    db	76h ; v
seg000:FDF9		    db 0CCh ; Ì
seg000:FDFA		    db 0CCh ; Ì
seg000:FDFB		    db	7Ch ; |
seg000:FDFC		    db	0Ch
seg000:FDFD		    db	1Eh
seg000:FDFE		    db	  0
seg000:FDFF		    db	  0
seg000:FE00		    db 0DCh ; Ü
seg000:FE01		    db	76h ; v
seg000:FE02		    db	66h ; f
seg000:FE03		    db	60h ; `
seg000:FE04		    db 0F0h ; ð
seg000:FE05		    db	  0
seg000:FE06		    db	  0
seg000:FE07		    db	  0
seg000:FE08		    db	7Ch ; |
seg000:FE09		    db 0C0h ; À
seg000:FE0A		    db	78h ; x
seg000:FE0B		    db	0Ch
seg000:FE0C		    db 0F8h ; ø
seg000:FE0D		    db	  0
seg000:FE0E		    db	10h
seg000:FE0F		    db	30h ; 0
seg000:FE10		    db	7Ch ; |
seg000:FE11		    db	30h ; 0
seg000:FE12		    db	30h ; 0
seg000:FE13		    db	34h ; 4
seg000:FE14		    db	18h
seg000:FE15		    db	  0
seg000:FE16		    db	  0
seg000:FE17		    db	  0
seg000:FE18		    db 0CCh ; Ì
seg000:FE19		    db 0CCh ; Ì
seg000:FE1A		    db 0CCh ; Ì
seg000:FE1B		    db 0CCh ; Ì
seg000:FE1C		    db	76h ; v
seg000:FE1D		    db	  0
seg000:FE1E		    db	  0
seg000:FE1F		    db	  0
seg000:FE20		    db 0CCh ; Ì
seg000:FE21		    db 0CCh ; Ì
seg000:FE22		    db 0CCh ; Ì
seg000:FE23		    db	78h ; x
seg000:FE24		    db	30h ; 0
seg000:FE25		    db	  0
seg000:FE26		    db	  0
seg000:FE27		    db	  0
seg000:FE28		    db 0C6h ; Æ
seg000:FE29		    db 0D6h ; Ö
seg000:FE2A		    db 0FEh ; þ
seg000:FE2B		    db 0FEh ; þ
seg000:FE2C		    db	6Ch ; l
seg000:FE2D		    db	  0
seg000:FE2E		    db	  0
seg000:FE2F		    db	  0
seg000:FE30		    db 0C6h ; Æ
seg000:FE31		    db	6Ch ; l
seg000:FE32		    db	38h ; 8
seg000:FE33		    db	6Ch ; l
seg000:FE34		    db 0C6h ; Æ
seg000:FE35		    db	  0
seg000:FE36		    db	  0
seg000:FE37		    db	  0
seg000:FE38		    db 0CCh ; Ì
seg000:FE39		    db 0CCh ; Ì
seg000:FE3A		    db 0CCh ; Ì
seg000:FE3B		    db	7Ch ; |
seg000:FE3C		    db	0Ch
seg000:FE3D		    db 0F8h ; ø
seg000:FE3E		    db	  0
seg000:FE3F		    db	  0
seg000:FE40		    db 0FCh ; ü
seg000:FE41		    db	98h ; 
seg000:FE42		    db	30h ; 0
seg000:FE43		    db	64h ; d
seg000:FE44		    db 0FCh ; ü
seg000:FE45		    db	  0
seg000:FE46		    db	1Ch
seg000:FE47		    db	30h ; 0
seg000:FE48		    db	30h ; 0
seg000:FE49		    db 0E0h ; à
seg000:FE4A		    db	30h ; 0
seg000:FE4B		    db	30h ; 0
seg000:FE4C		    db	1Ch
seg000:FE4D		    db	  0
seg000:FE4E		    db	18h
seg000:FE4F		    db	18h
seg000:FE50		    db	18h
seg000:FE51		    db	  0
seg000:FE52		    db	18h
seg000:FE53		    db	18h
seg000:FE54		    db	18h
seg000:FE55		    db	  0
seg000:FE56		    db 0E0h ; à
seg000:FE57		    db	30h ; 0
seg000:FE58		    db	30h ; 0
seg000:FE59		    db	1Ch
seg000:FE5A		    db	30h ; 0
seg000:FE5B		    db	30h ; 0
seg000:FE5C		    db 0E0h ; à
seg000:FE5D		    db	  0
seg000:FE5E		    db	76h ; v
seg000:FE5F		    db 0DCh ; Ü
seg000:FE60		    db	  0
seg000:FE61		    db	  0
seg000:FE62		    db	  0
seg000:FE63		    db	  0
seg000:FE64		    db	  0
seg000:FE65		    db	  0
seg000:FE66		    db	  0
seg000:FE67		    db	10h
seg000:FE68		    db	38h ; 8
seg000:FE69		    db	6Ch ; l
seg000:FE6A		    db 0C6h ; Æ
seg000:FE6B		    db 0C6h ; Æ
seg000:FE6C		    db 0FEh ; þ
seg000:FE6D		    db	  0
seg000:FE6E
seg000:FE6E ; =============== S	U B R O	U T I N	E =======================================
seg000:FE6E
seg000:FE6E ; Attributes: thunk
seg000:FE6E
seg000:FE6E sub_FE6E	    proc far		    ; DATA XREF: seg000:FF17o
seg000:FE6E		    jmp	    near ptr sub_6144
seg000:FE6E sub_FE6E	    endp
seg000:FE6E
seg000:FE6E ; ---------------------------------------------------------------------------
seg000:FE71 a209U228	    db '209/U228',0
seg000:FE7A a418U401	    db '418/U401',0
seg000:FE83 aRomChecksumFai db 'ROM checksum failure! +++',0
seg000:FE83					    ; DATA XREF: ColrWarm_Boot:loc_125Fo
seg000:FE9D		    db	  0
seg000:FE9E		    db	  0
seg000:FE9F		    db	  0
seg000:FEA0		    db	  0
seg000:FEA1		    db	  0
seg000:FEA2		    db	  0
seg000:FEA3		    db	  0
seg000:FEA4		    db	  0
seg000:FEA5
seg000:FEA5 ; =============== S	U B R O	U T I N	E =======================================
seg000:FEA5
seg000:FEA5
seg000:FEA5 duble_fault	    proc far		    ; DATA XREF: seg000:FEF3o
seg000:FEA5		    jmp	    near ptr duble_fault_0
seg000:FEA5 duble_fault	    endp
seg000:FEA5
seg000:FEA5 ; ---------------------------------------------------------------------------
seg000:FEA8 aCpuFailure	    db 'CPU failure! +++',0 ; DATA XREF: ColrWarm_Boot+1D2o
seg000:FEB9		    db	  0
seg000:FEBA		    db	  0
seg000:FEBB		    db	  0
seg000:FEBC		    db	  0
seg000:FEBD		    db	  0
seg000:FEBE		    db	  0
seg000:FEBF		    db	  0
seg000:FEC0		    db	  0
seg000:FEC1		    db	  0
seg000:FEC2		    db	  0
seg000:FEC3		    db	  0
seg000:FEC4		    db	  0
seg000:FEC5		    db	  0
seg000:FEC6		    db	  0
seg000:FEC7		    db	  0
seg000:FEC8		    db	  0
seg000:FEC9		    db	  0
seg000:FECA		    db	  0
seg000:FECB		    db	  0
seg000:FECC		    db	  0
seg000:FECD		    db	  0
seg000:FECE		    db	  0
seg000:FECF		    db	  0
seg000:FED0		    db	  0
seg000:FED1		    db	  0
seg000:FED2		    db	  0
seg000:FED3		    db	  0
seg000:FED4		    db	  0
seg000:FED5		    db	  0
seg000:FED6		    db	  0
seg000:FED7		    db	  0
seg000:FED8		    db	  0
seg000:FED9		    db	  0
seg000:FEDA		    db	  0
seg000:FEDB		    db	  0
seg000:FEDC		    db	  0
seg000:FEDD		    db	  0
seg000:FEDE		    db	  0
seg000:FEDF		    db	  0
seg000:FEE0		    db	  0
seg000:FEE1		    db	  0
seg000:FEE2		    db	  0
seg000:FEE3 IVT_table?	    dw offset div_by_zero   ; DATA XREF: hw_init+8o
seg000:FEE5		    dw offset int_ack?jump
seg000:FEE7		    dw offset NMI_handler
seg000:FEE9		    dw offset int_ack?jump
seg000:FEEB		    dw offset overflow
seg000:FEED		    dw offset LPT_print_0
seg000:FEEF		    dw offset int_ack?jump
seg000:FEF1		    dw offset int_ack?jump
seg000:FEF3		    dw offset duble_fault
seg000:FEF5		    dw offset sub_E987
seg000:FEF7 off_FEF7	    dw offset sub_1CAD
seg000:FEF9		    dw offset int_ack?jump
seg000:FEFB		    dw offset int_ack?jump
seg000:FEFD		    dw offset int_ack?jump
seg000:FEFF off_FEFF	    dw offset page_fault    ; DATA XREF: port_9F4BF4_In+35r
seg000:FEFF					    ; port_9F4BF4_In:loc_1B92w	...
seg000:FF01 off_FF01	    dw offset int_ack?jump  ; DATA XREF: port_9F4BF4_In+3Fr
seg000:FF01					    ; port_9F4BF4_In+42r ...
seg000:FF03 dw_table_2	    dw offset FPU_error	    ; DATA XREF: VGA_bios_init+17o
seg000:FF05		    dw offset load_DSAX_0
seg000:FF07		    dw offset load_DSAX_compa_0
seg000:FF09		    dw offset fdd_?_4
seg000:FF0B		    dw offset sub_E739
seg000:FF0D		    dw offset sub_F859
seg000:FF0F		    dw offset sub_E82E
seg000:FF11		    dw offset printing_1
seg000:FF13 off_FF13	    dw offset init_78h_table ; DATA XREF: seg000:cmos_1Cho
seg000:FF15		    dw offset sub_E6F2
seg000:FF17		    dw offset sub_FE6E
seg000:FF19		    dw offset nullsub_5
seg000:FF1B		    dw offset nullsub_5
seg000:FF1D		    dw 0F0A4h
seg000:FF1F		    dw 0EFC7h
seg000:FF21		    dw 0
seg000:FF23 dw_table_3	    dw offset sub_60E2	    ; 0	; DATA XREF: hw_init+14o
seg000:FF25		    dw offset sub_1C9D
seg000:FF27		    dw offset int_ack?jump
seg000:FF29		    dw offset sub_985B
seg000:FF2B		    dw offset int_ack?jump
seg000:FF2D		    dw offset sub_1CB9
seg000:FF2F		    dw offset Iret_complete_?
seg000:FF31		    dw offset int_ack?jump
seg000:FF33		    db	  0
seg000:FF34		    db	  0
seg000:FF35		    db	  0
seg000:FF36		    db	  0
seg000:FF37		    db	  0
seg000:FF38		    db	  0
seg000:FF39		    db	  0
seg000:FF3A		    db	  0
seg000:FF3B		    db	  0
seg000:FF3C		    db	  0
seg000:FF3D		    db	  0
seg000:FF3E		    db	  0
seg000:FF3F		    db	  0
seg000:FF40
seg000:FF40 ; =============== S	U B R O	U T I N	E =======================================
seg000:FF40
seg000:FF40 ; Attributes: thunk
seg000:FF40
seg000:FF40 sub_FF40	    proc far
seg000:FF40		    jmp	    near ptr sub_7471
seg000:FF40 sub_FF40	    endp
seg000:FF40
seg000:FF40 ; ---------------------------------------------------------------------------
seg000:FF43		    db	  0
seg000:FF44		    db	  0
seg000:FF45		    db	  0
seg000:FF46		    db	  0
seg000:FF47		    db	  0
seg000:FF48		    db	  0
seg000:FF49		    db 0CFh ; Ï
seg000:FF4A		    db	  0
seg000:FF4B		    db	  0
seg000:FF4C		    db	  0
seg000:FF4D		    db	  0
seg000:FF4E		    db	  0
seg000:FF4F		    db	  0
seg000:FF50		    db	  0
seg000:FF51		    db	  0
seg000:FF52		    db	  0
seg000:FF53
seg000:FF53 ; =============== S	U B R O	U T I N	E =======================================
seg000:FF53
seg000:FF53
seg000:FF53 nullsub_5	    proc far		    ; DATA XREF: seg000:FF19o
seg000:FF53					    ; seg000:FF1Bo
seg000:FF53		    iret
seg000:FF53 nullsub_5	    endp
seg000:FF53
seg000:FF54
seg000:FF54 ; =============== S	U B R O	U T I N	E =======================================
seg000:FF54
seg000:FF54
seg000:FF54 LPT_print_0	    proc far		    ; DATA XREF: seg000:FEEDo
seg000:FF54		    jmp	    near ptr LPT_print
seg000:FF54 LPT_print_0	    endp
seg000:FF54
seg000:FF54 ; ---------------------------------------------------------------------------
seg000:FF57		    db	  0
seg000:FF58		    db	  0
seg000:FF59		    db	  0
seg000:FF5A		    db	  0
seg000:FF5B		    db	  0
seg000:FF5C		    db	  0
seg000:FF5D		    db	  0
seg000:FF5E		    db	  0
seg000:FF5F		    db	  0
seg000:FF60		    db	  0
seg000:FF61		    db	  0
seg000:FF62		    db	  0
seg000:FF63		    db	  0
seg000:FF64		    db	  0
seg000:FF65		    db	  0
seg000:FF66		    db	  0
seg000:FF67		    db	  0
seg000:FF68		    db	  0
seg000:FF69		    db	  0
seg000:FF6A		    db	  0
seg000:FF6B		    db	  0
seg000:FF6C		    db	  0
seg000:FF6D		    db	  0
seg000:FF6E		    db	  0
seg000:FF6F		    db	  0
seg000:FF70		    db	  0
seg000:FF71		    db	  0
seg000:FF72		    db	  0
seg000:FF73		    db	  0
seg000:FF74		    db	  0
seg000:FF75		    db	  0
seg000:FF76		    db	  0
seg000:FF77		    db	  0
seg000:FF78		    db	  0
seg000:FF79		    db	  0
seg000:FF7A		    db	  0
seg000:FF7B		    db	  0
seg000:FF7C		    db	  0
seg000:FF7D		    db	  0
seg000:FF7E		    db	  0
seg000:FF7F		    db	  0
seg000:FF80		    db	  0
seg000:FF81		    db	  0
seg000:FF82		    db	  0
seg000:FF83		    db	  0
seg000:FF84		    db	  0
seg000:FF85		    db	  0
seg000:FF86		    db	  0
seg000:FF87		    db	  0
seg000:FF88		    db	  0
seg000:FF89		    db	  0
seg000:FF8A		    db	  0
seg000:FF8B		    db	  0
seg000:FF8C		    db	  0
seg000:FF8D		    db	  0
seg000:FF8E		    db	  0
seg000:FF8F		    db	  0
seg000:FF90		    db	  0
seg000:FF91		    db	  0
seg000:FF92		    db	  0
seg000:FF93		    db	  0
seg000:FF94		    db	  0
seg000:FF95		    db	  0
seg000:FF96		    db	  0
seg000:FF97		    db	  0
seg000:FF98		    db	  0
seg000:FF99		    db	  0
seg000:FF9A		    db	  0
seg000:FF9B		    db	  0
seg000:FF9C		    db	  0
seg000:FF9D		    db	  0
seg000:FF9E		    db	  0
seg000:FF9F		    db	  0
seg000:FFA0		    db	  0
seg000:FFA1		    db	  0
seg000:FFA2		    db	  0
seg000:FFA3		    db	  0
seg000:FFA4		    db	  0
seg000:FFA5		    db	  0
seg000:FFA6		    db	  0
seg000:FFA7		    db	  0
seg000:FFA8		    db	  0
seg000:FFA9		    db	  0
seg000:FFAA		    db	  0
seg000:FFAB		    db	  0
seg000:FFAC		    db	  0
seg000:FFAD		    db	  0
seg000:FFAE		    db	  0
seg000:FFAF		    db	  0
seg000:FFB0		    db	  0
seg000:FFB1		    db	  0
seg000:FFB2		    db	  0
seg000:FFB3		    db	  0
seg000:FFB4		    db	  0
seg000:FFB5		    db	  0
seg000:FFB6		    db	  0
seg000:FFB7		    db	  0
seg000:FFB8		    db	  0
seg000:FFB9		    db	  0
seg000:FFBA		    db	  0
seg000:FFBB		    db	  0
seg000:FFBC		    db	  0
seg000:FFBD		    db	  0
seg000:FFBE		    db	  0
seg000:FFBF		    db	  0
seg000:FFC0		    db	  0
seg000:FFC1		    db	  0
seg000:FFC2		    db	  0
seg000:FFC3		    db	  0
seg000:FFC4		    db	  0
seg000:FFC5		    db	  0
seg000:FFC6		    db	  0
seg000:FFC7		    db	  0
seg000:FFC8		    db	  0
seg000:FFC9		    db	  0
seg000:FFCA		    db	  0
seg000:FFCB		    db	  0
seg000:FFCC		    db	  0
seg000:FFCD		    db	  0
seg000:FFCE		    db	  0
seg000:FFCF		    db	  0
seg000:FFD0		    db	  0
seg000:FFD1		    db	  0
seg000:FFD2		    db	  0
seg000:FFD3		    db	  0
seg000:FFD4		    db	  0
seg000:FFD5		    db	  0
seg000:FFD6		    db	  0
seg000:FFD7		    db	  0
seg000:FFD8		    db	  0
seg000:FFD9		    db	  0
seg000:FFDA		    db	  0
seg000:FFDB unk_FFDB	    db	  0
seg000:FFDC		    db	  0
seg000:FFDD		    db	  0
seg000:FFDE		    db	  0
seg000:FFDF		    db	  0
seg000:FFE0		    db	  0
seg000:FFE1		    db	  0
seg000:FFE2		    db	  0
seg000:FFE3 aZbios	    db 'ZBIOS'
seg000:FFE8		    dw offset debugger?
seg000:FFEA ; ---------------------------------------------------------------------------
seg000:FFEA		    retf
seg000:FFEA ; ---------------------------------------------------------------------------
seg000:FFEB		    db	  0
seg000:FFEC		    db	  0
seg000:FFED ; ---------------------------------------------------------------------------
seg000:FFED		    jmp	    Monitor
seg000:FFF0 ; ---------------------------------------------------------------------------
seg000:FFF0
seg000:FFF0 reset_vector_0:			    ; DATA XREF: sub_0+DE73o
seg000:FFF0					    ; sub_0+DE7Co
seg000:FFF0		    jmp	    reset_vector
seg000:FFF0 ; ---------------------------------------------------------------------------
seg000:FFF3		    db	  0
seg000:FFF4		    db	  0
seg000:FFF5		    db	  0
seg000:FFF6		    db	  0
seg000:FFF7		    db	  0
seg000:FFF8		    db	  0
seg000:FFF9		    db	  0
seg000:FFFA		    db	  0
seg000:FFFB		    dw 8D00h
seg000:FFFD		    dw 0FC37h
seg000:FFFF byte_FFFF	    db 0		    ; DATA XREF: port_9F4BF4_In:loc_1BB1r
seg000:FFFF					    ; seg000:off_3BF1o	...
seg000:FFFF seg000	    ends
seg000:FFFF
seg000:FFFF
seg000:FFFF		    end
